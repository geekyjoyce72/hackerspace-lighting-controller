
HackerspaceSG Lighting Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000253a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000662c  08025570  08025570  00035570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bb9c  0802bb9c  000400c0  2**0
                  CONTENTS
  4 .ARM          00000008  0802bb9c  0802bb9c  0003bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bba4  0802bba4  000400c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bba4  0802bba4  0003bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bba8  0802bba8  0003bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0802bbac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000146a0  200000c0  0802bc6c  000400c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014760  0802bc6c  00044760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000750d5  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c94f  00000000  00000000  000b51c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00004310  00000000  00000000  000c1b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003f38  00000000  00000000  000c5e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00047aa7  00000000  00000000  000c9d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00055ac6  00000000  00000000  00111807  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014613c  00000000  00000000  001672cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002ad409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011ea0  00000000  00000000  002ad484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025558 	.word	0x08025558

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	08025558 	.word	0x08025558

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <hw_init>:
***********************************************************************************************************************/

#include "hw_init.h"

void hw_init()
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
	// Initialize System Clock
	SystemClock_Config();
 80005e6:	f000 f831 	bl	800064c <SystemClock_Config>

	// Initialize Hardware Peripherals
	GPIO_Init();
 80005ea:	f000 ffcb 	bl	8001584 <GPIO_Init>
	ADC3_Init();
 80005ee:	f000 f8ed 	bl	80007cc <ADC3_Init>
	CRC_Init();
 80005f2:	f000 f93d 	bl	8000870 <CRC_Init>
	DCMI_Init();
 80005f6:	f000 f95d 	bl	80008b4 <DCMI_Init>
	DMA_Init();
 80005fa:	f000 f98f 	bl	800091c <DMA_Init>
	DMA2D_Init();
 80005fe:	f000 f9ab 	bl	8000958 <DMA2D_Init>
	FMC_Init();
 8000602:	f000 ff6f 	bl	80014e4 <FMC_Init>
	I2C1_Init();
 8000606:	f000 f9d9 	bl	80009bc <I2C1_Init>
	I2C3_Init();
 800060a:	f000 fa17 	bl	8000a3c <I2C3_Init>
	//LTDC_Init();
	QUADSPI_Init();
 800060e:	f000 fa55 	bl	8000abc <QUADSPI_Init>
	RTC_Init();
 8000612:	f000 fa7f 	bl	8000b14 <RTC_Init>
	SAI2_Init();
 8000616:	f000 fb23 	bl	8000c60 <SAI2_Init>
	SDMMC1_SD_Init();
 800061a:	f000 fbc9 	bl	8000db0 <SDMMC1_SD_Init>
	SPDIFRX_Init();
 800061e:	f000 fbe7 	bl	8000df0 <SPDIFRX_Init>
	SPI2_Init();
 8000622:	f000 fc15 	bl	8000e50 <SPI2_Init>
	TIM1_Init();
 8000626:	f000 fc51 	bl	8000ecc <TIM1_Init>
	TIM2_Init();
 800062a:	f000 fcfb 	bl	8001024 <TIM2_Init>
	TIM3_Init();
 800062e:	f000 fd6f 	bl	8001110 <TIM3_Init>
	TIM5_Init();
 8000632:	f000 fde5 	bl	8001200 <TIM5_Init>
	TIM8_Init();
 8000636:	f000 fe5b 	bl	80012f0 <TIM8_Init>
	TIM12_Init();
 800063a:	f000 fead 	bl	8001398 <TIM12_Init>
	USART1_UART_Init();
 800063e:	f000 fef1 	bl	8001424 <USART1_UART_Init>
	USART6_UART_Init();
 8000642:	f000 ff1f 	bl	8001484 <USART6_UART_Init>
	//IWDG_Init();
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0b4      	sub	sp, #208	; 0xd0
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f023 fff0 	bl	8024640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2284      	movs	r2, #132	; 0x84
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f023 ffe1 	bl	8024640 <memset>

  // Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800067e:	f008 fb97 	bl	8008db0 <HAL_PWR_EnableBkUpAccess>

  // Configure the main internal regulator output voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <SystemClock_Config+0x174>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a4e      	ldr	r2, [pc, #312]	; (80007c0 <SystemClock_Config+0x174>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	4b4c      	ldr	r3, [pc, #304]	; (80007c0 <SystemClock_Config+0x174>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <SystemClock_Config+0x178>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a49      	ldr	r2, [pc, #292]	; (80007c4 <SystemClock_Config+0x178>)
 80006a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <SystemClock_Config+0x178>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  // Initializes the RCC Oscillators according to the specified parameters
  // in the RCC_OscInitTypeDef structure.
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006b2:	2309      	movs	r3, #9
 80006b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d4:	2319      	movs	r3, #25
 80006d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e8:	2309      	movs	r3, #9
 80006ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 fc7e 	bl	8008ff4 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006fe:	f001 f997 	bl	8001a30 <Error_Handler>
  }
  // Activate the Over-Drive mode
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f008 fb65 	bl	8008dd0 <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f001 f990 	bl	8001a30 <Error_Handler>
  }
  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000732:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000736:	2106      	movs	r1, #6
 8000738:	4618      	mov	r0, r3
 800073a:	f008 feff 	bl	800953c <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000744:	f001 f974 	bl	8001a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0x17c>)
 800074a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800075c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000760:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000762:	2305      	movs	r3, #5
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800076a:	2303      	movs	r3, #3
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000786:	2300      	movs	r3, #0
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800078a:	2300      	movs	r3, #0
 800078c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800078e:	2300      	movs	r3, #0
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000792:	2300      	movs	r3, #0
 8000794:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f009 f8cb 	bl	8009944 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80007b4:	f001 f93c 	bl	8001a30 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	37d0      	adds	r7, #208	; 0xd0
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	01b14868 	.word	0x01b14868

080007cc <ADC3_Init>:

// ADC3 Peripheral Initialization
void ADC3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

  // Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  hadc3.Instance = ADC3;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <ADC3_Init+0x98>)
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <ADC3_Init+0x9c>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <ADC3_Init+0x98>)
 80007e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <ADC3_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <ADC3_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <ADC3_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <ADC3_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <ADC3_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <ADC3_Init+0x98>)
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <ADC3_Init+0xa0>)
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <ADC3_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <ADC3_Init+0x98>)
 800081a:	2201      	movs	r2, #1
 800081c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <ADC3_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <ADC3_Init+0x98>)
 8000828:	2201      	movs	r2, #1
 800082a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <ADC3_Init+0x98>)
 800082e:	f003 f98b 	bl	8003b48 <HAL_ADC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <ADC3_Init+0x70>
  {
    Error_Handler();
 8000838:	f001 f8fa 	bl	8001a30 <Error_Handler>
  }
  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  sConfig.Channel = ADC_CHANNEL_4;
 800083c:	2304      	movs	r3, #4
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000840:	2301      	movs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <ADC3_Init+0x98>)
 800084e:	f003 f9bf 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <ADC3_Init+0x90>
  {
    Error_Handler();
 8000858:	f001 f8ea 	bl	8001a30 <Error_Handler>
  }

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20009618 	.word	0x20009618
 8000868:	40012200 	.word	0x40012200
 800086c:	0f000001 	.word	0x0f000001

08000870 <CRC_Init>:

// CRC Peripheral Initialization
 void CRC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <CRC_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <CRC_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <CRC_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <CRC_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <CRC_Init+0x3c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <CRC_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <CRC_Init+0x3c>)
 8000894:	2201      	movs	r2, #1
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <CRC_Init+0x3c>)
 800089a:	f003 fcbf 	bl	800421c <HAL_CRC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <CRC_Init+0x38>
  {
    Error_Handler();
 80008a4:	f001 f8c4 	bl	8001a30 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20009430 	.word	0x20009430
 80008b0:	40023000 	.word	0x40023000

080008b4 <DCMI_Init>:

// DCMI Peripheral Initialization
 void DCMI_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  hdcmi.Instance = DCMI;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <DCMI_Init+0x60>)
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <DCMI_Init+0x64>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <DCMI_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <DCMI_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <DCMI_Init+0x60>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <DCMI_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <DCMI_Init+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <DCMI_Init+0x60>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <DCMI_Init+0x60>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <DCMI_Init+0x60>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <DCMI_Init+0x60>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <DCMI_Init+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <DCMI_Init+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <DCMI_Init+0x60>)
 8000902:	f003 fd75 	bl	80043f0 <HAL_DCMI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <DCMI_Init+0x5c>
  {
    Error_Handler();
 800090c:	f001 f890 	bl	8001a30 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20009660 	.word	0x20009660
 8000918:	50050000 	.word	0x50050000

0800091c <DMA_Init>:

// DMA Initialization
void DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
   // DMA controller clock enable
   __HAL_RCC_DMA2_CLK_ENABLE();
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <DMA_Init+0x38>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <DMA_Init+0x38>)
 8000928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <DMA_Init+0x38>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

   // DMA2_Stream1_IRQn interrupt configuration
   HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2039      	movs	r0, #57	; 0x39
 8000940:	f003 fc42 	bl	80041c8 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000944:	2039      	movs	r0, #57	; 0x39
 8000946:	f003 fc5b 	bl	8004200 <HAL_NVIC_EnableIRQ>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <DMA2D_Init>:

// DMA2D Peripheral Initialization
void DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  hdma2d.Instance = DMA2D;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <DMA2D_Init+0x5c>)
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <DMA2D_Init+0x60>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <DMA2D_Init+0x5c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <DMA2D_Init+0x5c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <DMA2D_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <DMA2D_Init+0x5c>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <DMA2D_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <DMA2D_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <DMA2D_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <DMA2D_Init+0x5c>)
 800098e:	f004 f911 	bl	8004bb4 <HAL_DMA2D_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <DMA2D_Init+0x44>
  {
    Error_Handler();
 8000998:	f001 f84a 	bl	8001a30 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800099c:	2101      	movs	r1, #1
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <DMA2D_Init+0x5c>)
 80009a0:	f004 fb76 	bl	8005090 <HAL_DMA2D_ConfigLayer>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <DMA2D_Init+0x56>
  {
    Error_Handler();
 80009aa:	f001 f841 	bl	8001a30 <Error_Handler>
  }

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20009824 	.word	0x20009824
 80009b8:	4002b000 	.word	0x4002b000

080009bc <I2C1_Init>:

// I2C1 Peripheral Initialization
void I2C1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <I2C1_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <I2C1_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <I2C1_Init+0x74>)
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <I2C1_Init+0x7c>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <I2C1_Init+0x74>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <I2C1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <I2C1_Init+0x74>)
 80009f8:	f007 fd2a 	bl	8008450 <HAL_I2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f001 f815 	bl	8001a30 <Error_Handler>
  }
  // Configure Analog filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <I2C1_Init+0x74>)
 8000a0a:	f007 fdb1 	bl	8008570 <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f001 f80c 	bl	8001a30 <Error_Handler>
  }
  // Configure Digital filter
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <I2C1_Init+0x74>)
 8000a1c:	f007 fdf3 	bl	8008606 <HAL_I2CEx_ConfigDigitalFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f001 f803 	bl	8001a30 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200093d4 	.word	0x200093d4
 8000a34:	40005400 	.word	0x40005400
 8000a38:	00c0eaff 	.word	0x00c0eaff

08000a3c <I2C3_Init>:

// I2C3 Peripheral Initialization
void I2C3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <I2C3_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <I2C3_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <I2C3_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <I2C3_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <I2C3_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <I2C3_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <I2C3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <I2C3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <I2C3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <I2C3_Init+0x74>)
 8000a78:	f007 fcea 	bl	8008450 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 ffd5 	bl	8001a30 <Error_Handler>
  }
  // Configure Analogue filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <I2C3_Init+0x74>)
 8000a8a:	f007 fd71 	bl	8008570 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 ffcc 	bl	8001a30 <Error_Handler>
  }
  // Configure Digital filter
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <I2C3_Init+0x74>)
 8000a9c:	f007 fdb3 	bl	8008606 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <I2C3_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 ffc3 	bl	8001a30 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20009208 	.word	0x20009208
 8000ab4:	40005c00 	.word	0x40005c00
 8000ab8:	00c0eaff 	.word	0x00c0eaff

08000abc <QUADSPI_Init>:
  }
}

// QuadSPI Peripheral Initialization
void QUADSPI_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  hqspi.Instance = QUADSPI;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <QUADSPI_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ada:	2218      	movs	r2, #24
 8000adc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ae0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000ae4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <QUADSPI_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <QUADSPI_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <QUADSPI_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <QUADSPI_Init+0x50>)
 8000afa:	f008 f9b9 	bl	8008e70 <HAL_QSPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 ff94 	bl	8001a30 <Error_Handler>
  }

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20009930 	.word	0x20009930
 8000b10:	a0001000 	.word	0xa0001000

08000b14 <RTC_Init>:

// RTC Peripheral Initialization
void RTC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b092      	sub	sp, #72	; 0x48
 8000b18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	222c      	movs	r2, #44	; 0x2c
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f023 fd82 	bl	8024640 <memset>

  hrtc.Instance = RTC;
 8000b3c:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <RTC_Init+0x144>)
 8000b3e:	4a47      	ldr	r2, [pc, #284]	; (8000c5c <RTC_Init+0x148>)
 8000b40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b42:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <RTC_Init+0x144>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b48:	4b43      	ldr	r3, [pc, #268]	; (8000c58 <RTC_Init+0x144>)
 8000b4a:	227f      	movs	r2, #127	; 0x7f
 8000b4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b4e:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <RTC_Init+0x144>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b54:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <RTC_Init+0x144>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b5a:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <RTC_Init+0x144>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b60:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <RTC_Init+0x144>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b66:	483c      	ldr	r0, [pc, #240]	; (8000c58 <RTC_Init+0x144>)
 8000b68:	f009 fc10 	bl	800a38c <HAL_RTC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <RTC_Init+0x62>
  {
    Error_Handler();
 8000b72:	f000 ff5d 	bl	8001a30 <Error_Handler>
  }

  // Initialize RTC and set the Time and Date
  sTime.Hours = 0x0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b94:	2201      	movs	r2, #1
 8000b96:	4619      	mov	r1, r3
 8000b98:	482f      	ldr	r0, [pc, #188]	; (8000c58 <RTC_Init+0x144>)
 8000b9a:	f009 fc89 	bl	800a4b0 <HAL_RTC_SetTime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <RTC_Init+0x94>
  {
    Error_Handler();
 8000ba4:	f000 ff44 	bl	8001a30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4823      	ldr	r0, [pc, #140]	; (8000c58 <RTC_Init+0x144>)
 8000bca:	f009 fd2f 	bl	800a62c <HAL_RTC_SetDate>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <RTC_Init+0xc4>
  {
    Error_Handler();
 8000bd4:	f000 ff2c 	bl	8001a30 <Error_Handler>
  }

  // Enable Alarm A
  sAlarm.AlarmTime.Hours = 0x0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <RTC_Init+0x144>)
 8000c10:	f009 fdb4 	bl	800a77c <HAL_RTC_SetAlarm>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <RTC_Init+0x10a>
  {
    Error_Handler();
 8000c1a:	f000 ff09 	bl	8001a30 <Error_Handler>
  }

  // Enable Alarm B
  sAlarm.Alarm = RTC_ALARM_B;
 8000c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <RTC_Init+0x144>)
 8000c2c:	f009 fda6 	bl	800a77c <HAL_RTC_SetAlarm>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <RTC_Init+0x126>
  {
    Error_Handler();
 8000c36:	f000 fefb 	bl	8001a30 <Error_Handler>
  }

  // Enable Time Stamp
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <RTC_Init+0x144>)
 8000c40:	f009 ff26 	bl	800aa90 <HAL_RTCEx_SetTimeStamp>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <RTC_Init+0x13a>
  {
    Error_Handler();
 8000c4a:	f000 fef1 	bl	8001a30 <Error_Handler>
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3748      	adds	r7, #72	; 0x48
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20009734 	.word	0x20009734
 8000c5c:	40002800 	.word	0x40002800

08000c60 <SAI2_Init>:

// SAI2 Peripheral Initialization
void SAI2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <SAI2_Init+0x13c>)
 8000c66:	4a4e      	ldr	r2, [pc, #312]	; (8000da0 <SAI2_Init+0x140>)
 8000c68:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <SAI2_Init+0x13c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <SAI2_Init+0x13c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000c76:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <SAI2_Init+0x13c>)
 8000c78:	2240      	movs	r2, #64	; 0x40
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <SAI2_Init+0x13c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <SAI2_Init+0x13c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <SAI2_Init+0x13c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <SAI2_Init+0x13c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <SAI2_Init+0x13c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <SAI2_Init+0x13c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <SAI2_Init+0x13c>)
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <SAI2_Init+0x144>)
 8000ca4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <SAI2_Init+0x13c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cac:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <SAI2_Init+0x13c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <SAI2_Init+0x13c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <SAI2_Init+0x13c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <SAI2_Init+0x13c>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <SAI2_Init+0x13c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <SAI2_Init+0x13c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <SAI2_Init+0x13c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <SAI2_Init+0x13c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <SAI2_Init+0x13c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <SAI2_Init+0x13c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <SAI2_Init+0x13c>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <SAI2_Init+0x13c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000cf4:	4829      	ldr	r0, [pc, #164]	; (8000d9c <SAI2_Init+0x13c>)
 8000cf6:	f009 ff21 	bl	800ab3c <HAL_SAI_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d00:	f000 fe96 	bl	8001a30 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <SAI2_Init+0x148>)
 8000d06:	4a29      	ldr	r2, [pc, #164]	; (8000dac <SAI2_Init+0x14c>)
 8000d08:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <SAI2_Init+0x148>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SAI2_Init+0x148>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <SAI2_Init+0x148>)
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <SAI2_Init+0x148>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <SAI2_Init+0x148>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <SAI2_Init+0x148>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <SAI2_Init+0x148>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <SAI2_Init+0x148>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <SAI2_Init+0x148>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <SAI2_Init+0x148>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <SAI2_Init+0x148>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <SAI2_Init+0x148>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <SAI2_Init+0x148>)
 8000d54:	2208      	movs	r2, #8
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <SAI2_Init+0x148>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <SAI2_Init+0x148>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <SAI2_Init+0x148>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <SAI2_Init+0x148>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <SAI2_Init+0x148>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <SAI2_Init+0x148>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <SAI2_Init+0x148>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <SAI2_Init+0x148>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <SAI2_Init+0x148>)
 8000d8a:	f009 fed7 	bl	800ab3c <HAL_SAI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SAI2_Init+0x138>
  {
    Error_Handler();
 8000d94:	f000 fe4c 	bl	8001a30 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20009350 	.word	0x20009350
 8000da0:	40015c04 	.word	0x40015c04
 8000da4:	0002ee00 	.word	0x0002ee00
 8000da8:	20009124 	.word	0x20009124
 8000dac:	40015c24 	.word	0x40015c24

08000db0 <SDMMC1_SD_Init>:

// SDMMC Peripheral Initialization
void SDMMC1_SD_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  hsd1.Instance = SDMMC1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000db6:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <SDMMC1_SD_Init+0x3c>)
 8000db8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <SDMMC1_SD_Init+0x38>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	20009454 	.word	0x20009454
 8000dec:	40012c00 	.word	0x40012c00

08000df0 <SPDIFRX_Init>:

// SPDIF Peripheral Initialization
void SPDIFRX_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  hspdif.Instance = SPDIFRX;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000df6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000dfa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <SPDIFRX_Init+0x5c>)
 8000e3a:	f00a f8b1 	bl	800afa0 <HAL_SPDIFRX_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 fdf4 	bl	8001a30 <Error_Handler>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20009304 	.word	0x20009304

08000e50 <SPI2_Init>:

// SPI2 Peripheral Initialization
void SPI2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <SPI2_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <SPI2_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <SPI2_Init+0x74>)
 8000e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <SPI2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <SPI2_Init+0x74>)
 8000e6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <SPI2_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <SPI2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <SPI2_Init+0x74>)
 8000e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <SPI2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <SPI2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <SPI2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <SPI2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <SPI2_Init+0x74>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <SPI2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SPI2_Init+0x74>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <SPI2_Init+0x74>)
 8000eb0:	f00a f8d2 	bl	800b058 <HAL_SPI_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SPI2_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 fdb9 	bl	8001a30 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20009254 	.word	0x20009254
 8000ec8:	40003800 	.word	0x40003800

08000ecc <TIM1_Init>:

// Timer 1 Peripheral Initialization
void TIM1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09a      	sub	sp, #104	; 0x68
 8000ed0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	222c      	movs	r2, #44	; 0x2c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f023 fb9a 	bl	8024640 <memset>

  htim1.Instance = TIM1;
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <TIM1_Init+0x150>)
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <TIM1_Init+0x154>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <TIM1_Init+0x150>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <TIM1_Init+0x150>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <TIM1_Init+0x150>)
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <TIM1_Init+0x150>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <TIM1_Init+0x150>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b3a      	ldr	r3, [pc, #232]	; (800101c <TIM1_Init+0x150>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f38:	4838      	ldr	r0, [pc, #224]	; (800101c <TIM1_Init+0x150>)
 8000f3a:	f00a f938 	bl	800b1ae <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 fd74 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f52:	4619      	mov	r1, r3
 8000f54:	4831      	ldr	r0, [pc, #196]	; (800101c <TIM1_Init+0x150>)
 8000f56:	f00a fd5b 	bl	800ba10 <HAL_TIM_ConfigClockSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <TIM1_Init+0x98>
  {
    Error_Handler();
 8000f60:	f000 fd66 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f64:	482d      	ldr	r0, [pc, #180]	; (800101c <TIM1_Init+0x150>)
 8000f66:	f00a f9f1 	bl	800b34c <HAL_TIM_PWM_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f70:	f000 fd5e 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4825      	ldr	r0, [pc, #148]	; (800101c <TIM1_Init+0x150>)
 8000f88:	f00b f9d8 	bl	800c33c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <TIM1_Init+0xca>
  {
    Error_Handler();
 8000f92:	f000 fd4d 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <TIM1_Init+0x150>)
 8000fbc:	f00a fc18 	bl	800b7f0 <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fc6:	f000 fd33 	bl	8001a30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <TIM1_Init+0x150>)
 8001000:	f00b fa2a 	bl	800c458 <HAL_TIMEx_ConfigBreakDeadTime>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <TIM1_Init+0x142>
  {
    Error_Handler();
 800100a:	f000 fd11 	bl	8001a30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <TIM1_Init+0x150>)
 8001010:	f001 fa34 	bl	800247c <HAL_TIM_MspPostInit>

}
 8001014:	bf00      	nop
 8001016:	3768      	adds	r7, #104	; 0x68
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20009754 	.word	0x20009754
 8001020:	40010000 	.word	0x40010000

08001024 <TIM2_Init>:

// Timer 2 Peripheral Initialization
void TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <TIM2_Init+0xe8>)
 8001058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <TIM2_Init+0xe8>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <TIM2_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <TIM2_Init+0xe8>)
 800106c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001070:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <TIM2_Init+0xe8>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <TIM2_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800107e:	4823      	ldr	r0, [pc, #140]	; (800110c <TIM2_Init+0xe8>)
 8001080:	f00a f895 	bl	800b1ae <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <TIM2_Init+0x6a>
  {
    Error_Handler();
 800108a:	f000 fcd1 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001098:	4619      	mov	r1, r3
 800109a:	481c      	ldr	r0, [pc, #112]	; (800110c <TIM2_Init+0xe8>)
 800109c:	f00a fcb8 	bl	800ba10 <HAL_TIM_ConfigClockSource>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <TIM2_Init+0x86>
  {
    Error_Handler();
 80010a6:	f000 fcc3 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010aa:	4818      	ldr	r0, [pc, #96]	; (800110c <TIM2_Init+0xe8>)
 80010ac:	f00a f94e 	bl	800b34c <HAL_TIM_PWM_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <TIM2_Init+0x96>
  {
    Error_Handler();
 80010b6:	f000 fcbb 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <TIM2_Init+0xe8>)
 80010ca:	f00b f937 	bl	800c33c <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <TIM2_Init+0xb4>
  {
    Error_Handler();
 80010d4:	f000 fcac 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d8:	2360      	movs	r3, #96	; 0x60
 80010da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <TIM2_Init+0xe8>)
 80010f0:	f00a fb7e 	bl	800b7f0 <HAL_TIM_PWM_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <TIM2_Init+0xda>
  {
    Error_Handler();
 80010fa:	f000 fc99 	bl	8001a30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <TIM2_Init+0xe8>)
 8001100:	f001 f9bc 	bl	800247c <HAL_TIM_MspPostInit>
}
 8001104:	bf00      	nop
 8001106:	3738      	adds	r7, #56	; 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20009864 	.word	0x20009864

08001110 <TIM3_Init>:

// Timer 3 Peripheral Initialization
void TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <TIM3_Init+0xe8>)
 8001144:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <TIM3_Init+0xec>)
 8001146:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <TIM3_Init+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <TIM3_Init+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <TIM3_Init+0xe8>)
 8001156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <TIM3_Init+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <TIM3_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001168:	4823      	ldr	r0, [pc, #140]	; (80011f8 <TIM3_Init+0xe8>)
 800116a:	f00a f820 	bl	800b1ae <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <TIM3_Init+0x68>
  {
    Error_Handler();
 8001174:	f000 fc5c 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	4619      	mov	r1, r3
 8001184:	481c      	ldr	r0, [pc, #112]	; (80011f8 <TIM3_Init+0xe8>)
 8001186:	f00a fc43 	bl	800ba10 <HAL_TIM_ConfigClockSource>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <TIM3_Init+0x84>
  {
    Error_Handler();
 8001190:	f000 fc4e 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <TIM3_Init+0xe8>)
 8001196:	f00a f8d9 	bl	800b34c <HAL_TIM_PWM_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <TIM3_Init+0x94>
  {
    Error_Handler();
 80011a0:	f000 fc46 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <TIM3_Init+0xe8>)
 80011b4:	f00b f8c2 	bl	800c33c <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <TIM3_Init+0xb2>
  {
    Error_Handler();
 80011be:	f000 fc37 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c2:	2360      	movs	r3, #96	; 0x60
 80011c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <TIM3_Init+0xe8>)
 80011da:	f00a fb09 	bl	800b7f0 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <TIM3_Init+0xd8>
  {
    Error_Handler();
 80011e4:	f000 fc24 	bl	8001a30 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <TIM3_Init+0xe8>)
 80011ea:	f001 f947 	bl	800247c <HAL_TIM_MspPostInit>

}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	; 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20009524 	.word	0x20009524
 80011fc:	40000400 	.word	0x40000400

08001200 <TIM5_Init>:

// Timer 5 Peripheral Initialization
void TIM5_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <TIM5_Init+0xe8>)
 8001234:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <TIM5_Init+0xec>)
 8001236:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <TIM5_Init+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <TIM5_Init+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <TIM5_Init+0xe8>)
 8001246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800124a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <TIM5_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <TIM5_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001258:	4823      	ldr	r0, [pc, #140]	; (80012e8 <TIM5_Init+0xe8>)
 800125a:	f009 ffa8 	bl	800b1ae <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <TIM5_Init+0x68>
  {
    Error_Handler();
 8001264:	f000 fbe4 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001272:	4619      	mov	r1, r3
 8001274:	481c      	ldr	r0, [pc, #112]	; (80012e8 <TIM5_Init+0xe8>)
 8001276:	f00a fbcb 	bl	800ba10 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <TIM5_Init+0x84>
  {
    Error_Handler();
 8001280:	f000 fbd6 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001284:	4818      	ldr	r0, [pc, #96]	; (80012e8 <TIM5_Init+0xe8>)
 8001286:	f00a f861 	bl	800b34c <HAL_TIM_PWM_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <TIM5_Init+0x94>
  {
    Error_Handler();
 8001290:	f000 fbce 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <TIM5_Init+0xe8>)
 80012a4:	f00b f84a 	bl	800c33c <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <TIM5_Init+0xb2>
  {
    Error_Handler();
 80012ae:	f000 fbbf 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	220c      	movs	r2, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <TIM5_Init+0xe8>)
 80012ca:	f00a fa91 	bl	800b7f0 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <TIM5_Init+0xd8>
  {
    Error_Handler();
 80012d4:	f000 fbac 	bl	8001a30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <TIM5_Init+0xe8>)
 80012da:	f001 f8cf 	bl	800247c <HAL_TIM_MspPostInit>
}
 80012de:	bf00      	nop
 80012e0:	3738      	adds	r7, #56	; 0x38
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200094d8 	.word	0x200094d8
 80012ec:	40000c00 	.word	0x40000c00

080012f0 <TIM8_Init>:

// Timer 8 Peripheral Initialization
void TIM8_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <TIM8_Init+0xa0>)
 8001310:	4a20      	ldr	r2, [pc, #128]	; (8001394 <TIM8_Init+0xa4>)
 8001312:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <TIM8_Init+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <TIM8_Init+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <TIM8_Init+0xa0>)
 8001322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001326:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <TIM8_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <TIM8_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <TIM8_Init+0xa0>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800133a:	4815      	ldr	r0, [pc, #84]	; (8001390 <TIM8_Init+0xa0>)
 800133c:	f009 ff37 	bl	800b1ae <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <TIM8_Init+0x5a>
  {
    Error_Handler();
 8001346:	f000 fb73 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <TIM8_Init+0xa0>)
 8001358:	f00a fb5a 	bl	800ba10 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <TIM8_Init+0x76>
  {
    Error_Handler();
 8001362:	f000 fb65 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <TIM8_Init+0xa0>)
 8001378:	f00a ffe0 	bl	800c33c <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <TIM8_Init+0x96>
  {
    Error_Handler();
 8001382:	f000 fb55 	bl	8001a30 <Error_Handler>
  }
}
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200092b8 	.word	0x200092b8
 8001394:	40010400 	.word	0x40010400

08001398 <TIM12_Init>:

// Timer 12 Peripheral Initialization
void TIM12_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <TIM12_Init+0x84>)
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <TIM12_Init+0x88>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <TIM12_Init+0x84>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <TIM12_Init+0x84>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <TIM12_Init+0x84>)
 80013c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <TIM12_Init+0x84>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <TIM12_Init+0x84>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <TIM12_Init+0x84>)
 80013d8:	f009 ffb8 	bl	800b34c <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <TIM12_Init+0x4e>
  {
    Error_Handler();
 80013e2:	f000 fb25 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e6:	2360      	movs	r3, #96	; 0x60
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <TIM12_Init+0x84>)
 80013fe:	f00a f9f7 	bl	800b7f0 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <TIM12_Init+0x74>
  {
    Error_Handler();
 8001408:	f000 fb12 	bl	8001a30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <TIM12_Init+0x84>)
 800140e:	f001 f835 	bl	800247c <HAL_TIM_MspPostInit>

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200098b0 	.word	0x200098b0
 8001420:	40001800 	.word	0x40001800

08001424 <USART1_UART_Init>:

// USART1 Peripheral Initialization
void USART1_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <USART1_UART_Init+0x58>)
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <USART1_UART_Init+0x5c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <USART1_UART_Init+0x58>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <USART1_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <USART1_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <USART1_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <USART1_UART_Init+0x58>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <USART1_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <USART1_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <USART1_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <USART1_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <USART1_UART_Init+0x58>)
 8001468:	f00b f892 	bl	800c590 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 fadd 	bl	8001a30 <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200096b0 	.word	0x200096b0
 8001480:	40011000 	.word	0x40011000

08001484 <USART6_UART_Init>:

// USART6 Peripheral Initialization
void USART6_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  huart6.Instance = USART6;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <USART6_UART_Init+0x58>)
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <USART6_UART_Init+0x5c>)
 800148c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <USART6_UART_Init+0x58>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <USART6_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <USART6_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <USART6_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <USART6_UART_Init+0x58>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <USART6_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <USART6_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <USART6_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <USART6_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <USART6_UART_Init+0x58>)
 80014c8:	f00b f862 	bl	800c590 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <USART6_UART_Init+0x52>
  {
    Error_Handler();
 80014d2:	f000 faad 	bl	8001a30 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200097a0 	.word	0x200097a0
 80014e0:	40011400 	.word	0x40011400

080014e4 <FMC_Init>:

// Initialize Flexible Memory Controller (FMC)
void FMC_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  // SDRAM1 memory initialization sequence
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <FMC_Init+0x98>)
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <FMC_Init+0x9c>)
 8001500:	601a      	str	r2, [r3, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <FMC_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <FMC_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <FMC_Init+0x98>)
 8001510:	2204      	movs	r2, #4
 8001512:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <FMC_Init+0x98>)
 8001516:	2210      	movs	r2, #16
 8001518:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <FMC_Init+0x98>)
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <FMC_Init+0x98>)
 8001522:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001526:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <FMC_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <FMC_Init+0x98>)
 8001530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001534:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <FMC_Init+0x98>)
 8001538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <FMC_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28

  // SDRAM Timings
  SdramTiming.LoadToActiveDelay = 2;
 8001544:	2302      	movs	r3, #2
 8001546:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001548:	2307      	movs	r3, #7
 800154a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001550:	2307      	movs	r3, #7
 8001552:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001554:	2303      	movs	r3, #3
 8001556:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800155c:	2302      	movs	r3, #2
 800155e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <FMC_Init+0x98>)
 8001566:	f009 fc9b 	bl	800aea0 <HAL_SDRAM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <FMC_Init+0x90>
  {
    Error_Handler( );
 8001570:	f000 fa5e 	bl	8001a30 <Error_Handler>
  }
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200098fc 	.word	0x200098fc
 8001580:	a0000140 	.word	0xa0000140

08001584 <GPIO_Init>:

// GPIO Initialization
void GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	4baf      	ldr	r3, [pc, #700]	; (8001858 <GPIO_Init+0x2d4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4aae      	ldr	r2, [pc, #696]	; (8001858 <GPIO_Init+0x2d4>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4bac      	ldr	r3, [pc, #688]	; (8001858 <GPIO_Init+0x2d4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015b2:	4ba9      	ldr	r3, [pc, #676]	; (8001858 <GPIO_Init+0x2d4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4aa8      	ldr	r2, [pc, #672]	; (8001858 <GPIO_Init+0x2d4>)
 80015b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4ba6      	ldr	r3, [pc, #664]	; (8001858 <GPIO_Init+0x2d4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4ba3      	ldr	r3, [pc, #652]	; (8001858 <GPIO_Init+0x2d4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4aa2      	ldr	r2, [pc, #648]	; (8001858 <GPIO_Init+0x2d4>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4ba0      	ldr	r3, [pc, #640]	; (8001858 <GPIO_Init+0x2d4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e2:	4b9d      	ldr	r3, [pc, #628]	; (8001858 <GPIO_Init+0x2d4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a9c      	ldr	r2, [pc, #624]	; (8001858 <GPIO_Init+0x2d4>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b9a      	ldr	r3, [pc, #616]	; (8001858 <GPIO_Init+0x2d4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <GPIO_Init+0x2d4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a96      	ldr	r2, [pc, #600]	; (8001858 <GPIO_Init+0x2d4>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b94      	ldr	r3, [pc, #592]	; (8001858 <GPIO_Init+0x2d4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b91      	ldr	r3, [pc, #580]	; (8001858 <GPIO_Init+0x2d4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a90      	ldr	r2, [pc, #576]	; (8001858 <GPIO_Init+0x2d4>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b8e      	ldr	r3, [pc, #568]	; (8001858 <GPIO_Init+0x2d4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800162a:	4b8b      	ldr	r3, [pc, #556]	; (8001858 <GPIO_Init+0x2d4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a8a      	ldr	r2, [pc, #552]	; (8001858 <GPIO_Init+0x2d4>)
 8001630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b88      	ldr	r3, [pc, #544]	; (8001858 <GPIO_Init+0x2d4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001642:	4b85      	ldr	r3, [pc, #532]	; (8001858 <GPIO_Init+0x2d4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a84      	ldr	r2, [pc, #528]	; (8001858 <GPIO_Init+0x2d4>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <GPIO_Init+0x2d4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <GPIO_Init+0x2d4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <GPIO_Init+0x2d4>)
 8001660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b7c      	ldr	r3, [pc, #496]	; (8001858 <GPIO_Init+0x2d4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b79      	ldr	r3, [pc, #484]	; (8001858 <GPIO_Init+0x2d4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a78      	ldr	r2, [pc, #480]	; (8001858 <GPIO_Init+0x2d4>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <GPIO_Init+0x2d4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	4b73      	ldr	r3, [pc, #460]	; (8001858 <GPIO_Init+0x2d4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a72      	ldr	r2, [pc, #456]	; (8001858 <GPIO_Init+0x2d4>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b70      	ldr	r3, [pc, #448]	; (8001858 <GPIO_Init+0x2d4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pin settings
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2120      	movs	r1, #32
 80016a6:	486d      	ldr	r0, [pc, #436]	; (800185c <GPIO_Init+0x2d8>)
 80016a8:	f005 f950 	bl	800694c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	210c      	movs	r1, #12
 80016b0:	486b      	ldr	r0, [pc, #428]	; (8001860 <GPIO_Init+0x2dc>)
 80016b2:	f005 f94b 	bl	800694c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2108      	movs	r1, #8
 80016ba:	486a      	ldr	r0, [pc, #424]	; (8001864 <GPIO_Init+0x2e0>)
 80016bc:	f005 f946 	bl	800694c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	4866      	ldr	r0, [pc, #408]	; (8001860 <GPIO_Init+0x2dc>)
 80016c8:	f005 f940 	bl	800694c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4865      	ldr	r0, [pc, #404]	; (8001868 <GPIO_Init+0x2e4>)
 80016d4:	f005 f93a 	bl	800694c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	21c8      	movs	r1, #200	; 0xc8
 80016dc:	4863      	ldr	r0, [pc, #396]	; (800186c <GPIO_Init+0x2e8>)
 80016de:	f005 f935 	bl	800694c <HAL_GPIO_WritePin>

  // Configure USB OTG and ULPI Pins
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016e2:	2308      	movs	r3, #8
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	485e      	ldr	r0, [pc, #376]	; (8001870 <GPIO_Init+0x2ec>)
 80016f6:	f004 ff7f 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016fa:	f643 4323 	movw	r3, #15395	; 0x3c23
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800170c:	230a      	movs	r3, #10
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001714:	4619      	mov	r1, r3
 8001716:	4857      	ldr	r0, [pc, #348]	; (8001874 <GPIO_Init+0x2f0>)
 8001718:	f004 ff6e 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800171c:	2310      	movs	r3, #16
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800172c:	230a      	movs	r3, #10
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4619      	mov	r1, r3
 8001736:	484c      	ldr	r0, [pc, #304]	; (8001868 <GPIO_Init+0x2e4>)
 8001738:	f004 ff5e 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800173c:	2310      	movs	r3, #16
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4619      	mov	r1, r3
 800174e:	4843      	ldr	r0, [pc, #268]	; (800185c <GPIO_Init+0x2d8>)
 8001750:	f004 ff52 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	4843      	ldr	r0, [pc, #268]	; (8001878 <GPIO_Init+0x2f4>)
 800176a:	f004 ff45 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800176e:	2320      	movs	r3, #32
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	4835      	ldr	r0, [pc, #212]	; (800185c <GPIO_Init+0x2d8>)
 8001786:	f004 ff37 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800178a:	2328      	movs	r3, #40	; 0x28
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800179a:	230a      	movs	r3, #10
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a2:	4619      	mov	r1, r3
 80017a4:	4835      	ldr	r0, [pc, #212]	; (800187c <GPIO_Init+0x2f8>)
 80017a6:	f004 ff27 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017aa:	2305      	movs	r3, #5
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017ba:	230a      	movs	r3, #10
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c2:	4619      	mov	r1, r3
 80017c4:	482e      	ldr	r0, [pc, #184]	; (8001880 <GPIO_Init+0x2fc>)
 80017c6:	f004 ff17 	bl	80065f8 <HAL_GPIO_Init>

  // Configure Audio Int Pin
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <GPIO_Init+0x300>)
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017da:	4619      	mov	r1, r3
 80017dc:	481f      	ldr	r0, [pc, #124]	; (800185c <GPIO_Init+0x2d8>)
 80017de:	f004 ff0b 	bl	80065f8 <HAL_GPIO_Init>

  // Configure Arduino and LCD Disp Pin
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80017e2:	f241 030c 	movw	r3, #4108	; 0x100c
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f8:	4619      	mov	r1, r3
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <GPIO_Init+0x2dc>)
 80017fc:	f004 fefc 	bl	80065f8 <HAL_GPIO_Init>

  // Configure uSD Card Detect Pin
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	481a      	ldr	r0, [pc, #104]	; (8001880 <GPIO_Init+0x2fc>)
 8001816:	f004 feef 	bl	80065f8 <HAL_GPIO_Init>

  // Configure LCD Backlight Control Pin
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800181a:	2308      	movs	r3, #8
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <GPIO_Init+0x2e0>)
 8001832:	f004 fee1 	bl	80065f8 <HAL_GPIO_Init>

  // Configure TP3 and TP1 Test Points
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001836:	f248 0304 	movw	r3, #32772	; 0x8004
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <GPIO_Init+0x2e4>)
 800184c:	f004 fed4 	bl	80065f8 <HAL_GPIO_Init>

  // Configure DCMI Power Enable pin
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	e018      	b.n	8001888 <GPIO_Init+0x304>
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40022000 	.word	0x40022000
 8001864:	40022800 	.word	0x40022800
 8001868:	40021c00 	.word	0x40021c00
 800186c:	40021800 	.word	0x40021800
 8001870:	40021000 	.word	0x40021000
 8001874:	40020400 	.word	0x40020400
 8001878:	40022400 	.word	0x40022400
 800187c:	40020000 	.word	0x40020000
 8001880:	40020800 	.word	0x40020800
 8001884:	10120000 	.word	0x10120000
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189a:	4619      	mov	r1, r3
 800189c:	4816      	ldr	r0, [pc, #88]	; (80018f8 <GPIO_Init+0x374>)
 800189e:	f004 feab 	bl	80065f8 <HAL_GPIO_Init>

  // Configure LCD Int Pin
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80018a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <GPIO_Init+0x378>)
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b4:	4619      	mov	r1, r3
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <GPIO_Init+0x37c>)
 80018b8:	f004 fe9e 	bl	80065f8 <HAL_GPIO_Init>

  // Configure Arduino Pins
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018bc:	23c8      	movs	r3, #200	; 0xc8
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	; (8001904 <GPIO_Init+0x380>)
 80018d4:	f004 fe90 	bl	80065f8 <HAL_GPIO_Init>

  // Configure Ethernet RMII pin
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80018d8:	2304      	movs	r3, #4
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <GPIO_Init+0x380>)
 80018ec:	f004 fe84 	bl	80065f8 <HAL_GPIO_Init>

}
 80018f0:	bf00      	nop
 80018f2:	3740      	adds	r7, #64	; 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021c00 	.word	0x40021c00
 80018fc:	10120000 	.word	0x10120000
 8001900:	40022000 	.word	0x40022000
 8001904:	40021800 	.word	0x40021800

08001908 <main>:
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };

int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 800190c:	f002 f8cc 	bl	8003aa8 <HAL_Init>

  // Initialize System Clock and hardware peripherals
  hw_init();
 8001910:	f7fe fe67 	bl	80005e2 <hw_init>

  // Initialize RTOS Kernel
  osKernelInitialize();
 8001914:	f00f f8d6 	bl	8010ac4 <osKernelInitialize>

  // Definition of Threads
  defaultTaskHandle = osThreadNew(StartThread, NULL, &defaultTask_attributes);
 8001918:	4a09      	ldr	r2, [pc, #36]	; (8001940 <main+0x38>)
 800191a:	2100      	movs	r1, #0
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <main+0x3c>)
 800191e:	f00f f963 	bl	8010be8 <osThreadNew>
 8001922:	4602      	mov	r2, r0
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <main+0x40>)
 8001926:	601a      	str	r2, [r3, #0]
  watchdogTaskHandle = osThreadNew(WatchdogThread, NULL, &watchdogTask_attributes);
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <main+0x44>)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <main+0x48>)
 800192e:	f00f f95b 	bl	8010be8 <osThreadNew>
 8001932:	4602      	mov	r2, r0
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <main+0x4c>)
 8001936:	601a      	str	r2, [r3, #0]

  // Start RTOS Kernel
  osKernelStart();
 8001938:	f00f f8f8 	bl	8010b2c <osKernelStart>

  // We should never get here as control is now taken by the scheduler
  for( ;; );
 800193c:	e7fe      	b.n	800193c <main+0x34>
 800193e:	bf00      	nop
 8001940:	08028e30 	.word	0x08028e30
 8001944:	08001959 	.word	0x08001959
 8001948:	20009980 	.word	0x20009980
 800194c:	08028e54 	.word	0x08028e54
 8001950:	080019c9 	.word	0x080019c9
 8001954:	20009984 	.word	0x20009984

08001958 <StartThread>:

}

// Default Start Thread
void StartThread(void *argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
   // Initialize LCD
   BSP_LCD_Init();
 8001960:	f001 f97e 	bl	8002c60 <BSP_LCD_Init>
   BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8001964:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001968:	2001      	movs	r0, #1
 800196a:	f001 fa11 	bl	8002d90 <BSP_LCD_LayerDefaultInit>

   // Set LCD Foreground Layer
   BSP_LCD_SelectLayer(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f001 fa6e 	bl	8002e50 <BSP_LCD_SelectLayer>

   // Set LCD Default Font
   BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001974:	480e      	ldr	r0, [pc, #56]	; (80019b0 <StartThread+0x58>)
 8001976:	f001 faad 	bl	8002ed4 <BSP_LCD_SetFont>

   // Initialize LCD Log module
   LCD_LOG_Init();
 800197a:	f022 fbdf 	bl	802413c <LCD_LOG_Init>

   LCD_LOG_SetHeader((uint8_t *)"HackerspaceSG Lighting Controller");
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <StartThread+0x5c>)
 8001980:	f022 fc26 	bl	80241d0 <LCD_LOG_SetHeader>
   LCD_LOG_SetFooter((uint8_t *)"STM32746G-DISCO board");
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <StartThread+0x60>)
 8001986:	f022 fc5f 	bl	8024248 <LCD_LOG_SetFooter>

   LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <StartThread+0x64>)
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <StartThread+0x68>)
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <StartThread+0x6c>)
 8001992:	f022 ff79 	bl	8024888 <puts>

   // Initialize USB host and lwIP stack
   MX_USB_HOST_Init();
 8001996:	f022 f8dd 	bl	8023b54 <MX_USB_HOST_Init>
   MX_LWIP_Init();
 800199a:	f00c fa7b 	bl	800de94 <MX_LWIP_Init>

   // Init HTTP Server
   http_server_init();
 800199e:	f000 f84b 	bl	8001a38 <http_server_init>

   osThreadTerminate(NULL);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f00f f9c6 	bl	8010d34 <osThreadTerminate>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000054 	.word	0x20000054
 80019b4:	08025594 	.word	0x08025594
 80019b8:	080255b8 	.word	0x080255b8
 80019bc:	20014758 	.word	0x20014758
 80019c0:	ff000080 	.word	0xff000080
 80019c4:	080255d0 	.word	0x080255d0

080019c8 <WatchdogThread>:

// Thread to feed the watchdog
void WatchdogThread(void *argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
   while (1)
   {
	   HAL_IWDG_Refresh(&hiwdg);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <WatchdogThread+0x18>)
 80019d2:	f006 fe64 	bl	800869e <HAL_IWDG_Refresh>
	   osDelay(300);
 80019d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019da:	f00f f9eb 	bl	8010db4 <osDelay>
	   HAL_IWDG_Refresh(&hiwdg);
 80019de:	e7f7      	b.n	80019d0 <WatchdogThread+0x8>
 80019e0:	20009420 	.word	0x20009420

080019e4 <HAL_TIM_PeriodElapsedCallback>:
   }
}

// Timer Callback for Timer 6
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 if (htim->Instance == TIM6) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 80019f6:	f002 f865 	bl	8003ac4 <HAL_IncTick>
 }
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40001000 	.word	0x40001000

08001a08 <HAL_TIM_PWM_PulseFinishedCallback>:

// Timer PWM Callback for timer 1
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001a10:	2100      	movs	r1, #0
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a14:	f009 fcf2 	bl	800b3fc <HAL_TIM_PWM_Stop_DMA>
	dataSent = 1;
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20009754 	.word	0x20009754
 8001a2c:	200000dc 	.word	0x200000dc

08001a30 <Error_Handler>:

// Error Handler in case of failure
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x4>
	...

08001a38 <http_server_init>:
    .stack_size = 4096
  };

// Start HTTP Server Thread
void http_server_init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	osThreadNew(HTTPServerThread, NULL, &HTTPServerTask_attributes);
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <http_server_init+0x14>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <http_server_init+0x18>)
 8001a42:	f00f f8d1 	bl	8010be8 <osThreadNew>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08028e78 	.word	0x08028e78
 8001a50:	08001a69 	.word	0x08001a69

08001a54 <http_server_serve>:

// Serve connections and parses any JSON data sent
void http_server_serve(struct netconn *conn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HTTPServerThread>:

// HTTP Server Thread
void HTTPServerThread(void *argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	struct netconn *conn, *newconn;
	err_t err, accept_err;

	conn = netconn_new(NETCONN_TCP);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2010      	movs	r0, #16
 8001a76:	f013 f94b 	bl	8014d10 <netconn_new_with_proto_and_callback>
 8001a7a:	6178      	str	r0, [r7, #20]

	if(conn != NULL)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d023      	beq.n	8001aca <HTTPServerThread+0x62>
	{
		// Bind to Port 80
		err = netconn_bind(conn, NULL, 80);
 8001a82:	2250      	movs	r2, #80	; 0x50
 8001a84:	2100      	movs	r1, #0
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f013 f9fc 	bl	8014e84 <netconn_bind>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	74fb      	strb	r3, [r7, #19]

		if(err == ERR_OK)
 8001a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d118      	bne.n	8001aca <HTTPServerThread+0x62>
		{
		   // Listen out for any connections
		   netconn_listen(conn);
 8001a98:	21ff      	movs	r1, #255	; 0xff
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f013 fa2a 	bl	8014ef4 <netconn_listen_with_backlog>

		   while(1)
		   {
		      // Accept any incoming connection
			  accept_err = netconn_accept(conn, &newconn);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f013 fa50 	bl	8014f4c <netconn_accept>
 8001aac:	4603      	mov	r3, r0
 8001aae:	74bb      	strb	r3, [r7, #18]
			  if(accept_err == ERR_OK)
 8001ab0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f3      	bne.n	8001aa0 <HTTPServerThread+0x38>
			  {
				 // Serve connection
				 http_server_serve(newconn);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ffca 	bl	8001a54 <http_server_serve>

				 // Delete connection
			     netconn_delete(newconn);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f013 f9c2 	bl	8014e4c <netconn_delete>
			  accept_err = netconn_accept(conn, &newconn);
 8001ac8:	e7ea      	b.n	8001aa0 <HTTPServerThread+0x38>
			  }

		   }
		}
	}
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_MspInit+0x4c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	f06f 0001 	mvn.w	r0, #1
 8001b12:	f002 fb59 	bl	80041c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_ADC_MspInit+0xa4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d13c      	bne.n	8001bc0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_ADC_MspInit+0xa8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b8e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b92:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b94:	2303      	movs	r3, #3
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <HAL_ADC_MspInit+0xac>)
 8001ba4:	f004 fd28 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bac:	2303      	movs	r3, #3
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_ADC_MspInit+0xb0>)
 8001bbc:	f004 fd1c 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40012200 	.word	0x40012200
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40021400 	.word	0x40021400
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_CRC_MspInit+0x38>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d10b      	bne.n	8001c02 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_CRC_MspInit+0x3c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_CRC_MspInit+0x3c>)
 8001bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_CRC_MspInit+0x3c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023000 	.word	0x40023000
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_DCMI_MspInit+0x160>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	f040 809a 	bne.w	8001d70 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6353      	str	r3, [r2, #52]	; 0x34
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a42      	ldr	r2, [pc, #264]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a3c      	ldr	r2, [pc, #240]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_DCMI_MspInit+0x164>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001ccc:	2360      	movs	r3, #96	; 0x60
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cdc:	230d      	movs	r3, #13
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4826      	ldr	r0, [pc, #152]	; (8001d80 <HAL_DCMI_MspInit+0x168>)
 8001ce8:	f004 fc86 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001cec:	2308      	movs	r3, #8
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cfc:	230d      	movs	r3, #13
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	481f      	ldr	r0, [pc, #124]	; (8001d84 <HAL_DCMI_MspInit+0x16c>)
 8001d08:	f004 fc76 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d1e:	230d      	movs	r3, #13
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <HAL_DCMI_MspInit+0x170>)
 8001d2a:	f004 fc65 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001d2e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d40:	230d      	movs	r3, #13
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <HAL_DCMI_MspInit+0x174>)
 8001d4c:	f004 fc54 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d50:	2350      	movs	r3, #80	; 0x50
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d60:	230d      	movs	r3, #13
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4809      	ldr	r0, [pc, #36]	; (8001d90 <HAL_DCMI_MspInit+0x178>)
 8001d6c:	f004 fc44 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3738      	adds	r7, #56	; 0x38
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	50050000 	.word	0x50050000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_DMA2D_MspInit+0x44>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d113      	bne.n	8001dce <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_DMA2D_MspInit+0x48>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_DMA2D_MspInit+0x48>)
 8001dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_DMA2D_MspInit+0x48>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2105      	movs	r1, #5
 8001dc2:	205a      	movs	r0, #90	; 0x5a
 8001dc4:	f002 fa00 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dc8:	205a      	movs	r0, #90	; 0x5a
 8001dca:	f002 fa19 	bl	8004200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	4002b000 	.word	0x4002b000
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <HAL_I2C_MspInit+0xdc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d129      	bne.n	8001e56 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	2312      	movs	r3, #18
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <HAL_I2C_MspInit+0xe4>)
 8001e38:	f004 fbde 	bl	80065f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e54:	e02d      	b.n	8001eb2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_I2C_MspInit+0xe8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d128      	bne.n	8001eb2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7e:	2312      	movs	r3, #18
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <HAL_I2C_MspInit+0xec>)
 8001e96:	f004 fbaf 	bl	80065f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_I2C_MspInit+0xe0>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
}
 8001eb2:	bf00      	nop
 8001eb4:	3730      	adds	r7, #48	; 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40005c00 	.word	0x40005c00
 8001ecc:	40021c00 	.word	0x40021c00

08001ed0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a55      	ldr	r2, [pc, #340]	; (8002044 <HAL_LTDC_MspInit+0x174>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f040 80a3 	bne.w	800203a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ef4:	4b54      	ldr	r3, [pc, #336]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001efe:	6453      	str	r3, [r2, #68]	; 0x44
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0c:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4a4d      	ldr	r2, [pc, #308]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6313      	str	r3, [r2, #48]	; 0x30
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f24:	4b48      	ldr	r3, [pc, #288]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	4a47      	ldr	r2, [pc, #284]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a41      	ldr	r2, [pc, #260]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a35      	ldr	r2, [pc, #212]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_LTDC_MspInit+0x178>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001f84:	2310      	movs	r3, #16
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f94:	230e      	movs	r3, #14
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	482b      	ldr	r0, [pc, #172]	; (800204c <HAL_LTDC_MspInit+0x17c>)
 8001fa0:	f004 fb2a 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fa4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fb6:	230e      	movs	r3, #14
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4823      	ldr	r0, [pc, #140]	; (8002050 <HAL_LTDC_MspInit+0x180>)
 8001fc2:	f004 fb19 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001fc6:	23f7      	movs	r3, #247	; 0xf7
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fd6:	230e      	movs	r3, #14
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	481c      	ldr	r0, [pc, #112]	; (8002054 <HAL_LTDC_MspInit+0x184>)
 8001fe2:	f004 fb09 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ff8:	2309      	movs	r3, #9
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002000:	4619      	mov	r1, r3
 8002002:	4815      	ldr	r0, [pc, #84]	; (8002058 <HAL_LTDC_MspInit+0x188>)
 8002004:	f004 faf8 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002008:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800201a:	230e      	movs	r3, #14
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <HAL_LTDC_MspInit+0x18c>)
 8002026:	f004 fae7 	bl	80065f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	2058      	movs	r0, #88	; 0x58
 8002030:	f002 f8ca 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002034:	2058      	movs	r0, #88	; 0x58
 8002036:	f002 f8e3 	bl	8004200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3738      	adds	r7, #56	; 0x38
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40016800 	.word	0x40016800
 8002048:	40023800 	.word	0x40023800
 800204c:	40021000 	.word	0x40021000
 8002050:	40022400 	.word	0x40022400
 8002054:	40022800 	.word	0x40022800
 8002058:	40021800 	.word	0x40021800
 800205c:	40022000 	.word	0x40022000

08002060 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_QSPI_MspInit+0x10c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d170      	bne.n	8002164 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6393      	str	r3, [r2, #56]	; 0x38
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_QSPI_MspInit+0x110>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80020e2:	2304      	movs	r3, #4
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020f2:	2309      	movs	r3, #9
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	481d      	ldr	r0, [pc, #116]	; (8002174 <HAL_QSPI_MspInit+0x114>)
 80020fe:	f004 fa7b 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002102:	2340      	movs	r3, #64	; 0x40
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002112:	230a      	movs	r3, #10
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 031c 	add.w	r3, r7, #28
 800211a:	4619      	mov	r1, r3
 800211c:	4816      	ldr	r0, [pc, #88]	; (8002178 <HAL_QSPI_MspInit+0x118>)
 800211e:	f004 fa6b 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002122:	2304      	movs	r3, #4
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002132:	2309      	movs	r3, #9
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	480e      	ldr	r0, [pc, #56]	; (8002178 <HAL_QSPI_MspInit+0x118>)
 800213e:	f004 fa5b 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002142:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002154:	2309      	movs	r3, #9
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <HAL_QSPI_MspInit+0x11c>)
 8002160:	f004 fa4a 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	; 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	a0001000 	.word	0xa0001000
 8002170:	40023800 	.word	0x40023800
 8002174:	40021000 	.word	0x40021000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020c00 	.word	0x40020c00

08002180 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_RTC_MspInit+0x2c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d105      	bne.n	800219e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RTC_MspInit+0x30>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_RTC_MspInit+0x30>)
 8002198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40002800 	.word	0x40002800
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80021d4:	d127      	bne.n	8002226 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_SPDIFRX_MspInit+0x7c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_SPDIFRX_MspInit+0x7c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_SPDIFRX_MspInit+0x7c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_SPDIFRX_MspInit+0x7c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_SPDIFRX_MspInit+0x7c>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_SPDIFRX_MspInit+0x7c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002216:	2308      	movs	r3, #8
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <HAL_SPDIFRX_MspInit+0x80>)
 8002222:	f004 f9e9 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40020c00 	.word	0x40020c00

08002238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_SPI_MspInit+0xb4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d144      	bne.n	80022e4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_SPI_MspInit+0xb8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80022a2:	2302      	movs	r3, #2
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022b2:	2305      	movs	r3, #5
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <HAL_SPI_MspInit+0xbc>)
 80022be:	f004 f99b 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80022c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022d4:	2305      	movs	r3, #5
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <HAL_SPI_MspInit+0xc0>)
 80022e0:	f004 f98a 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40003800 	.word	0x40003800
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40020400 	.word	0x40020400

080022fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a45      	ldr	r2, [pc, #276]	; (8002420 <HAL_TIM_Base_MspInit+0x124>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d13c      	bne.n	8002388 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a44      	ldr	r2, [pc, #272]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM1_MspInit 1 */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002326:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002328:	4a40      	ldr	r2, [pc, #256]	; (800242c <HAL_TIM_Base_MspInit+0x130>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800232c:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 800232e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002332:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002336:	2240      	movs	r2, #64	; 0x40
 8002338:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002346:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 800234a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800234e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002356:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002366:	2200      	movs	r2, #0
 8002368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800236a:	482f      	ldr	r0, [pc, #188]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 800236c:	f002 f8ba 	bl	80044e4 <HAL_DMA_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_TIM_Base_MspInit+0x7e>
    {
       Error_Handler();
 8002376:	f7ff fb5b 	bl	8001a30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <HAL_TIM_Base_MspInit+0x12c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002386:	e046      	b.n	8002416 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d10c      	bne.n	80023ac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]
}
 80023aa:	e034      	b.n	8002416 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_TIM_Base_MspInit+0x134>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10c      	bne.n	80023d0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
}
 80023ce:	e022      	b.n	8002416 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a17      	ldr	r2, [pc, #92]	; (8002434 <HAL_TIM_Base_MspInit+0x138>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d10c      	bne.n	80023f4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
}
 80023f2:	e010      	b.n	8002416 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_TIM_Base_MspInit+0x13c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10b      	bne.n	8002416 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_TIM_Base_MspInit+0x128>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	bf00      	nop
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000
 8002424:	40023800 	.word	0x40023800
 8002428:	200091a8 	.word	0x200091a8
 800242c:	40026428 	.word	0x40026428
 8002430:	40000400 	.word	0x40000400
 8002434:	40000c00 	.word	0x40000c00
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_TIM_PWM_MspInit+0x38>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10b      	bne.n	8002466 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_TIM_PWM_MspInit+0x3c>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_TIM_PWM_MspInit+0x3c>)
 8002454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_TIM_PWM_MspInit+0x3c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40001800 	.word	0x40001800
 8002478:	40023800 	.word	0x40023800

0800247c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	; 0x30
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_TIM_MspPostInit+0x178>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d11d      	bne.n	80024da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a55      	ldr	r2, [pc, #340]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80024b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	484a      	ldr	r0, [pc, #296]	; (80025fc <HAL_TIM_MspPostInit+0x180>)
 80024d4:	f004 f890 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80024d8:	e087      	b.n	80025ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d11d      	bne.n	8002520 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80024fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800250e:	2301      	movs	r3, #1
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4838      	ldr	r0, [pc, #224]	; (80025fc <HAL_TIM_MspPostInit+0x180>)
 800251a:	f004 f86d 	bl	80065f8 <HAL_GPIO_Init>
}
 800251e:	e064      	b.n	80025ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a36      	ldr	r2, [pc, #216]	; (8002600 <HAL_TIM_MspPostInit+0x184>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d11c      	bne.n	8002564 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a32      	ldr	r2, [pc, #200]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002542:	2310      	movs	r3, #16
 8002544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002552:	2302      	movs	r3, #2
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	4619      	mov	r1, r3
 800255c:	4829      	ldr	r0, [pc, #164]	; (8002604 <HAL_TIM_MspPostInit+0x188>)
 800255e:	f004 f84b 	bl	80065f8 <HAL_GPIO_Init>
}
 8002562:	e042      	b.n	80025ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_TIM_MspPostInit+0x18c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11c      	bne.n	80025a8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002586:	2301      	movs	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002596:	2302      	movs	r3, #2
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	481a      	ldr	r0, [pc, #104]	; (800260c <HAL_TIM_MspPostInit+0x190>)
 80025a2:	f004 f829 	bl	80065f8 <HAL_GPIO_Init>
}
 80025a6:	e020      	b.n	80025ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_TIM_MspPostInit+0x194>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d11b      	bne.n	80025ea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_TIM_MspPostInit+0x17c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80025da:	2309      	movs	r3, #9
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <HAL_TIM_MspPostInit+0x198>)
 80025e6:	f004 f807 	bl	80065f8 <HAL_GPIO_Init>
}
 80025ea:	bf00      	nop
 80025ec:	3730      	adds	r7, #48	; 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40000400 	.word	0x40000400
 8002604:	40020400 	.word	0x40020400
 8002608:	40000c00 	.word	0x40000c00
 800260c:	40022000 	.word	0x40022000
 8002610:	40001800 	.word	0x40001800
 8002614:	40021c00 	.word	0x40021c00

08002618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <HAL_UART_MspInit+0x110>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d145      	bne.n	80026c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_UART_MspInit+0x114>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a3b      	ldr	r2, [pc, #236]	; (800272c <HAL_UART_MspInit+0x114>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_UART_MspInit+0x114>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_UART_MspInit+0x114>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a35      	ldr	r2, [pc, #212]	; (800272c <HAL_UART_MspInit+0x114>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_UART_MspInit+0x114>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_UART_MspInit+0x114>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a2f      	ldr	r2, [pc, #188]	; (800272c <HAL_UART_MspInit+0x114>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_UART_MspInit+0x114>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002692:	2307      	movs	r3, #7
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4824      	ldr	r0, [pc, #144]	; (8002730 <HAL_UART_MspInit+0x118>)
 800269e:	f003 ffab 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80026a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b4:	2307      	movs	r3, #7
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	481d      	ldr	r0, [pc, #116]	; (8002734 <HAL_UART_MspInit+0x11c>)
 80026c0:	f003 ff9a 	bl	80065f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026c4:	e02c      	b.n	8002720 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <HAL_UART_MspInit+0x120>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d127      	bne.n	8002720 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_UART_MspInit+0x114>)
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_UART_MspInit+0x114>)
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	6453      	str	r3, [r2, #68]	; 0x44
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_UART_MspInit+0x114>)
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_UART_MspInit+0x114>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_UART_MspInit+0x114>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_UART_MspInit+0x114>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002710:	2308      	movs	r3, #8
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	4619      	mov	r1, r3
 800271a:	4808      	ldr	r0, [pc, #32]	; (800273c <HAL_UART_MspInit+0x124>)
 800271c:	f003 ff6c 	bl	80065f8 <HAL_GPIO_Init>
}
 8002720:	bf00      	nop
 8002722:	3730      	adds	r7, #48	; 0x30
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40011000 	.word	0x40011000
 800272c:	40023800 	.word	0x40023800
 8002730:	40020400 	.word	0x40020400
 8002734:	40020000 	.word	0x40020000
 8002738:	40011400 	.word	0x40011400
 800273c:	40020800 	.word	0x40020800

08002740 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_FMC_MspInit+0x100>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d16d      	bne.n	8002838 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800275c:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_FMC_MspInit+0x100>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_FMC_MspInit+0x104>)
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	4a37      	ldr	r2, [pc, #220]	; (8002844 <HAL_FMC_MspInit+0x104>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6393      	str	r3, [r2, #56]	; 0x38
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_FMC_MspInit+0x104>)
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800277a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800277e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800278c:	230c      	movs	r3, #12
 800278e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	482c      	ldr	r0, [pc, #176]	; (8002848 <HAL_FMC_MspInit+0x108>)
 8002796:	f003 ff2f 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800279a:	f248 1333 	movw	r3, #33075	; 0x8133
 800279e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ac:	230c      	movs	r3, #12
 80027ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4825      	ldr	r0, [pc, #148]	; (800284c <HAL_FMC_MspInit+0x10c>)
 80027b6:	f003 ff1f 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80027ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027be:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027cc:	230c      	movs	r3, #12
 80027ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	481e      	ldr	r0, [pc, #120]	; (8002850 <HAL_FMC_MspInit+0x110>)
 80027d6:	f003 ff0f 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80027da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027de:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ec:	230c      	movs	r3, #12
 80027ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4817      	ldr	r0, [pc, #92]	; (8002854 <HAL_FMC_MspInit+0x114>)
 80027f6:	f003 feff 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80027fa:	2328      	movs	r3, #40	; 0x28
 80027fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800280a:	230c      	movs	r3, #12
 800280c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4811      	ldr	r0, [pc, #68]	; (8002858 <HAL_FMC_MspInit+0x118>)
 8002814:	f003 fef0 	bl	80065f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002818:	2308      	movs	r3, #8
 800281a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002828:	230c      	movs	r3, #12
 800282a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	4619      	mov	r1, r3
 8002830:	480a      	ldr	r0, [pc, #40]	; (800285c <HAL_FMC_MspInit+0x11c>)
 8002832:	f003 fee1 	bl	80065f8 <HAL_GPIO_Init>
 8002836:	e000      	b.n	800283a <HAL_FMC_MspInit+0xfa>
    return;
 8002838:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200000e0 	.word	0x200000e0
 8002844:	40023800 	.word	0x40023800
 8002848:	40021000 	.word	0x40021000
 800284c:	40021800 	.word	0x40021800
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40021400 	.word	0x40021400
 8002858:	40021c00 	.word	0x40021c00
 800285c:	40020800 	.word	0x40020800

08002860 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002868:	f7ff ff6a 	bl	8002740 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2b      	ldr	r2, [pc, #172]	; (8002930 <HAL_SAI_MspInit+0xbc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d124      	bne.n	80028d0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_SAI_MspInit+0xc0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_SAI_MspInit+0xc4>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_SAI_MspInit+0xc4>)
 8002894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002898:	6453      	str	r3, [r2, #68]	; 0x44
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_SAI_MspInit+0xc4>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_SAI_MspInit+0xc0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a21      	ldr	r2, [pc, #132]	; (8002934 <HAL_SAI_MspInit+0xc0>)
 80028ae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80028b0:	23f0      	movs	r3, #240	; 0xf0
 80028b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028c0:	230a      	movs	r3, #10
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	481c      	ldr	r0, [pc, #112]	; (800293c <HAL_SAI_MspInit+0xc8>)
 80028cc:	f003 fe94 	bl	80065f8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_SAI_MspInit+0xcc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d125      	bne.n	8002926 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_SAI_MspInit+0xc0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10b      	bne.n	80028fa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_SAI_MspInit+0xc4>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_SAI_MspInit+0xc4>)
 80028e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_SAI_MspInit+0xc4>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_SAI_MspInit+0xc0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_SAI_MspInit+0xc0>)
 8002902:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002916:	230a      	movs	r3, #10
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4808      	ldr	r0, [pc, #32]	; (8002944 <HAL_SAI_MspInit+0xd0>)
 8002922:	f003 fe69 	bl	80065f8 <HAL_GPIO_Init>

    }
}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40015c04 	.word	0x40015c04
 8002934:	200000e4 	.word	0x200000e4
 8002938:	40023800 	.word	0x40023800
 800293c:	40022000 	.word	0x40022000
 8002940:	40015c24 	.word	0x40015c24
 8002944:	40021800 	.word	0x40021800

08002948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	2036      	movs	r0, #54	; 0x36
 800295e:	f001 fc33 	bl	80041c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002962:	2036      	movs	r0, #54	; 0x36
 8002964:	f001 fc4c 	bl	8004200 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_InitTick+0xa0>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <HAL_InitTick+0xa0>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_InitTick+0xa0>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002980:	f107 0210 	add.w	r2, r7, #16
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f006 ffa8 	bl	80098e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002990:	f006 ff7e 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 8002994:	4603      	mov	r3, r0
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	4a13      	ldr	r2, [pc, #76]	; (80029ec <HAL_InitTick+0xa4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	3b01      	subs	r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_InitTick+0xa8>)
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_InitTick+0xac>)
 80029ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_InitTick+0xa8>)
 80029b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029b6:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_InitTick+0xa8>)
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_InitTick+0xa8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_InitTick+0xa8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029c8:	4809      	ldr	r0, [pc, #36]	; (80029f0 <HAL_InitTick+0xa8>)
 80029ca:	f008 fbf0 	bl	800b1ae <HAL_TIM_Base_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029d4:	4806      	ldr	r0, [pc, #24]	; (80029f0 <HAL_InitTick+0xa8>)
 80029d6:	f008 fc41 	bl	800b25c <HAL_TIM_Base_Start_IT>
 80029da:	4603      	mov	r3, r0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	431bde83 	.word	0x431bde83
 80029f0:	20009988 	.word	0x20009988
 80029f4:	40001000 	.word	0x40001000

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <NMI_Handler+0x4>

080029fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <BusFault_Handler+0x4>

08002a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <UsageFault_Handler+0x4>

08002a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <TIM6_DAC_IRQHandler+0x10>)
 8002a2a:	f008 fdc1 	bl	800b5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20009988 	.word	0x20009988

08002a38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <ETH_IRQHandler+0x10>)
 8002a3e:	f003 f839 	bl	8005ab4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000b40c 	.word	0x2000b40c

08002a4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <OTG_FS_IRQHandler+0x10>)
 8002a52:	f004 f9ff 	bl	8006e54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200107f0 	.word	0x200107f0

08002a60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <LTDC_IRQHandler+0x10>)
 8002a66:	f005 fefb 	bl	8008860 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20009570 	.word	0x20009570

08002a74 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <DMA2_Stream1_IRQHandler+0x10>)
 8002a7a:	f001 fe61 	bl	8004740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200091a8 	.word	0x200091a8

08002a88 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <DMA2D_IRQHandler+0x10>)
 8002a8e:	f002 f9ef 	bl	8004e70 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20009824 	.word	0x20009824

08002a9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e00a      	b.n	8002ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aae:	f3af 8000 	nop.w
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	60ba      	str	r2, [r7, #8]
 8002aba:	b2ca      	uxtb	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf0      	blt.n	8002aae <_read+0x12>
	}

return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e009      	b.n	8002afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f021 fbf1 	bl	80242d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dbf1      	blt.n	8002ae8 <_write+0x12>
	}
	return len;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_close>:

int _close(int file)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
	return -1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b36:	605a      	str	r2, [r3, #4]
	return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_isatty>:

int _isatty(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
	return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <_sbrk+0x5c>)
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <_sbrk+0x60>)
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <_sbrk+0x64>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <_sbrk+0x64>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <_sbrk+0x68>)
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d205      	bcs.n	8002bb4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <_sbrk+0x6c>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb2:	e009      	b.n	8002bc8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <_sbrk+0x64>)
 8002bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20050000 	.word	0x20050000
 8002bd8:	00000400 	.word	0x00000400
 8002bdc:	200000e8 	.word	0x200000e8
 8002be0:	20014760 	.word	0x20014760
 8002be4:	20010404 	.word	0x20010404

08002be8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <SystemInit+0x20>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <SystemInit+0x20>)
 8002bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c12:	490e      	ldr	r1, [pc, #56]	; (8002c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c28:	4c0b      	ldr	r4, [pc, #44]	; (8002c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c36:	f7ff ffd7 	bl	8002be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3a:	f021 fcb3 	bl	80245a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c3e:	f7fe fe63 	bl	8001908 <main>
  bx  lr    
 8002c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c4c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002c50:	0802bbac 	.word	0x0802bbac
  ldr r2, =_sbss
 8002c54:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002c58:	20014760 	.word	0x20014760

08002c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c5c:	e7fe      	b.n	8002c5c <ADC_IRQHandler>
	...

08002c60 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c66:	2228      	movs	r2, #40	; 0x28
 8002c68:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c6c:	2209      	movs	r2, #9
 8002c6e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c70:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c72:	2235      	movs	r2, #53	; 0x35
 8002c74:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c78:	220b      	movs	r2, #11
 8002c7a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c7e:	f240 121b 	movw	r2, #283	; 0x11b
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c86:	f240 2215 	movw	r2, #533	; 0x215
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c8e:	f240 121d 	movw	r2, #285	; 0x11d
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002c96:	f240 2235 	movw	r2, #565	; 0x235
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4823      	ldr	r0, [pc, #140]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002ca0:	f000 fc2c 	bl	80034fc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002ca6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cae:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002cb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <BSP_LCD_Init+0xd0>)
 8002ce8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002cea:	4810      	ldr	r0, [pc, #64]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cec:	f005 feb8 	bl	8008a60 <HAL_LTDC_GetState>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002cfa:	f000 fb25 	bl	8003348 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002cfe:	480b      	ldr	r0, [pc, #44]	; (8002d2c <BSP_LCD_Init+0xcc>)
 8002d00:	f005 fcde 	bl	80086c0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002d04:	2201      	movs	r2, #1
 8002d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d0a:	480a      	ldr	r0, [pc, #40]	; (8002d34 <BSP_LCD_Init+0xd4>)
 8002d0c:	f003 fe1e 	bl	800694c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002d10:	2201      	movs	r2, #1
 8002d12:	2108      	movs	r1, #8
 8002d14:	4808      	ldr	r0, [pc, #32]	; (8002d38 <BSP_LCD_Init+0xd8>)
 8002d16:	f003 fe19 	bl	800694c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d1a:	f000 fd0f 	bl	800373c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <BSP_LCD_Init+0xdc>)
 8002d20:	f000 f8d8 	bl	8002ed4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200099d4 	.word	0x200099d4
 8002d30:	40016800 	.word	0x40016800
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40022800 	.word	0x40022800
 8002d3c:	20000054 	.word	0x20000054

08002d40 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <BSP_LCD_GetXSize+0x20>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <BSP_LCD_GetXSize+0x24>)
 8002d4a:	2134      	movs	r1, #52	; 0x34
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	681b      	ldr	r3, [r3, #0]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	2000012c 	.word	0x2000012c
 8002d64:	200099d4 	.word	0x200099d4

08002d68 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <BSP_LCD_GetYSize+0x20>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <BSP_LCD_GetYSize+0x24>)
 8002d72:	2134      	movs	r1, #52	; 0x34
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3364      	adds	r3, #100	; 0x64
 8002d7c:	681b      	ldr	r3, [r3, #0]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	2000012c 	.word	0x2000012c
 8002d8c:	200099d4 	.word	0x200099d4

08002d90 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b090      	sub	sp, #64	; 0x40
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002da0:	f7ff ffce 	bl	8002d40 <BSP_LCD_GetXSize>
 8002da4:	4603      	mov	r3, r0
 8002da6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002dac:	f7ff ffdc 	bl	8002d68 <BSP_LCD_GetYSize>
 8002db0:	4603      	mov	r3, r0
 8002db2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002dbc:	23ff      	movs	r3, #255	; 0xff
 8002dbe:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002dd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002de0:	f7ff ffae 	bl	8002d40 <BSP_LCD_GetXSize>
 8002de4:	4603      	mov	r3, r0
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002de8:	f7ff ffbe 	bl	8002d68 <BSP_LCD_GetYSize>
 8002dec:	4603      	mov	r3, r0
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	4619      	mov	r1, r3
 8002df8:	4812      	ldr	r0, [pc, #72]	; (8002e44 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002dfa:	f005 fdf3 	bl	80089e4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	4911      	ldr	r1, [pc, #68]	; (8002e48 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e12:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	490c      	ldr	r1, [pc, #48]	; (8002e48 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3308      	adds	r3, #8
 8002e24:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e26:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	4907      	ldr	r1, [pc, #28]	; (8002e48 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e3a:	601a      	str	r2, [r3, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	3740      	adds	r7, #64	; 0x40
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200099d4 	.word	0x200099d4
 8002e48:	20000130 	.word	0x20000130
 8002e4c:	20000054 	.word	0x20000054

08002e50 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <BSP_LCD_SelectLayer+0x1c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
} 
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	2000012c 	.word	0x2000012c

08002e70 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <BSP_LCD_SetTextColor+0x28>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <BSP_LCD_SetTextColor+0x2c>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	2000012c 	.word	0x2000012c
 8002e9c:	20000130 	.word	0x20000130

08002ea0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <BSP_LCD_SetBackColor+0x2c>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <BSP_LCD_SetBackColor+0x30>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3304      	adds	r3, #4
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000012c 	.word	0x2000012c
 8002ed0:	20000130 	.word	0x20000130

08002ed4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <BSP_LCD_SetFont+0x2c>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4908      	ldr	r1, [pc, #32]	; (8002f04 <BSP_LCD_SetFont+0x30>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	2000012c 	.word	0x2000012c
 8002f04:	20000130 	.word	0x20000130

08002f08 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <BSP_LCD_GetFont+0x24>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <BSP_LCD_GetFont+0x28>)
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	2000012c 	.word	0x2000012c
 8002f30:	20000130 	.word	0x20000130

08002f34 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <BSP_LCD_Clear+0x48>)
 8002f3e:	681c      	ldr	r4, [r3, #0]
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <BSP_LCD_Clear+0x48>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <BSP_LCD_Clear+0x4c>)
 8002f46:	2134      	movs	r1, #52	; 0x34
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	335c      	adds	r3, #92	; 0x5c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461d      	mov	r5, r3
 8002f54:	f7ff fef4 	bl	8002d40 <BSP_LCD_GetXSize>
 8002f58:	4606      	mov	r6, r0
 8002f5a:	f7ff ff05 	bl	8002d68 <BSP_LCD_GetYSize>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2300      	movs	r3, #0
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	4632      	mov	r2, r6
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f000 fb98 	bl	80036a4 <LL_FillBuffer>
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7c:	2000012c 	.word	0x2000012c
 8002f80:	200099d4 	.word	0x200099d4

08002f84 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	80bb      	strh	r3, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <BSP_LCD_DisplayChar+0x80>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	491b      	ldr	r1, [pc, #108]	; (8003008 <BSP_LCD_DisplayChar+0x84>)
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <BSP_LCD_DisplayChar+0x80>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4c14      	ldr	r4, [pc, #80]	; (8003008 <BSP_LCD_DisplayChar+0x84>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4423      	add	r3, r4
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fc8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <BSP_LCD_DisplayChar+0x80>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <BSP_LCD_DisplayChar+0x84>)
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4423      	add	r3, r4
 8002fdc:	3308      	adds	r3, #8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	889b      	ldrh	r3, [r3, #4]
 8002fe2:	3307      	adds	r3, #7
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da00      	bge.n	8002fea <BSP_LCD_DisplayChar+0x66>
 8002fe8:	3307      	adds	r3, #7
 8002fea:	10db      	asrs	r3, r3, #3
 8002fec:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ff0:	18ca      	adds	r2, r1, r3
 8002ff2:	88b9      	ldrh	r1, [r7, #4]
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fa9c 	bl	8003534 <DrawChar>
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	2000012c 	.word	0x2000012c
 8003008:	20000130 	.word	0x20000130

0800300c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60ba      	str	r2, [r7, #8]
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	81fb      	strh	r3, [r7, #14]
 800301a:	460b      	mov	r3, r1
 800301c:	81bb      	strh	r3, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003022:	2301      	movs	r3, #1
 8003024:	83fb      	strh	r3, [r7, #30]
 8003026:	2300      	movs	r3, #0
 8003028:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003036:	e002      	b.n	800303e <BSP_LCD_DisplayStringAt+0x32>
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3301      	adds	r3, #1
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	617a      	str	r2, [r7, #20]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f6      	bne.n	8003038 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800304a:	f7ff fe79 	bl	8002d40 <BSP_LCD_GetXSize>
 800304e:	4b4f      	ldr	r3, [pc, #316]	; (800318c <BSP_LCD_DisplayStringAt+0x180>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	494f      	ldr	r1, [pc, #316]	; (8003190 <BSP_LCD_DisplayStringAt+0x184>)
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3308      	adds	r3, #8
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	889b      	ldrh	r3, [r3, #4]
 8003064:	fbb0 f3f3 	udiv	r3, r0, r3
 8003068:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d01c      	beq.n	80030aa <BSP_LCD_DisplayStringAt+0x9e>
 8003070:	2b03      	cmp	r3, #3
 8003072:	d017      	beq.n	80030a4 <BSP_LCD_DisplayStringAt+0x98>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d12e      	bne.n	80030d6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	1ad1      	subs	r1, r2, r3
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <BSP_LCD_DisplayStringAt+0x180>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4843      	ldr	r0, [pc, #268]	; (8003190 <BSP_LCD_DisplayStringAt+0x184>)
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4403      	add	r3, r0
 800308e:	3308      	adds	r3, #8
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	889b      	ldrh	r3, [r3, #4]
 8003094:	fb03 f301 	mul.w	r3, r3, r1
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	89fb      	ldrh	r3, [r7, #14]
 800309e:	4413      	add	r3, r2
 80030a0:	83fb      	strh	r3, [r7, #30]
      break;
 80030a2:	e01b      	b.n	80030dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	83fb      	strh	r3, [r7, #30]
      break;
 80030a8:	e018      	b.n	80030dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	b299      	uxth	r1, r3
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <BSP_LCD_DisplayStringAt+0x180>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4836      	ldr	r0, [pc, #216]	; (8003190 <BSP_LCD_DisplayStringAt+0x184>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4403      	add	r3, r0
 80030c2:	3308      	adds	r3, #8
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	889b      	ldrh	r3, [r3, #4]
 80030c8:	fb11 f303 	smulbb	r3, r1, r3
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	89fb      	ldrh	r3, [r7, #14]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	83fb      	strh	r3, [r7, #30]
      break;
 80030d4:	e002      	b.n	80030dc <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80030d6:	89fb      	ldrh	r3, [r7, #14]
 80030d8:	83fb      	strh	r3, [r7, #30]
      break;
 80030da:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80030dc:	8bfb      	ldrh	r3, [r7, #30]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <BSP_LCD_DisplayStringAt+0xde>
 80030e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da1d      	bge.n	8003126 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80030ee:	e01a      	b.n	8003126 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	89b9      	ldrh	r1, [r7, #12]
 80030f6:	8bfb      	ldrh	r3, [r7, #30]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff43 	bl	8002f84 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <BSP_LCD_DisplayStringAt+0x180>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4923      	ldr	r1, [pc, #140]	; (8003190 <BSP_LCD_DisplayStringAt+0x184>)
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3308      	adds	r3, #8
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	889a      	ldrh	r2, [r3, #4]
 8003114:	8bfb      	ldrh	r3, [r7, #30]
 8003116:	4413      	add	r3, r2
 8003118:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3301      	adds	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
    i++;
 8003120:	8bbb      	ldrh	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	bf14      	ite	ne
 800312e:	2301      	movne	r3, #1
 8003130:	2300      	moveq	r3, #0
 8003132:	b2dc      	uxtb	r4, r3
 8003134:	f7ff fe04 	bl	8002d40 <BSP_LCD_GetXSize>
 8003138:	4605      	mov	r5, r0
 800313a:	8bb9      	ldrh	r1, [r7, #28]
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <BSP_LCD_DisplayStringAt+0x180>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4813      	ldr	r0, [pc, #76]	; (8003190 <BSP_LCD_DisplayStringAt+0x184>)
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4403      	add	r3, r0
 800314c:	3308      	adds	r3, #8
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	889b      	ldrh	r3, [r3, #4]
 8003152:	fb03 f301 	mul.w	r3, r3, r1
 8003156:	1aeb      	subs	r3, r5, r3
 8003158:	b299      	uxth	r1, r3
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <BSP_LCD_DisplayStringAt+0x180>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	480c      	ldr	r0, [pc, #48]	; (8003190 <BSP_LCD_DisplayStringAt+0x184>)
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4403      	add	r3, r0
 800316a:	3308      	adds	r3, #8
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	889b      	ldrh	r3, [r3, #4]
 8003170:	4299      	cmp	r1, r3
 8003172:	bf2c      	ite	cs
 8003174:	2301      	movcs	r3, #1
 8003176:	2300      	movcc	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	4023      	ands	r3, r4
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1b6      	bne.n	80030f0 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8003182:	bf00      	nop
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bdb0      	pop	{r4, r5, r7, pc}
 800318a:	bf00      	nop
 800318c:	2000012c 	.word	0x2000012c
 8003190:	20000130 	.word	0x20000130

08003194 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80031a0:	f7ff feb2 	bl	8002f08 <BSP_LCD_GetFont>
 80031a4:	4603      	mov	r3, r0
 80031a6:	88db      	ldrh	r3, [r3, #6]
 80031a8:	88fa      	ldrh	r2, [r7, #6]
 80031aa:	fb12 f303 	smulbb	r3, r2, r3
 80031ae:	b299      	uxth	r1, r3
 80031b0:	2303      	movs	r3, #3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff ff29 	bl	800300c <BSP_LCD_DisplayStringAt>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	603a      	str	r2, [r7, #0]
 80031ce:	80fb      	strh	r3, [r7, #6]
 80031d0:	460b      	mov	r3, r1
 80031d2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <BSP_LCD_DrawPixel+0x88>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <BSP_LCD_DrawPixel+0x8c>)
 80031da:	2134      	movs	r1, #52	; 0x34
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3348      	adds	r3, #72	; 0x48
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d116      	bne.n	8003218 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <BSP_LCD_DrawPixel+0x88>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <BSP_LCD_DrawPixel+0x8c>)
 80031f0:	2134      	movs	r1, #52	; 0x34
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	335c      	adds	r3, #92	; 0x5c
 80031fa:	681c      	ldr	r4, [r3, #0]
 80031fc:	88bd      	ldrh	r5, [r7, #4]
 80031fe:	f7ff fd9f 	bl	8002d40 <BSP_LCD_GetXSize>
 8003202:	4603      	mov	r3, r0
 8003204:	fb03 f205 	mul.w	r2, r3, r5
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	4413      	add	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4423      	add	r3, r4
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b292      	uxth	r2, r2
 8003214:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003216:	e015      	b.n	8003244 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <BSP_LCD_DrawPixel+0x88>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <BSP_LCD_DrawPixel+0x8c>)
 800321e:	2134      	movs	r1, #52	; 0x34
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	681c      	ldr	r4, [r3, #0]
 800322a:	88bd      	ldrh	r5, [r7, #4]
 800322c:	f7ff fd88 	bl	8002d40 <BSP_LCD_GetXSize>
 8003230:	4603      	mov	r3, r0
 8003232:	fb03 f205 	mul.w	r2, r3, r5
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4423      	add	r3, r4
 800323e:	461a      	mov	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bdb0      	pop	{r4, r5, r7, pc}
 800324c:	2000012c 	.word	0x2000012c
 8003250:	200099d4 	.word	0x200099d4

08003254 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af02      	add	r7, sp, #8
 800325c:	4604      	mov	r4, r0
 800325e:	4608      	mov	r0, r1
 8003260:	4611      	mov	r1, r2
 8003262:	461a      	mov	r2, r3
 8003264:	4623      	mov	r3, r4
 8003266:	80fb      	strh	r3, [r7, #6]
 8003268:	4603      	mov	r3, r0
 800326a:	80bb      	strh	r3, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <BSP_LCD_FillRect+0xe8>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4930      	ldr	r1, [pc, #192]	; (8003340 <BSP_LCD_FillRect+0xec>)
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fdf0 	bl	8002e70 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <BSP_LCD_FillRect+0xe8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <BSP_LCD_FillRect+0xf0>)
 8003296:	2134      	movs	r1, #52	; 0x34
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3348      	adds	r3, #72	; 0x48
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d114      	bne.n	80032d0 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <BSP_LCD_FillRect+0xe8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a26      	ldr	r2, [pc, #152]	; (8003344 <BSP_LCD_FillRect+0xf0>)
 80032ac:	2134      	movs	r1, #52	; 0x34
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	681c      	ldr	r4, [r3, #0]
 80032b8:	f7ff fd42 	bl	8002d40 <BSP_LCD_GetXSize>
 80032bc:	4602      	mov	r2, r0
 80032be:	88bb      	ldrh	r3, [r7, #4]
 80032c0:	fb03 f202 	mul.w	r2, r3, r2
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4413      	add	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4423      	add	r3, r4
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e013      	b.n	80032f8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <BSP_LCD_FillRect+0xe8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <BSP_LCD_FillRect+0xf0>)
 80032d6:	2134      	movs	r1, #52	; 0x34
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	f7ff fd2d 	bl	8002d40 <BSP_LCD_GetXSize>
 80032e6:	4602      	mov	r2, r0
 80032e8:	88bb      	ldrh	r3, [r7, #4]
 80032ea:	fb03 f202 	mul.w	r2, r3, r2
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4423      	add	r3, r4
 80032f6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <BSP_LCD_FillRect+0xe8>)
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	68fd      	ldr	r5, [r7, #12]
 80032fe:	887e      	ldrh	r6, [r7, #2]
 8003300:	f8b7 8000 	ldrh.w	r8, [r7]
 8003304:	f7ff fd1c 	bl	8002d40 <BSP_LCD_GetXSize>
 8003308:	4602      	mov	r2, r0
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	1ad1      	subs	r1, r2, r3
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <BSP_LCD_FillRect+0xe8>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	480b      	ldr	r0, [pc, #44]	; (8003340 <BSP_LCD_FillRect+0xec>)
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	9100      	str	r1, [sp, #0]
 8003324:	4643      	mov	r3, r8
 8003326:	4632      	mov	r2, r6
 8003328:	4629      	mov	r1, r5
 800332a:	4620      	mov	r0, r4
 800332c:	f000 f9ba 	bl	80036a4 <LL_FillBuffer>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800333a:	bf00      	nop
 800333c:	2000012c 	.word	0x2000012c
 8003340:	20000130 	.word	0x20000130
 8003344:	200099d4 	.word	0x200099d4

08003348 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b090      	sub	sp, #64	; 0x40
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003352:	4b64      	ldr	r3, [pc, #400]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a63      	ldr	r2, [pc, #396]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800336a:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a5d      	ldr	r2, [pc, #372]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b5b      	ldr	r3, [pc, #364]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003382:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003388:	f043 0310 	orr.w	r3, r3, #16
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b55      	ldr	r3, [pc, #340]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800339a:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033b2:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a4b      	ldr	r2, [pc, #300]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033ca:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a3f      	ldr	r2, [pc, #252]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80033fa:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a39      	ldr	r2, [pc, #228]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <BSP_LCD_MspInit+0x19c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800342a:	2310      	movs	r3, #16
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003436:	2302      	movs	r3, #2
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800343a:	230e      	movs	r3, #14
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800343e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003442:	4619      	mov	r1, r3
 8003444:	4828      	ldr	r0, [pc, #160]	; (80034e8 <BSP_LCD_MspInit+0x1a0>)
 8003446:	f003 f8d7 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800344a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003454:	2309      	movs	r3, #9
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345c:	4619      	mov	r1, r3
 800345e:	4823      	ldr	r0, [pc, #140]	; (80034ec <BSP_LCD_MspInit+0x1a4>)
 8003460:	f003 f8ca 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003464:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800346e:	230e      	movs	r3, #14
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003476:	4619      	mov	r1, r3
 8003478:	481d      	ldr	r0, [pc, #116]	; (80034f0 <BSP_LCD_MspInit+0x1a8>)
 800347a:	f003 f8bd 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800347e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003488:	230e      	movs	r3, #14
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	4619      	mov	r1, r3
 8003492:	4818      	ldr	r0, [pc, #96]	; (80034f4 <BSP_LCD_MspInit+0x1ac>)
 8003494:	f003 f8b0 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003498:	23f7      	movs	r3, #247	; 0xf7
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034a0:	230e      	movs	r3, #14
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80034a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a8:	4619      	mov	r1, r3
 80034aa:	4813      	ldr	r0, [pc, #76]	; (80034f8 <BSP_LCD_MspInit+0x1b0>)
 80034ac:	f003 f8a4 	bl	80065f8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80034b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80034ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034be:	4619      	mov	r1, r3
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <BSP_LCD_MspInit+0x1a8>)
 80034c2:	f003 f899 	bl	80065f8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80034c6:	2308      	movs	r3, #8
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80034ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d2:	4619      	mov	r1, r3
 80034d4:	4808      	ldr	r0, [pc, #32]	; (80034f8 <BSP_LCD_MspInit+0x1b0>)
 80034d6:	f003 f88f 	bl	80065f8 <HAL_GPIO_Init>
}
 80034da:	bf00      	nop
 80034dc:	3740      	adds	r7, #64	; 0x40
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40021800 	.word	0x40021800
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40022400 	.word	0x40022400
 80034f8:	40022800 	.word	0x40022800

080034fc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 8003508:	2208      	movs	r2, #8
 800350a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 800350e:	22c0      	movs	r2, #192	; 0xc0
 8003510:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 8003514:	2205      	movs	r2, #5
 8003516:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 800351a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003520:	4803      	ldr	r0, [pc, #12]	; (8003530 <BSP_LCD_ClockConfig+0x34>)
 8003522:	f006 fa0f 	bl	8009944 <HAL_RCCEx_PeriphCLKConfig>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000148 	.word	0x20000148

08003534 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	603a      	str	r2, [r7, #0]
 800353e:	80fb      	strh	r3, [r7, #6]
 8003540:	460b      	mov	r3, r1
 8003542:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800354c:	4b53      	ldr	r3, [pc, #332]	; (800369c <DrawChar+0x168>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4953      	ldr	r1, [pc, #332]	; (80036a0 <DrawChar+0x16c>)
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3308      	adds	r3, #8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	88db      	ldrh	r3, [r3, #6]
 8003562:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <DrawChar+0x168>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <DrawChar+0x16c>)
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3308      	adds	r3, #8
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	889b      	ldrh	r3, [r3, #4]
 800357a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800357c:	8a3b      	ldrh	r3, [r7, #16]
 800357e:	3307      	adds	r3, #7
 8003580:	2b00      	cmp	r3, #0
 8003582:	da00      	bge.n	8003586 <DrawChar+0x52>
 8003584:	3307      	adds	r3, #7
 8003586:	10db      	asrs	r3, r3, #3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8a3b      	ldrh	r3, [r7, #16]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e076      	b.n	800368a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800359c:	8a3b      	ldrh	r3, [r7, #16]
 800359e:	3307      	adds	r3, #7
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	da00      	bge.n	80035a6 <DrawChar+0x72>
 80035a4:	3307      	adds	r3, #7
 80035a6:	10db      	asrs	r3, r3, #3
 80035a8:	461a      	mov	r2, r3
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fb03 f302 	mul.w	r3, r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80035b6:	8a3b      	ldrh	r3, [r7, #16]
 80035b8:	3307      	adds	r3, #7
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da00      	bge.n	80035c0 <DrawChar+0x8c>
 80035be:	3307      	adds	r3, #7
 80035c0:	10db      	asrs	r3, r3, #3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <DrawChar+0x98>
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d004      	beq.n	80035d4 <DrawChar+0xa0>
 80035ca:	e00c      	b.n	80035e6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	617b      	str	r3, [r7, #20]
      break;
 80035d2:	e016      	b.n	8003602 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	3201      	adds	r2, #1
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e00d      	b.n	8003602 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	041a      	lsls	r2, r3, #16
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3301      	adds	r3, #1
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4313      	orrs	r3, r2
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	3202      	adds	r2, #2
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
      break;
 8003600:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e036      	b.n	8003676 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003608:	8a3a      	ldrh	r2, [r7, #16]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	1ad2      	subs	r2, r2, r3
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	4413      	add	r3, r2
 8003612:	3b01      	subs	r3, #1
 8003614:	2201      	movs	r2, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	461a      	mov	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	b29a      	uxth	r2, r3
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	4413      	add	r3, r2
 800362c:	b298      	uxth	r0, r3
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <DrawChar+0x168>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	491b      	ldr	r1, [pc, #108]	; (80036a0 <DrawChar+0x16c>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	88bb      	ldrh	r3, [r7, #4]
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff fdbe 	bl	80031c4 <BSP_LCD_DrawPixel>
 8003648:	e012      	b.n	8003670 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	b29a      	uxth	r2, r3
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	4413      	add	r3, r2
 8003652:	b298      	uxth	r0, r3
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <DrawChar+0x168>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4911      	ldr	r1, [pc, #68]	; (80036a0 <DrawChar+0x16c>)
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3304      	adds	r3, #4
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	88bb      	ldrh	r3, [r7, #4]
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff fdaa 	bl	80031c4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3301      	adds	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	8a3b      	ldrh	r3, [r7, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3c4      	bcc.n	8003608 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	3301      	adds	r3, #1
 8003682:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3301      	adds	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	8a7b      	ldrh	r3, [r7, #18]
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	429a      	cmp	r2, r3
 8003690:	d384      	bcc.n	800359c <DrawChar+0x68>
  }
}
 8003692:	bf00      	nop
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000012c 	.word	0x2000012c
 80036a0:	20000130 	.word	0x20000130

080036a4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <LL_FillBuffer+0x88>)
 80036b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036b8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036ba:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <LL_FillBuffer+0x8c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <LL_FillBuffer+0x90>)
 80036c0:	2134      	movs	r1, #52	; 0x34
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3348      	adds	r3, #72	; 0x48
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d103      	bne.n	80036d8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <LL_FillBuffer+0x88>)
 80036d2:	2202      	movs	r2, #2
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	e002      	b.n	80036de <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <LL_FillBuffer+0x88>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <LL_FillBuffer+0x88>)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <LL_FillBuffer+0x88>)
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <LL_FillBuffer+0x94>)
 80036e8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80036ea:	4810      	ldr	r0, [pc, #64]	; (800372c <LL_FillBuffer+0x88>)
 80036ec:	f001 fa62 	bl	8004bb4 <HAL_DMA2D_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d115      	bne.n	8003722 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <LL_FillBuffer+0x88>)
 80036fa:	f001 fcc9 	bl	8005090 <HAL_DMA2D_ConfigLayer>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10e      	bne.n	8003722 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69f9      	ldr	r1, [r7, #28]
 800370e:	4807      	ldr	r0, [pc, #28]	; (800372c <LL_FillBuffer+0x88>)
 8003710:	f001 fa9a 	bl	8004c48 <HAL_DMA2D_Start>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800371a:	210a      	movs	r1, #10
 800371c:	4803      	ldr	r0, [pc, #12]	; (800372c <LL_FillBuffer+0x88>)
 800371e:	f001 fabe 	bl	8004c9e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200000ec 	.word	0x200000ec
 8003730:	2000012c 	.word	0x2000012c
 8003734:	200099d4 	.word	0x200099d4
 8003738:	4002b000 	.word	0x4002b000

0800373c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003742:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <BSP_SDRAM_Init+0xb0>)
 8003744:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003746:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003748:	2202      	movs	r2, #2
 800374a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 800374e:	2207      	movs	r2, #7
 8003750:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003754:	2204      	movs	r2, #4
 8003756:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 800375a:	2207      	movs	r2, #7
 800375c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003760:	2202      	movs	r2, #2
 8003762:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 8003766:	2202      	movs	r2, #2
 8003768:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 800376c:	2202      	movs	r2, #2
 800376e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 800377e:	2204      	movs	r2, #4
 8003780:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003784:	2210      	movs	r2, #16
 8003786:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003794:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 8003798:	2200      	movs	r2, #0
 800379a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 800379e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80037b2:	2100      	movs	r1, #0
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037b6:	f000 f87f 	bl	80038b8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <BSP_SDRAM_Init+0xb4>)
 80037bc:	480a      	ldr	r0, [pc, #40]	; (80037e8 <BSP_SDRAM_Init+0xac>)
 80037be:	f007 fb6f 	bl	800aea0 <HAL_SDRAM_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <BSP_SDRAM_Init+0xb8>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <BSP_SDRAM_Init+0xb8>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80037d6:	f240 6003 	movw	r0, #1539	; 0x603
 80037da:	f000 f80d 	bl	80037f8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <BSP_SDRAM_Init+0xb8>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20009a7c 	.word	0x20009a7c
 80037ec:	a0000140 	.word	0xa0000140
 80037f0:	200001cc 	.word	0x200001cc
 80037f4:	20000004 	.word	0x20000004

080037f8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380c:	2210      	movs	r2, #16
 800380e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003812:	2201      	movs	r2, #1
 8003814:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800381c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003820:	4923      	ldr	r1, [pc, #140]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003822:	4824      	ldr	r0, [pc, #144]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003824:	f007 fb70 	bl	800af08 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f000 f96b 	bl	8003b04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003830:	2202      	movs	r2, #2
 8003832:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003836:	2210      	movs	r2, #16
 8003838:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800383c:	2201      	movs	r2, #1
 800383e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384a:	4919      	ldr	r1, [pc, #100]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800384c:	4819      	ldr	r0, [pc, #100]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800384e:	f007 fb5b 	bl	800af08 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003854:	2203      	movs	r2, #3
 8003856:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800385a:	2210      	movs	r2, #16
 800385c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003860:	2208      	movs	r2, #8
 8003862:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800386a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800386e:	4910      	ldr	r1, [pc, #64]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003870:	4810      	ldr	r0, [pc, #64]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003872:	f007 fb49 	bl	800af08 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003876:	f44f 7308 	mov.w	r3, #544	; 0x220
 800387a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800387e:	2204      	movs	r2, #4
 8003880:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003884:	2210      	movs	r2, #16
 8003886:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388a:	2201      	movs	r2, #1
 800388c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003892:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003898:	4905      	ldr	r1, [pc, #20]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800389a:	4806      	ldr	r0, [pc, #24]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800389c:	f007 fb34 	bl	800af08 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4804      	ldr	r0, [pc, #16]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a4:	f007 fb5b 	bl	800af5e <HAL_SDRAM_ProgramRefreshRate>
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200001e8 	.word	0x200001e8
 80038b4:	20009a7c 	.word	0x20009a7c

080038b8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b090      	sub	sp, #64	; 0x40
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	4a6f      	ldr	r2, [pc, #444]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6393      	str	r3, [r2, #56]	; 0x38
 80038ce:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80038da:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a69      	ldr	r2, [pc, #420]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b67      	ldr	r3, [pc, #412]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f2:	4b64      	ldr	r3, [pc, #400]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a63      	ldr	r2, [pc, #396]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800390a:	4b5e      	ldr	r3, [pc, #376]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a5d      	ldr	r2, [pc, #372]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003910:	f043 0308 	orr.w	r3, r3, #8
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003922:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a57      	ldr	r2, [pc, #348]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800393a:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a51      	ldr	r2, [pc, #324]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003940:	f043 0320 	orr.w	r3, r3, #32
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800396a:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a45      	ldr	r2, [pc, #276]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <BSP_SDRAM_MspInit+0x1cc>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003986:	2301      	movs	r3, #1
 8003988:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800398a:	2302      	movs	r3, #2
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800398e:	230c      	movs	r3, #12
 8003990:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003992:	2308      	movs	r3, #8
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800399a:	4619      	mov	r1, r3
 800399c:	483a      	ldr	r0, [pc, #232]	; (8003a88 <BSP_SDRAM_MspInit+0x1d0>)
 800399e:	f002 fe2b 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80039a2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80039a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ac:	4619      	mov	r1, r3
 80039ae:	4837      	ldr	r0, [pc, #220]	; (8003a8c <BSP_SDRAM_MspInit+0x1d4>)
 80039b0:	f002 fe22 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80039b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80039ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039be:	4619      	mov	r1, r3
 80039c0:	4833      	ldr	r0, [pc, #204]	; (8003a90 <BSP_SDRAM_MspInit+0x1d8>)
 80039c2:	f002 fe19 	bl	80065f8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80039c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80039cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d0:	4619      	mov	r1, r3
 80039d2:	4830      	ldr	r0, [pc, #192]	; (8003a94 <BSP_SDRAM_MspInit+0x1dc>)
 80039d4:	f002 fe10 	bl	80065f8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80039d8:	f248 1333 	movw	r3, #33075	; 0x8133
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e2:	4619      	mov	r1, r3
 80039e4:	482c      	ldr	r0, [pc, #176]	; (8003a98 <BSP_SDRAM_MspInit+0x1e0>)
 80039e6:	f002 fe07 	bl	80065f8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80039ea:	2328      	movs	r3, #40	; 0x28
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80039ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f2:	4619      	mov	r1, r3
 80039f4:	4829      	ldr	r0, [pc, #164]	; (8003a9c <BSP_SDRAM_MspInit+0x1e4>)
 80039f6:	f002 fdff 	bl	80065f8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a0c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a1c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a24:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003a26:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a32:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <BSP_SDRAM_MspInit+0x1ec>)
 8003a50:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
 8003a58:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003a5e:	4810      	ldr	r0, [pc, #64]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a60:	f000 fdee 	bl	8004640 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003a64:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <BSP_SDRAM_MspInit+0x1e8>)
 8003a66:	f000 fd3d 	bl	80044e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	210f      	movs	r1, #15
 8003a6e:	2038      	movs	r0, #56	; 0x38
 8003a70:	f000 fbaa 	bl	80041c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a74:	2038      	movs	r0, #56	; 0x38
 8003a76:	f000 fbc3 	bl	8004200 <HAL_NVIC_EnableIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3740      	adds	r7, #64	; 0x40
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020800 	.word	0x40020800
 8003a8c:	40020c00 	.word	0x40020c00
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40021400 	.word	0x40021400
 8003a98:	40021800 	.word	0x40021800
 8003a9c:	40021c00 	.word	0x40021c00
 8003aa0:	200001f8 	.word	0x200001f8
 8003aa4:	40026410 	.word	0x40026410

08003aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aac:	2003      	movs	r0, #3
 8003aae:	f000 fb80 	bl	80041b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f7fe ff48 	bl	8002948 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003ab8:	f7fe f80c 	bl	8001ad4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_IncTick+0x20>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_IncTick+0x24>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_IncTick+0x24>)
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000000c 	.word	0x2000000c
 8003ae8:	20009ab0 	.word	0x20009ab0

08003aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return uwTick;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_GetTick+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20009ab0 	.word	0x20009ab0

08003b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff ffee 	bl	8003aec <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d005      	beq.n	8003b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_Delay+0x40>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2a:	bf00      	nop
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d8f7      	bhi.n	8003b2c <HAL_Delay+0x28>
  {
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000000c 	.word	0x2000000c

08003b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e031      	b.n	8003bc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd ffdc 	bl	8001b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_ADC_Init+0x84>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f964 	bl	8003e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb2:	e001      	b.n	8003bb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	ffffeefd 	.word	0xffffeefd

08003bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e12a      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x272>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b09      	cmp	r3, #9
 8003bfa:	d93a      	bls.n	8003c72 <HAL_ADC_ConfigChannel+0xa2>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c04:	d035      	beq.n	8003c72 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68d9      	ldr	r1, [r3, #12]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	3b1e      	subs	r3, #30
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43da      	mvns	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	400a      	ands	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a87      	ldr	r2, [pc, #540]	; (8003e50 <HAL_ADC_ConfigChannel+0x280>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10a      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	061a      	lsls	r2, r3, #24
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c4a:	e035      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68d9      	ldr	r1, [r3, #12]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4403      	add	r3, r0
 8003c64:	3b1e      	subs	r3, #30
 8003c66:	409a      	lsls	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c70:	e022      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6919      	ldr	r1, [r3, #16]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	2207      	movs	r2, #7
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	400a      	ands	r2, r1
 8003c94:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6919      	ldr	r1, [r3, #16]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4403      	add	r3, r0
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d824      	bhi.n	8003d0a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	3b05      	subs	r3, #5
 8003cd2:	221f      	movs	r2, #31
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	400a      	ands	r2, r1
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b05      	subs	r3, #5
 8003cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	635a      	str	r2, [r3, #52]	; 0x34
 8003d08:	e04c      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d824      	bhi.n	8003d5c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	3b23      	subs	r3, #35	; 0x23
 8003d24:	221f      	movs	r2, #31
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	400a      	ands	r2, r1
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b23      	subs	r3, #35	; 0x23
 8003d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5a:	e023      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b41      	subs	r3, #65	; 0x41
 8003d6e:	221f      	movs	r2, #31
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43da      	mvns	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	3b41      	subs	r3, #65	; 0x41
 8003d98:	fa00 f203 	lsl.w	r2, r0, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <HAL_ADC_ConfigChannel+0x284>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10a      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x1f4>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_ADC_ConfigChannel+0x288>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <HAL_ADC_ConfigChannel+0x288>)
 8003dbe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003dc2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_ADC_ConfigChannel+0x284>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d109      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x212>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b12      	cmp	r3, #18
 8003dd4:	d105      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_ADC_ConfigChannel+0x288>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_ADC_ConfigChannel+0x288>)
 8003ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_ADC_ConfigChannel+0x284>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d125      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x268>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_ADC_ConfigChannel+0x280>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <HAL_ADC_ConfigChannel+0x22e>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b11      	cmp	r3, #17
 8003dfc:	d11c      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_ADC_ConfigChannel+0x288>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <HAL_ADC_ConfigChannel+0x288>)
 8003e04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_ADC_ConfigChannel+0x280>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_ADC_ConfigChannel+0x28c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <HAL_ADC_ConfigChannel+0x290>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9a      	lsrs	r2, r3, #18
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e2a:	e002      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	10000012 	.word	0x10000012
 8003e54:	40012000 	.word	0x40012000
 8003e58:	40012300 	.word	0x40012300
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	431bde83 	.word	0x431bde83

08003e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003e6c:	4b78      	ldr	r3, [pc, #480]	; (8004050 <ADC_Init+0x1ec>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a77      	ldr	r2, [pc, #476]	; (8004050 <ADC_Init+0x1ec>)
 8003e72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003e78:	4b75      	ldr	r3, [pc, #468]	; (8004050 <ADC_Init+0x1ec>)
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4973      	ldr	r1, [pc, #460]	; (8004050 <ADC_Init+0x1ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	021a      	lsls	r2, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6899      	ldr	r1, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	4a58      	ldr	r2, [pc, #352]	; (8004054 <ADC_Init+0x1f0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6899      	ldr	r1, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6899      	ldr	r1, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	e00f      	b.n	8003f5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0202 	bic.w	r2, r2, #2
 8003f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	005a      	lsls	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003faa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	035a      	lsls	r2, r3, #13
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e007      	b.n	8003fd4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	051a      	lsls	r2, r3, #20
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004016:	025a      	lsls	r2, r3, #9
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	029a      	lsls	r2, r3, #10
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40012300 	.word	0x40012300
 8004054:	0f000001 	.word	0x0f000001

08004058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <__NVIC_SetPriorityGrouping+0x40>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004074:	4013      	ands	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <__NVIC_SetPriorityGrouping+0x44>)
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <__NVIC_SetPriorityGrouping+0x40>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	60d3      	str	r3, [r2, #12]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000ed00 	.word	0xe000ed00
 800409c:	05fa0000 	.word	0x05fa0000

080040a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <__NVIC_GetPriorityGrouping+0x18>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	f003 0307 	and.w	r3, r3, #7
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db0b      	blt.n	80040e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	4907      	ldr	r1, [pc, #28]	; (80040f4 <__NVIC_EnableIRQ+0x38>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2001      	movs	r0, #1
 80040de:	fa00 f202 	lsl.w	r2, r0, r2
 80040e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	e000e100 	.word	0xe000e100

080040f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	6039      	str	r1, [r7, #0]
 8004102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004108:	2b00      	cmp	r3, #0
 800410a:	db0a      	blt.n	8004122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	490c      	ldr	r1, [pc, #48]	; (8004144 <__NVIC_SetPriority+0x4c>)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	440b      	add	r3, r1
 800411c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004120:	e00a      	b.n	8004138 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4908      	ldr	r1, [pc, #32]	; (8004148 <__NVIC_SetPriority+0x50>)
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3b04      	subs	r3, #4
 8004130:	0112      	lsls	r2, r2, #4
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	440b      	add	r3, r1
 8004136:	761a      	strb	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000e100 	.word	0xe000e100
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f1c3 0307 	rsb	r3, r3, #7
 8004166:	2b04      	cmp	r3, #4
 8004168:	bf28      	it	cs
 800416a:	2304      	movcs	r3, #4
 800416c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3304      	adds	r3, #4
 8004172:	2b06      	cmp	r3, #6
 8004174:	d902      	bls.n	800417c <NVIC_EncodePriority+0x30>
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3b03      	subs	r3, #3
 800417a:	e000      	b.n	800417e <NVIC_EncodePriority+0x32>
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	401a      	ands	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43d9      	mvns	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a4:	4313      	orrs	r3, r2
         );
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff ff4c 	bl	8004058 <__NVIC_SetPriorityGrouping>
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041da:	f7ff ff61 	bl	80040a0 <__NVIC_GetPriorityGrouping>
 80041de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	6978      	ldr	r0, [r7, #20]
 80041e6:	f7ff ffb1 	bl	800414c <NVIC_EncodePriority>
 80041ea:	4602      	mov	r2, r0
 80041ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff80 	bl	80040f8 <__NVIC_SetPriority>
}
 80041f8:	bf00      	nop
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff54 	bl	80040bc <__NVIC_EnableIRQ>
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e054      	b.n	80042d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7f5b      	ldrb	r3, [r3, #29]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fcca 	bl	8001bd8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	791b      	ldrb	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10c      	bne.n	800426c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_CRC_Init+0xc4>)
 8004258:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0218 	bic.w	r2, r2, #24
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	e00c      	b.n	8004286 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6899      	ldr	r1, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	461a      	mov	r2, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f834 	bl	80042e4 <HAL_CRCEx_Polynomial_Set>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e028      	b.n	80042d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	795b      	ldrb	r3, [r3, #5]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004296:	611a      	str	r2, [r3, #16]
 8004298:	e004      	b.n	80042a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6912      	ldr	r2, [r2, #16]
 80042a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	04c11db7 	.word	0x04c11db7

080042e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80042f4:	231f      	movs	r3, #31
 80042f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80042f8:	bf00      	nop
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	613a      	str	r2, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_CRCEx_Polynomial_Set+0x34>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b18      	cmp	r3, #24
 800431c:	d846      	bhi.n	80043ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	080043b3 	.word	0x080043b3
 8004328:	080043ad 	.word	0x080043ad
 800432c:	080043ad 	.word	0x080043ad
 8004330:	080043ad 	.word	0x080043ad
 8004334:	080043ad 	.word	0x080043ad
 8004338:	080043ad 	.word	0x080043ad
 800433c:	080043ad 	.word	0x080043ad
 8004340:	080043ad 	.word	0x080043ad
 8004344:	080043a1 	.word	0x080043a1
 8004348:	080043ad 	.word	0x080043ad
 800434c:	080043ad 	.word	0x080043ad
 8004350:	080043ad 	.word	0x080043ad
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043ad 	.word	0x080043ad
 800435c:	080043ad 	.word	0x080043ad
 8004360:	080043ad 	.word	0x080043ad
 8004364:	08004395 	.word	0x08004395
 8004368:	080043ad 	.word	0x080043ad
 800436c:	080043ad 	.word	0x080043ad
 8004370:	080043ad 	.word	0x080043ad
 8004374:	080043ad 	.word	0x080043ad
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043ad 	.word	0x080043ad
 8004380:	080043ad 	.word	0x080043ad
 8004384:	08004389 	.word	0x08004389
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d913      	bls.n	80043b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004392:	e010      	b.n	80043b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b07      	cmp	r3, #7
 8004398:	d90f      	bls.n	80043ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800439e:	e00c      	b.n	80043ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	d90b      	bls.n	80043be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80043aa:	e008      	b.n	80043be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
      break;
 80043b0:	e006      	b.n	80043c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043b2:	bf00      	nop
 80043b4:	e004      	b.n	80043c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043be:	bf00      	nop
  }
  if (status == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 0118 	bic.w	r1, r3, #24
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e069      	b.n	80044d6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fc02 	bl	8001c18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_DCMI_Init+0xf0>)
 8004436:	400b      	ands	r3, r1
 8004438:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800444e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800445a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004466:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004472:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800447e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b10      	cmp	r3, #16
 800448e:	d112      	bne.n	80044b6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7f1b      	ldrb	r3, [r3, #28]
 8004494:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	7f5b      	ldrb	r3, [r3, #29]
 800449a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800449c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7f9b      	ldrb	r3, [r3, #30]
 80044a2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	7fdb      	ldrb	r3, [r3, #31]
 80044ac:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80044b2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044b4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 021e 	orr.w	r2, r2, #30
 80044c4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	ffe0f007 	.word	0xffe0f007

080044e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044f0:	f7ff fafc 	bl	8003aec <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e099      	b.n	8004634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004520:	e00f      	b.n	8004542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004522:	f7ff fae3 	bl	8003aec <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b05      	cmp	r3, #5
 800452e:	d908      	bls.n	8004542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2203      	movs	r2, #3
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e078      	b.n	8004634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e8      	bne.n	8004522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <HAL_DMA_Init+0x158>)
 800455c:	4013      	ands	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b04      	cmp	r3, #4
 800459a:	d107      	bne.n	80045ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	4313      	orrs	r3, r2
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0307 	bic.w	r3, r3, #7
 80045c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d117      	bne.n	8004606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fa69 	bl	8004ac0 <DMA_CheckFifoParam>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004602:	2301      	movs	r3, #1
 8004604:	e016      	b.n	8004634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa20 	bl	8004a54 <DMA_CalcBaseAndBitshift>
 8004614:	4603      	mov	r3, r0
 8004616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	223f      	movs	r2, #63	; 0x3f
 800461e:	409a      	lsls	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	f010803f 	.word	0xf010803f

08004640 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e050      	b.n	80046f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d101      	bne.n	8004662 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	e048      	b.n	80046f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2200      	movs	r2, #0
 8004680:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2221      	movs	r2, #33	; 0x21
 80046a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9d6 	bl	8004a54 <DMA_CalcBaseAndBitshift>
 80046a8:	4603      	mov	r3, r0
 80046aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	223f      	movs	r2, #63	; 0x3f
 80046b2:	409a      	lsls	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d004      	beq.n	800471a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e00c      	b.n	8004734 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2205      	movs	r2, #5
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800474c:	4b92      	ldr	r3, [pc, #584]	; (8004998 <HAL_DMA_IRQHandler+0x258>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a92      	ldr	r2, [pc, #584]	; (800499c <HAL_DMA_IRQHandler+0x25c>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0a9b      	lsrs	r3, r3, #10
 8004758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	2208      	movs	r2, #8
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01a      	beq.n	80047ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0204 	bic.w	r2, r2, #4
 8004792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004798:	2208      	movs	r2, #8
 800479a:	409a      	lsls	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f043 0201 	orr.w	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	2201      	movs	r2, #1
 80047b2:	409a      	lsls	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	2201      	movs	r2, #1
 80047d0:	409a      	lsls	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f043 0202 	orr.w	r2, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	2204      	movs	r2, #4
 80047e8:	409a      	lsls	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d012      	beq.n	8004818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	2204      	movs	r2, #4
 8004806:	409a      	lsls	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f043 0204 	orr.w	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	2210      	movs	r2, #16
 800481e:	409a      	lsls	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d043      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03c      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	2210      	movs	r2, #16
 800483c:	409a      	lsls	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d018      	beq.n	8004882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d024      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
 800486e:	e01f      	b.n	80048b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
 8004880:	e016      	b.n	80048b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d107      	bne.n	80048a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0208 	bic.w	r2, r2, #8
 800489e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	2220      	movs	r2, #32
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 808e 	beq.w	80049de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8086 	beq.w	80049de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	2220      	movs	r2, #32
 80048d8:	409a      	lsls	r2, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d136      	bne.n	8004958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0216 	bic.w	r2, r2, #22
 80048f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_DMA_IRQHandler+0x1da>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0208 	bic.w	r2, r2, #8
 8004928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	223f      	movs	r2, #63	; 0x3f
 8004930:	409a      	lsls	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	2b00      	cmp	r3, #0
 800494c:	d07d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
        }
        return;
 8004956:	e078      	b.n	8004a4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01c      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	2b00      	cmp	r3, #0
 800497a:	d030      	beq.n	80049de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
 8004984:	e02b      	b.n	80049de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d027      	beq.n	80049de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
 8004996:	e022      	b.n	80049de <HAL_DMA_IRQHandler+0x29e>
 8004998:	20000000 	.word	0x20000000
 800499c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0210 	bic.w	r2, r2, #16
 80049bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d032      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d022      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2205      	movs	r2, #5
 80049f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d307      	bcc.n	8004a26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f2      	bne.n	8004a0a <HAL_DMA_IRQHandler+0x2ca>
 8004a24:	e000      	b.n	8004a28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e000      	b.n	8004a4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a4a:	bf00      	nop
    }
  }
}
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop

08004a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3b10      	subs	r3, #16
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x60>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x64>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d908      	bls.n	8004a94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <DMA_CalcBaseAndBitshift+0x68>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	659a      	str	r2, [r3, #88]	; 0x58
 8004a92:	e006      	b.n	8004aa2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <DMA_CalcBaseAndBitshift+0x68>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	aaaaaaab 	.word	0xaaaaaaab
 8004ab8:	08028eb4 	.word	0x08028eb4
 8004abc:	fffffc00 	.word	0xfffffc00

08004ac0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11f      	bne.n	8004b1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d855      	bhi.n	8004b8c <DMA_CheckFifoParam+0xcc>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <DMA_CheckFifoParam+0x28>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b0b 	.word	0x08004b0b
 8004af0:	08004af9 	.word	0x08004af9
 8004af4:	08004b8d 	.word	0x08004b8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d045      	beq.n	8004b90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b08:	e042      	b.n	8004b90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b12:	d13f      	bne.n	8004b94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b18:	e03c      	b.n	8004b94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b22:	d121      	bne.n	8004b68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d836      	bhi.n	8004b98 <DMA_CheckFifoParam+0xd8>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <DMA_CheckFifoParam+0x70>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b47 	.word	0x08004b47
 8004b38:	08004b41 	.word	0x08004b41
 8004b3c:	08004b59 	.word	0x08004b59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e02f      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d024      	beq.n	8004b9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b56:	e021      	b.n	8004b9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b60:	d11e      	bne.n	8004ba0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b66:	e01b      	b.n	8004ba0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d902      	bls.n	8004b74 <DMA_CheckFifoParam+0xb4>
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d003      	beq.n	8004b7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b72:	e018      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e015      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00e      	beq.n	8004ba4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8a:	e00b      	b.n	8004ba4 <DMA_CheckFifoParam+0xe4>
      break;
 8004b8c:	bf00      	nop
 8004b8e:	e00a      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8004b90:	bf00      	nop
 8004b92:	e008      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8004b94:	bf00      	nop
 8004b96:	e006      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8004b98:	bf00      	nop
 8004b9a:	e004      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8004b9c:	bf00      	nop
 8004b9e:	e002      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;   
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ba4:	bf00      	nop
    }
  } 
  
  return status; 
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e039      	b.n	8004c3a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd f8da 	bl	8001d94 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	f023 0107 	bic.w	r1, r3, #7
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_DMA2D_Init+0x90>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d1      	ldr	r1, [r2, #12]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	430b      	orrs	r3, r1
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	ffffc000 	.word	0xffffc000

08004c48 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_DMA2D_Start+0x1c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e018      	b.n	8004c96 <HAL_DMA2D_Start+0x4e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fa98 	bl	80051b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d056      	beq.n	8004d68 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fe ff17 	bl	8003aec <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004cc0:	e04b      	b.n	8004d5a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d023      	beq.n	8004d1c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	f043 0202 	orr.w	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2221      	movs	r2, #33	; 0x21
 8004d06:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0a5      	b.n	8004e68 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d22:	d01a      	beq.n	8004d5a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fe fee2 	bl	8003aec <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <HAL_DMA2D_PollForTransfer+0x9c>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e086      	b.n	8004e68 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ac      	beq.n	8004cc2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d061      	beq.n	8004e4e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8a:	f7fe feaf 	bl	8003aec <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d90:	e056      	b.n	8004e40 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02e      	beq.n	8004e02 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	f043 0202 	orr.w	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2229      	movs	r2, #41	; 0x29
 8004dec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2204      	movs	r2, #4
 8004df2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e032      	b.n	8004e68 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e08:	d01a      	beq.n	8004e40 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fe fe6f 	bl	8003aec <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <HAL_DMA2D_PollForTransfer+0x182>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2203      	movs	r2, #3
 8004e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e013      	b.n	8004e68 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0a1      	beq.n	8004d92 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2212      	movs	r2, #18
 8004e54:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d026      	beq.n	8004ee0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d021      	beq.n	8004ee0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eaa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d026      	beq.n	8004f38 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d021      	beq.n	8004f38 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f02:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	f043 0202 	orr.w	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d026      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d021      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2208      	movs	r2, #8
 8004f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2204      	movs	r2, #4
 8004f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d013      	beq.n	8004fc2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f853 	bl	8005068 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d024      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01f      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2202      	movs	r2, #2
 8004fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01f      	beq.n	8005060 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01a      	beq.n	8005060 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2210      	movs	r2, #16
 8005040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f80e 	bl	800507c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_DMA2D_ConfigLayer+0x20>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e079      	b.n	80051a4 <HAL_DMA2D_ConfigLayer+0x114>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	3318      	adds	r3, #24
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80050da:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80050dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b0a      	cmp	r3, #10
 80050e4:	d003      	beq.n	80050ee <HAL_DMA2D_ConfigLayer+0x5e>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b09      	cmp	r3, #9
 80050ec:	d107      	bne.n	80050fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e005      	b.n	800510a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d120      	bne.n	8005152 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	43db      	mvns	r3, r3
 800511a:	ea02 0103 	and.w	r1, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	430a      	orrs	r2, r1
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b0a      	cmp	r3, #10
 8005138:	d003      	beq.n	8005142 <HAL_DMA2D_ConfigLayer+0xb2>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b09      	cmp	r3, #9
 8005140:	d127      	bne.n	8005192 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800514e:	629a      	str	r2, [r3, #40]	; 0x28
 8005150:	e01f      	b.n	8005192 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	43db      	mvns	r3, r3
 800515c:	ea02 0103 	and.w	r1, r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	430a      	orrs	r2, r1
 8005168:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b0a      	cmp	r3, #10
 800517a:	d003      	beq.n	8005184 <HAL_DMA2D_ConfigLayer+0xf4>
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b09      	cmp	r3, #9
 8005182:	d106      	bne.n	8005192 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005190:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	ff03000f 	.word	0xff03000f

080051b4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b08b      	sub	sp, #44	; 0x2c
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	041a      	lsls	r2, r3, #16
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051ec:	d174      	bne.n	80052d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005204:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d108      	bne.n	8005226 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	431a      	orrs	r2, r3
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	4313      	orrs	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	e053      	b.n	80052ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d106      	bne.n	800523c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4313      	orrs	r3, r2
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	e048      	b.n	80052ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d111      	bne.n	8005268 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	0cdb      	lsrs	r3, r3, #19
 8005248:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	0a9b      	lsrs	r3, r3, #10
 800524e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	02db      	lsls	r3, r3, #11
 800525e:	4313      	orrs	r3, r2
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
 8005266:	e032      	b.n	80052ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d117      	bne.n	80052a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	0fdb      	lsrs	r3, r3, #31
 8005274:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	0cdb      	lsrs	r3, r3, #19
 800527a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	0adb      	lsrs	r3, r3, #11
 8005280:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	431a      	orrs	r2, r3
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	03db      	lsls	r3, r3, #15
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	e016      	b.n	80052ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	0f1b      	lsrs	r3, r3, #28
 80052a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	0d1b      	lsrs	r3, r3, #20
 80052aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	0b1b      	lsrs	r3, r3, #12
 80052b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	431a      	orrs	r2, r3
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80052d6:	e003      	b.n	80052e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	60da      	str	r2, [r3, #12]
}
 80052e0:	bf00      	nop
 80052e2:	372c      	adds	r7, #44	; 0x2c
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80052fc:	4ba9      	ldr	r3, [pc, #676]	; (80055a4 <HAL_ETH_Init+0x2b8>)
 80052fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e183      	b.n	800561a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f008 fe72 	bl	800e010 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532c:	4b9e      	ldr	r3, [pc, #632]	; (80055a8 <HAL_ETH_Init+0x2bc>)
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	4a9d      	ldr	r2, [pc, #628]	; (80055a8 <HAL_ETH_Init+0x2bc>)
 8005332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005336:	6453      	str	r3, [r2, #68]	; 0x44
 8005338:	4b9b      	ldr	r3, [pc, #620]	; (80055a8 <HAL_ETH_Init+0x2bc>)
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005344:	4b99      	ldr	r3, [pc, #612]	; (80055ac <HAL_ETH_Init+0x2c0>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a98      	ldr	r2, [pc, #608]	; (80055ac <HAL_ETH_Init+0x2c0>)
 800534a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800534e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005350:	4b96      	ldr	r3, [pc, #600]	; (80055ac <HAL_ETH_Init+0x2c0>)
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	4994      	ldr	r1, [pc, #592]	; (80055ac <HAL_ETH_Init+0x2c0>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005374:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005376:	f7fe fbb9 	bl	8003aec <HAL_GetTick>
 800537a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800537c:	e011      	b.n	80053a2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800537e:	f7fe fbb5 	bl	8003aec <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800538c:	d909      	bls.n	80053a2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2203      	movs	r2, #3
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e13b      	b.n	800561a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e4      	bne.n	800537e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f023 031c 	bic.w	r3, r3, #28
 80053c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80053c4:	f004 fa58 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 80053c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4a78      	ldr	r2, [pc, #480]	; (80055b0 <HAL_ETH_Init+0x2c4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d908      	bls.n	80053e4 <HAL_ETH_Init+0xf8>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	4a77      	ldr	r2, [pc, #476]	; (80055b4 <HAL_ETH_Init+0x2c8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d804      	bhi.n	80053e4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	e027      	b.n	8005434 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	4a73      	ldr	r2, [pc, #460]	; (80055b4 <HAL_ETH_Init+0x2c8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d908      	bls.n	80053fe <HAL_ETH_Init+0x112>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	4a72      	ldr	r2, [pc, #456]	; (80055b8 <HAL_ETH_Init+0x2cc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d804      	bhi.n	80053fe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f043 030c 	orr.w	r3, r3, #12
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e01a      	b.n	8005434 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4a6d      	ldr	r2, [pc, #436]	; (80055b8 <HAL_ETH_Init+0x2cc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d903      	bls.n	800540e <HAL_ETH_Init+0x122>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	4a6c      	ldr	r2, [pc, #432]	; (80055bc <HAL_ETH_Init+0x2d0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d911      	bls.n	8005432 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4a6a      	ldr	r2, [pc, #424]	; (80055bc <HAL_ETH_Init+0x2d0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d908      	bls.n	8005428 <HAL_ETH_Init+0x13c>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	4a69      	ldr	r2, [pc, #420]	; (80055c0 <HAL_ETH_Init+0x2d4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d804      	bhi.n	8005428 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f043 0304 	orr.w	r3, r3, #4
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	e005      	b.n	8005434 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f043 0310 	orr.w	r3, r3, #16
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e000      	b.n	8005434 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005432:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800543c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005440:	2100      	movs	r1, #0
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fc19 	bl	8005c7a <HAL_ETH_WritePHYRegister>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8005452:	6939      	ldr	r1, [r7, #16]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fdcf 	bl	8005ff8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0d9      	b.n	800561a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8005466:	f640 70ff 	movw	r0, #4095	; 0xfff
 800546a:	f7fe fb4b 	bl	8003b04 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a6 	beq.w	80055c4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005478:	f7fe fb38 	bl	8003aec <HAL_GetTick>
 800547c:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800547e:	f107 030c 	add.w	r3, r7, #12
 8005482:	461a      	mov	r2, r3
 8005484:	2101      	movs	r1, #1
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb8f 	bl	8005baa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800548c:	f7fe fb2e 	bl	8003aec <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	; 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d90f      	bls.n	80054be <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80054a2:	6939      	ldr	r1, [r7, #16]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fda7 	bl	8005ff8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e0ad      	b.n	800561a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0da      	beq.n	800547e <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80054c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054cc:	2100      	movs	r1, #0
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fbd3 	bl	8005c7a <HAL_ETH_WritePHYRegister>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fd89 	bl	8005ff8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80054ee:	2301      	movs	r3, #1
 80054f0:	e093      	b.n	800561a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f2:	f7fe fafb 	bl	8003aec <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	461a      	mov	r2, r3
 80054fe:	2101      	movs	r1, #1
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fb52 	bl	8005baa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005506:	f7fe faf1 	bl	8003aec <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d90f      	bls.n	8005538 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fd6a 	bl	8005ff8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e070      	b.n	800561a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0da      	beq.n	80054f8 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005542:	f107 030c 	add.w	r3, r7, #12
 8005546:	461a      	mov	r2, r3
 8005548:	211f      	movs	r1, #31
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb2d 	bl	8005baa <HAL_ETH_ReadPHYRegister>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fd4b 	bl	8005ff8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800556a:	2301      	movs	r3, #1
 800556c:	e055      	b.n	800561a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e002      	b.n	8005588 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	e036      	b.n	8005608 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	e031      	b.n	8005608 <HAL_ETH_Init+0x31c>
 80055a4:	03938700 	.word	0x03938700
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40013800 	.word	0x40013800
 80055b0:	01312cff 	.word	0x01312cff
 80055b4:	02160ebf 	.word	0x02160ebf
 80055b8:	039386ff 	.word	0x039386ff
 80055bc:	05f5e0ff 	.word	0x05f5e0ff
 80055c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80055d4:	4313      	orrs	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	2100      	movs	r1, #0
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb4c 	bl	8005c7a <HAL_ETH_WritePHYRegister>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80055ec:	6939      	ldr	r1, [r7, #16]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fd02 	bl	8005ff8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e00c      	b.n	800561a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005600:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005604:	f7fe fa7e 	bl	8003b04 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005608:	6939      	ldr	r1, [r7, #16]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fcf4 	bl	8005ff8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop

08005624 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_ETH_DMATxDescListInit+0x20>
 8005640:	2302      	movs	r3, #2
 8005642:	e052      	b.n	80056ea <HAL_ETH_DMATxDescListInit+0xc6>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e030      	b.n	80056c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	015b      	lsls	r3, r3, #5
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	4413      	add	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005670:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	461a      	mov	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	3b01      	subs	r3, #1
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d208      	bcs.n	80056b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	3301      	adds	r3, #1
 80056a8:	015b      	lsls	r3, r3, #5
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	4413      	add	r3, r2
 80056ae:	461a      	mov	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	e002      	b.n	80056bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3301      	adds	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3ca      	bcc.n	8005660 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6819      	ldr	r1, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	f241 0310 	movw	r3, #4112	; 0x1010
 80056d4:	440b      	add	r3, r1
 80056d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b087      	sub	sp, #28
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_ETH_DMARxDescListInit+0x20>
 8005712:	2302      	movs	r3, #2
 8005714:	e056      	b.n	80057c4 <HAL_ETH_DMARxDescListInit+0xce>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e034      	b.n	800579c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	015b      	lsls	r3, r3, #5
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	4413      	add	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005742:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800574a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	461a      	mov	r2, r3
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	3b01      	subs	r3, #1
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	429a      	cmp	r2, r3
 800577c:	d208      	bcs.n	8005790 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	3301      	adds	r3, #1
 8005782:	015b      	lsls	r3, r3, #5
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	4413      	add	r3, r2
 8005788:	461a      	mov	r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e002      	b.n	8005796 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3301      	adds	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3c6      	bcc.n	8005732 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6819      	ldr	r1, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80057ae:	440b      	add	r3, r1
 80057b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_ETH_TransmitFrame+0x24>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0cd      	b.n	8005990 <HAL_ETH_TransmitFrame+0x1c0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800581a:	2301      	movs	r3, #1
 800581c:	e0b8      	b.n	8005990 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	da09      	bge.n	800583c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2212      	movs	r2, #18
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0a9      	b.n	8005990 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005842:	4293      	cmp	r3, r2
 8005844:	d915      	bls.n	8005872 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	4a54      	ldr	r2, [pc, #336]	; (800599c <HAL_ETH_TransmitFrame+0x1cc>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	0a9b      	lsrs	r3, r3, #10
 8005850:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4b51      	ldr	r3, [pc, #324]	; (800599c <HAL_ETH_TransmitFrame+0x1cc>)
 8005856:	fba3 1302 	umull	r1, r3, r3, r2
 800585a:	0a9b      	lsrs	r3, r3, #10
 800585c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e001      	b.n	8005876 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11c      	bne.n	80058b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800588a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005896:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80058a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80058b4:	e04b      	b.n	800594e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e044      	b.n	8005946 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80058ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d116      	bne.n	8005924 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005904:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800590a:	fb02 f203 	mul.w	r2, r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	4413      	add	r3, r2
 8005912:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005916:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005922:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005932:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3301      	adds	r3, #1
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	429a      	cmp	r2, r3
 800594c:	d3b6      	bcc.n	80058bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f241 0314 	movw	r3, #4116	; 0x1014
 8005956:	4413      	add	r3, r2
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	f241 0314 	movw	r3, #4116	; 0x1014
 800596a:	4413      	add	r3, r2
 800596c:	2204      	movs	r2, #4
 800596e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f241 0304 	movw	r3, #4100	; 0x1004
 8005978:	4413      	add	r3, r2
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	ac02b00b 	.word	0xac02b00b
 80059a0:	fffffa0c 	.word	0xfffffa0c

080059a4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e074      	b.n	8005aa8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80059ce:	e05a      	b.n	8005a86 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e4:	d10d      	bne.n	8005a02 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005a00:	e041      	b.n	8005a86 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	461a      	mov	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
 8005a26:	e02e      	b.n	8005a86 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d103      	bne.n	8005a4a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005a56:	1f1a      	subs	r2, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e010      	b.n	8005aa8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db02      	blt.n	8005a96 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d99c      	bls.n	80059d0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f241 0314 	movw	r3, #4116	; 0x1014
 8005ac4:	4413      	add	r3, r2
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d112      	bne.n	8005af6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f008 fb3f 	bl	800e154 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	f241 0314 	movw	r3, #4116	; 0x1014
 8005ade:	4413      	add	r3, r2
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af4:	e01b      	b.n	8005b2e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f241 0314 	movw	r3, #4116	; 0x1014
 8005afe:	4413      	add	r3, r2
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d111      	bne.n	8005b2e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f839 	bl	8005b82 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b18:	4413      	add	r3, r2
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b36:	4413      	add	r3, r2
 8005b38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b3c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b46:	4413      	add	r3, r2
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b52:	d112      	bne.n	8005b7a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f81e 	bl	8005b96 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b62:	4413      	add	r3, r2
 8005b64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005b68:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b82      	cmp	r3, #130	; 0x82
 8005bca:	d101      	bne.n	8005bd0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e050      	b.n	8005c72 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2282      	movs	r2, #130	; 0x82
 8005bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f003 031c 	and.w	r3, r3, #28
 8005be6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8a1b      	ldrh	r3, [r3, #16]
 8005bec:	02db      	lsls	r3, r3, #11
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005bf6:	897b      	ldrh	r3, [r7, #10]
 8005bf8:	019b      	lsls	r3, r3, #6
 8005bfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0302 	bic.w	r3, r3, #2
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1c:	f7fd ff66 	bl	8003aec <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005c22:	e015      	b.n	8005c50 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005c24:	f7fd ff62 	bl	8003aec <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c32:	d309      	bcc.n	8005c48 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e014      	b.n	8005c72 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e4      	bne.n	8005c24 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	460b      	mov	r3, r1
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b42      	cmp	r3, #66	; 0x42
 8005c9a:	d101      	bne.n	8005ca0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e04e      	b.n	8005d3e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2242      	movs	r2, #66	; 0x42
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f003 031c 	and.w	r3, r3, #28
 8005cb6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8a1b      	ldrh	r3, [r3, #16]
 8005cbc:	02db      	lsls	r3, r3, #11
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005cc6:	897b      	ldrh	r3, [r7, #10]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f043 0302 	orr.w	r3, r3, #2
 8005cda:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf6:	f7fd fef9 	bl	8003aec <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005cfc:	e015      	b.n	8005d2a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005cfe:	f7fd fef5 	bl	8003aec <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d309      	bcc.n	8005d22 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e00d      	b.n	8005d3e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e4      	bne.n	8005cfe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_ETH_Start+0x16>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e01f      	b.n	8005d9c <HAL_ETH_Start+0x56>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb45 	bl	80063fc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fb7c 	bl	8006470 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fc13 	bl	80065a4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fbb0 	bl	80064e4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbdd 	bl	8006544 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_ETH_Stop+0x16>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e01f      	b.n	8005dfa <HAL_ETH_Stop+0x56>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fba2 	bl	8006514 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fbcf 	bl	8006574 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fb67 	bl	80064aa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbe1 	bl	80065a4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fb27 	bl	8006436 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_ETH_ConfigMAC+0x1c>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e0e4      	b.n	8005fea <HAL_ETH_ConfigMAC+0x1e6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80b1 	beq.w	8005f9a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4b6c      	ldr	r3, [pc, #432]	; (8005ff4 <HAL_ETH_ConfigMAC+0x1f0>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005e50:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005e56:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005e5c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005e62:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005e68:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005e6e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005e74:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005e7a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005e80:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8005e86:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005e8c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005e92:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005eaa:	2001      	movs	r0, #1
 8005eac:	f7fd fe2a 	bl	8003b04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005ec0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005ec6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005ecc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005ed2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005ed8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005ede:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005eea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005eec:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	f7fd fe04 	bl	8003b04 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f0c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f16:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005f26:	4013      	ands	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005f34:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005f3a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005f40:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005f46:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005f4c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f64:	2001      	movs	r0, #1
 8005f66:	f7fd fdcd 	bl	8003b04 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	f7fd fdba 	bl	8003b04 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	61da      	str	r2, [r3, #28]
 8005f98:	e01e      	b.n	8005fd8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005fa8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fca:	2001      	movs	r0, #1
 8005fcc:	f7fd fd9a 	bl	8003b04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	ff20810f 	.word	0xff20810f

08005ff8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b0b0      	sub	sp, #192	; 0xc0
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006014:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800601c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800601e:	2300      	movs	r3, #0
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8006022:	2300      	movs	r3, #0
 8006024:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8006026:	2300      	movs	r3, #0
 8006028:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800602a:	2300      	movs	r3, #0
 800602c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800602e:	2300      	movs	r3, #0
 8006030:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8006032:	2300      	movs	r3, #0
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800603e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006042:	663b      	str	r3, [r7, #96]	; 0x60
 8006044:	e001      	b.n	800604a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8006046:	2300      	movs	r3, #0
 8006048:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800604a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006054:	2300      	movs	r3, #0
 8006056:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8006058:	2300      	movs	r3, #0
 800605a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800605c:	2300      	movs	r3, #0
 800605e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8006060:	2300      	movs	r3, #0
 8006062:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800606e:	2300      	movs	r3, #0
 8006070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800607a:	2300      	movs	r3, #0
 800607c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8006080:	2300      	movs	r3, #0
 8006082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8006092:	2300      	movs	r3, #0
 8006094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800609e:	2300      	movs	r3, #0
 80060a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80060b6:	2300      	movs	r3, #0
 80060b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80060cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80060d0:	4bab      	ldr	r3, [pc, #684]	; (8006380 <ETH_MACDMAConfig+0x388>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80060d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80060dc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80060de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80060e0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80060e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80060e4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80060ea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80060ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80060ee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80060f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80060f2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80060f8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80060fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80060fc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80060fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8006100:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8006102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8006104:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8006106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8006108:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800610a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800610c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800610e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006120:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800612c:	2001      	movs	r0, #1
 800612e:	f7fd fce9 	bl	8003b04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800613a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800613c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800613e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006140:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8006142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8006144:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8006146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800614a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800614c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8006150:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8006152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8006156:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8006158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800615c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8006160:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8006168:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800616a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006176:	2001      	movs	r0, #1
 8006178:	f7fd fcc4 	bl	8003b04 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006184:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800618e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006198:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80061a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80061a8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80061ac:	4013      	ands	r3, r2
 80061ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80061b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80061b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80061bc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80061be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80061c2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80061c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80061c8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80061ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80061ce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80061d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80061d4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80061d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80061e8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7fd fc85 	bl	8003b04 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006202:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006204:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8006208:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800621e:	2001      	movs	r0, #1
 8006220:	f7fd fc70 	bl	8003b04 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800622c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8006232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006236:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800623c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006240:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800624a:	2300      	movs	r3, #0
 800624c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800624e:	2300      	movs	r3, #0
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006252:	2304      	movs	r3, #4
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8006256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800625c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006260:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8006272:	2300      	movs	r3, #0
 8006274:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006276:	2300      	movs	r3, #0
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f241 0318 	movw	r3, #4120	; 0x1018
 8006282:	4413      	add	r3, r2
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800628a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800628e:	4b3d      	ldr	r3, [pc, #244]	; (8006384 <ETH_MACDMAConfig+0x38c>)
 8006290:	4013      	ands	r3, r2
 8006292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8006296:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8006298:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800629a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800629c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800629e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80062a0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80062a2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80062a4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80062a6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80062a8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80062aa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80062ac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80062ae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80062b2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80062b6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80062b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80062ca:	4413      	add	r3, r2
 80062cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062d0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80062da:	4413      	add	r3, r2
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80062e2:	2001      	movs	r0, #1
 80062e4:	f7fd fc0e 	bl	8003b04 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80062f0:	4413      	add	r3, r2
 80062f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062f6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80062f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80062fc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80062fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8006300:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8006304:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8006306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8006308:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800630a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800630e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8006310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8006312:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800631c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006320:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006330:	2001      	movs	r0, #1
 8006332:	f7fd fbe7 	bl	8003b04 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006342:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d10d      	bne.n	8006368 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	f241 031c 	movw	r3, #4124	; 0x101c
 8006354:	4413      	add	r3, r2
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6811      	ldr	r1, [r2, #0]
 800635c:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <ETH_MACDMAConfig+0x390>)
 800635e:	431a      	orrs	r2, r3
 8006360:	f241 031c 	movw	r3, #4124	; 0x101c
 8006364:	440b      	add	r3, r1
 8006366:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	461a      	mov	r2, r3
 800636e:	2100      	movs	r1, #0
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f80b 	bl	800638c <ETH_MACAddressConfig>
}
 8006376:	bf00      	nop
 8006378:	37c0      	adds	r7, #192	; 0xc0
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	ff20810f 	.word	0xff20810f
 8006384:	f8de3f23 	.word	0xf8de3f23
 8006388:	00010040 	.word	0x00010040

0800638c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3305      	adds	r3, #5
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	3204      	adds	r2, #4
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <ETH_MACAddressConfig+0x68>)
 80063ae:	4413      	add	r3, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3303      	adds	r3, #3
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	061a      	lsls	r2, r3, #24
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3302      	adds	r3, #2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3301      	adds	r3, #1
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	4313      	orrs	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <ETH_MACAddressConfig+0x6c>)
 80063de:	4413      	add	r3, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	6013      	str	r3, [r2, #0]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40028040 	.word	0x40028040
 80063f8:	40028044 	.word	0x40028044

080063fc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0208 	orr.w	r2, r2, #8
 8006416:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006420:	2001      	movs	r0, #1
 8006422:	f7fd fb6f 	bl	8003b04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	601a      	str	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0208 	bic.w	r2, r2, #8
 8006450:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800645a:	2001      	movs	r0, #1
 800645c:	f7fd fb52 	bl	8003b04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0204 	orr.w	r2, r2, #4
 800648a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006494:	2001      	movs	r0, #1
 8006496:	f7fd fb35 	bl	8003b04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0204 	bic.w	r2, r2, #4
 80064c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80064ce:	2001      	movs	r0, #1
 80064d0:	f7fd fb18 	bl	8003b04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80064f4:	4413      	add	r3, r2
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6811      	ldr	r1, [r2, #0]
 80064fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006500:	f241 0318 	movw	r3, #4120	; 0x1018
 8006504:	440b      	add	r3, r1
 8006506:	601a      	str	r2, [r3, #0]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	f241 0318 	movw	r3, #4120	; 0x1018
 8006524:	4413      	add	r3, r2
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6811      	ldr	r1, [r2, #0]
 800652c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006530:	f241 0318 	movw	r3, #4120	; 0x1018
 8006534:	440b      	add	r3, r1
 8006536:	601a      	str	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	f241 0318 	movw	r3, #4120	; 0x1018
 8006554:	4413      	add	r3, r2
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6811      	ldr	r1, [r2, #0]
 800655c:	f043 0202 	orr.w	r2, r3, #2
 8006560:	f241 0318 	movw	r3, #4120	; 0x1018
 8006564:	440b      	add	r3, r1
 8006566:	601a      	str	r2, [r3, #0]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	f241 0318 	movw	r3, #4120	; 0x1018
 8006584:	4413      	add	r3, r2
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6811      	ldr	r1, [r2, #0]
 800658c:	f023 0202 	bic.w	r2, r3, #2
 8006590:	f241 0318 	movw	r3, #4120	; 0x1018
 8006594:	440b      	add	r3, r1
 8006596:	601a      	str	r2, [r3, #0]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80065b8:	4413      	add	r3, r2
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6811      	ldr	r1, [r2, #0]
 80065c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80065c8:	440b      	add	r3, r1
 80065ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80065d4:	4413      	add	r3, r2
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80065da:	2001      	movs	r0, #1
 80065dc:	f7fd fa92 	bl	8003b04 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80065ea:	440b      	add	r3, r1
 80065ec:	601a      	str	r2, [r3, #0]
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	e175      	b.n	8006904 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006618:	2201      	movs	r2, #1
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4013      	ands	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	429a      	cmp	r2, r3
 8006632:	f040 8164 	bne.w	80068fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d00b      	beq.n	8006656 <HAL_GPIO_Init+0x5e>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d007      	beq.n	8006656 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800664a:	2b11      	cmp	r3, #17
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b12      	cmp	r3, #18
 8006654:	d130      	bne.n	80066b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	2203      	movs	r2, #3
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43db      	mvns	r3, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4013      	ands	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4313      	orrs	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800668c:	2201      	movs	r2, #1
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4013      	ands	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 0201 	and.w	r2, r3, #1
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	2203      	movs	r2, #3
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	43db      	mvns	r3, r3
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4013      	ands	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4313      	orrs	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d003      	beq.n	80066f8 <HAL_GPIO_Init+0x100>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b12      	cmp	r3, #18
 80066f6:	d123      	bne.n	8006740 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	08da      	lsrs	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3208      	adds	r2, #8
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	220f      	movs	r2, #15
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	08da      	lsrs	r2, r3, #3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3208      	adds	r2, #8
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	2203      	movs	r2, #3
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0203 	and.w	r2, r3, #3
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4313      	orrs	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80be 	beq.w	80068fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006782:	4b65      	ldr	r3, [pc, #404]	; (8006918 <HAL_GPIO_Init+0x320>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	4a64      	ldr	r2, [pc, #400]	; (8006918 <HAL_GPIO_Init+0x320>)
 8006788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800678c:	6453      	str	r3, [r2, #68]	; 0x44
 800678e:	4b62      	ldr	r3, [pc, #392]	; (8006918 <HAL_GPIO_Init+0x320>)
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800679a:	4a60      	ldr	r2, [pc, #384]	; (800691c <HAL_GPIO_Init+0x324>)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	3302      	adds	r3, #2
 80067a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	220f      	movs	r2, #15
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4013      	ands	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_GPIO_Init+0x328>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d037      	beq.n	8006836 <HAL_GPIO_Init+0x23e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a56      	ldr	r2, [pc, #344]	; (8006924 <HAL_GPIO_Init+0x32c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d031      	beq.n	8006832 <HAL_GPIO_Init+0x23a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a55      	ldr	r2, [pc, #340]	; (8006928 <HAL_GPIO_Init+0x330>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d02b      	beq.n	800682e <HAL_GPIO_Init+0x236>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a54      	ldr	r2, [pc, #336]	; (800692c <HAL_GPIO_Init+0x334>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d025      	beq.n	800682a <HAL_GPIO_Init+0x232>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a53      	ldr	r2, [pc, #332]	; (8006930 <HAL_GPIO_Init+0x338>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01f      	beq.n	8006826 <HAL_GPIO_Init+0x22e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a52      	ldr	r2, [pc, #328]	; (8006934 <HAL_GPIO_Init+0x33c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d019      	beq.n	8006822 <HAL_GPIO_Init+0x22a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a51      	ldr	r2, [pc, #324]	; (8006938 <HAL_GPIO_Init+0x340>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_GPIO_Init+0x226>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a50      	ldr	r2, [pc, #320]	; (800693c <HAL_GPIO_Init+0x344>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00d      	beq.n	800681a <HAL_GPIO_Init+0x222>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a4f      	ldr	r2, [pc, #316]	; (8006940 <HAL_GPIO_Init+0x348>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d007      	beq.n	8006816 <HAL_GPIO_Init+0x21e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a4e      	ldr	r2, [pc, #312]	; (8006944 <HAL_GPIO_Init+0x34c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <HAL_GPIO_Init+0x21a>
 800680e:	2309      	movs	r3, #9
 8006810:	e012      	b.n	8006838 <HAL_GPIO_Init+0x240>
 8006812:	230a      	movs	r3, #10
 8006814:	e010      	b.n	8006838 <HAL_GPIO_Init+0x240>
 8006816:	2308      	movs	r3, #8
 8006818:	e00e      	b.n	8006838 <HAL_GPIO_Init+0x240>
 800681a:	2307      	movs	r3, #7
 800681c:	e00c      	b.n	8006838 <HAL_GPIO_Init+0x240>
 800681e:	2306      	movs	r3, #6
 8006820:	e00a      	b.n	8006838 <HAL_GPIO_Init+0x240>
 8006822:	2305      	movs	r3, #5
 8006824:	e008      	b.n	8006838 <HAL_GPIO_Init+0x240>
 8006826:	2304      	movs	r3, #4
 8006828:	e006      	b.n	8006838 <HAL_GPIO_Init+0x240>
 800682a:	2303      	movs	r3, #3
 800682c:	e004      	b.n	8006838 <HAL_GPIO_Init+0x240>
 800682e:	2302      	movs	r3, #2
 8006830:	e002      	b.n	8006838 <HAL_GPIO_Init+0x240>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <HAL_GPIO_Init+0x240>
 8006836:	2300      	movs	r3, #0
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	f002 0203 	and.w	r2, r2, #3
 800683e:	0092      	lsls	r2, r2, #2
 8006840:	4093      	lsls	r3, r2
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006848:	4934      	ldr	r1, [pc, #208]	; (800691c <HAL_GPIO_Init+0x324>)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	089b      	lsrs	r3, r3, #2
 800684e:	3302      	adds	r3, #2
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006856:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <HAL_GPIO_Init+0x350>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	43db      	mvns	r3, r3
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	4013      	ands	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800687a:	4a33      	ldr	r2, [pc, #204]	; (8006948 <HAL_GPIO_Init+0x350>)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006880:	4b31      	ldr	r3, [pc, #196]	; (8006948 <HAL_GPIO_Init+0x350>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	43db      	mvns	r3, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4013      	ands	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068a4:	4a28      	ldr	r2, [pc, #160]	; (8006948 <HAL_GPIO_Init+0x350>)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068aa:	4b27      	ldr	r3, [pc, #156]	; (8006948 <HAL_GPIO_Init+0x350>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4013      	ands	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068ce:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <HAL_GPIO_Init+0x350>)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068d4:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <HAL_GPIO_Init+0x350>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	43db      	mvns	r3, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068f8:	4a13      	ldr	r2, [pc, #76]	; (8006948 <HAL_GPIO_Init+0x350>)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	3301      	adds	r3, #1
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	2b0f      	cmp	r3, #15
 8006908:	f67f ae86 	bls.w	8006618 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800690c:	bf00      	nop
 800690e:	3724      	adds	r7, #36	; 0x24
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40023800 	.word	0x40023800
 800691c:	40013800 	.word	0x40013800
 8006920:	40020000 	.word	0x40020000
 8006924:	40020400 	.word	0x40020400
 8006928:	40020800 	.word	0x40020800
 800692c:	40020c00 	.word	0x40020c00
 8006930:	40021000 	.word	0x40021000
 8006934:	40021400 	.word	0x40021400
 8006938:	40021800 	.word	0x40021800
 800693c:	40021c00 	.word	0x40021c00
 8006940:	40022000 	.word	0x40022000
 8006944:	40022400 	.word	0x40022400
 8006948:	40013c00 	.word	0x40013c00

0800694c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	807b      	strh	r3, [r7, #2]
 8006958:	4613      	mov	r3, r2
 800695a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800695c:	787b      	ldrb	r3, [r7, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006962:	887a      	ldrh	r2, [r7, #2]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006968:	e003      	b.n	8006972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800696a:	887b      	ldrh	r3, [r7, #2]
 800696c:	041a      	lsls	r2, r3, #16
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	619a      	str	r2, [r3, #24]
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800697e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006980:	b08f      	sub	sp, #60	; 0x3c
 8006982:	af0a      	add	r7, sp, #40	; 0x28
 8006984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e054      	b.n	8006a3a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f01d f926 	bl	8023bfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f006 fb71 	bl	800d0b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	687e      	ldr	r6, [r7, #4]
 80069dc:	466d      	mov	r5, sp
 80069de:	f106 0410 	add.w	r4, r6, #16
 80069e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80069f2:	1d33      	adds	r3, r6, #4
 80069f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069f6:	6838      	ldr	r0, [r7, #0]
 80069f8:	f006 faf4 	bl	800cfe4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2101      	movs	r1, #1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f006 fb68 	bl	800d0d8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	687e      	ldr	r6, [r7, #4]
 8006a10:	466d      	mov	r5, sp
 8006a12:	f106 0410 	add.w	r4, r6, #16
 8006a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a26:	1d33      	adds	r3, r6, #4
 8006a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f006 fc7a 	bl	800d324 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a42 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006a42:	b590      	push	{r4, r7, lr}
 8006a44:	b089      	sub	sp, #36	; 0x24
 8006a46:	af04      	add	r7, sp, #16
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	70fb      	strb	r3, [r7, #3]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70bb      	strb	r3, [r7, #2]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_HCD_HC_Init+0x28>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e076      	b.n	8006b58 <HAL_HCD_HC_Init+0x116>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	212c      	movs	r1, #44	; 0x2c
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	333d      	adds	r3, #61	; 0x3d
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	212c      	movs	r1, #44	; 0x2c
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	3338      	adds	r3, #56	; 0x38
 8006a92:	787a      	ldrb	r2, [r7, #1]
 8006a94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	212c      	movs	r1, #44	; 0x2c
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3340      	adds	r3, #64	; 0x40
 8006aa4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006aa6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	212c      	movs	r1, #44	; 0x2c
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3339      	adds	r3, #57	; 0x39
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	212c      	movs	r1, #44	; 0x2c
 8006ac0:	fb01 f303 	mul.w	r3, r1, r3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	333f      	adds	r3, #63	; 0x3f
 8006ac8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006acc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	78ba      	ldrb	r2, [r7, #2]
 8006ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ad6:	b2d0      	uxtb	r0, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	212c      	movs	r1, #44	; 0x2c
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	333a      	adds	r3, #58	; 0x3a
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006ae8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da09      	bge.n	8006b04 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	212c      	movs	r1, #44	; 0x2c
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	333b      	adds	r3, #59	; 0x3b
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e008      	b.n	8006b16 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	212c      	movs	r1, #44	; 0x2c
 8006b0a:	fb01 f303 	mul.w	r3, r1, r3
 8006b0e:	4413      	add	r3, r2
 8006b10:	333b      	adds	r3, #59	; 0x3b
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	212c      	movs	r1, #44	; 0x2c
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	333c      	adds	r3, #60	; 0x3c
 8006b24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006b28:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	787c      	ldrb	r4, [r7, #1]
 8006b30:	78ba      	ldrb	r2, [r7, #2]
 8006b32:	78f9      	ldrb	r1, [r7, #3]
 8006b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	4623      	mov	r3, r4
 8006b46:	f006 fd63 	bl	800d610 <USB_HC_Init>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}

08006b60 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_HCD_HC_Halt+0x1e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e00f      	b.n	8006b9e <HAL_HCD_HC_Halt+0x3e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	78fa      	ldrb	r2, [r7, #3]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f006 ffa1 	bl	800dad6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	70fb      	strb	r3, [r7, #3]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70bb      	strb	r3, [r7, #2]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	212c      	movs	r1, #44	; 0x2c
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	333b      	adds	r3, #59	; 0x3b
 8006bd0:	78ba      	ldrb	r2, [r7, #2]
 8006bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	212c      	movs	r1, #44	; 0x2c
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	333f      	adds	r3, #63	; 0x3f
 8006be2:	787a      	ldrb	r2, [r7, #1]
 8006be4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006be6:	7c3b      	ldrb	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d112      	bne.n	8006c12 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	212c      	movs	r1, #44	; 0x2c
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3342      	adds	r3, #66	; 0x42
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	212c      	movs	r1, #44	; 0x2c
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	4413      	add	r3, r2
 8006c0a:	333d      	adds	r3, #61	; 0x3d
 8006c0c:	7f3a      	ldrb	r2, [r7, #28]
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e008      	b.n	8006c24 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	212c      	movs	r1, #44	; 0x2c
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3342      	adds	r3, #66	; 0x42
 8006c20:	2202      	movs	r2, #2
 8006c22:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006c24:	787b      	ldrb	r3, [r7, #1]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	f200 80c6 	bhi.w	8006db8 <HAL_HCD_HC_SubmitRequest+0x210>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006da5 	.word	0x08006da5
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006d27 	.word	0x08006d27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006c44:	7c3b      	ldrb	r3, [r7, #16]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	f040 80b8 	bne.w	8006dbc <HAL_HCD_HC_SubmitRequest+0x214>
 8006c4c:	78bb      	ldrb	r3, [r7, #2]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 80b4 	bne.w	8006dbc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006c54:	8b3b      	ldrh	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d108      	bne.n	8006c6c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	212c      	movs	r1, #44	; 0x2c
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	4413      	add	r3, r2
 8006c66:	3355      	adds	r3, #85	; 0x55
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	212c      	movs	r1, #44	; 0x2c
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	3355      	adds	r3, #85	; 0x55
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	212c      	movs	r1, #44	; 0x2c
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3342      	adds	r3, #66	; 0x42
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006c92:	e093      	b.n	8006dbc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	212c      	movs	r1, #44	; 0x2c
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3342      	adds	r3, #66	; 0x42
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	701a      	strb	r2, [r3, #0]
      break;
 8006ca6:	e089      	b.n	8006dbc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006ca8:	78bb      	ldrb	r3, [r7, #2]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d11d      	bne.n	8006cea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	212c      	movs	r1, #44	; 0x2c
 8006cb4:	fb01 f303 	mul.w	r3, r1, r3
 8006cb8:	4413      	add	r3, r2
 8006cba:	3355      	adds	r3, #85	; 0x55
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	212c      	movs	r1, #44	; 0x2c
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	3342      	adds	r3, #66	; 0x42
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006cd4:	e073      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	212c      	movs	r1, #44	; 0x2c
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3342      	adds	r3, #66	; 0x42
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	701a      	strb	r2, [r3, #0]
      break;
 8006ce8:	e069      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	212c      	movs	r1, #44	; 0x2c
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3354      	adds	r3, #84	; 0x54
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	212c      	movs	r1, #44	; 0x2c
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	3342      	adds	r3, #66	; 0x42
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
      break;
 8006d10:	e055      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	212c      	movs	r1, #44	; 0x2c
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3342      	adds	r3, #66	; 0x42
 8006d20:	2202      	movs	r2, #2
 8006d22:	701a      	strb	r2, [r3, #0]
      break;
 8006d24:	e04b      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006d26:	78bb      	ldrb	r3, [r7, #2]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11d      	bne.n	8006d68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	212c      	movs	r1, #44	; 0x2c
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	4413      	add	r3, r2
 8006d38:	3355      	adds	r3, #85	; 0x55
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	212c      	movs	r1, #44	; 0x2c
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3342      	adds	r3, #66	; 0x42
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006d52:	e034      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	212c      	movs	r1, #44	; 0x2c
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	3342      	adds	r3, #66	; 0x42
 8006d62:	2202      	movs	r2, #2
 8006d64:	701a      	strb	r2, [r3, #0]
      break;
 8006d66:	e02a      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	212c      	movs	r1, #44	; 0x2c
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	4413      	add	r3, r2
 8006d74:	3354      	adds	r3, #84	; 0x54
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	212c      	movs	r1, #44	; 0x2c
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	3342      	adds	r3, #66	; 0x42
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
      break;
 8006d8e:	e016      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	212c      	movs	r1, #44	; 0x2c
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3342      	adds	r3, #66	; 0x42
 8006d9e:	2202      	movs	r2, #2
 8006da0:	701a      	strb	r2, [r3, #0]
      break;
 8006da2:	e00c      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	212c      	movs	r1, #44	; 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3342      	adds	r3, #66	; 0x42
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e002      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006dbc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	212c      	movs	r1, #44	; 0x2c
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	3344      	adds	r3, #68	; 0x44
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	8b3a      	ldrh	r2, [r7, #24]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	202c      	movs	r0, #44	; 0x2c
 8006dd8:	fb00 f303 	mul.w	r3, r0, r3
 8006ddc:	440b      	add	r3, r1
 8006dde:	334c      	adds	r3, #76	; 0x4c
 8006de0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	212c      	movs	r1, #44	; 0x2c
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	4413      	add	r3, r2
 8006dee:	3360      	adds	r3, #96	; 0x60
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	212c      	movs	r1, #44	; 0x2c
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	3350      	adds	r3, #80	; 0x50
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	212c      	movs	r1, #44	; 0x2c
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	3339      	adds	r3, #57	; 0x39
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	212c      	movs	r1, #44	; 0x2c
 8006e1e:	fb01 f303 	mul.w	r3, r1, r3
 8006e22:	4413      	add	r3, r2
 8006e24:	3361      	adds	r3, #97	; 0x61
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	222c      	movs	r2, #44	; 0x2c
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	3338      	adds	r3, #56	; 0x38
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	18d1      	adds	r1, r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	f006 fcf2 	bl	800d82c <USB_HC_StartXfer>
 8006e48:	4603      	mov	r3, r0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop

08006e54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f006 fa17 	bl	800d29e <USB_GetMode>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	f040 80ef 	bne.w	8007056 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f006 f9fb 	bl	800d278 <USB_ReadInterrupts>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80e5 	beq.w	8007054 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f006 f9f2 	bl	800d278 <USB_ReadInterrupts>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e9e:	d104      	bne.n	8006eaa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f006 f9e2 	bl	800d278 <USB_ReadInterrupts>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ebe:	d104      	bne.n	8006eca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f006 f9d2 	bl	800d278 <USB_ReadInterrupts>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ede:	d104      	bne.n	8006eea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f006 f9c2 	bl	800d278 <USB_ReadInterrupts>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d103      	bne.n	8006f06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2202      	movs	r2, #2
 8006f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f006 f9b4 	bl	800d278 <USB_ReadInterrupts>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1a:	d115      	bne.n	8006f48 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d108      	bne.n	8006f48 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f01c fed2 	bl	8023ce0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2101      	movs	r1, #1
 8006f42:	4618      	mov	r0, r3
 8006f44:	f006 fa9e 	bl	800d484 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f006 f993 	bl	800d278 <USB_ReadInterrupts>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f5c:	d102      	bne.n	8006f64 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fa03 	bl	800836a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f006 f985 	bl	800d278 <USB_ReadInterrupts>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d106      	bne.n	8006f86 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f01c fe95 	bl	8023ca8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2208      	movs	r2, #8
 8006f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f006 f974 	bl	800d278 <USB_ReadInterrupts>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d101      	bne.n	8006f9e <HAL_HCD_IRQHandler+0x14a>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <HAL_HCD_IRQHandler+0x14c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d012      	beq.n	8006fca <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0210 	bic.w	r2, r2, #16
 8006fb2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f907 	bl	80081c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0210 	orr.w	r2, r2, #16
 8006fc8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f006 f952 	bl	800d278 <USB_ReadInterrupts>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fde:	d13a      	bne.n	8007056 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f006 fd65 	bl	800dab4 <USB_HC_ReadInterrupt>
 8006fea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e025      	b.n	800703e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d018      	beq.n	8007038 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701c:	d106      	bne.n	800702c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8ab 	bl	8007180 <HCD_HC_IN_IRQHandler>
 800702a:	e005      	b.n	8007038 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fcc9 	bl	80079ca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3301      	adds	r3, #1
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3d4      	bcc.n	8006ff2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007050:	615a      	str	r2, [r3, #20]
 8007052:	e000      	b.n	8007056 <HAL_HCD_IRQHandler+0x202>
      return;
 8007054:	bf00      	nop
    }
  }
}
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_HCD_Start+0x16>
 800706e:	2302      	movs	r3, #2
 8007070:	e013      	b.n	800709a <HAL_HCD_Start+0x3e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f006 f808 	bl	800d094 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	4618      	mov	r0, r3
 800708c:	f006 fa5e 	bl	800d54c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_HCD_Stop+0x16>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e00d      	b.n	80070d4 <HAL_HCD_Stop+0x32>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f006 fe5f 	bl	800dd88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f006 fa05 	bl	800d4f8 <USB_ResetPort>
 80070ee:	4603      	mov	r3, r0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	212c      	movs	r1, #44	; 0x2c
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	4413      	add	r3, r2
 8007110:	3360      	adds	r3, #96	; 0x60
 8007112:	781b      	ldrb	r3, [r3, #0]
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	212c      	movs	r1, #44	; 0x2c
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	4413      	add	r3, r2
 8007138:	3350      	adds	r3, #80	; 0x50
 800713a:	681b      	ldr	r3, [r3, #0]
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f006 fa49 	bl	800d5ec <USB_GetCurrentFrame>
 800715a:	4603      	mov	r3, r0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f006 fa24 	bl	800d5be <USB_GetHostSpeed>
 8007176:	4603      	mov	r3, r0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d119      	bne.n	80071e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	461a      	mov	r2, r3
 80071be:	2304      	movs	r3, #4
 80071c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	60d3      	str	r3, [r2, #12]
 80071e2:	e101      	b.n	80073e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fa:	d12b      	bne.n	8007254 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007208:	461a      	mov	r2, r3
 800720a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800720e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	212c      	movs	r1, #44	; 0x2c
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	4413      	add	r3, r2
 800721c:	3361      	adds	r3, #97	; 0x61
 800721e:	2207      	movs	r2, #7
 8007220:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	4413      	add	r3, r2
 800722a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	440a      	add	r2, r1
 8007238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723c:	f043 0302 	orr.w	r3, r3, #2
 8007240:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	4611      	mov	r1, r2
 800724c:	4618      	mov	r0, r3
 800724e:	f006 fc42 	bl	800dad6 <USB_HC_Halt>
 8007252:	e0c9      	b.n	80073e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4413      	add	r3, r2
 800725c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b20      	cmp	r3, #32
 8007268:	d109      	bne.n	800727e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007276:	461a      	mov	r2, r3
 8007278:	2320      	movs	r3, #32
 800727a:	6093      	str	r3, [r2, #8]
 800727c:	e0b4      	b.n	80073e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b08      	cmp	r3, #8
 8007292:	d133      	bne.n	80072fc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ae:	f043 0302 	orr.w	r3, r3, #2
 80072b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	212c      	movs	r1, #44	; 0x2c
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	3361      	adds	r3, #97	; 0x61
 80072c2:	2205      	movs	r2, #5
 80072c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	461a      	mov	r2, r3
 80072d4:	2310      	movs	r3, #16
 80072d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e4:	461a      	mov	r2, r3
 80072e6:	2308      	movs	r3, #8
 80072e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f006 fbee 	bl	800dad6 <USB_HC_Halt>
 80072fa:	e075      	b.n	80073e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007312:	d134      	bne.n	800737e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	4413      	add	r3, r2
 800731c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	440a      	add	r2, r1
 800732a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800732e:	f043 0302 	orr.w	r3, r3, #2
 8007332:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	212c      	movs	r1, #44	; 0x2c
 800733a:	fb01 f303 	mul.w	r3, r1, r3
 800733e:	4413      	add	r3, r2
 8007340:	3361      	adds	r3, #97	; 0x61
 8007342:	2208      	movs	r2, #8
 8007344:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4413      	add	r3, r2
 800734e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007352:	461a      	mov	r2, r3
 8007354:	2310      	movs	r3, #16
 8007356:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007364:	461a      	mov	r2, r3
 8007366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f006 fbad 	bl	800dad6 <USB_HC_Halt>
 800737c:	e034      	b.n	80073e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007390:	2b80      	cmp	r3, #128	; 0x80
 8007392:	d129      	bne.n	80073e8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ae:	f043 0302 	orr.w	r3, r3, #2
 80073b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	212c      	movs	r1, #44	; 0x2c
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	4413      	add	r3, r2
 80073c0:	3361      	adds	r3, #97	; 0x61
 80073c2:	2206      	movs	r2, #6
 80073c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	4611      	mov	r1, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f006 fb80 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e2:	461a      	mov	r2, r3
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fe:	d122      	bne.n	8007446 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4413      	add	r3, r2
 8007408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	440a      	add	r2, r1
 8007416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800741a:	f043 0302 	orr.w	r3, r3, #2
 800741e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f006 fb53 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	461a      	mov	r2, r3
 800743e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007442:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007444:	e2bd      	b.n	80079c2 <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	f040 811d 	bne.w	8007698 <HCD_HC_IN_IRQHandler+0x518>
    if (hhcd->Init.dma_enable != 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d019      	beq.n	800749a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	212c      	movs	r1, #44	; 0x2c
 800746c:	fb01 f303 	mul.w	r3, r1, r3
 8007470:	4413      	add	r3, r2
 8007472:	3348      	adds	r3, #72	; 0x48
 8007474:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	0159      	lsls	r1, r3, #5
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	440b      	add	r3, r1
 800747e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	202c      	movs	r0, #44	; 0x2c
 8007490:	fb00 f303 	mul.w	r3, r0, r3
 8007494:	440b      	add	r3, r1
 8007496:	3350      	adds	r3, #80	; 0x50
 8007498:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	212c      	movs	r1, #44	; 0x2c
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	3361      	adds	r3, #97	; 0x61
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	212c      	movs	r1, #44	; 0x2c
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	335c      	adds	r3, #92	; 0x5c
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	461a      	mov	r2, r3
 80074cc:	2301      	movs	r3, #1
 80074ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	212c      	movs	r1, #44	; 0x2c
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	4413      	add	r3, r2
 80074dc:	333f      	adds	r3, #63	; 0x3f
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d009      	beq.n	80074f8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	212c      	movs	r1, #44	; 0x2c
 80074ea:	fb01 f303 	mul.w	r3, r1, r3
 80074ee:	4413      	add	r3, r2
 80074f0:	333f      	adds	r3, #63	; 0x3f
 80074f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d121      	bne.n	800753c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	440a      	add	r2, r1
 800750e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007512:	f043 0302 	orr.w	r3, r3, #2
 8007516:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f006 fad7 	bl	800dad6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007534:	461a      	mov	r2, r3
 8007536:	2310      	movs	r3, #16
 8007538:	6093      	str	r3, [r2, #8]
 800753a:	e068      	b.n	800760e <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	212c      	movs	r1, #44	; 0x2c
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	4413      	add	r3, r2
 8007548:	333f      	adds	r3, #63	; 0x3f
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d128      	bne.n	80075a2 <HCD_HC_IN_IRQHandler+0x422>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	440a      	add	r2, r1
 8007566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800756a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800756e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	212c      	movs	r1, #44	; 0x2c
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	3360      	adds	r3, #96	; 0x60
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	b2d8      	uxtb	r0, r3
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	212c      	movs	r1, #44	; 0x2c
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	4413      	add	r3, r2
 8007592:	3360      	adds	r3, #96	; 0x60
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	4601      	mov	r1, r0
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f01c fbae 	bl	8023cfc <HAL_HCD_HC_NotifyURBChange_Callback>
 80075a0:	e035      	b.n	800760e <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	212c      	movs	r1, #44	; 0x2c
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	4413      	add	r3, r2
 80075ae:	333f      	adds	r3, #63	; 0x3f
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d12b      	bne.n	800760e <HCD_HC_IN_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	212c      	movs	r1, #44	; 0x2c
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	3360      	adds	r3, #96	; 0x60
 80075c4:	2201      	movs	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	212c      	movs	r1, #44	; 0x2c
 80075ce:	fb01 f303 	mul.w	r3, r1, r3
 80075d2:	4413      	add	r3, r2
 80075d4:	3354      	adds	r3, #84	; 0x54
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f083 0301 	eor.w	r3, r3, #1
 80075dc:	b2d8      	uxtb	r0, r3
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	212c      	movs	r1, #44	; 0x2c
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	3354      	adds	r3, #84	; 0x54
 80075ec:	4602      	mov	r2, r0
 80075ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	b2d8      	uxtb	r0, r3
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	212c      	movs	r1, #44	; 0x2c
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	4413      	add	r3, r2
 8007600:	3360      	adds	r3, #96	; 0x60
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	4601      	mov	r1, r0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f01c fb77 	bl	8023cfc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d12b      	bne.n	800766e <HCD_HC_IN_IRQHandler+0x4ee>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	212c      	movs	r1, #44	; 0x2c
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	4413      	add	r3, r2
 8007622:	3348      	adds	r3, #72	; 0x48
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	202c      	movs	r0, #44	; 0x2c
 800762c:	fb00 f202 	mul.w	r2, r0, r2
 8007630:	440a      	add	r2, r1
 8007632:	3240      	adds	r2, #64	; 0x40
 8007634:	8812      	ldrh	r2, [r2, #0]
 8007636:	fbb3 f3f2 	udiv	r3, r3, r2
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 81bf 	beq.w	80079c2 <HCD_HC_IN_IRQHandler+0x842>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	212c      	movs	r1, #44	; 0x2c
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	4413      	add	r3, r2
 8007650:	3354      	adds	r3, #84	; 0x54
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f083 0301 	eor.w	r3, r3, #1
 8007658:	b2d8      	uxtb	r0, r3
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	212c      	movs	r1, #44	; 0x2c
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	3354      	adds	r3, #84	; 0x54
 8007668:	4602      	mov	r2, r0
 800766a:	701a      	strb	r2, [r3, #0]
}
 800766c:	e1a9      	b.n	80079c2 <HCD_HC_IN_IRQHandler+0x842>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	212c      	movs	r1, #44	; 0x2c
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	4413      	add	r3, r2
 800767a:	3354      	adds	r3, #84	; 0x54
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f083 0301 	eor.w	r3, r3, #1
 8007682:	b2d8      	uxtb	r0, r3
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	212c      	movs	r1, #44	; 0x2c
 800768a:	fb01 f303 	mul.w	r3, r1, r3
 800768e:	4413      	add	r3, r2
 8007690:	3354      	adds	r3, #84	; 0x54
 8007692:	4602      	mov	r2, r0
 8007694:	701a      	strb	r2, [r3, #0]
}
 8007696:	e194      	b.n	80079c2 <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	f040 8107 	bne.w	80078be <HCD_HC_IN_IRQHandler+0x73e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ca:	f023 0302 	bic.w	r3, r3, #2
 80076ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	212c      	movs	r1, #44	; 0x2c
 80076d6:	fb01 f303 	mul.w	r3, r1, r3
 80076da:	4413      	add	r3, r2
 80076dc:	3361      	adds	r3, #97	; 0x61
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d109      	bne.n	80076f8 <HCD_HC_IN_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	212c      	movs	r1, #44	; 0x2c
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	4413      	add	r3, r2
 80076f0:	3360      	adds	r3, #96	; 0x60
 80076f2:	2201      	movs	r2, #1
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e0c9      	b.n	800788c <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	212c      	movs	r1, #44	; 0x2c
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	3361      	adds	r3, #97	; 0x61
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b05      	cmp	r3, #5
 800770a:	d109      	bne.n	8007720 <HCD_HC_IN_IRQHandler+0x5a0>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	212c      	movs	r1, #44	; 0x2c
 8007712:	fb01 f303 	mul.w	r3, r1, r3
 8007716:	4413      	add	r3, r2
 8007718:	3360      	adds	r3, #96	; 0x60
 800771a:	2205      	movs	r2, #5
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e0b5      	b.n	800788c <HCD_HC_IN_IRQHandler+0x70c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	212c      	movs	r1, #44	; 0x2c
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	4413      	add	r3, r2
 800772c:	3361      	adds	r3, #97	; 0x61
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b06      	cmp	r3, #6
 8007732:	d009      	beq.n	8007748 <HCD_HC_IN_IRQHandler+0x5c8>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	212c      	movs	r1, #44	; 0x2c
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	3361      	adds	r3, #97	; 0x61
 8007742:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007744:	2b08      	cmp	r3, #8
 8007746:	d150      	bne.n	80077ea <HCD_HC_IN_IRQHandler+0x66a>
      hhcd->hc[ch_num].ErrCnt++;
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	212c      	movs	r1, #44	; 0x2c
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	4413      	add	r3, r2
 8007754:	335c      	adds	r3, #92	; 0x5c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	202c      	movs	r0, #44	; 0x2c
 8007760:	fb00 f303 	mul.w	r3, r0, r3
 8007764:	440b      	add	r3, r1
 8007766:	335c      	adds	r3, #92	; 0x5c
 8007768:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	212c      	movs	r1, #44	; 0x2c
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	335c      	adds	r3, #92	; 0x5c
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d912      	bls.n	80077a4 <HCD_HC_IN_IRQHandler+0x624>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	212c      	movs	r1, #44	; 0x2c
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	4413      	add	r3, r2
 800778a:	335c      	adds	r3, #92	; 0x5c
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	212c      	movs	r1, #44	; 0x2c
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	4413      	add	r3, r2
 800779c:	3360      	adds	r3, #96	; 0x60
 800779e:	2204      	movs	r2, #4
 80077a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80077a2:	e073      	b.n	800788c <HCD_HC_IN_IRQHandler+0x70c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	212c      	movs	r1, #44	; 0x2c
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	4413      	add	r3, r2
 80077b0:	3360      	adds	r3, #96	; 0x60
 80077b2:	2202      	movs	r2, #2
 80077b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e2:	461a      	mov	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80077e8:	e050      	b.n	800788c <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	212c      	movs	r1, #44	; 0x2c
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	3361      	adds	r3, #97	; 0x61
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d122      	bne.n	8007844 <HCD_HC_IN_IRQHandler+0x6c4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	212c      	movs	r1, #44	; 0x2c
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	4413      	add	r3, r2
 800780a:	3360      	adds	r3, #96	; 0x60
 800780c:	2202      	movs	r2, #2
 800780e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007826:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800782e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783c:	461a      	mov	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e023      	b.n	800788c <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	212c      	movs	r1, #44	; 0x2c
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	4413      	add	r3, r2
 8007850:	3361      	adds	r3, #97	; 0x61
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b07      	cmp	r3, #7
 8007856:	d119      	bne.n	800788c <HCD_HC_IN_IRQHandler+0x70c>
      hhcd->hc[ch_num].ErrCnt++;
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	212c      	movs	r1, #44	; 0x2c
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	335c      	adds	r3, #92	; 0x5c
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	202c      	movs	r0, #44	; 0x2c
 8007870:	fb00 f303 	mul.w	r3, r0, r3
 8007874:	440b      	add	r3, r1
 8007876:	335c      	adds	r3, #92	; 0x5c
 8007878:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	212c      	movs	r1, #44	; 0x2c
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	3360      	adds	r3, #96	; 0x60
 8007888:	2204      	movs	r2, #4
 800788a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007898:	461a      	mov	r2, r3
 800789a:	2302      	movs	r3, #2
 800789c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	b2d8      	uxtb	r0, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	212c      	movs	r1, #44	; 0x2c
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	4413      	add	r3, r2
 80078ae:	3360      	adds	r3, #96	; 0x60
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	4601      	mov	r1, r0
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f01c fa20 	bl	8023cfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80078bc:	e081      	b.n	80079c2 <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d176      	bne.n	80079c2 <HCD_HC_IN_IRQHandler+0x842>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	212c      	movs	r1, #44	; 0x2c
 80078da:	fb01 f303 	mul.w	r3, r1, r3
 80078de:	4413      	add	r3, r2
 80078e0:	333f      	adds	r3, #63	; 0x3f
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d121      	bne.n	800792c <HCD_HC_IN_IRQHandler+0x7ac>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	212c      	movs	r1, #44	; 0x2c
 80078ee:	fb01 f303 	mul.w	r3, r1, r3
 80078f2:	4413      	add	r3, r2
 80078f4:	335c      	adds	r3, #92	; 0x5c
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	440a      	add	r2, r1
 8007910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f006 f8d6 	bl	800dad6 <USB_HC_Halt>
 800792a:	e041      	b.n	80079b0 <HCD_HC_IN_IRQHandler+0x830>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	212c      	movs	r1, #44	; 0x2c
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	333f      	adds	r3, #63	; 0x3f
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <HCD_HC_IN_IRQHandler+0x7d4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	212c      	movs	r1, #44	; 0x2c
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	4413      	add	r3, r2
 800794c:	333f      	adds	r3, #63	; 0x3f
 800794e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007950:	2b02      	cmp	r3, #2
 8007952:	d12d      	bne.n	80079b0 <HCD_HC_IN_IRQHandler+0x830>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	212c      	movs	r1, #44	; 0x2c
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	335c      	adds	r3, #92	; 0x5c
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d120      	bne.n	80079b0 <HCD_HC_IN_IRQHandler+0x830>
        hhcd->hc[ch_num].state = HC_NAK;
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	212c      	movs	r1, #44	; 0x2c
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	4413      	add	r3, r2
 800797a:	3361      	adds	r3, #97	; 0x61
 800797c:	2203      	movs	r2, #3
 800797e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	440a      	add	r2, r1
 8007996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800799a:	f043 0302 	orr.w	r3, r3, #2
 800799e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f006 f893 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079bc:	461a      	mov	r2, r3
 80079be:	2310      	movs	r3, #16
 80079c0:	6093      	str	r3, [r2, #8]
}
 80079c2:	bf00      	nop
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d119      	bne.n	8007a2e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a06:	461a      	mov	r2, r3
 8007a08:	2304      	movs	r3, #4
 8007a0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a26:	f043 0302 	orr.w	r3, r3, #2
 8007a2a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007a2c:	e3c8      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d13e      	bne.n	8007ac2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a50:	461a      	mov	r2, r3
 8007a52:	2320      	movs	r3, #32
 8007a54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	212c      	movs	r1, #44	; 0x2c
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	333d      	adds	r3, #61	; 0x3d
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	f040 83aa 	bne.w	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	212c      	movs	r1, #44	; 0x2c
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	4413      	add	r3, r2
 8007a78:	333d      	adds	r3, #61	; 0x3d
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	212c      	movs	r1, #44	; 0x2c
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	3360      	adds	r3, #96	; 0x60
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	0151      	lsls	r1, r2, #5
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	440a      	add	r2, r1
 8007aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aaa:	f043 0302 	orr.w	r3, r3, #2
 8007aae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f006 f80b 	bl	800dad6 <USB_HC_Halt>
}
 8007ac0:	e37e      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad8:	d122      	bne.n	8007b20 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f005 ffe6 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b16:	461a      	mov	r2, r3
 8007b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b1c:	6093      	str	r3, [r2, #8]
}
 8007b1e:	e34f      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d150      	bne.n	8007bd8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	212c      	movs	r1, #44	; 0x2c
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	335c      	adds	r3, #92	; 0x5c
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d111      	bne.n	8007b82 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	212c      	movs	r1, #44	; 0x2c
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	333d      	adds	r3, #61	; 0x3d
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2340      	movs	r3, #64	; 0x40
 8007b80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b9c:	f043 0302 	orr.w	r3, r3, #2
 8007ba0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f005 ff92 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	212c      	movs	r1, #44	; 0x2c
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	3361      	adds	r3, #97	; 0x61
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
}
 8007bd6:	e2f3      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d13c      	bne.n	8007c68 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	212c      	movs	r1, #44	; 0x2c
 8007bf4:	fb01 f303 	mul.w	r3, r1, r3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3361      	adds	r3, #97	; 0x61
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	212c      	movs	r1, #44	; 0x2c
 8007c06:	fb01 f303 	mul.w	r3, r1, r3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	333d      	adds	r3, #61	; 0x3d
 8007c0e:	2201      	movs	r2, #1
 8007c10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	212c      	movs	r1, #44	; 0x2c
 8007c18:	fb01 f303 	mul.w	r3, r1, r3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	335c      	adds	r3, #92	; 0x5c
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c3e:	f043 0302 	orr.w	r3, r3, #2
 8007c42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f005 ff41 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c60:	461a      	mov	r2, r3
 8007c62:	2340      	movs	r3, #64	; 0x40
 8007c64:	6093      	str	r3, [r2, #8]
}
 8007c66:	e2ab      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	d12a      	bne.n	8007cd4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007caa:	f043 0302 	orr.w	r3, r3, #2
 8007cae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f005 ff0b 	bl	800dad6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	212c      	movs	r1, #44	; 0x2c
 8007cc6:	fb01 f303 	mul.w	r3, r1, r3
 8007cca:	4413      	add	r3, r2
 8007ccc:	3361      	adds	r3, #97	; 0x61
 8007cce:	2205      	movs	r2, #5
 8007cd0:	701a      	strb	r2, [r3, #0]
}
 8007cd2:	e275      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d150      	bne.n	8007d8c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	212c      	movs	r1, #44	; 0x2c
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	335c      	adds	r3, #92	; 0x5c
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	212c      	movs	r1, #44	; 0x2c
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	4413      	add	r3, r2
 8007d08:	3361      	adds	r3, #97	; 0x61
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	212c      	movs	r1, #44	; 0x2c
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	4413      	add	r3, r2
 8007d1a:	333d      	adds	r3, #61	; 0x3d
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d112      	bne.n	8007d48 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	212c      	movs	r1, #44	; 0x2c
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	333c      	adds	r3, #60	; 0x3c
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d108      	bne.n	8007d48 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	212c      	movs	r1, #44	; 0x2c
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	4413      	add	r3, r2
 8007d42:	333d      	adds	r3, #61	; 0x3d
 8007d44:	2201      	movs	r2, #1
 8007d46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d62:	f043 0302 	orr.w	r3, r3, #2
 8007d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f005 feaf 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d84:	461a      	mov	r2, r3
 8007d86:	2310      	movs	r3, #16
 8007d88:	6093      	str	r3, [r2, #8]
}
 8007d8a:	e219      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b80      	cmp	r3, #128	; 0x80
 8007da0:	d175      	bne.n	8007e8e <HCD_HC_OUT_IRQHandler+0x4c4>
    if (hhcd->Init.dma_enable == 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d121      	bne.n	8007dee <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	212c      	movs	r1, #44	; 0x2c
 8007db0:	fb01 f303 	mul.w	r3, r1, r3
 8007db4:	4413      	add	r3, r2
 8007db6:	3361      	adds	r3, #97	; 0x61
 8007db8:	2206      	movs	r2, #6
 8007dba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd6:	f043 0302 	orr.w	r3, r3, #2
 8007dda:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f005 fe75 	bl	800dad6 <USB_HC_Halt>
 8007dec:	e045      	b.n	8007e7a <HCD_HC_OUT_IRQHandler+0x4b0>
      hhcd->hc[ch_num].ErrCnt++;
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	212c      	movs	r1, #44	; 0x2c
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	4413      	add	r3, r2
 8007dfa:	335c      	adds	r3, #92	; 0x5c
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	202c      	movs	r0, #44	; 0x2c
 8007e06:	fb00 f303 	mul.w	r3, r0, r3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	335c      	adds	r3, #92	; 0x5c
 8007e0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	212c      	movs	r1, #44	; 0x2c
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	335c      	adds	r3, #92	; 0x5c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d921      	bls.n	8007e68 <HCD_HC_OUT_IRQHandler+0x49e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	212c      	movs	r1, #44	; 0x2c
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	335c      	adds	r3, #92	; 0x5c
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	212c      	movs	r1, #44	; 0x2c
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	3360      	adds	r3, #96	; 0x60
 8007e44:	2204      	movs	r2, #4
 8007e46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	b2d8      	uxtb	r0, r3
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	212c      	movs	r1, #44	; 0x2c
 8007e52:	fb01 f303 	mul.w	r3, r1, r3
 8007e56:	4413      	add	r3, r2
 8007e58:	3360      	adds	r3, #96	; 0x60
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f01b ff4b 	bl	8023cfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8007e66:	e008      	b.n	8007e7a <HCD_HC_OUT_IRQHandler+0x4b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	212c      	movs	r1, #44	; 0x2c
 8007e6e:	fb01 f303 	mul.w	r3, r1, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	3360      	adds	r3, #96	; 0x60
 8007e76:	2202      	movs	r2, #2
 8007e78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e86:	461a      	mov	r2, r3
 8007e88:	2380      	movs	r3, #128	; 0x80
 8007e8a:	6093      	str	r3, [r2, #8]
}
 8007e8c:	e198      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea4:	d134      	bne.n	8007f10 <HCD_HC_OUT_IRQHandler+0x546>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	0151      	lsls	r1, r2, #5
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	440a      	add	r2, r1
 8007ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec0:	f043 0302 	orr.w	r3, r3, #2
 8007ec4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f005 fe00 	bl	800dad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	212c      	movs	r1, #44	; 0x2c
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	3361      	adds	r3, #97	; 0x61
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	701a      	strb	r2, [r3, #0]
}
 8007f0e:	e157      	b.n	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	f040 814c 	bne.w	80081c0 <HCD_HC_OUT_IRQHandler+0x7f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f42:	f023 0302 	bic.w	r3, r3, #2
 8007f46:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	212c      	movs	r1, #44	; 0x2c
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	3361      	adds	r3, #97	; 0x61
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d179      	bne.n	8008050 <HCD_HC_OUT_IRQHandler+0x686>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	212c      	movs	r1, #44	; 0x2c
 8007f62:	fb01 f303 	mul.w	r3, r1, r3
 8007f66:	4413      	add	r3, r2
 8007f68:	3360      	adds	r3, #96	; 0x60
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	212c      	movs	r1, #44	; 0x2c
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	4413      	add	r3, r2
 8007f7a:	333f      	adds	r3, #63	; 0x3f
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d00a      	beq.n	8007f98 <HCD_HC_OUT_IRQHandler+0x5ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	212c      	movs	r1, #44	; 0x2c
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	333f      	adds	r3, #63	; 0x3f
 8007f90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	f040 80fc 	bne.w	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
        if (hhcd->Init.dma_enable == 1U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d142      	bne.n	8008026 <HCD_HC_OUT_IRQHandler+0x65c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	212c      	movs	r1, #44	; 0x2c
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	4413      	add	r3, r2
 8007fac:	334c      	adds	r3, #76	; 0x4c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80ed 	beq.w	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	212c      	movs	r1, #44	; 0x2c
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	334c      	adds	r3, #76	; 0x4c
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	202c      	movs	r0, #44	; 0x2c
 8007fcc:	fb00 f202 	mul.w	r2, r0, r2
 8007fd0:	440a      	add	r2, r1
 8007fd2:	3240      	adds	r2, #64	; 0x40
 8007fd4:	8812      	ldrh	r2, [r2, #0]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	202c      	movs	r0, #44	; 0x2c
 8007fe0:	fb00 f202 	mul.w	r2, r0, r2
 8007fe4:	440a      	add	r2, r1
 8007fe6:	3240      	adds	r2, #64	; 0x40
 8007fe8:	8812      	ldrh	r2, [r2, #0]
 8007fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80ca 	beq.w	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	212c      	movs	r1, #44	; 0x2c
 8008002:	fb01 f303 	mul.w	r3, r1, r3
 8008006:	4413      	add	r3, r2
 8008008:	3355      	adds	r3, #85	; 0x55
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f083 0301 	eor.w	r3, r3, #1
 8008010:	b2d8      	uxtb	r0, r3
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	212c      	movs	r1, #44	; 0x2c
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	4413      	add	r3, r2
 800801e:	3355      	adds	r3, #85	; 0x55
 8008020:	4602      	mov	r2, r0
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e0b4      	b.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	212c      	movs	r1, #44	; 0x2c
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	4413      	add	r3, r2
 8008032:	3355      	adds	r3, #85	; 0x55
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	f083 0301 	eor.w	r3, r3, #1
 800803a:	b2d8      	uxtb	r0, r3
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	212c      	movs	r1, #44	; 0x2c
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	4413      	add	r3, r2
 8008048:	3355      	adds	r3, #85	; 0x55
 800804a:	4602      	mov	r2, r0
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e09f      	b.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	212c      	movs	r1, #44	; 0x2c
 8008056:	fb01 f303 	mul.w	r3, r1, r3
 800805a:	4413      	add	r3, r2
 800805c:	3361      	adds	r3, #97	; 0x61
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d109      	bne.n	8008078 <HCD_HC_OUT_IRQHandler+0x6ae>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	212c      	movs	r1, #44	; 0x2c
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	4413      	add	r3, r2
 8008070:	3360      	adds	r3, #96	; 0x60
 8008072:	2202      	movs	r2, #2
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e08b      	b.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	212c      	movs	r1, #44	; 0x2c
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	4413      	add	r3, r2
 8008084:	3361      	adds	r3, #97	; 0x61
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d109      	bne.n	80080a0 <HCD_HC_OUT_IRQHandler+0x6d6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	212c      	movs	r1, #44	; 0x2c
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	4413      	add	r3, r2
 8008098:	3360      	adds	r3, #96	; 0x60
 800809a:	2202      	movs	r2, #2
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e077      	b.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	212c      	movs	r1, #44	; 0x2c
 80080a6:	fb01 f303 	mul.w	r3, r1, r3
 80080aa:	4413      	add	r3, r2
 80080ac:	3361      	adds	r3, #97	; 0x61
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	d109      	bne.n	80080c8 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	212c      	movs	r1, #44	; 0x2c
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	4413      	add	r3, r2
 80080c0:	3360      	adds	r3, #96	; 0x60
 80080c2:	2205      	movs	r2, #5
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	e063      	b.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	212c      	movs	r1, #44	; 0x2c
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	4413      	add	r3, r2
 80080d4:	3361      	adds	r3, #97	; 0x61
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b06      	cmp	r3, #6
 80080da:	d009      	beq.n	80080f0 <HCD_HC_OUT_IRQHandler+0x726>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	212c      	movs	r1, #44	; 0x2c
 80080e2:	fb01 f303 	mul.w	r3, r1, r3
 80080e6:	4413      	add	r3, r2
 80080e8:	3361      	adds	r3, #97	; 0x61
 80080ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d14f      	bne.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
      hhcd->hc[ch_num].ErrCnt++;
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	212c      	movs	r1, #44	; 0x2c
 80080f6:	fb01 f303 	mul.w	r3, r1, r3
 80080fa:	4413      	add	r3, r2
 80080fc:	335c      	adds	r3, #92	; 0x5c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	202c      	movs	r0, #44	; 0x2c
 8008108:	fb00 f303 	mul.w	r3, r0, r3
 800810c:	440b      	add	r3, r1
 800810e:	335c      	adds	r3, #92	; 0x5c
 8008110:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	212c      	movs	r1, #44	; 0x2c
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	4413      	add	r3, r2
 800811e:	335c      	adds	r3, #92	; 0x5c
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d912      	bls.n	800814c <HCD_HC_OUT_IRQHandler+0x782>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	212c      	movs	r1, #44	; 0x2c
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	4413      	add	r3, r2
 8008132:	335c      	adds	r3, #92	; 0x5c
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	212c      	movs	r1, #44	; 0x2c
 800813e:	fb01 f303 	mul.w	r3, r1, r3
 8008142:	4413      	add	r3, r2
 8008144:	3360      	adds	r3, #96	; 0x60
 8008146:	2204      	movs	r2, #4
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e021      	b.n	8008190 <HCD_HC_OUT_IRQHandler+0x7c6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	212c      	movs	r1, #44	; 0x2c
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	4413      	add	r3, r2
 8008158:	3360      	adds	r3, #96	; 0x60
 800815a:	2202      	movs	r2, #2
 800815c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008174:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800817c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	4413      	add	r3, r2
 8008186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800818a:	461a      	mov	r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	4413      	add	r3, r2
 8008198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819c:	461a      	mov	r2, r3
 800819e:	2302      	movs	r3, #2
 80081a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	b2d8      	uxtb	r0, r3
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	212c      	movs	r1, #44	; 0x2c
 80081ac:	fb01 f303 	mul.w	r3, r1, r3
 80081b0:	4413      	add	r3, r2
 80081b2:	3360      	adds	r3, #96	; 0x60
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	4601      	mov	r1, r0
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f01b fd9e 	bl	8023cfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80081c0:	bf00      	nop
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	0c5b      	lsrs	r3, r3, #17
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b02      	cmp	r3, #2
 8008202:	d003      	beq.n	800820c <HCD_RXQLVL_IRQHandler+0x44>
 8008204:	2b05      	cmp	r3, #5
 8008206:	f000 80a9 	beq.w	800835c <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800820a:	e0aa      	b.n	8008362 <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80a6 	beq.w	8008360 <HCD_RXQLVL_IRQHandler+0x198>
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	212c      	movs	r1, #44	; 0x2c
 800821a:	fb01 f303 	mul.w	r3, r1, r3
 800821e:	4413      	add	r3, r2
 8008220:	3344      	adds	r3, #68	; 0x44
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 809b 	beq.w	8008360 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	212c      	movs	r1, #44	; 0x2c
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	4413      	add	r3, r2
 8008236:	3350      	adds	r3, #80	; 0x50
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	441a      	add	r2, r3
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	202c      	movs	r0, #44	; 0x2c
 8008244:	fb00 f303 	mul.w	r3, r0, r3
 8008248:	440b      	add	r3, r1
 800824a:	334c      	adds	r3, #76	; 0x4c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d87a      	bhi.n	8008348 <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	212c      	movs	r1, #44	; 0x2c
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	3344      	adds	r3, #68	; 0x44
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	b292      	uxth	r2, r2
 800826a:	4619      	mov	r1, r3
 800826c:	f004 ffdb 	bl	800d226 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	212c      	movs	r1, #44	; 0x2c
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	3344      	adds	r3, #68	; 0x44
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	441a      	add	r2, r3
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	202c      	movs	r0, #44	; 0x2c
 800828a:	fb00 f303 	mul.w	r3, r0, r3
 800828e:	440b      	add	r3, r1
 8008290:	3344      	adds	r3, #68	; 0x44
 8008292:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	212c      	movs	r1, #44	; 0x2c
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	4413      	add	r3, r2
 80082a0:	3350      	adds	r3, #80	; 0x50
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	441a      	add	r2, r3
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	202c      	movs	r0, #44	; 0x2c
 80082ae:	fb00 f303 	mul.w	r3, r0, r3
 80082b2:	440b      	add	r3, r1
 80082b4:	3350      	adds	r3, #80	; 0x50
 80082b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	0cdb      	lsrs	r3, r3, #19
 80082c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	212c      	movs	r1, #44	; 0x2c
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	4413      	add	r3, r2
 80082da:	3340      	adds	r3, #64	; 0x40
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d13c      	bne.n	8008360 <HCD_RXQLVL_IRQHandler+0x198>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d039      	beq.n	8008360 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008302:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800830a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	4413      	add	r3, r2
 8008314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008318:	461a      	mov	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	212c      	movs	r1, #44	; 0x2c
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	4413      	add	r3, r2
 800832a:	3354      	adds	r3, #84	; 0x54
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f083 0301 	eor.w	r3, r3, #1
 8008332:	b2d8      	uxtb	r0, r3
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	212c      	movs	r1, #44	; 0x2c
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	3354      	adds	r3, #84	; 0x54
 8008342:	4602      	mov	r2, r0
 8008344:	701a      	strb	r2, [r3, #0]
      break;
 8008346:	e00b      	b.n	8008360 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	212c      	movs	r1, #44	; 0x2c
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	4413      	add	r3, r2
 8008354:	3360      	adds	r3, #96	; 0x60
 8008356:	2204      	movs	r2, #4
 8008358:	701a      	strb	r2, [r3, #0]
      break;
 800835a:	e001      	b.n	8008360 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8008360:	bf00      	nop
  }
}
 8008362:	bf00      	nop
 8008364:	3728      	adds	r7, #40	; 0x28
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b086      	sub	sp, #24
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008396:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d10b      	bne.n	80083ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d102      	bne.n	80083b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f01b fc89 	bl	8023cc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d132      	bne.n	800842a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f043 0308 	orr.w	r3, r3, #8
 80083ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d126      	bne.n	8008424 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d113      	bne.n	8008406 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80083e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083e8:	d106      	bne.n	80083f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2102      	movs	r1, #2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f005 f847 	bl	800d484 <USB_InitFSLSPClkSel>
 80083f6:	e011      	b.n	800841c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2101      	movs	r1, #1
 80083fe:	4618      	mov	r0, r3
 8008400:	f005 f840 	bl	800d484 <USB_InitFSLSPClkSel>
 8008404:	e00a      	b.n	800841c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d106      	bne.n	800841c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008414:	461a      	mov	r2, r3
 8008416:	f64e 2360 	movw	r3, #60000	; 0xea60
 800841a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f01b fc7f 	bl	8023d20 <HAL_HCD_PortEnabled_Callback>
 8008422:	e002      	b.n	800842a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f01b fc89 	bl	8023d3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b20      	cmp	r3, #32
 8008432:	d103      	bne.n	800843c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f043 0320 	orr.w	r3, r3, #32
 800843a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008442:	461a      	mov	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6013      	str	r3, [r2, #0]
}
 8008448:	bf00      	nop
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e07f      	b.n	8008562 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f9 fcb2 	bl	8001de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2224      	movs	r2, #36	; 0x24
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0201 	bic.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d107      	bne.n	80084ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	e006      	b.n	80084d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d104      	bne.n	80084ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6859      	ldr	r1, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b1d      	ldr	r3, [pc, #116]	; (800856c <HAL_I2C_Init+0x11c>)
 80084f6:	430b      	orrs	r3, r1
 80084f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	ea42 0103 	orr.w	r1, r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	021a      	lsls	r2, r3, #8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69d9      	ldr	r1, [r3, #28]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	02008000 	.word	0x02008000

08008570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b20      	cmp	r3, #32
 8008584:	d138      	bne.n	80085f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008590:	2302      	movs	r3, #2
 8008592:	e032      	b.n	80085fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	; 0x24
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0201 	orr.w	r2, r2, #1
 80085e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e000      	b.n	80085fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085f8:	2302      	movs	r3, #2
  }
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b20      	cmp	r3, #32
 800861a:	d139      	bne.n	8008690 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008626:	2302      	movs	r3, #2
 8008628:	e033      	b.n	8008692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2224      	movs	r2, #36	; 0x24
 8008636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0201 	bic.w	r2, r2, #1
 8008648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008658:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	e000      	b.n	8008692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008690:	2302      	movs	r3, #2
  }
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80086ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e0bf      	b.n	8008852 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d106      	bne.n	80086ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7f9 fbf2 	bl	8001ed0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008702:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6999      	ldr	r1, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008718:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6899      	ldr	r1, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b4a      	ldr	r3, [pc, #296]	; (800885c <HAL_LTDC_Init+0x19c>)
 8008734:	400b      	ands	r3, r1
 8008736:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6899      	ldr	r1, [r3, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68d9      	ldr	r1, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b3e      	ldr	r3, [pc, #248]	; (800885c <HAL_LTDC_Init+0x19c>)
 8008762:	400b      	ands	r3, r1
 8008764:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68d9      	ldr	r1, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1a      	ldr	r2, [r3, #32]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6919      	ldr	r1, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b33      	ldr	r3, [pc, #204]	; (800885c <HAL_LTDC_Init+0x19c>)
 8008790:	400b      	ands	r3, r1
 8008792:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6919      	ldr	r1, [r3, #16]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6959      	ldr	r1, [r3, #20]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	4b27      	ldr	r3, [pc, #156]	; (800885c <HAL_LTDC_Init+0x19c>)
 80087be:	400b      	ands	r3, r1
 80087c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6959      	ldr	r1, [r3, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087e6:	021b      	lsls	r3, r3, #8
 80087e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80087f0:	041b      	lsls	r3, r3, #16
 80087f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008802:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0206 	orr.w	r2, r2, #6
 800882e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	f000f800 	.word	0xf000f800

08008860 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d023      	beq.n	80088ca <HAL_LTDC_IRQHandler+0x6a>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01e      	beq.n	80088ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0204 	bic.w	r2, r2, #4
 800889a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2204      	movs	r2, #4
 80088a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088aa:	f043 0201 	orr.w	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2204      	movs	r2, #4
 80088b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f86f 	bl	80089a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d023      	beq.n	800891c <HAL_LTDC_IRQHandler+0xbc>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d01e      	beq.n	800891c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0202 	bic.w	r2, r2, #2
 80088ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2202      	movs	r2, #2
 80088f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088fc:	f043 0202 	orr.w	r2, r3, #2
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2204      	movs	r2, #4
 800890a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f846 	bl	80089a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01b      	beq.n	800895e <HAL_LTDC_IRQHandler+0xfe>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d016      	beq.n	800895e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0201 	bic.w	r2, r2, #1
 800893e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2201      	movs	r2, #1
 8008946:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f82f 	bl	80089bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01b      	beq.n	80089a0 <HAL_LTDC_IRQHandler+0x140>
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d016      	beq.n	80089a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0208 	bic.w	r2, r2, #8
 8008980:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2208      	movs	r2, #8
 8008988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f818 	bl	80089d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80089e4:	b5b0      	push	{r4, r5, r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_LTDC_ConfigLayer+0x1a>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e02c      	b.n	8008a58 <HAL_LTDC_ConfigLayer+0x74>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2134      	movs	r1, #52	; 0x34
 8008a14:	fb01 f303 	mul.w	r3, r1, r3
 8008a18:	4413      	add	r3, r2
 8008a1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4614      	mov	r4, r2
 8008a22:	461d      	mov	r5, r3
 8008a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f81f 	bl	8008a7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2201      	movs	r2, #1
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bdb0      	pop	{r4, r5, r7, pc}

08008a60 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008a6e:	b2db      	uxtb	r3, r3
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b089      	sub	sp, #36	; 0x24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a98:	4413      	add	r3, r2
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	01db      	lsls	r3, r3, #7
 8008aa8:	4413      	add	r3, r2
 8008aaa:	3384      	adds	r3, #132	; 0x84
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	01d2      	lsls	r2, r2, #7
 8008ab8:	440a      	add	r2, r1
 8008aba:	3284      	adds	r2, #132	; 0x84
 8008abc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008ac0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ad2:	4413      	add	r3, r2
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	01db      	lsls	r3, r3, #7
 8008ae0:	440b      	add	r3, r1
 8008ae2:	3384      	adds	r3, #132	; 0x84
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008afa:	4413      	add	r3, r2
 8008afc:	041b      	lsls	r3, r3, #16
 8008afe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	01db      	lsls	r3, r3, #7
 8008b0a:	4413      	add	r3, r2
 8008b0c:	3384      	adds	r3, #132	; 0x84
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	4611      	mov	r1, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	01d2      	lsls	r2, r2, #7
 8008b1a:	440a      	add	r2, r1
 8008b1c:	3284      	adds	r2, #132	; 0x84
 8008b1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008b22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b32:	4413      	add	r3, r2
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	01db      	lsls	r3, r3, #7
 8008b40:	440b      	add	r3, r1
 8008b42:	3384      	adds	r3, #132	; 0x84
 8008b44:	4619      	mov	r1, r3
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	01db      	lsls	r3, r3, #7
 8008b56:	4413      	add	r3, r2
 8008b58:	3384      	adds	r3, #132	; 0x84
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	6812      	ldr	r2, [r2, #0]
 8008b60:	4611      	mov	r1, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	01d2      	lsls	r2, r2, #7
 8008b66:	440a      	add	r2, r1
 8008b68:	3284      	adds	r2, #132	; 0x84
 8008b6a:	f023 0307 	bic.w	r3, r3, #7
 8008b6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	01db      	lsls	r3, r3, #7
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3384      	adds	r3, #132	; 0x84
 8008b7e:	461a      	mov	r2, r3
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	061b      	lsls	r3, r3, #24
 8008ba0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	01db      	lsls	r3, r3, #7
 8008bac:	4413      	add	r3, r2
 8008bae:	3384      	adds	r3, #132	; 0x84
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	01db      	lsls	r3, r3, #7
 8008bbc:	4413      	add	r3, r2
 8008bbe:	3384      	adds	r3, #132	; 0x84
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bcc:	461a      	mov	r2, r3
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	01db      	lsls	r3, r3, #7
 8008be0:	440b      	add	r3, r1
 8008be2:	3384      	adds	r3, #132	; 0x84
 8008be4:	4619      	mov	r1, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	01db      	lsls	r3, r3, #7
 8008bf6:	4413      	add	r3, r2
 8008bf8:	3384      	adds	r3, #132	; 0x84
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	4611      	mov	r1, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	01d2      	lsls	r2, r2, #7
 8008c06:	440a      	add	r2, r1
 8008c08:	3284      	adds	r2, #132	; 0x84
 8008c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	01db      	lsls	r3, r3, #7
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3384      	adds	r3, #132	; 0x84
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	01db      	lsls	r3, r3, #7
 8008c30:	4413      	add	r3, r2
 8008c32:	3384      	adds	r3, #132	; 0x84
 8008c34:	69da      	ldr	r2, [r3, #28]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	01db      	lsls	r3, r3, #7
 8008c40:	440b      	add	r3, r1
 8008c42:	3384      	adds	r3, #132	; 0x84
 8008c44:	4619      	mov	r1, r3
 8008c46:	4b58      	ldr	r3, [pc, #352]	; (8008da8 <LTDC_SetConfig+0x32c>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	6809      	ldr	r1, [r1, #0]
 8008c58:	4608      	mov	r0, r1
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	01c9      	lsls	r1, r1, #7
 8008c5e:	4401      	add	r1, r0
 8008c60:	3184      	adds	r1, #132	; 0x84
 8008c62:	4313      	orrs	r3, r2
 8008c64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	01db      	lsls	r3, r3, #7
 8008c70:	4413      	add	r3, r2
 8008c72:	3384      	adds	r3, #132	; 0x84
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	01db      	lsls	r3, r3, #7
 8008c80:	4413      	add	r3, r2
 8008c82:	3384      	adds	r3, #132	; 0x84
 8008c84:	461a      	mov	r2, r3
 8008c86:	2300      	movs	r3, #0
 8008c88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	01db      	lsls	r3, r3, #7
 8008c94:	4413      	add	r3, r2
 8008c96:	3384      	adds	r3, #132	; 0x84
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d102      	bne.n	8008cae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008ca8:	2304      	movs	r3, #4
 8008caa:	61fb      	str	r3, [r7, #28]
 8008cac:	e01b      	b.n	8008ce6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d102      	bne.n	8008cbc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e014      	b.n	8008ce6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d00b      	beq.n	8008cdc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d007      	beq.n	8008cdc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d003      	beq.n	8008cdc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008cd8:	2b07      	cmp	r3, #7
 8008cda:	d102      	bne.n	8008ce2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	e001      	b.n	8008ce6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	01db      	lsls	r3, r3, #7
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3384      	adds	r3, #132	; 0x84
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	01d2      	lsls	r2, r2, #7
 8008d00:	440a      	add	r2, r1
 8008d02:	3284      	adds	r2, #132	; 0x84
 8008d04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008d08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	fb02 f303 	mul.w	r3, r2, r3
 8008d14:	041a      	lsls	r2, r3, #16
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6859      	ldr	r1, [r3, #4]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	1acb      	subs	r3, r1, r3
 8008d20:	69f9      	ldr	r1, [r7, #28]
 8008d22:	fb01 f303 	mul.w	r3, r1, r3
 8008d26:	3303      	adds	r3, #3
 8008d28:	68f9      	ldr	r1, [r7, #12]
 8008d2a:	6809      	ldr	r1, [r1, #0]
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	01c9      	lsls	r1, r1, #7
 8008d32:	4401      	add	r1, r0
 8008d34:	3184      	adds	r1, #132	; 0x84
 8008d36:	4313      	orrs	r3, r2
 8008d38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	01db      	lsls	r3, r3, #7
 8008d44:	4413      	add	r3, r2
 8008d46:	3384      	adds	r3, #132	; 0x84
 8008d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	01db      	lsls	r3, r3, #7
 8008d54:	440b      	add	r3, r1
 8008d56:	3384      	adds	r3, #132	; 0x84
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <LTDC_SetConfig+0x330>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	01db      	lsls	r3, r3, #7
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3384      	adds	r3, #132	; 0x84
 8008d6e:	461a      	mov	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	01db      	lsls	r3, r3, #7
 8008d80:	4413      	add	r3, r2
 8008d82:	3384      	adds	r3, #132	; 0x84
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	01d2      	lsls	r2, r2, #7
 8008d90:	440a      	add	r2, r1
 8008d92:	3284      	adds	r2, #132	; 0x84
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	6013      	str	r3, [r2, #0]
}
 8008d9a:	bf00      	nop
 8008d9c:	3724      	adds	r7, #36	; 0x24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	fffff8f8 	.word	0xfffff8f8
 8008dac:	fffff800 	.word	0xfffff800

08008db0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a04      	ldr	r2, [pc, #16]	; (8008dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dbe:	6013      	str	r3, [r2, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40007000 	.word	0x40007000

08008dd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008dda:	4b23      	ldr	r3, [pc, #140]	; (8008e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	4a22      	ldr	r2, [pc, #136]	; (8008e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8008de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de4:	6413      	str	r3, [r2, #64]	; 0x40
 8008de6:	4b20      	ldr	r3, [pc, #128]	; (8008e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008df2:	4b1e      	ldr	r3, [pc, #120]	; (8008e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1d      	ldr	r2, [pc, #116]	; (8008e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dfc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008dfe:	f7fa fe75 	bl	8003aec <HAL_GetTick>
 8008e02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e04:	e009      	b.n	8008e1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e06:	f7fa fe71 	bl	8003aec <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e14:	d901      	bls.n	8008e1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e022      	b.n	8008e60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e1a:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e26:	d1ee      	bne.n	8008e06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a0f      	ldr	r2, [pc, #60]	; (8008e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e34:	f7fa fe5a 	bl	8003aec <HAL_GetTick>
 8008e38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e3a:	e009      	b.n	8008e50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e3c:	f7fa fe56 	bl	8003aec <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e4a:	d901      	bls.n	8008e50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e007      	b.n	8008e60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e5c:	d1ee      	bne.n	8008e3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40023800 	.word	0x40023800
 8008e6c:	40007000 	.word	0x40007000

08008e70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008e78:	f7fa fe38 	bl	8003aec <HAL_GetTick>
 8008e7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e067      	b.n	8008f58 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10b      	bne.n	8008eac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7f9 f8df 	bl	8002060 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008ea2:	f241 3188 	movw	r1, #5000	; 0x1388
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f85e 	bl	8008f68 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	021a      	lsls	r2, r3, #8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2120      	movs	r1, #32
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f856 	bl	8008f84 <QSPI_WaitFlagStateUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d135      	bne.n	8008f4e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <HAL_QSPI_Init+0xf0>)
 8008eea:	4013      	ands	r3, r2
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6852      	ldr	r2, [r2, #4]
 8008ef0:	0611      	lsls	r1, r2, #24
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	68d2      	ldr	r2, [r2, #12]
 8008ef6:	4311      	orrs	r1, r2
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	69d2      	ldr	r2, [r2, #28]
 8008efc:	4311      	orrs	r1, r2
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	6a12      	ldr	r2, [r2, #32]
 8008f02:	4311      	orrs	r1, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	430b      	orrs	r3, r1
 8008f0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <HAL_QSPI_Init+0xf4>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6912      	ldr	r2, [r2, #16]
 8008f1a:	0411      	lsls	r1, r2, #16
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6952      	ldr	r2, [r2, #20]
 8008f20:	4311      	orrs	r1, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	6992      	ldr	r2, [r2, #24]
 8008f26:	4311      	orrs	r1, r2
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008f56:	7afb      	ldrb	r3, [r7, #11]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	00ffff2f 	.word	0x00ffff2f
 8008f64:	ffe0f8fe 	.word	0xffe0f8fe

08008f68 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	4613      	mov	r3, r2
 8008f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008f94:	e01a      	b.n	8008fcc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f9c:	d016      	beq.n	8008fcc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f9e:	f7fa fda5 	bl	8003aec <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d302      	bcc.n	8008fb4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10b      	bne.n	8008fcc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc0:	f043 0201 	orr.w	r2, r3, #1
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e00e      	b.n	8008fea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf14      	ite	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	2300      	moveq	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d1d6      	bne.n	8008f96 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e291      	b.n	800952e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8087 	beq.w	8009126 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009018:	4b96      	ldr	r3, [pc, #600]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f003 030c 	and.w	r3, r3, #12
 8009020:	2b04      	cmp	r3, #4
 8009022:	d00c      	beq.n	800903e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009024:	4b93      	ldr	r3, [pc, #588]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 030c 	and.w	r3, r3, #12
 800902c:	2b08      	cmp	r3, #8
 800902e:	d112      	bne.n	8009056 <HAL_RCC_OscConfig+0x62>
 8009030:	4b90      	ldr	r3, [pc, #576]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800903c:	d10b      	bne.n	8009056 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903e:	4b8d      	ldr	r3, [pc, #564]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d06c      	beq.n	8009124 <HAL_RCC_OscConfig+0x130>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d168      	bne.n	8009124 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e26b      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905e:	d106      	bne.n	800906e <HAL_RCC_OscConfig+0x7a>
 8009060:	4b84      	ldr	r3, [pc, #528]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a83      	ldr	r2, [pc, #524]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	e02e      	b.n	80090cc <HAL_RCC_OscConfig+0xd8>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10c      	bne.n	8009090 <HAL_RCC_OscConfig+0x9c>
 8009076:	4b7f      	ldr	r3, [pc, #508]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a7e      	ldr	r2, [pc, #504]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800907c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4b7c      	ldr	r3, [pc, #496]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a7b      	ldr	r2, [pc, #492]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e01d      	b.n	80090cc <HAL_RCC_OscConfig+0xd8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009098:	d10c      	bne.n	80090b4 <HAL_RCC_OscConfig+0xc0>
 800909a:	4b76      	ldr	r3, [pc, #472]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a75      	ldr	r2, [pc, #468]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4b73      	ldr	r3, [pc, #460]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a72      	ldr	r2, [pc, #456]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	e00b      	b.n	80090cc <HAL_RCC_OscConfig+0xd8>
 80090b4:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a6e      	ldr	r2, [pc, #440]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	4b6c      	ldr	r3, [pc, #432]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a6b      	ldr	r2, [pc, #428]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d013      	beq.n	80090fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d4:	f7fa fd0a 	bl	8003aec <HAL_GetTick>
 80090d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090da:	e008      	b.n	80090ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090dc:	f7fa fd06 	bl	8003aec <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2b64      	cmp	r3, #100	; 0x64
 80090e8:	d901      	bls.n	80090ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e21f      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ee:	4b61      	ldr	r3, [pc, #388]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0f0      	beq.n	80090dc <HAL_RCC_OscConfig+0xe8>
 80090fa:	e014      	b.n	8009126 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fc:	f7fa fcf6 	bl	8003aec <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009104:	f7fa fcf2 	bl	8003aec <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b64      	cmp	r3, #100	; 0x64
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e20b      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009116:	4b57      	ldr	r3, [pc, #348]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f0      	bne.n	8009104 <HAL_RCC_OscConfig+0x110>
 8009122:	e000      	b.n	8009126 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d069      	beq.n	8009206 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009132:	4b50      	ldr	r3, [pc, #320]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f003 030c 	and.w	r3, r3, #12
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800913e:	4b4d      	ldr	r3, [pc, #308]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 030c 	and.w	r3, r3, #12
 8009146:	2b08      	cmp	r3, #8
 8009148:	d11c      	bne.n	8009184 <HAL_RCC_OscConfig+0x190>
 800914a:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d116      	bne.n	8009184 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009156:	4b47      	ldr	r3, [pc, #284]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_RCC_OscConfig+0x17a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d001      	beq.n	800916e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e1df      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800916e:	4b41      	ldr	r3, [pc, #260]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	493d      	ldr	r1, [pc, #244]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800917e:	4313      	orrs	r3, r2
 8009180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009182:	e040      	b.n	8009206 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d023      	beq.n	80091d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800918c:	4b39      	ldr	r3, [pc, #228]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a38      	ldr	r2, [pc, #224]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009192:	f043 0301 	orr.w	r3, r3, #1
 8009196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fa fca8 	bl	8003aec <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091a0:	f7fa fca4 	bl	8003aec <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e1bd      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091b2:	4b30      	ldr	r3, [pc, #192]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091be:	4b2d      	ldr	r3, [pc, #180]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4929      	ldr	r1, [pc, #164]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	e018      	b.n	8009206 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091d4:	4b27      	ldr	r3, [pc, #156]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a26      	ldr	r2, [pc, #152]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e0:	f7fa fc84 	bl	8003aec <HAL_GetTick>
 80091e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091e8:	f7fa fc80 	bl	8003aec <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e199      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f0      	bne.n	80091e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d038      	beq.n	8009284 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d019      	beq.n	800924e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800921a:	4b16      	ldr	r3, [pc, #88]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800921c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921e:	4a15      	ldr	r2, [pc, #84]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009220:	f043 0301 	orr.w	r3, r3, #1
 8009224:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009226:	f7fa fc61 	bl	8003aec <HAL_GetTick>
 800922a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800922e:	f7fa fc5d 	bl	8003aec <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e176      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0f0      	beq.n	800922e <HAL_RCC_OscConfig+0x23a>
 800924c:	e01a      	b.n	8009284 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009252:	4a08      	ldr	r2, [pc, #32]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800925a:	f7fa fc47 	bl	8003aec <HAL_GetTick>
 800925e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009260:	e00a      	b.n	8009278 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009262:	f7fa fc43 	bl	8003aec <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d903      	bls.n	8009278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e15c      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
 8009274:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009278:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800927a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1ee      	bne.n	8009262 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80a4 	beq.w	80093da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009292:	4b8b      	ldr	r3, [pc, #556]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10d      	bne.n	80092ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800929e:	4b88      	ldr	r3, [pc, #544]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	4a87      	ldr	r2, [pc, #540]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80092a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a8:	6413      	str	r3, [r2, #64]	; 0x40
 80092aa:	4b85      	ldr	r3, [pc, #532]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092b6:	2301      	movs	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ba:	4b82      	ldr	r3, [pc, #520]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d118      	bne.n	80092f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80092c6:	4b7f      	ldr	r3, [pc, #508]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a7e      	ldr	r2, [pc, #504]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092d2:	f7fa fc0b 	bl	8003aec <HAL_GetTick>
 80092d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092da:	f7fa fc07 	bl	8003aec <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b64      	cmp	r3, #100	; 0x64
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e120      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ec:	4b75      	ldr	r3, [pc, #468]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d106      	bne.n	800930e <HAL_RCC_OscConfig+0x31a>
 8009300:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009304:	4a6e      	ldr	r2, [pc, #440]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	6713      	str	r3, [r2, #112]	; 0x70
 800930c:	e02d      	b.n	800936a <HAL_RCC_OscConfig+0x376>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10c      	bne.n	8009330 <HAL_RCC_OscConfig+0x33c>
 8009316:	4b6a      	ldr	r3, [pc, #424]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931a:	4a69      	ldr	r2, [pc, #420]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800931c:	f023 0301 	bic.w	r3, r3, #1
 8009320:	6713      	str	r3, [r2, #112]	; 0x70
 8009322:	4b67      	ldr	r3, [pc, #412]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	4a66      	ldr	r2, [pc, #408]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009328:	f023 0304 	bic.w	r3, r3, #4
 800932c:	6713      	str	r3, [r2, #112]	; 0x70
 800932e:	e01c      	b.n	800936a <HAL_RCC_OscConfig+0x376>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b05      	cmp	r3, #5
 8009336:	d10c      	bne.n	8009352 <HAL_RCC_OscConfig+0x35e>
 8009338:	4b61      	ldr	r3, [pc, #388]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933c:	4a60      	ldr	r2, [pc, #384]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800933e:	f043 0304 	orr.w	r3, r3, #4
 8009342:	6713      	str	r3, [r2, #112]	; 0x70
 8009344:	4b5e      	ldr	r3, [pc, #376]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009348:	4a5d      	ldr	r2, [pc, #372]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	6713      	str	r3, [r2, #112]	; 0x70
 8009350:	e00b      	b.n	800936a <HAL_RCC_OscConfig+0x376>
 8009352:	4b5b      	ldr	r3, [pc, #364]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	4a5a      	ldr	r2, [pc, #360]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	6713      	str	r3, [r2, #112]	; 0x70
 800935e:	4b58      	ldr	r3, [pc, #352]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	4a57      	ldr	r2, [pc, #348]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009364:	f023 0304 	bic.w	r3, r3, #4
 8009368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d015      	beq.n	800939e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009372:	f7fa fbbb 	bl	8003aec <HAL_GetTick>
 8009376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009378:	e00a      	b.n	8009390 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800937a:	f7fa fbb7 	bl	8003aec <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	f241 3288 	movw	r2, #5000	; 0x1388
 8009388:	4293      	cmp	r3, r2
 800938a:	d901      	bls.n	8009390 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e0ce      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009390:	4b4b      	ldr	r3, [pc, #300]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0ee      	beq.n	800937a <HAL_RCC_OscConfig+0x386>
 800939c:	e014      	b.n	80093c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800939e:	f7fa fba5 	bl	8003aec <HAL_GetTick>
 80093a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093a4:	e00a      	b.n	80093bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a6:	f7fa fba1 	bl	8003aec <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e0b8      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093bc:	4b40      	ldr	r3, [pc, #256]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1ee      	bne.n	80093a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d105      	bne.n	80093da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ce:	4b3c      	ldr	r3, [pc, #240]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a4 	beq.w	800952c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093e4:	4b36      	ldr	r3, [pc, #216]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 030c 	and.w	r3, r3, #12
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d06b      	beq.n	80094c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d149      	bne.n	800948c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093f8:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a30      	ldr	r2, [pc, #192]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009404:	f7fa fb72 	bl	8003aec <HAL_GetTick>
 8009408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800940c:	f7fa fb6e 	bl	8003aec <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e087      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941e:	4b28      	ldr	r3, [pc, #160]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f0      	bne.n	800940c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69da      	ldr	r2, [r3, #28]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	019b      	lsls	r3, r3, #6
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	085b      	lsrs	r3, r3, #1
 8009442:	3b01      	subs	r3, #1
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	061b      	lsls	r3, r3, #24
 800944e:	4313      	orrs	r3, r2
 8009450:	4a1b      	ldr	r2, [pc, #108]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009456:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009458:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800945e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009464:	f7fa fb42 	bl	8003aec <HAL_GetTick>
 8009468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800946c:	f7fa fb3e 	bl	8003aec <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e057      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800947e:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0f0      	beq.n	800946c <HAL_RCC_OscConfig+0x478>
 800948a:	e04f      	b.n	800952c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0b      	ldr	r2, [pc, #44]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009498:	f7fa fb28 	bl	8003aec <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094a0:	f7fa fb24 	bl	8003aec <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e03d      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094b2:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f0      	bne.n	80094a0 <HAL_RCC_OscConfig+0x4ac>
 80094be:	e035      	b.n	800952c <HAL_RCC_OscConfig+0x538>
 80094c0:	40023800 	.word	0x40023800
 80094c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80094c8:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <HAL_RCC_OscConfig+0x544>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d028      	beq.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d121      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d11a      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094f8:	4013      	ands	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009500:	4293      	cmp	r3, r2
 8009502:	d111      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	3b01      	subs	r3, #1
 8009512:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009514:	429a      	cmp	r2, r3
 8009516:	d107      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	40023800 	.word	0x40023800

0800953c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e0d0      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009554:	4b6a      	ldr	r3, [pc, #424]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d910      	bls.n	8009584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009562:	4b67      	ldr	r3, [pc, #412]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 020f 	bic.w	r2, r3, #15
 800956a:	4965      	ldr	r1, [pc, #404]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4313      	orrs	r3, r2
 8009570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009572:	4b63      	ldr	r3, [pc, #396]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d001      	beq.n	8009584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0b8      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d020      	beq.n	80095d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800959c:	4b59      	ldr	r3, [pc, #356]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	4a58      	ldr	r2, [pc, #352]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80095a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095b4:	4b53      	ldr	r3, [pc, #332]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4a52      	ldr	r2, [pc, #328]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80095be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095c0:	4b50      	ldr	r3, [pc, #320]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	494d      	ldr	r1, [pc, #308]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d040      	beq.n	8009660 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d107      	bne.n	80095f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095e6:	4b47      	ldr	r3, [pc, #284]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d115      	bne.n	800961e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e07f      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d107      	bne.n	800960e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095fe:	4b41      	ldr	r3, [pc, #260]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e073      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800960e:	4b3d      	ldr	r3, [pc, #244]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e06b      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800961e:	4b39      	ldr	r3, [pc, #228]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f023 0203 	bic.w	r2, r3, #3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	4936      	ldr	r1, [pc, #216]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 800962c:	4313      	orrs	r3, r2
 800962e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009630:	f7fa fa5c 	bl	8003aec <HAL_GetTick>
 8009634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009636:	e00a      	b.n	800964e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009638:	f7fa fa58 	bl	8003aec <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	f241 3288 	movw	r2, #5000	; 0x1388
 8009646:	4293      	cmp	r3, r2
 8009648:	d901      	bls.n	800964e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e053      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964e:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 020c 	and.w	r2, r3, #12
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	429a      	cmp	r2, r3
 800965e:	d1eb      	bne.n	8009638 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d210      	bcs.n	8009690 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966e:	4b24      	ldr	r3, [pc, #144]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f023 020f 	bic.w	r2, r3, #15
 8009676:	4922      	ldr	r1, [pc, #136]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	4313      	orrs	r3, r2
 800967c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	4b20      	ldr	r3, [pc, #128]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e032      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800969c:	4b19      	ldr	r3, [pc, #100]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4916      	ldr	r1, [pc, #88]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d009      	beq.n	80096ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80096ba:	4b12      	ldr	r3, [pc, #72]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	490e      	ldr	r1, [pc, #56]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80096ce:	f000 f821 	bl	8009714 <HAL_RCC_GetSysClockFreq>
 80096d2:	4601      	mov	r1, r0
 80096d4:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	091b      	lsrs	r3, r3, #4
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	4a0a      	ldr	r2, [pc, #40]	; (8009708 <HAL_RCC_ClockConfig+0x1cc>)
 80096e0:	5cd3      	ldrb	r3, [r2, r3]
 80096e2:	fa21 f303 	lsr.w	r3, r1, r3
 80096e6:	4a09      	ldr	r2, [pc, #36]	; (800970c <HAL_RCC_ClockConfig+0x1d0>)
 80096e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80096ea:	4b09      	ldr	r3, [pc, #36]	; (8009710 <HAL_RCC_ClockConfig+0x1d4>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f9 f92a 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40023c00 	.word	0x40023c00
 8009704:	40023800 	.word	0x40023800
 8009708:	08028e9c 	.word	0x08028e9c
 800970c:	20000000 	.word	0x20000000
 8009710:	20000008 	.word	0x20000008

08009714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	607b      	str	r3, [r7, #4]
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	2300      	movs	r3, #0
 8009724:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800972a:	4b50      	ldr	r3, [pc, #320]	; (800986c <HAL_RCC_GetSysClockFreq+0x158>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 030c 	and.w	r3, r3, #12
 8009732:	2b04      	cmp	r3, #4
 8009734:	d007      	beq.n	8009746 <HAL_RCC_GetSysClockFreq+0x32>
 8009736:	2b08      	cmp	r3, #8
 8009738:	d008      	beq.n	800974c <HAL_RCC_GetSysClockFreq+0x38>
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 808d 	bne.w	800985a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009740:	4b4b      	ldr	r3, [pc, #300]	; (8009870 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009742:	60bb      	str	r3, [r7, #8]
      break;
 8009744:	e08c      	b.n	8009860 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009746:	4b4b      	ldr	r3, [pc, #300]	; (8009874 <HAL_RCC_GetSysClockFreq+0x160>)
 8009748:	60bb      	str	r3, [r7, #8]
      break;
 800974a:	e089      	b.n	8009860 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800974c:	4b47      	ldr	r3, [pc, #284]	; (800986c <HAL_RCC_GetSysClockFreq+0x158>)
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009754:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009756:	4b45      	ldr	r3, [pc, #276]	; (800986c <HAL_RCC_GetSysClockFreq+0x158>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d023      	beq.n	80097aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009762:	4b42      	ldr	r3, [pc, #264]	; (800986c <HAL_RCC_GetSysClockFreq+0x158>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	099b      	lsrs	r3, r3, #6
 8009768:	f04f 0400 	mov.w	r4, #0
 800976c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009770:	f04f 0200 	mov.w	r2, #0
 8009774:	ea03 0501 	and.w	r5, r3, r1
 8009778:	ea04 0602 	and.w	r6, r4, r2
 800977c:	4a3d      	ldr	r2, [pc, #244]	; (8009874 <HAL_RCC_GetSysClockFreq+0x160>)
 800977e:	fb02 f106 	mul.w	r1, r2, r6
 8009782:	2200      	movs	r2, #0
 8009784:	fb02 f205 	mul.w	r2, r2, r5
 8009788:	440a      	add	r2, r1
 800978a:	493a      	ldr	r1, [pc, #232]	; (8009874 <HAL_RCC_GetSysClockFreq+0x160>)
 800978c:	fba5 0101 	umull	r0, r1, r5, r1
 8009790:	1853      	adds	r3, r2, r1
 8009792:	4619      	mov	r1, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f04f 0400 	mov.w	r4, #0
 800979a:	461a      	mov	r2, r3
 800979c:	4623      	mov	r3, r4
 800979e:	f7f6 fd87 	bl	80002b0 <__aeabi_uldivmod>
 80097a2:	4603      	mov	r3, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e049      	b.n	800983e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097aa:	4b30      	ldr	r3, [pc, #192]	; (800986c <HAL_RCC_GetSysClockFreq+0x158>)
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	099b      	lsrs	r3, r3, #6
 80097b0:	f04f 0400 	mov.w	r4, #0
 80097b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80097b8:	f04f 0200 	mov.w	r2, #0
 80097bc:	ea03 0501 	and.w	r5, r3, r1
 80097c0:	ea04 0602 	and.w	r6, r4, r2
 80097c4:	4629      	mov	r1, r5
 80097c6:	4632      	mov	r2, r6
 80097c8:	f04f 0300 	mov.w	r3, #0
 80097cc:	f04f 0400 	mov.w	r4, #0
 80097d0:	0154      	lsls	r4, r2, #5
 80097d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80097d6:	014b      	lsls	r3, r1, #5
 80097d8:	4619      	mov	r1, r3
 80097da:	4622      	mov	r2, r4
 80097dc:	1b49      	subs	r1, r1, r5
 80097de:	eb62 0206 	sbc.w	r2, r2, r6
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	f04f 0400 	mov.w	r4, #0
 80097ea:	0194      	lsls	r4, r2, #6
 80097ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80097f0:	018b      	lsls	r3, r1, #6
 80097f2:	1a5b      	subs	r3, r3, r1
 80097f4:	eb64 0402 	sbc.w	r4, r4, r2
 80097f8:	f04f 0100 	mov.w	r1, #0
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	00e2      	lsls	r2, r4, #3
 8009802:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009806:	00d9      	lsls	r1, r3, #3
 8009808:	460b      	mov	r3, r1
 800980a:	4614      	mov	r4, r2
 800980c:	195b      	adds	r3, r3, r5
 800980e:	eb44 0406 	adc.w	r4, r4, r6
 8009812:	f04f 0100 	mov.w	r1, #0
 8009816:	f04f 0200 	mov.w	r2, #0
 800981a:	02a2      	lsls	r2, r4, #10
 800981c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009820:	0299      	lsls	r1, r3, #10
 8009822:	460b      	mov	r3, r1
 8009824:	4614      	mov	r4, r2
 8009826:	4618      	mov	r0, r3
 8009828:	4621      	mov	r1, r4
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f04f 0400 	mov.w	r4, #0
 8009830:	461a      	mov	r2, r3
 8009832:	4623      	mov	r3, r4
 8009834:	f7f6 fd3c 	bl	80002b0 <__aeabi_uldivmod>
 8009838:	4603      	mov	r3, r0
 800983a:	460c      	mov	r4, r1
 800983c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800983e:	4b0b      	ldr	r3, [pc, #44]	; (800986c <HAL_RCC_GetSysClockFreq+0x158>)
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	0c1b      	lsrs	r3, r3, #16
 8009844:	f003 0303 	and.w	r3, r3, #3
 8009848:	3301      	adds	r3, #1
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	fbb2 f3f3 	udiv	r3, r2, r3
 8009856:	60bb      	str	r3, [r7, #8]
      break;
 8009858:	e002      	b.n	8009860 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <HAL_RCC_GetSysClockFreq+0x15c>)
 800985c:	60bb      	str	r3, [r7, #8]
      break;
 800985e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009860:	68bb      	ldr	r3, [r7, #8]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986a:	bf00      	nop
 800986c:	40023800 	.word	0x40023800
 8009870:	00f42400 	.word	0x00f42400
 8009874:	017d7840 	.word	0x017d7840

08009878 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800987c:	4b03      	ldr	r3, [pc, #12]	; (800988c <HAL_RCC_GetHCLKFreq+0x14>)
 800987e:	681b      	ldr	r3, [r3, #0]
}
 8009880:	4618      	mov	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20000000 	.word	0x20000000

08009890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009894:	f7ff fff0 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 8009898:	4601      	mov	r1, r0
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	0a9b      	lsrs	r3, r3, #10
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	4a03      	ldr	r2, [pc, #12]	; (80098b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098a6:	5cd3      	ldrb	r3, [r2, r3]
 80098a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40023800 	.word	0x40023800
 80098b4:	08028eac 	.word	0x08028eac

080098b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80098bc:	f7ff ffdc 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 80098c0:	4601      	mov	r1, r0
 80098c2:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	0b5b      	lsrs	r3, r3, #13
 80098c8:	f003 0307 	and.w	r3, r3, #7
 80098cc:	4a03      	ldr	r2, [pc, #12]	; (80098dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80098ce:	5cd3      	ldrb	r3, [r2, r3]
 80098d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	40023800 	.word	0x40023800
 80098dc:	08028eac 	.word	0x08028eac

080098e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	220f      	movs	r2, #15
 80098ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80098f0:	4b12      	ldr	r3, [pc, #72]	; (800993c <HAL_RCC_GetClockConfig+0x5c>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f003 0203 	and.w	r2, r3, #3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80098fc:	4b0f      	ldr	r3, [pc, #60]	; (800993c <HAL_RCC_GetClockConfig+0x5c>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <HAL_RCC_GetClockConfig+0x5c>)
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <HAL_RCC_GetClockConfig+0x5c>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	08db      	lsrs	r3, r3, #3
 800991a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <HAL_RCC_GetClockConfig+0x60>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 020f 	and.w	r2, r3, #15
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	601a      	str	r2, [r3, #0]
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40023800 	.word	0x40023800
 8009940:	40023c00 	.word	0x40023c00

08009944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d012      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800996c:	4b69      	ldr	r3, [pc, #420]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	4a68      	ldr	r2, [pc, #416]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009972:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009976:	6093      	str	r3, [r2, #8]
 8009978:	4b66      	ldr	r3, [pc, #408]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009980:	4964      	ldr	r1, [pc, #400]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009982:	4313      	orrs	r3, r2
 8009984:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800998e:	2301      	movs	r3, #1
 8009990:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d017      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800999e:	4b5d      	ldr	r3, [pc, #372]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ac:	4959      	ldr	r1, [pc, #356]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ae:	4313      	orrs	r3, r2
 80099b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099bc:	d101      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80099be:	2301      	movs	r3, #1
 80099c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80099ca:	2301      	movs	r3, #1
 80099cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d017      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099da:	4b4e      	ldr	r3, [pc, #312]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	494a      	ldr	r1, [pc, #296]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099f8:	d101      	bne.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80099fa:	2301      	movs	r3, #1
 80099fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0320 	and.w	r3, r3, #32
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 808b 	beq.w	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a28:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	4a39      	ldr	r2, [pc, #228]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a32:	6413      	str	r3, [r2, #64]	; 0x40
 8009a34:	4b37      	ldr	r3, [pc, #220]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	60bb      	str	r3, [r7, #8]
 8009a3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a40:	4b35      	ldr	r3, [pc, #212]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a34      	ldr	r2, [pc, #208]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a4c:	f7fa f84e 	bl	8003aec <HAL_GetTick>
 8009a50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a52:	e008      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a54:	f7fa f84a 	bl	8003aec <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b64      	cmp	r3, #100	; 0x64
 8009a60:	d901      	bls.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e357      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a66:	4b2c      	ldr	r3, [pc, #176]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d0f0      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a72:	4b28      	ldr	r3, [pc, #160]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d035      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d02e      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a90:	4b20      	ldr	r3, [pc, #128]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009a9a:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9e:	4a1d      	ldr	r2, [pc, #116]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009aa6:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aaa:	4a1a      	ldr	r2, [pc, #104]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ab0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009ab2:	4a18      	ldr	r2, [pc, #96]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ab8:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d114      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac4:	f7fa f812 	bl	8003aec <HAL_GetTick>
 8009ac8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009aca:	e00a      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009acc:	f7fa f80e 	bl	8003aec <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e319      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0ee      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009afa:	d111      	bne.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b08:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009b0a:	400b      	ands	r3, r1
 8009b0c:	4901      	ldr	r1, [pc, #4]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	608b      	str	r3, [r1, #8]
 8009b12:	e00b      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009b14:	40023800 	.word	0x40023800
 8009b18:	40007000 	.word	0x40007000
 8009b1c:	0ffffcff 	.word	0x0ffffcff
 8009b20:	4bb1      	ldr	r3, [pc, #708]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	4ab0      	ldr	r2, [pc, #704]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009b2a:	6093      	str	r3, [r2, #8]
 8009b2c:	4bae      	ldr	r3, [pc, #696]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b38:	49ab      	ldr	r1, [pc, #684]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d010      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b4a:	4ba7      	ldr	r3, [pc, #668]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b50:	4aa5      	ldr	r2, [pc, #660]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009b5a:	4ba3      	ldr	r3, [pc, #652]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	49a0      	ldr	r1, [pc, #640]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b78:	4b9b      	ldr	r3, [pc, #620]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b86:	4998      	ldr	r1, [pc, #608]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b9a:	4b93      	ldr	r3, [pc, #588]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ba8:	498f      	ldr	r1, [pc, #572]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bbc:	4b8a      	ldr	r3, [pc, #552]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bca:	4987      	ldr	r1, [pc, #540]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bde:	4b82      	ldr	r3, [pc, #520]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bec:	497e      	ldr	r1, [pc, #504]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c00:	4b79      	ldr	r3, [pc, #484]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c06:	f023 0203 	bic.w	r2, r3, #3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0e:	4976      	ldr	r1, [pc, #472]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c22:	4b71      	ldr	r3, [pc, #452]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c28:	f023 020c 	bic.w	r2, r3, #12
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c30:	496d      	ldr	r1, [pc, #436]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00a      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c44:	4b68      	ldr	r3, [pc, #416]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c52:	4965      	ldr	r1, [pc, #404]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00a      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c66:	4b60      	ldr	r3, [pc, #384]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c74:	495c      	ldr	r1, [pc, #368]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c88:	4b57      	ldr	r3, [pc, #348]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	4954      	ldr	r1, [pc, #336]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009caa:	4b4f      	ldr	r3, [pc, #316]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb8:	494b      	ldr	r1, [pc, #300]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00a      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009ccc:	4b46      	ldr	r3, [pc, #280]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cda:	4943      	ldr	r1, [pc, #268]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009cee:	4b3e      	ldr	r3, [pc, #248]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cfc:	493a      	ldr	r1, [pc, #232]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00a      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d10:	4b35      	ldr	r3, [pc, #212]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d1e:	4932      	ldr	r1, [pc, #200]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d011      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009d32:	4b2d      	ldr	r3, [pc, #180]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d40:	4929      	ldr	r1, [pc, #164]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d50:	d101      	bne.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009d52:	2301      	movs	r3, #1
 8009d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009d62:	2301      	movs	r3, #1
 8009d64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d72:	4b1d      	ldr	r3, [pc, #116]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d80:	4919      	ldr	r1, [pc, #100]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009d94:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009da4:	4910      	ldr	r1, [pc, #64]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d006      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80d9 	beq.w	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009dc0:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a08      	ldr	r2, [pc, #32]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dcc:	f7f9 fe8e 	bl	8003aec <HAL_GetTick>
 8009dd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009dd2:	e00b      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009dd4:	f7f9 fe8a 	bl	8003aec <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b64      	cmp	r3, #100	; 0x64
 8009de0:	d904      	bls.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e197      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009de6:	bf00      	nop
 8009de8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009dec:	4b6c      	ldr	r3, [pc, #432]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ed      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d021      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d11d      	bne.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e0c:	4b64      	ldr	r3, [pc, #400]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e12:	0c1b      	lsrs	r3, r3, #16
 8009e14:	f003 0303 	and.w	r3, r3, #3
 8009e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e1a:	4b61      	ldr	r3, [pc, #388]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e20:	0e1b      	lsrs	r3, r3, #24
 8009e22:	f003 030f 	and.w	r3, r3, #15
 8009e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	019a      	lsls	r2, r3, #6
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	041b      	lsls	r3, r3, #16
 8009e32:	431a      	orrs	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	061b      	lsls	r3, r3, #24
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	071b      	lsls	r3, r3, #28
 8009e40:	4957      	ldr	r1, [pc, #348]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e5c:	d00a      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d02e      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e72:	d129      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e74:	4b4a      	ldr	r3, [pc, #296]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	f003 0303 	and.w	r3, r3, #3
 8009e80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e82:	4b47      	ldr	r3, [pc, #284]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e88:	0f1b      	lsrs	r3, r3, #28
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	019a      	lsls	r2, r3, #6
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	041b      	lsls	r3, r3, #16
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	061b      	lsls	r3, r3, #24
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	071b      	lsls	r3, r3, #28
 8009ea8:	493d      	ldr	r1, [pc, #244]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009eb0:	4b3b      	ldr	r3, [pc, #236]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eb6:	f023 021f 	bic.w	r2, r3, #31
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4937      	ldr	r1, [pc, #220]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01d      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ed4:	4b32      	ldr	r3, [pc, #200]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eda:	0e1b      	lsrs	r3, r3, #24
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ee2:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ee8:	0f1b      	lsrs	r3, r3, #28
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	019a      	lsls	r2, r3, #6
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	041b      	lsls	r3, r3, #16
 8009efc:	431a      	orrs	r2, r3
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	061b      	lsls	r3, r3, #24
 8009f02:	431a      	orrs	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	071b      	lsls	r3, r3, #28
 8009f08:	4925      	ldr	r1, [pc, #148]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d011      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	019a      	lsls	r2, r3, #6
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	041b      	lsls	r3, r3, #16
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	061b      	lsls	r3, r3, #24
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	071b      	lsls	r3, r3, #28
 8009f38:	4919      	ldr	r1, [pc, #100]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f40:	4b17      	ldr	r3, [pc, #92]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a16      	ldr	r2, [pc, #88]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f4c:	f7f9 fdce 	bl	8003aec <HAL_GetTick>
 8009f50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f52:	e008      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009f54:	f7f9 fdca 	bl	8003aec <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b64      	cmp	r3, #100	; 0x64
 8009f60:	d901      	bls.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e0d7      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f66:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0f0      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	f040 80cd 	bne.w	800a114 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a08      	ldr	r2, [pc, #32]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f86:	f7f9 fdb1 	bl	8003aec <HAL_GetTick>
 8009f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009f8c:	e00a      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009f8e:	f7f9 fdad 	bl	8003aec <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	2b64      	cmp	r3, #100	; 0x64
 8009f9a:	d903      	bls.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e0ba      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009fa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fa4:	4b5e      	ldr	r3, [pc, #376]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb0:	d0ed      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d02e      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d12a      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009fda:	4b51      	ldr	r3, [pc, #324]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe0:	0c1b      	lsrs	r3, r3, #16
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009fe8:	4b4d      	ldr	r3, [pc, #308]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	0f1b      	lsrs	r3, r3, #28
 8009ff0:	f003 0307 	and.w	r3, r3, #7
 8009ff4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	019a      	lsls	r2, r3, #6
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	041b      	lsls	r3, r3, #16
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	061b      	lsls	r3, r3, #24
 800a008:	431a      	orrs	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	071b      	lsls	r3, r3, #28
 800a00e:	4944      	ldr	r1, [pc, #272]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a010:	4313      	orrs	r3, r2
 800a012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a016:	4b42      	ldr	r3, [pc, #264]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a01c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a024:	3b01      	subs	r3, #1
 800a026:	021b      	lsls	r3, r3, #8
 800a028:	493d      	ldr	r1, [pc, #244]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d022      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a044:	d11d      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a046:	4b36      	ldr	r3, [pc, #216]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04c:	0e1b      	lsrs	r3, r3, #24
 800a04e:	f003 030f 	and.w	r3, r3, #15
 800a052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a054:	4b32      	ldr	r3, [pc, #200]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05a:	0f1b      	lsrs	r3, r3, #28
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	019a      	lsls	r2, r3, #6
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	041b      	lsls	r3, r3, #16
 800a06e:	431a      	orrs	r2, r3
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	061b      	lsls	r3, r3, #24
 800a074:	431a      	orrs	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	071b      	lsls	r3, r3, #28
 800a07a:	4929      	ldr	r1, [pc, #164]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d028      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a08e:	4b24      	ldr	r3, [pc, #144]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a094:	0e1b      	lsrs	r3, r3, #24
 800a096:	f003 030f 	and.w	r3, r3, #15
 800a09a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a09c:	4b20      	ldr	r3, [pc, #128]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a2:	0c1b      	lsrs	r3, r3, #16
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	019a      	lsls	r2, r3, #6
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	041b      	lsls	r3, r3, #16
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	061b      	lsls	r3, r3, #24
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	071b      	lsls	r3, r3, #28
 800a0c2:	4917      	ldr	r1, [pc, #92]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a0ca:	4b15      	ldr	r3, [pc, #84]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4911      	ldr	r1, [pc, #68]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a0e0:	4b0f      	ldr	r3, [pc, #60]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a0e      	ldr	r2, [pc, #56]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ec:	f7f9 fcfe 	bl	8003aec <HAL_GetTick>
 800a0f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a0f2:	e008      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a0f4:	f7f9 fcfa 	bl	8003aec <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b64      	cmp	r3, #100	; 0x64
 800a100:	d901      	bls.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e007      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a10e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a112:	d1ef      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	40023800 	.word	0x40023800

0800a124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a142:	f040 8086 	bne.w	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a146:	4b8d      	ldr	r3, [pc, #564]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a14c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a154:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a15c:	d03e      	beq.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800a15e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a162:	d073      	beq.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d000      	beq.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a168:	e074      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a16a:	4b84      	ldr	r3, [pc, #528]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d108      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a176:	4b81      	ldr	r3, [pc, #516]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a17e:	4a80      	ldr	r2, [pc, #512]	; (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800a180:	fbb2 f3f3 	udiv	r3, r2, r3
 800a184:	613b      	str	r3, [r7, #16]
 800a186:	e007      	b.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a188:	4b7c      	ldr	r3, [pc, #496]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a190:	4a7c      	ldr	r2, [pc, #496]	; (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800a192:	fbb2 f3f3 	udiv	r3, r2, r3
 800a196:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a198:	4b78      	ldr	r3, [pc, #480]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19e:	0e1b      	lsrs	r3, r3, #24
 800a1a0:	f003 030f 	and.w	r3, r3, #15
 800a1a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a1a6:	4b75      	ldr	r3, [pc, #468]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ac:	099b      	lsrs	r3, r3, #6
 800a1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	fb02 f203 	mul.w	r2, r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a1c0:	4b6e      	ldr	r3, [pc, #440]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c6:	0a1b      	lsrs	r3, r3, #8
 800a1c8:	f003 031f 	and.w	r3, r3, #31
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d8:	617b      	str	r3, [r7, #20]
        break;
 800a1da:	e03b      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a1dc:	4b67      	ldr	r3, [pc, #412]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d108      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a1e8:	4b64      	ldr	r3, [pc, #400]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1f0:	4a63      	ldr	r2, [pc, #396]	; (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800a1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	e007      	b.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a1fa:	4b60      	ldr	r3, [pc, #384]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a202:	4a60      	ldr	r2, [pc, #384]	; (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800a204:	fbb2 f3f3 	udiv	r3, r2, r3
 800a208:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a20a:	4b5c      	ldr	r3, [pc, #368]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a210:	0e1b      	lsrs	r3, r3, #24
 800a212:	f003 030f 	and.w	r3, r3, #15
 800a216:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a218:	4b58      	ldr	r3, [pc, #352]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a21e:	099b      	lsrs	r3, r3, #6
 800a220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	fb02 f203 	mul.w	r2, r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a230:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a232:	4b52      	ldr	r3, [pc, #328]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a238:	f003 031f 	and.w	r3, r3, #31
 800a23c:	3301      	adds	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	fbb2 f3f3 	udiv	r3, r2, r3
 800a248:	617b      	str	r3, [r7, #20]
        break;
 800a24a:	e003      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a24c:	4b4e      	ldr	r3, [pc, #312]	; (800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a24e:	617b      	str	r3, [r7, #20]
        break;
 800a250:	e000      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800a252:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a25a:	f040 8086 	bne.w	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a25e:	4b47      	ldr	r3, [pc, #284]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a264:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a26c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a274:	d03e      	beq.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a27a:	d073      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d000      	beq.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a280:	e074      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a282:	4b3e      	ldr	r3, [pc, #248]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d108      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a28e:	4b3b      	ldr	r3, [pc, #236]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a296:	4a3a      	ldr	r2, [pc, #232]	; (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800a298:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29c:	613b      	str	r3, [r7, #16]
 800a29e:	e007      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a2a0:	4b36      	ldr	r3, [pc, #216]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2a8:	4a36      	ldr	r2, [pc, #216]	; (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800a2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a2b0:	4b32      	ldr	r3, [pc, #200]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b6:	0e1b      	lsrs	r3, r3, #24
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a2be:	4b2f      	ldr	r3, [pc, #188]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c4:	099b      	lsrs	r3, r3, #6
 800a2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	fb02 f203 	mul.w	r2, r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a2d8:	4b28      	ldr	r3, [pc, #160]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2de:	0a1b      	lsrs	r3, r3, #8
 800a2e0:	f003 031f 	and.w	r3, r3, #31
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f0:	617b      	str	r3, [r7, #20]
        break;
 800a2f2:	e03b      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a2f4:	4b21      	ldr	r3, [pc, #132]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d108      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a300:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a308:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800a30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	e007      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a312:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a31a:	4a1a      	ldr	r2, [pc, #104]	; (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a320:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a322:	4b16      	ldr	r3, [pc, #88]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a328:	0e1b      	lsrs	r3, r3, #24
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a330:	4b12      	ldr	r3, [pc, #72]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a336:	099b      	lsrs	r3, r3, #6
 800a338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	fb02 f203 	mul.w	r2, r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	fbb2 f3f3 	udiv	r3, r2, r3
 800a348:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a34a:	4b0c      	ldr	r3, [pc, #48]	; (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800a34c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a350:	f003 031f 	and.w	r3, r3, #31
 800a354:	3301      	adds	r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a360:	617b      	str	r3, [r7, #20]
        break;
 800a362:	e003      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a364:	4b08      	ldr	r3, [pc, #32]	; (800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a366:	617b      	str	r3, [r7, #20]
        break;
 800a368:	e000      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800a36a:	bf00      	nop

  return frequency;
 800a36c:	697b      	ldr	r3, [r7, #20]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	40023800 	.word	0x40023800
 800a380:	00f42400 	.word	0x00f42400
 800a384:	017d7840 	.word	0x017d7840
 800a388:	00bb8000 	.word	0x00bb8000

0800a38c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e081      	b.n	800a4a2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	7f5b      	ldrb	r3, [r3, #29]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d105      	bne.n	800a3b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f7 fee6 	bl	8002180 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	22ca      	movs	r2, #202	; 0xca
 800a3c0:	625a      	str	r2, [r3, #36]	; 0x24
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2253      	movs	r2, #83	; 0x53
 800a3c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fb16 	bl	800a9fc <RTC_EnterInitMode>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	22ff      	movs	r2, #255	; 0xff
 800a3dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2204      	movs	r2, #4
 800a3e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e05c      	b.n	800a4a2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6899      	ldr	r1, [r3, #8]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b2e      	ldr	r3, [pc, #184]	; (800a4ac <HAL_RTC_Init+0x120>)
 800a3f4:	400b      	ands	r3, r1
 800a3f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6899      	ldr	r1, [r3, #8]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	431a      	orrs	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	68d2      	ldr	r2, [r2, #12]
 800a41e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6919      	ldr	r1, [r3, #16]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	041a      	lsls	r2, r3, #16
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a442:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10e      	bne.n	800a470 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 faaa 	bl	800a9ac <HAL_RTC_WaitForSynchro>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d008      	beq.n	800a470 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	22ff      	movs	r2, #255	; 0xff
 800a464:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2204      	movs	r2, #4
 800a46a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e018      	b.n	800a4a2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f022 0208 	bic.w	r2, r2, #8
 800a47e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	22ff      	movs	r2, #255	; 0xff
 800a498:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
  }
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	ff8fffbf 	.word	0xff8fffbf

0800a4b0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	7f1b      	ldrb	r3, [r3, #28]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d101      	bne.n	800a4cc <HAL_RTC_SetTime+0x1c>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e0a8      	b.n	800a61e <HAL_RTC_SetTime+0x16e>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d126      	bne.n	800a52c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 faac 	bl	800aa54 <RTC_ByteToBcd2>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	4618      	mov	r0, r3
 800a506:	f000 faa5 	bl	800aa54 <RTC_ByteToBcd2>
 800a50a:	4603      	mov	r3, r0
 800a50c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a50e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	789b      	ldrb	r3, [r3, #2]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fa9d 	bl	800aa54 <RTC_ByteToBcd2>
 800a51a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a51c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	7b1b      	ldrb	r3, [r3, #12]
 800a524:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e018      	b.n	800a55e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a536:	2b00      	cmp	r3, #0
 800a538:	d102      	bne.n	800a540 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2200      	movs	r2, #0
 800a53e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a54c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a552:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	7b1b      	ldrb	r3, [r3, #12]
 800a558:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a55a:	4313      	orrs	r3, r2
 800a55c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	22ca      	movs	r2, #202	; 0xca
 800a564:	625a      	str	r2, [r3, #36]	; 0x24
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2253      	movs	r2, #83	; 0x53
 800a56c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fa44 	bl	800a9fc <RTC_EnterInitMode>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00b      	beq.n	800a592 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	22ff      	movs	r2, #255	; 0xff
 800a580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2204      	movs	r2, #4
 800a586:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e045      	b.n	800a61e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	6979      	ldr	r1, [r7, #20]
 800a598:	4b23      	ldr	r3, [pc, #140]	; (800a628 <HAL_RTC_SetTime+0x178>)
 800a59a:	400b      	ands	r3, r1
 800a59c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5ac:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6899      	ldr	r1, [r3, #8]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	691a      	ldr	r2, [r3, #16]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68da      	ldr	r2, [r3, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5d4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f003 0320 	and.w	r3, r3, #32
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d111      	bne.n	800a608 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 f9e1 	bl	800a9ac <HAL_RTC_WaitForSynchro>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00b      	beq.n	800a608 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2204      	movs	r2, #4
 800a5fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e00a      	b.n	800a61e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	22ff      	movs	r2, #255	; 0xff
 800a60e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a61c:	2300      	movs	r3, #0
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	371c      	adds	r7, #28
 800a622:	46bd      	mov	sp, r7
 800a624:	bd90      	pop	{r4, r7, pc}
 800a626:	bf00      	nop
 800a628:	007f7f7f 	.word	0x007f7f7f

0800a62c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	7f1b      	ldrb	r3, [r3, #28]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_RTC_SetDate+0x1c>
 800a644:	2302      	movs	r3, #2
 800a646:	e092      	b.n	800a76e <HAL_RTC_SetDate+0x142>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2201      	movs	r2, #1
 800a64c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2202      	movs	r2, #2
 800a652:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10e      	bne.n	800a678 <HAL_RTC_SetDate+0x4c>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b00      	cmp	r3, #0
 800a664:	d008      	beq.n	800a678 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	f023 0310 	bic.w	r3, r3, #16
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	330a      	adds	r3, #10
 800a672:	b2da      	uxtb	r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d11c      	bne.n	800a6b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	78db      	ldrb	r3, [r3, #3]
 800a682:	4618      	mov	r0, r3
 800a684:	f000 f9e6 	bl	800aa54 <RTC_ByteToBcd2>
 800a688:	4603      	mov	r3, r0
 800a68a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f9df 	bl	800aa54 <RTC_ByteToBcd2>
 800a696:	4603      	mov	r3, r0
 800a698:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a69a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	789b      	ldrb	r3, [r3, #2]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 f9d7 	bl	800aa54 <RTC_ByteToBcd2>
 800a6a6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a6a8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e00e      	b.n	800a6d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	78db      	ldrb	r3, [r3, #3]
 800a6bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	785b      	ldrb	r3, [r3, #1]
 800a6c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a6c4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a6ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	22ca      	movs	r2, #202	; 0xca
 800a6dc:	625a      	str	r2, [r3, #36]	; 0x24
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2253      	movs	r2, #83	; 0x53
 800a6e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 f988 	bl	800a9fc <RTC_EnterInitMode>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	22ff      	movs	r2, #255	; 0xff
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e031      	b.n	800a76e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	6979      	ldr	r1, [r7, #20]
 800a710:	4b19      	ldr	r3, [pc, #100]	; (800a778 <HAL_RTC_SetDate+0x14c>)
 800a712:	400b      	ands	r3, r1
 800a714:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68da      	ldr	r2, [r3, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a724:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d111      	bne.n	800a758 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 f939 	bl	800a9ac <HAL_RTC_WaitForSynchro>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	22ff      	movs	r2, #255	; 0xff
 800a746:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2204      	movs	r2, #4
 800a74c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e00a      	b.n	800a76e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	22ff      	movs	r2, #255	; 0xff
 800a75e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2201      	movs	r2, #1
 800a764:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a76c:	2300      	movs	r3, #0
  }
}
 800a76e:	4618      	mov	r0, r3
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	bd90      	pop	{r4, r7, pc}
 800a776:	bf00      	nop
 800a778:	00ffff3f 	.word	0x00ffff3f

0800a77c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a77c:	b590      	push	{r4, r7, lr}
 800a77e:	b089      	sub	sp, #36	; 0x24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	2300      	movs	r3, #0
 800a792:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	7f1b      	ldrb	r3, [r3, #28]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d101      	bne.n	800a7a0 <HAL_RTC_SetAlarm+0x24>
 800a79c:	2302      	movs	r3, #2
 800a79e:	e101      	b.n	800a9a4 <HAL_RTC_SetAlarm+0x228>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d137      	bne.n	800a822 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 f942 	bl	800aa54 <RTC_ByteToBcd2>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	785b      	ldrb	r3, [r3, #1]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 f93b 	bl	800aa54 <RTC_ByteToBcd2>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a7e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	789b      	ldrb	r3, [r3, #2]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 f933 	bl	800aa54 <RTC_ByteToBcd2>
 800a7ee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a7f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	7b1b      	ldrb	r3, [r3, #12]
 800a7f8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a7fa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a804:	4618      	mov	r0, r3
 800a806:	f000 f925 	bl	800aa54 <RTC_ByteToBcd2>
 800a80a:	4603      	mov	r3, r0
 800a80c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a80e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a816:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a81c:	4313      	orrs	r3, r2
 800a81e:	61fb      	str	r3, [r7, #28]
 800a820:	e023      	b.n	800a86a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	785b      	ldrb	r3, [r3, #1]
 800a840:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a842:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a848:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	7b1b      	ldrb	r3, [r3, #12]
 800a84e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a850:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a858:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a85a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a860:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a866:	4313      	orrs	r3, r2
 800a868:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	22ca      	movs	r2, #202	; 0xca
 800a87c:	625a      	str	r2, [r3, #36]	; 0x24
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2253      	movs	r2, #83	; 0x53
 800a884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a88e:	d13f      	bne.n	800a910 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a89e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8ae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8b0:	f7f9 f91c 	bl	8003aec <HAL_GetTick>
 800a8b4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a8b6:	e013      	b.n	800a8e0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8b8:	f7f9 f918 	bl	8003aec <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8c6:	d90b      	bls.n	800a8e0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	22ff      	movs	r2, #255	; 0xff
 800a8ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2203      	movs	r2, #3
 800a8d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e061      	b.n	800a9a4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0e4      	beq.n	800a8b8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a90c:	609a      	str	r2, [r3, #8]
 800a90e:	e03e      	b.n	800a98e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689a      	ldr	r2, [r3, #8]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a91e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a92e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a930:	f7f9 f8dc 	bl	8003aec <HAL_GetTick>
 800a934:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a936:	e013      	b.n	800a960 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a938:	f7f9 f8d8 	bl	8003aec <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a946:	d90b      	bls.n	800a960 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	22ff      	movs	r2, #255	; 0xff
 800a94e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2203      	movs	r2, #3
 800a954:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e021      	b.n	800a9a4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0e4      	beq.n	800a938 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69fa      	ldr	r2, [r7, #28]
 800a974:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a98c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	22ff      	movs	r2, #255	; 0xff
 800a994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2201      	movs	r2, #1
 800a99a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3724      	adds	r7, #36	; 0x24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd90      	pop	{r4, r7, pc}

0800a9ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a9c8:	f7f9 f890 	bl	8003aec <HAL_GetTick>
 800a9cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a9ce:	e009      	b.n	800a9e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a9d0:	f7f9 f88c 	bl	8003aec <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9de:	d901      	bls.n	800a9e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e007      	b.n	800a9f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0ee      	beq.n	800a9d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d119      	bne.n	800aa4a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa20:	f7f9 f864 	bl	8003aec <HAL_GetTick>
 800aa24:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa26:	e009      	b.n	800aa3c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aa28:	f7f9 f860 	bl	8003aec <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa36:	d901      	bls.n	800aa3c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e007      	b.n	800aa4c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0ee      	beq.n	800aa28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800aa62:	e005      	b.n	800aa70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3301      	adds	r3, #1
 800aa68:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	3b0a      	subs	r3, #10
 800aa6e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	2b09      	cmp	r3, #9
 800aa74:	d8f6      	bhi.n	800aa64 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	b2db      	uxtb	r3, r3
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	7f1b      	ldrb	r3, [r3, #28]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d101      	bne.n	800aaac <HAL_RTCEx_SetTimeStamp+0x1c>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	e03e      	b.n	800ab2a <HAL_RTCEx_SetTimeStamp+0x9a>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2201      	movs	r2, #1
 800aab0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2202      	movs	r2, #2
 800aab6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	4b1e      	ldr	r3, [pc, #120]	; (800ab38 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	22ca      	movs	r2, #202	; 0xca
 800aad2:	625a      	str	r2, [r3, #36]	; 0x24
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2253      	movs	r2, #83	; 0x53
 800aada:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f022 0206 	bic.w	r2, r2, #6
 800aaea:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab12:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	22ff      	movs	r2, #255	; 0xff
 800ab1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	371c      	adds	r7, #28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	fffff7f7 	.word	0xfffff7f7

0800ab3c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e152      	b.n	800ae00 <HAL_SAI_Init+0x2c4>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7f7 fe80 	bl	8002874 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f957 	bl	800ae30 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d007      	beq.n	800ab9a <HAL_SAI_Init+0x5e>
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d302      	bcc.n	800ab94 <HAL_SAI_Init+0x58>
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d006      	beq.n	800aba0 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800ab92:	e008      	b.n	800aba6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	61fb      	str	r3, [r7, #28]
      break;
 800ab98:	e005      	b.n	800aba6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	61fb      	str	r3, [r7, #28]
      break;
 800ab9e:	e002      	b.n	800aba6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aba0:	2320      	movs	r3, #32
 800aba2:	61fb      	str	r3, [r7, #28]
      break;
 800aba4:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d81d      	bhi.n	800abea <HAL_SAI_Init+0xae>
 800abae:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <HAL_SAI_Init+0x78>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800abc5 	.word	0x0800abc5
 800abb8:	0800abcb 	.word	0x0800abcb
 800abbc:	0800abd3 	.word	0x0800abd3
 800abc0:	0800abdb 	.word	0x0800abdb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	617b      	str	r3, [r7, #20]
    }
    break;
 800abc8:	e010      	b.n	800abec <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800abca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abce:	617b      	str	r3, [r7, #20]
    }
    break;
 800abd0:	e00c      	b.n	800abec <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800abd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abd6:	617b      	str	r3, [r7, #20]
    }
    break;
 800abd8:	e008      	b.n	800abec <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800abda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abde:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	f043 0301 	orr.w	r3, r3, #1
 800abe6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800abe8:	e000      	b.n	800abec <HAL_SAI_Init+0xb0>
    default:
      break;
 800abea:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a85      	ldr	r2, [pc, #532]	; (800ae08 <HAL_SAI_Init+0x2cc>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d004      	beq.n	800ac00 <HAL_SAI_Init+0xc4>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a84      	ldr	r2, [pc, #528]	; (800ae0c <HAL_SAI_Init+0x2d0>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d103      	bne.n	800ac08 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800ac00:	4a83      	ldr	r2, [pc, #524]	; (800ae10 <HAL_SAI_Init+0x2d4>)
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	e002      	b.n	800ac0e <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ac08:	4a82      	ldr	r2, [pc, #520]	; (800ae14 <HAL_SAI_Init+0x2d8>)
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d04c      	beq.n	800acb0 <HAL_SAI_Init+0x174>
  {
    uint32_t freq = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a7a      	ldr	r2, [pc, #488]	; (800ae08 <HAL_SAI_Init+0x2cc>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d004      	beq.n	800ac2e <HAL_SAI_Init+0xf2>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a78      	ldr	r2, [pc, #480]	; (800ae0c <HAL_SAI_Init+0x2d0>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d104      	bne.n	800ac38 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ac2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ac32:	f7ff fa77 	bl	800a124 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac36:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a76      	ldr	r2, [pc, #472]	; (800ae18 <HAL_SAI_Init+0x2dc>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d004      	beq.n	800ac4c <HAL_SAI_Init+0x110>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a75      	ldr	r2, [pc, #468]	; (800ae1c <HAL_SAI_Init+0x2e0>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d104      	bne.n	800ac56 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ac4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ac50:	f7ff fa68 	bl	800a124 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac54:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	461a      	mov	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	025b      	lsls	r3, r3, #9
 800ac68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4a6b      	ldr	r2, [pc, #428]	; (800ae20 <HAL_SAI_Init+0x2e4>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	08da      	lsrs	r2, r3, #3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ac7c:	68f9      	ldr	r1, [r7, #12]
 800ac7e:	4b68      	ldr	r3, [pc, #416]	; (800ae20 <HAL_SAI_Init+0x2e4>)
 800ac80:	fba3 2301 	umull	r2, r3, r3, r1
 800ac84:	08da      	lsrs	r2, r3, #3
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	1aca      	subs	r2, r1, r3
 800ac90:	2a08      	cmp	r2, #8
 800ac92:	d904      	bls.n	800ac9e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv += 1;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d104      	bne.n	800acb0 <HAL_SAI_Init+0x174>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	085a      	lsrs	r2, r3, #1
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_SAI_Init+0x184>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d109      	bne.n	800acd4 <HAL_SAI_Init+0x198>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d101      	bne.n	800accc <HAL_SAI_Init+0x190>
 800acc8:	2300      	movs	r3, #0
 800acca:	e001      	b.n	800acd0 <HAL_SAI_Init+0x194>
 800accc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd0:	61bb      	str	r3, [r7, #24]
 800acd2:	e008      	b.n	800ace6 <HAL_SAI_Init+0x1aa>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d102      	bne.n	800ace2 <HAL_SAI_Init+0x1a6>
 800acdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ace0:	e000      	b.n	800ace4 <HAL_SAI_Init+0x1a8>
 800ace2:	2300      	movs	r3, #0
 800ace4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6819      	ldr	r1, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	4b4c      	ldr	r3, [pc, #304]	; (800ae24 <HAL_SAI_Init+0x2e8>)
 800acf2:	400b      	ands	r3, r1
 800acf4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad0a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	431a      	orrs	r2, r3
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ad1e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad2a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	051b      	lsls	r3, r3, #20
 800ad32:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6859      	ldr	r1, [r3, #4]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b38      	ldr	r3, [pc, #224]	; (800ae28 <HAL_SAI_Init+0x2ec>)
 800ad48:	400b      	ands	r3, r1
 800ad4a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6859      	ldr	r1, [r3, #4]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad60:	431a      	orrs	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6899      	ldr	r1, [r3, #8]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	4b2d      	ldr	r3, [pc, #180]	; (800ae2c <HAL_SAI_Init+0x2f0>)
 800ad76:	400b      	ands	r3, r1
 800ad78:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6899      	ldr	r1, [r3, #8]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad84:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ad8a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ad90:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ad96:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ada0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68d9      	ldr	r1, [r3, #12]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	f24f 0320 	movw	r3, #61472	; 0xf020
 800adb8:	400b      	ands	r3, r1
 800adba:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68d9      	ldr	r1, [r3, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adca:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	431a      	orrs	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add8:	3b01      	subs	r3, #1
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3720      	adds	r7, #32
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	40015804 	.word	0x40015804
 800ae0c:	40015824 	.word	0x40015824
 800ae10:	40015800 	.word	0x40015800
 800ae14:	40015c00 	.word	0x40015c00
 800ae18:	40015c04 	.word	0x40015c04
 800ae1c:	40015c24 	.word	0x40015c24
 800ae20:	cccccccd 	.word	0xcccccccd
 800ae24:	ff05c010 	.word	0xff05c010
 800ae28:	ffff1ff0 	.word	0xffff1ff0
 800ae2c:	fff88000 	.word	0xfff88000

0800ae30 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ae38:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <SAI_Disable+0x68>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a17      	ldr	r2, [pc, #92]	; (800ae9c <SAI_Disable+0x6c>)
 800ae3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae42:	0b1b      	lsrs	r3, r3, #12
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae5a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	1e5a      	subs	r2, r3, #1
 800ae60:	60fa      	str	r2, [r7, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	72fb      	strb	r3, [r7, #11]
      break;
 800ae7a:	e006      	b.n	800ae8a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e8      	bne.n	800ae5c <SAI_Disable+0x2c>

  return status;
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	20000000 	.word	0x20000000
 800ae9c:	95cbec1b 	.word	0x95cbec1b

0800aea0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e025      	b.n	800af00 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7f7 fcc9 	bl	8002860 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2202      	movs	r2, #2
 800aed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3304      	adds	r3, #4
 800aede:	4619      	mov	r1, r3
 800aee0:	4610      	mov	r0, r2
 800aee2:	f001 ff55 	bl	800cd90 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	f001 ffbf 	bl	800ce74 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d101      	bne.n	800af24 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800af20:	2302      	movs	r3, #2
 800af22:	e018      	b.n	800af56 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2202      	movs	r2, #2
 800af28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	4618      	mov	r0, r3
 800af36:	f002 f81d 	bl	800cf74 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d104      	bne.n	800af4c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2205      	movs	r2, #5
 800af46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800af4a:	e003      	b.n	800af54 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b082      	sub	sp, #8
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d101      	bne.n	800af78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800af74:	2302      	movs	r3, #2
 800af76:	e00e      	b.n	800af96 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f002 f818 	bl	800cfbc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
	...

0800afa0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e04c      	b.n	800b04c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7f7 f8f4 	bl	80021b4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0203 	bic.w	r2, r2, #3
 800afe2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4b19      	ldr	r3, [pc, #100]	; (800b054 <HAL_SPDIFRX_Init+0xb4>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800affc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b002:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b008:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b00e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b014:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b01a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b020:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b026:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b02c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	fff88407 	.word	0xfff88407

0800b058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e09d      	b.n	800b1a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d108      	bne.n	800b084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b07a:	d009      	beq.n	800b090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	61da      	str	r2, [r3, #28]
 800b082:	e005      	b.n	800b090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7f7 f8c4 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b0d0:	d902      	bls.n	800b0d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	e002      	b.n	800b0de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b0d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b0e6:	d007      	beq.n	800b0f8 <HAL_SPI_Init+0xa0>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b0f0:	d002      	beq.n	800b0f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	431a      	orrs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b126:	431a      	orrs	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13a:	ea42 0103 	orr.w	r1, r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b142:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	0c1b      	lsrs	r3, r3, #16
 800b154:	f003 0204 	and.w	r2, r3, #4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	f003 0310 	and.w	r3, r3, #16
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	f003 0308 	and.w	r3, r3, #8
 800b16a:	431a      	orrs	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b174:	ea42 0103 	orr.w	r1, r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69da      	ldr	r2, [r3, #28]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e049      	b.n	800b254 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d106      	bne.n	800b1da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7f7 f891 	bl	80022fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2202      	movs	r2, #2
 800b1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	f000 fce7 	bl	800bbc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2201      	movs	r2, #1
 800b206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d001      	beq.n	800b274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e054      	b.n	800b31e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2202      	movs	r2, #2
 800b278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0201 	orr.w	r2, r2, #1
 800b28a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a26      	ldr	r2, [pc, #152]	; (800b32c <HAL_TIM_Base_Start_IT+0xd0>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d022      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b29e:	d01d      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a22      	ldr	r2, [pc, #136]	; (800b330 <HAL_TIM_Base_Start_IT+0xd4>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d018      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a21      	ldr	r2, [pc, #132]	; (800b334 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d013      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a1f      	ldr	r2, [pc, #124]	; (800b338 <HAL_TIM_Base_Start_IT+0xdc>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d00e      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a1e      	ldr	r2, [pc, #120]	; (800b33c <HAL_TIM_Base_Start_IT+0xe0>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d009      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1c      	ldr	r2, [pc, #112]	; (800b340 <HAL_TIM_Base_Start_IT+0xe4>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d004      	beq.n	800b2dc <HAL_TIM_Base_Start_IT+0x80>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a1b      	ldr	r2, [pc, #108]	; (800b344 <HAL_TIM_Base_Start_IT+0xe8>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d115      	bne.n	800b308 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	4b19      	ldr	r3, [pc, #100]	; (800b348 <HAL_TIM_Base_Start_IT+0xec>)
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b06      	cmp	r3, #6
 800b2ec:	d015      	beq.n	800b31a <HAL_TIM_Base_Start_IT+0xbe>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2f4:	d011      	beq.n	800b31a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f042 0201 	orr.w	r2, r2, #1
 800b304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b306:	e008      	b.n	800b31a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0201 	orr.w	r2, r2, #1
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	e000      	b.n	800b31c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b31a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	40010000 	.word	0x40010000
 800b330:	40000400 	.word	0x40000400
 800b334:	40000800 	.word	0x40000800
 800b338:	40000c00 	.word	0x40000c00
 800b33c:	40010400 	.word	0x40010400
 800b340:	40014000 	.word	0x40014000
 800b344:	40001800 	.word	0x40001800
 800b348:	00010007 	.word	0x00010007

0800b34c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e049      	b.n	800b3f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7f7 f862 	bl	800243c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3304      	adds	r3, #4
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f000 fc18 	bl	800bbc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b0c      	cmp	r3, #12
 800b40a:	d855      	bhi.n	800b4b8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800b40c:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b412:	bf00      	nop
 800b414:	0800b449 	.word	0x0800b449
 800b418:	0800b4b9 	.word	0x0800b4b9
 800b41c:	0800b4b9 	.word	0x0800b4b9
 800b420:	0800b4b9 	.word	0x0800b4b9
 800b424:	0800b465 	.word	0x0800b465
 800b428:	0800b4b9 	.word	0x0800b4b9
 800b42c:	0800b4b9 	.word	0x0800b4b9
 800b430:	0800b4b9 	.word	0x0800b4b9
 800b434:	0800b481 	.word	0x0800b481
 800b438:	0800b4b9 	.word	0x0800b4b9
 800b43c:	0800b4b9 	.word	0x0800b4b9
 800b440:	0800b4b9 	.word	0x0800b4b9
 800b444:	0800b49d 	.word	0x0800b49d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b456:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f9 f94d 	bl	80046fc <HAL_DMA_Abort_IT>
      break;
 800b462:	e02a      	b.n	800b4ba <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b472:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b478:	4618      	mov	r0, r3
 800b47a:	f7f9 f93f 	bl	80046fc <HAL_DMA_Abort_IT>
      break;
 800b47e:	e01c      	b.n	800b4ba <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b48e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	4618      	mov	r0, r3
 800b496:	f7f9 f931 	bl	80046fc <HAL_DMA_Abort_IT>
      break;
 800b49a:	e00e      	b.n	800b4ba <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b4aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7f9 f923 	bl	80046fc <HAL_DMA_Abort_IT>
      break;
 800b4b6:	e000      	b.n	800b4ba <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800b4b8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 ff14 	bl	800c2f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a36      	ldr	r2, [pc, #216]	; (800b5a8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d004      	beq.n	800b4dc <HAL_TIM_PWM_Stop_DMA+0xe0>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a35      	ldr	r2, [pc, #212]	; (800b5ac <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d101      	bne.n	800b4e0 <HAL_TIM_PWM_Stop_DMA+0xe4>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <HAL_TIM_PWM_Stop_DMA+0xe6>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d017      	beq.n	800b516 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6a1a      	ldr	r2, [r3, #32]
 800b4ec:	f241 1311 	movw	r3, #4369	; 0x1111
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10f      	bne.n	800b516 <HAL_TIM_PWM_Stop_DMA+0x11a>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6a1a      	ldr	r2, [r3, #32]
 800b4fc:	f240 4344 	movw	r3, #1092	; 0x444
 800b500:	4013      	ands	r3, r2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d107      	bne.n	800b516 <HAL_TIM_PWM_Stop_DMA+0x11a>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b514:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6a1a      	ldr	r2, [r3, #32]
 800b51c:	f241 1311 	movw	r3, #4369	; 0x1111
 800b520:	4013      	ands	r3, r2
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10f      	bne.n	800b546 <HAL_TIM_PWM_Stop_DMA+0x14a>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6a1a      	ldr	r2, [r3, #32]
 800b52c:	f240 4344 	movw	r3, #1092	; 0x444
 800b530:	4013      	ands	r3, r2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d107      	bne.n	800b546 <HAL_TIM_PWM_Stop_DMA+0x14a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0201 	bic.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d104      	bne.n	800b556 <HAL_TIM_PWM_Stop_DMA+0x15a>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b554:	e023      	b.n	800b59e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d104      	bne.n	800b566 <HAL_TIM_PWM_Stop_DMA+0x16a>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b564:	e01b      	b.n	800b59e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d104      	bne.n	800b576 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b574:	e013      	b.n	800b59e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b0c      	cmp	r3, #12
 800b57a:	d104      	bne.n	800b586 <HAL_TIM_PWM_Stop_DMA+0x18a>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b584:	e00b      	b.n	800b59e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b10      	cmp	r3, #16
 800b58a:	d104      	bne.n	800b596 <HAL_TIM_PWM_Stop_DMA+0x19a>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b594:	e003      	b.n	800b59e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	40010000 	.word	0x40010000
 800b5ac:	40010400 	.word	0x40010400

0800b5b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d122      	bne.n	800b60c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d11b      	bne.n	800b60c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0202 	mvn.w	r2, #2
 800b5dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fad0 	bl	800bb98 <HAL_TIM_IC_CaptureCallback>
 800b5f8:	e005      	b.n	800b606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fac2 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7f6 fa01 	bl	8001a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	f003 0304 	and.w	r3, r3, #4
 800b616:	2b04      	cmp	r3, #4
 800b618:	d122      	bne.n	800b660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b04      	cmp	r3, #4
 800b626:	d11b      	bne.n	800b660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f06f 0204 	mvn.w	r2, #4
 800b630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2202      	movs	r2, #2
 800b636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 faa6 	bl	800bb98 <HAL_TIM_IC_CaptureCallback>
 800b64c:	e005      	b.n	800b65a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fa98 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7f6 f9d7 	bl	8001a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	f003 0308 	and.w	r3, r3, #8
 800b66a:	2b08      	cmp	r3, #8
 800b66c:	d122      	bne.n	800b6b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f003 0308 	and.w	r3, r3, #8
 800b678:	2b08      	cmp	r3, #8
 800b67a:	d11b      	bne.n	800b6b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f06f 0208 	mvn.w	r2, #8
 800b684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2204      	movs	r2, #4
 800b68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	f003 0303 	and.w	r3, r3, #3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa7c 	bl	800bb98 <HAL_TIM_IC_CaptureCallback>
 800b6a0:	e005      	b.n	800b6ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fa6e 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7f6 f9ad 	bl	8001a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	f003 0310 	and.w	r3, r3, #16
 800b6be:	2b10      	cmp	r3, #16
 800b6c0:	d122      	bne.n	800b708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f003 0310 	and.w	r3, r3, #16
 800b6cc:	2b10      	cmp	r3, #16
 800b6ce:	d11b      	bne.n	800b708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f06f 0210 	mvn.w	r2, #16
 800b6d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2208      	movs	r2, #8
 800b6de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa52 	bl	800bb98 <HAL_TIM_IC_CaptureCallback>
 800b6f4:	e005      	b.n	800b702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fa44 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7f6 f983 	bl	8001a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b01      	cmp	r3, #1
 800b714:	d10e      	bne.n	800b734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b01      	cmp	r3, #1
 800b722:	d107      	bne.n	800b734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f06f 0201 	mvn.w	r2, #1
 800b72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7f6 f958 	bl	80019e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b73e:	2b80      	cmp	r3, #128	; 0x80
 800b740:	d10e      	bne.n	800b760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b74c:	2b80      	cmp	r3, #128	; 0x80
 800b74e:	d107      	bne.n	800b760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 ff04 	bl	800c568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b76e:	d10e      	bne.n	800b78e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b77a:	2b80      	cmp	r3, #128	; 0x80
 800b77c:	d107      	bne.n	800b78e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 fef7 	bl	800c57c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b798:	2b40      	cmp	r3, #64	; 0x40
 800b79a:	d10e      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a6:	2b40      	cmp	r3, #64	; 0x40
 800b7a8:	d107      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f9f9 	bl	800bbac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0320 	and.w	r3, r3, #32
 800b7c4:	2b20      	cmp	r3, #32
 800b7c6:	d10e      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f003 0320 	and.w	r3, r3, #32
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	d107      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f06f 0220 	mvn.w	r2, #32
 800b7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 feb7 	bl	800c554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b802:	2b01      	cmp	r3, #1
 800b804:	d101      	bne.n	800b80a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b806:	2302      	movs	r3, #2
 800b808:	e0fd      	b.n	800ba06 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b14      	cmp	r3, #20
 800b816:	f200 80f0 	bhi.w	800b9fa <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b81a:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b875 	.word	0x0800b875
 800b824:	0800b9fb 	.word	0x0800b9fb
 800b828:	0800b9fb 	.word	0x0800b9fb
 800b82c:	0800b9fb 	.word	0x0800b9fb
 800b830:	0800b8b5 	.word	0x0800b8b5
 800b834:	0800b9fb 	.word	0x0800b9fb
 800b838:	0800b9fb 	.word	0x0800b9fb
 800b83c:	0800b9fb 	.word	0x0800b9fb
 800b840:	0800b8f7 	.word	0x0800b8f7
 800b844:	0800b9fb 	.word	0x0800b9fb
 800b848:	0800b9fb 	.word	0x0800b9fb
 800b84c:	0800b9fb 	.word	0x0800b9fb
 800b850:	0800b937 	.word	0x0800b937
 800b854:	0800b9fb 	.word	0x0800b9fb
 800b858:	0800b9fb 	.word	0x0800b9fb
 800b85c:	0800b9fb 	.word	0x0800b9fb
 800b860:	0800b979 	.word	0x0800b979
 800b864:	0800b9fb 	.word	0x0800b9fb
 800b868:	0800b9fb 	.word	0x0800b9fb
 800b86c:	0800b9fb 	.word	0x0800b9fb
 800b870:	0800b9b9 	.word	0x0800b9b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 fa40 	bl	800bd00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	699a      	ldr	r2, [r3, #24]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f042 0208 	orr.w	r2, r2, #8
 800b88e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	699a      	ldr	r2, [r3, #24]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f022 0204 	bic.w	r2, r2, #4
 800b89e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6999      	ldr	r1, [r3, #24]
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	691a      	ldr	r2, [r3, #16]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	430a      	orrs	r2, r1
 800b8b0:	619a      	str	r2, [r3, #24]
      break;
 800b8b2:	e0a3      	b.n	800b9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 fa92 	bl	800bde4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699a      	ldr	r2, [r3, #24]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	699a      	ldr	r2, [r3, #24]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6999      	ldr	r1, [r3, #24]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	021a      	lsls	r2, r3, #8
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	619a      	str	r2, [r3, #24]
      break;
 800b8f4:	e082      	b.n	800b9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fae9 	bl	800bed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69da      	ldr	r2, [r3, #28]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f042 0208 	orr.w	r2, r2, #8
 800b910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69da      	ldr	r2, [r3, #28]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f022 0204 	bic.w	r2, r2, #4
 800b920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	69d9      	ldr	r1, [r3, #28]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	691a      	ldr	r2, [r3, #16]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	430a      	orrs	r2, r1
 800b932:	61da      	str	r2, [r3, #28]
      break;
 800b934:	e062      	b.n	800b9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68b9      	ldr	r1, [r7, #8]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 fb3f 	bl	800bfc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	69da      	ldr	r2, [r3, #28]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69da      	ldr	r2, [r3, #28]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69d9      	ldr	r1, [r3, #28]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	021a      	lsls	r2, r3, #8
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	61da      	str	r2, [r3, #28]
      break;
 800b976:	e041      	b.n	800b9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fb76 	bl	800c070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f042 0208 	orr.w	r2, r2, #8
 800b992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 0204 	bic.w	r2, r2, #4
 800b9a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	691a      	ldr	r2, [r3, #16]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9b6:	e021      	b.n	800b9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68b9      	ldr	r1, [r7, #8]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f000 fba8 	bl	800c114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	021a      	lsls	r2, r3, #8
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9f8:	e000      	b.n	800b9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b9fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop

0800ba10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_TIM_ConfigClockSource+0x18>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e0a6      	b.n	800bb76 <HAL_TIM_ConfigClockSource+0x166>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2202      	movs	r2, #2
 800ba34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	4b4f      	ldr	r3, [pc, #316]	; (800bb80 <HAL_TIM_ConfigClockSource+0x170>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b40      	cmp	r3, #64	; 0x40
 800ba5e:	d067      	beq.n	800bb30 <HAL_TIM_ConfigClockSource+0x120>
 800ba60:	2b40      	cmp	r3, #64	; 0x40
 800ba62:	d80b      	bhi.n	800ba7c <HAL_TIM_ConfigClockSource+0x6c>
 800ba64:	2b10      	cmp	r3, #16
 800ba66:	d073      	beq.n	800bb50 <HAL_TIM_ConfigClockSource+0x140>
 800ba68:	2b10      	cmp	r3, #16
 800ba6a:	d802      	bhi.n	800ba72 <HAL_TIM_ConfigClockSource+0x62>
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d06f      	beq.n	800bb50 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ba70:	e078      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ba72:	2b20      	cmp	r3, #32
 800ba74:	d06c      	beq.n	800bb50 <HAL_TIM_ConfigClockSource+0x140>
 800ba76:	2b30      	cmp	r3, #48	; 0x30
 800ba78:	d06a      	beq.n	800bb50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ba7a:	e073      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ba7c:	2b70      	cmp	r3, #112	; 0x70
 800ba7e:	d00d      	beq.n	800ba9c <HAL_TIM_ConfigClockSource+0x8c>
 800ba80:	2b70      	cmp	r3, #112	; 0x70
 800ba82:	d804      	bhi.n	800ba8e <HAL_TIM_ConfigClockSource+0x7e>
 800ba84:	2b50      	cmp	r3, #80	; 0x50
 800ba86:	d033      	beq.n	800baf0 <HAL_TIM_ConfigClockSource+0xe0>
 800ba88:	2b60      	cmp	r3, #96	; 0x60
 800ba8a:	d041      	beq.n	800bb10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ba8c:	e06a      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ba8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba92:	d066      	beq.n	800bb62 <HAL_TIM_ConfigClockSource+0x152>
 800ba94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba98:	d017      	beq.n	800baca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ba9a:	e063      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6818      	ldr	r0, [r3, #0]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	6899      	ldr	r1, [r3, #8]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f000 fc00 	bl	800c2b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800babe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	609a      	str	r2, [r3, #8]
      break;
 800bac8:	e04c      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6899      	ldr	r1, [r3, #8]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	685a      	ldr	r2, [r3, #4]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f000 fbe9 	bl	800c2b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baec:	609a      	str	r2, [r3, #8]
      break;
 800baee:	e039      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6818      	ldr	r0, [r3, #0]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	6859      	ldr	r1, [r3, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	461a      	mov	r2, r3
 800bafe:	f000 fb5d 	bl	800c1bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2150      	movs	r1, #80	; 0x50
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fbb6 	bl	800c27a <TIM_ITRx_SetConfig>
      break;
 800bb0e:	e029      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	6859      	ldr	r1, [r3, #4]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	f000 fb7c 	bl	800c21a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2160      	movs	r1, #96	; 0x60
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 fba6 	bl	800c27a <TIM_ITRx_SetConfig>
      break;
 800bb2e:	e019      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6818      	ldr	r0, [r3, #0]
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	6859      	ldr	r1, [r3, #4]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f000 fb3d 	bl	800c1bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2140      	movs	r1, #64	; 0x40
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fb96 	bl	800c27a <TIM_ITRx_SetConfig>
      break;
 800bb4e:	e009      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	f000 fb8d 	bl	800c27a <TIM_ITRx_SetConfig>
        break;
 800bb60:	e000      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bb62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	fffeff88 	.word	0xfffeff88

0800bb84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a40      	ldr	r2, [pc, #256]	; (800bcd4 <TIM_Base_SetConfig+0x114>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d013      	beq.n	800bc00 <TIM_Base_SetConfig+0x40>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbde:	d00f      	beq.n	800bc00 <TIM_Base_SetConfig+0x40>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a3d      	ldr	r2, [pc, #244]	; (800bcd8 <TIM_Base_SetConfig+0x118>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d00b      	beq.n	800bc00 <TIM_Base_SetConfig+0x40>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a3c      	ldr	r2, [pc, #240]	; (800bcdc <TIM_Base_SetConfig+0x11c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d007      	beq.n	800bc00 <TIM_Base_SetConfig+0x40>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a3b      	ldr	r2, [pc, #236]	; (800bce0 <TIM_Base_SetConfig+0x120>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d003      	beq.n	800bc00 <TIM_Base_SetConfig+0x40>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a3a      	ldr	r2, [pc, #232]	; (800bce4 <TIM_Base_SetConfig+0x124>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d108      	bne.n	800bc12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a2f      	ldr	r2, [pc, #188]	; (800bcd4 <TIM_Base_SetConfig+0x114>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d02b      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc20:	d027      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a2c      	ldr	r2, [pc, #176]	; (800bcd8 <TIM_Base_SetConfig+0x118>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d023      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a2b      	ldr	r2, [pc, #172]	; (800bcdc <TIM_Base_SetConfig+0x11c>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d01f      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a2a      	ldr	r2, [pc, #168]	; (800bce0 <TIM_Base_SetConfig+0x120>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d01b      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a29      	ldr	r2, [pc, #164]	; (800bce4 <TIM_Base_SetConfig+0x124>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d017      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a28      	ldr	r2, [pc, #160]	; (800bce8 <TIM_Base_SetConfig+0x128>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d013      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a27      	ldr	r2, [pc, #156]	; (800bcec <TIM_Base_SetConfig+0x12c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d00f      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a26      	ldr	r2, [pc, #152]	; (800bcf0 <TIM_Base_SetConfig+0x130>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d00b      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a25      	ldr	r2, [pc, #148]	; (800bcf4 <TIM_Base_SetConfig+0x134>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d007      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a24      	ldr	r2, [pc, #144]	; (800bcf8 <TIM_Base_SetConfig+0x138>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d003      	beq.n	800bc72 <TIM_Base_SetConfig+0xb2>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a23      	ldr	r2, [pc, #140]	; (800bcfc <TIM_Base_SetConfig+0x13c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d108      	bne.n	800bc84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a0a      	ldr	r2, [pc, #40]	; (800bcd4 <TIM_Base_SetConfig+0x114>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d003      	beq.n	800bcb8 <TIM_Base_SetConfig+0xf8>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a0c      	ldr	r2, [pc, #48]	; (800bce4 <TIM_Base_SetConfig+0x124>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d103      	bne.n	800bcc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	691a      	ldr	r2, [r3, #16]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	615a      	str	r2, [r3, #20]
}
 800bcc6:	bf00      	nop
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	40010000 	.word	0x40010000
 800bcd8:	40000400 	.word	0x40000400
 800bcdc:	40000800 	.word	0x40000800
 800bce0:	40000c00 	.word	0x40000c00
 800bce4:	40010400 	.word	0x40010400
 800bce8:	40014000 	.word	0x40014000
 800bcec:	40014400 	.word	0x40014400
 800bcf0:	40014800 	.word	0x40014800
 800bcf4:	40001800 	.word	0x40001800
 800bcf8:	40001c00 	.word	0x40001c00
 800bcfc:	40002000 	.word	0x40002000

0800bd00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	f023 0201 	bic.w	r2, r3, #1
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <TIM_OC1_SetConfig+0xd8>)
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 0303 	bic.w	r3, r3, #3
 800bd36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f023 0302 	bic.w	r3, r3, #2
 800bd48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a21      	ldr	r2, [pc, #132]	; (800bddc <TIM_OC1_SetConfig+0xdc>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d003      	beq.n	800bd64 <TIM_OC1_SetConfig+0x64>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a20      	ldr	r2, [pc, #128]	; (800bde0 <TIM_OC1_SetConfig+0xe0>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d10c      	bne.n	800bd7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f023 0308 	bic.w	r3, r3, #8
 800bd6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f023 0304 	bic.w	r3, r3, #4
 800bd7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a16      	ldr	r2, [pc, #88]	; (800bddc <TIM_OC1_SetConfig+0xdc>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d003      	beq.n	800bd8e <TIM_OC1_SetConfig+0x8e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a15      	ldr	r2, [pc, #84]	; (800bde0 <TIM_OC1_SetConfig+0xe0>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d111      	bne.n	800bdb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	621a      	str	r2, [r3, #32]
}
 800bdcc:	bf00      	nop
 800bdce:	371c      	adds	r7, #28
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	fffeff8f 	.word	0xfffeff8f
 800bddc:	40010000 	.word	0x40010000
 800bde0:	40010400 	.word	0x40010400

0800bde4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	f023 0210 	bic.w	r2, r3, #16
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	4b2e      	ldr	r3, [pc, #184]	; (800bec8 <TIM_OC2_SetConfig+0xe4>)
 800be10:	4013      	ands	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	021b      	lsls	r3, r3, #8
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4313      	orrs	r3, r2
 800be26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f023 0320 	bic.w	r3, r3, #32
 800be2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	011b      	lsls	r3, r3, #4
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	4313      	orrs	r3, r2
 800be3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a23      	ldr	r2, [pc, #140]	; (800becc <TIM_OC2_SetConfig+0xe8>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d003      	beq.n	800be4c <TIM_OC2_SetConfig+0x68>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a22      	ldr	r2, [pc, #136]	; (800bed0 <TIM_OC2_SetConfig+0xec>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d10d      	bne.n	800be68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	011b      	lsls	r3, r3, #4
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a18      	ldr	r2, [pc, #96]	; (800becc <TIM_OC2_SetConfig+0xe8>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d003      	beq.n	800be78 <TIM_OC2_SetConfig+0x94>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a17      	ldr	r2, [pc, #92]	; (800bed0 <TIM_OC2_SetConfig+0xec>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d113      	bne.n	800bea0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	4313      	orrs	r3, r2
 800be92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	621a      	str	r2, [r3, #32]
}
 800beba:	bf00      	nop
 800bebc:	371c      	adds	r7, #28
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	feff8fff 	.word	0xfeff8fff
 800becc:	40010000 	.word	0x40010000
 800bed0:	40010400 	.word	0x40010400

0800bed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	4b2d      	ldr	r3, [pc, #180]	; (800bfb4 <TIM_OC3_SetConfig+0xe0>)
 800bf00:	4013      	ands	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	021b      	lsls	r3, r3, #8
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a22      	ldr	r2, [pc, #136]	; (800bfb8 <TIM_OC3_SetConfig+0xe4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d003      	beq.n	800bf3a <TIM_OC3_SetConfig+0x66>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a21      	ldr	r2, [pc, #132]	; (800bfbc <TIM_OC3_SetConfig+0xe8>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d10d      	bne.n	800bf56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	021b      	lsls	r3, r3, #8
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a17      	ldr	r2, [pc, #92]	; (800bfb8 <TIM_OC3_SetConfig+0xe4>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d003      	beq.n	800bf66 <TIM_OC3_SetConfig+0x92>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a16      	ldr	r2, [pc, #88]	; (800bfbc <TIM_OC3_SetConfig+0xe8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d113      	bne.n	800bf8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	621a      	str	r2, [r3, #32]
}
 800bfa8:	bf00      	nop
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	fffeff8f 	.word	0xfffeff8f
 800bfb8:	40010000 	.word	0x40010000
 800bfbc:	40010400 	.word	0x40010400

0800bfc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4b1e      	ldr	r3, [pc, #120]	; (800c064 <TIM_OC4_SetConfig+0xa4>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	021b      	lsls	r3, r3, #8
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4313      	orrs	r3, r2
 800c002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c00a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	031b      	lsls	r3, r3, #12
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	4313      	orrs	r3, r2
 800c016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a13      	ldr	r2, [pc, #76]	; (800c068 <TIM_OC4_SetConfig+0xa8>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d003      	beq.n	800c028 <TIM_OC4_SetConfig+0x68>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a12      	ldr	r2, [pc, #72]	; (800c06c <TIM_OC4_SetConfig+0xac>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d109      	bne.n	800c03c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c02e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	019b      	lsls	r3, r3, #6
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	4313      	orrs	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	621a      	str	r2, [r3, #32]
}
 800c056:	bf00      	nop
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	feff8fff 	.word	0xfeff8fff
 800c068:	40010000 	.word	0x40010000
 800c06c:	40010400 	.word	0x40010400

0800c070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c070:	b480      	push	{r7}
 800c072:	b087      	sub	sp, #28
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4b1b      	ldr	r3, [pc, #108]	; (800c108 <TIM_OC5_SetConfig+0x98>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c0b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	041b      	lsls	r3, r3, #16
 800c0b8:	693a      	ldr	r2, [r7, #16]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a12      	ldr	r2, [pc, #72]	; (800c10c <TIM_OC5_SetConfig+0x9c>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d003      	beq.n	800c0ce <TIM_OC5_SetConfig+0x5e>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a11      	ldr	r2, [pc, #68]	; (800c110 <TIM_OC5_SetConfig+0xa0>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d109      	bne.n	800c0e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	695b      	ldr	r3, [r3, #20]
 800c0da:	021b      	lsls	r3, r3, #8
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685a      	ldr	r2, [r3, #4]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	621a      	str	r2, [r3, #32]
}
 800c0fc:	bf00      	nop
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	fffeff8f 	.word	0xfffeff8f
 800c10c:	40010000 	.word	0x40010000
 800c110:	40010400 	.word	0x40010400

0800c114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4b1c      	ldr	r3, [pc, #112]	; (800c1b0 <TIM_OC6_SetConfig+0x9c>)
 800c140:	4013      	ands	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	021b      	lsls	r3, r3, #8
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	051b      	lsls	r3, r3, #20
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	4313      	orrs	r3, r2
 800c162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a13      	ldr	r2, [pc, #76]	; (800c1b4 <TIM_OC6_SetConfig+0xa0>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d003      	beq.n	800c174 <TIM_OC6_SetConfig+0x60>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a12      	ldr	r2, [pc, #72]	; (800c1b8 <TIM_OC6_SetConfig+0xa4>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d109      	bne.n	800c188 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c17a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	695b      	ldr	r3, [r3, #20]
 800c180:	029b      	lsls	r3, r3, #10
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	4313      	orrs	r3, r2
 800c186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685a      	ldr	r2, [r3, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	621a      	str	r2, [r3, #32]
}
 800c1a2:	bf00      	nop
 800c1a4:	371c      	adds	r7, #28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	feff8fff 	.word	0xfeff8fff
 800c1b4:	40010000 	.word	0x40010000
 800c1b8:	40010400 	.word	0x40010400

0800c1bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	f023 0201 	bic.w	r2, r3, #1
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	011b      	lsls	r3, r3, #4
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f023 030a 	bic.w	r3, r3, #10
 800c1f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	621a      	str	r2, [r3, #32]
}
 800c20e:	bf00      	nop
 800c210:	371c      	adds	r7, #28
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b087      	sub	sp, #28
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	f023 0210 	bic.w	r2, r3, #16
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6a1b      	ldr	r3, [r3, #32]
 800c23c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	031b      	lsls	r3, r3, #12
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	011b      	lsls	r3, r3, #4
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	4313      	orrs	r3, r2
 800c260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	621a      	str	r2, [r3, #32]
}
 800c26e:	bf00      	nop
 800c270:	371c      	adds	r7, #28
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b085      	sub	sp, #20
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4313      	orrs	r3, r2
 800c298:	f043 0307 	orr.w	r3, r3, #7
 800c29c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	609a      	str	r2, [r3, #8]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b087      	sub	sp, #28
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	021a      	lsls	r2, r3, #8
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	609a      	str	r2, [r3, #8]
}
 800c2e4:	bf00      	nop
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f003 031f 	and.w	r3, r3, #31
 800c302:	2201      	movs	r2, #1
 800c304:	fa02 f303 	lsl.w	r3, r2, r3
 800c308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a1a      	ldr	r2, [r3, #32]
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	43db      	mvns	r3, r3
 800c312:	401a      	ands	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6a1a      	ldr	r2, [r3, #32]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	f003 031f 	and.w	r3, r3, #31
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	fa01 f303 	lsl.w	r3, r1, r3
 800c328:	431a      	orrs	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	621a      	str	r2, [r3, #32]
}
 800c32e:	bf00      	nop
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
	...

0800c33c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d101      	bne.n	800c354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c350:	2302      	movs	r3, #2
 800c352:	e06d      	b.n	800c430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a30      	ldr	r2, [pc, #192]	; (800c43c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d004      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a2f      	ldr	r2, [pc, #188]	; (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d108      	bne.n	800c39a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c38e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4313      	orrs	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a20      	ldr	r2, [pc, #128]	; (800c43c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d022      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3c6:	d01d      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a1d      	ldr	r2, [pc, #116]	; (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d018      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a1c      	ldr	r2, [pc, #112]	; (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d013      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a1a      	ldr	r2, [pc, #104]	; (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00e      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a15      	ldr	r2, [pc, #84]	; (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d009      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a16      	ldr	r2, [pc, #88]	; (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d004      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a15      	ldr	r2, [pc, #84]	; (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d10c      	bne.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c40a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	4313      	orrs	r3, r2
 800c414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	40010000 	.word	0x40010000
 800c440:	40010400 	.word	0x40010400
 800c444:	40000400 	.word	0x40000400
 800c448:	40000800 	.word	0x40000800
 800c44c:	40000c00 	.word	0x40000c00
 800c450:	40014000 	.word	0x40014000
 800c454:	40001800 	.word	0x40001800

0800c458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d101      	bne.n	800c474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c470:	2302      	movs	r3, #2
 800c472:	e065      	b.n	800c540 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	041b      	lsls	r3, r3, #16
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a16      	ldr	r2, [pc, #88]	; (800c54c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d004      	beq.n	800c502 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a14      	ldr	r2, [pc, #80]	; (800c550 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d115      	bne.n	800c52e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	051b      	lsls	r3, r3, #20
 800c50e:	4313      	orrs	r3, r2
 800c510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	40010000 	.word	0x40010000
 800c550:	40010400 	.word	0x40010400

0800c554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c570:	bf00      	nop
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c584:	bf00      	nop
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e040      	b.n	800c624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d106      	bne.n	800c5b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7f6 f830 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2224      	movs	r2, #36	; 0x24
 800c5bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 0201 	bic.w	r2, r2, #1
 800c5cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f82c 	bl	800c62c <UART_SetConfig>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d101      	bne.n	800c5de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e022      	b.n	800c624 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fa80 	bl	800caec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689a      	ldr	r2, [r3, #8]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c60a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f042 0201 	orr.w	r2, r2, #1
 800c61a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fb07 	bl	800cc30 <UART_CheckIdleState>
 800c622:	4603      	mov	r3, r0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	689a      	ldr	r2, [r3, #8]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	431a      	orrs	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	431a      	orrs	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	4bb1      	ldr	r3, [pc, #708]	; (800c91c <UART_SetConfig+0x2f0>)
 800c658:	4013      	ands	r3, r2
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	6979      	ldr	r1, [r7, #20]
 800c660:	430b      	orrs	r3, r1
 800c662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68da      	ldr	r2, [r3, #12]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	430a      	orrs	r2, r1
 800c678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a1b      	ldr	r3, [r3, #32]
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	4313      	orrs	r3, r2
 800c688:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a9f      	ldr	r2, [pc, #636]	; (800c920 <UART_SetConfig+0x2f4>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d121      	bne.n	800c6ec <UART_SetConfig+0xc0>
 800c6a8:	4b9e      	ldr	r3, [pc, #632]	; (800c924 <UART_SetConfig+0x2f8>)
 800c6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d816      	bhi.n	800c6e4 <UART_SetConfig+0xb8>
 800c6b6:	a201      	add	r2, pc, #4	; (adr r2, 800c6bc <UART_SetConfig+0x90>)
 800c6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6bc:	0800c6cd 	.word	0x0800c6cd
 800c6c0:	0800c6d9 	.word	0x0800c6d9
 800c6c4:	0800c6d3 	.word	0x0800c6d3
 800c6c8:	0800c6df 	.word	0x0800c6df
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	77fb      	strb	r3, [r7, #31]
 800c6d0:	e151      	b.n	800c976 <UART_SetConfig+0x34a>
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	77fb      	strb	r3, [r7, #31]
 800c6d6:	e14e      	b.n	800c976 <UART_SetConfig+0x34a>
 800c6d8:	2304      	movs	r3, #4
 800c6da:	77fb      	strb	r3, [r7, #31]
 800c6dc:	e14b      	b.n	800c976 <UART_SetConfig+0x34a>
 800c6de:	2308      	movs	r3, #8
 800c6e0:	77fb      	strb	r3, [r7, #31]
 800c6e2:	e148      	b.n	800c976 <UART_SetConfig+0x34a>
 800c6e4:	2310      	movs	r3, #16
 800c6e6:	77fb      	strb	r3, [r7, #31]
 800c6e8:	bf00      	nop
 800c6ea:	e144      	b.n	800c976 <UART_SetConfig+0x34a>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a8d      	ldr	r2, [pc, #564]	; (800c928 <UART_SetConfig+0x2fc>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d134      	bne.n	800c760 <UART_SetConfig+0x134>
 800c6f6:	4b8b      	ldr	r3, [pc, #556]	; (800c924 <UART_SetConfig+0x2f8>)
 800c6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6fc:	f003 030c 	and.w	r3, r3, #12
 800c700:	2b0c      	cmp	r3, #12
 800c702:	d829      	bhi.n	800c758 <UART_SetConfig+0x12c>
 800c704:	a201      	add	r2, pc, #4	; (adr r2, 800c70c <UART_SetConfig+0xe0>)
 800c706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70a:	bf00      	nop
 800c70c:	0800c741 	.word	0x0800c741
 800c710:	0800c759 	.word	0x0800c759
 800c714:	0800c759 	.word	0x0800c759
 800c718:	0800c759 	.word	0x0800c759
 800c71c:	0800c74d 	.word	0x0800c74d
 800c720:	0800c759 	.word	0x0800c759
 800c724:	0800c759 	.word	0x0800c759
 800c728:	0800c759 	.word	0x0800c759
 800c72c:	0800c747 	.word	0x0800c747
 800c730:	0800c759 	.word	0x0800c759
 800c734:	0800c759 	.word	0x0800c759
 800c738:	0800c759 	.word	0x0800c759
 800c73c:	0800c753 	.word	0x0800c753
 800c740:	2300      	movs	r3, #0
 800c742:	77fb      	strb	r3, [r7, #31]
 800c744:	e117      	b.n	800c976 <UART_SetConfig+0x34a>
 800c746:	2302      	movs	r3, #2
 800c748:	77fb      	strb	r3, [r7, #31]
 800c74a:	e114      	b.n	800c976 <UART_SetConfig+0x34a>
 800c74c:	2304      	movs	r3, #4
 800c74e:	77fb      	strb	r3, [r7, #31]
 800c750:	e111      	b.n	800c976 <UART_SetConfig+0x34a>
 800c752:	2308      	movs	r3, #8
 800c754:	77fb      	strb	r3, [r7, #31]
 800c756:	e10e      	b.n	800c976 <UART_SetConfig+0x34a>
 800c758:	2310      	movs	r3, #16
 800c75a:	77fb      	strb	r3, [r7, #31]
 800c75c:	bf00      	nop
 800c75e:	e10a      	b.n	800c976 <UART_SetConfig+0x34a>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a71      	ldr	r2, [pc, #452]	; (800c92c <UART_SetConfig+0x300>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d120      	bne.n	800c7ac <UART_SetConfig+0x180>
 800c76a:	4b6e      	ldr	r3, [pc, #440]	; (800c924 <UART_SetConfig+0x2f8>)
 800c76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c774:	2b10      	cmp	r3, #16
 800c776:	d00f      	beq.n	800c798 <UART_SetConfig+0x16c>
 800c778:	2b10      	cmp	r3, #16
 800c77a:	d802      	bhi.n	800c782 <UART_SetConfig+0x156>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <UART_SetConfig+0x160>
 800c780:	e010      	b.n	800c7a4 <UART_SetConfig+0x178>
 800c782:	2b20      	cmp	r3, #32
 800c784:	d005      	beq.n	800c792 <UART_SetConfig+0x166>
 800c786:	2b30      	cmp	r3, #48	; 0x30
 800c788:	d009      	beq.n	800c79e <UART_SetConfig+0x172>
 800c78a:	e00b      	b.n	800c7a4 <UART_SetConfig+0x178>
 800c78c:	2300      	movs	r3, #0
 800c78e:	77fb      	strb	r3, [r7, #31]
 800c790:	e0f1      	b.n	800c976 <UART_SetConfig+0x34a>
 800c792:	2302      	movs	r3, #2
 800c794:	77fb      	strb	r3, [r7, #31]
 800c796:	e0ee      	b.n	800c976 <UART_SetConfig+0x34a>
 800c798:	2304      	movs	r3, #4
 800c79a:	77fb      	strb	r3, [r7, #31]
 800c79c:	e0eb      	b.n	800c976 <UART_SetConfig+0x34a>
 800c79e:	2308      	movs	r3, #8
 800c7a0:	77fb      	strb	r3, [r7, #31]
 800c7a2:	e0e8      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7a4:	2310      	movs	r3, #16
 800c7a6:	77fb      	strb	r3, [r7, #31]
 800c7a8:	bf00      	nop
 800c7aa:	e0e4      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a5f      	ldr	r2, [pc, #380]	; (800c930 <UART_SetConfig+0x304>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d120      	bne.n	800c7f8 <UART_SetConfig+0x1cc>
 800c7b6:	4b5b      	ldr	r3, [pc, #364]	; (800c924 <UART_SetConfig+0x2f8>)
 800c7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7c0:	2b40      	cmp	r3, #64	; 0x40
 800c7c2:	d00f      	beq.n	800c7e4 <UART_SetConfig+0x1b8>
 800c7c4:	2b40      	cmp	r3, #64	; 0x40
 800c7c6:	d802      	bhi.n	800c7ce <UART_SetConfig+0x1a2>
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <UART_SetConfig+0x1ac>
 800c7cc:	e010      	b.n	800c7f0 <UART_SetConfig+0x1c4>
 800c7ce:	2b80      	cmp	r3, #128	; 0x80
 800c7d0:	d005      	beq.n	800c7de <UART_SetConfig+0x1b2>
 800c7d2:	2bc0      	cmp	r3, #192	; 0xc0
 800c7d4:	d009      	beq.n	800c7ea <UART_SetConfig+0x1be>
 800c7d6:	e00b      	b.n	800c7f0 <UART_SetConfig+0x1c4>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	77fb      	strb	r3, [r7, #31]
 800c7dc:	e0cb      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	77fb      	strb	r3, [r7, #31]
 800c7e2:	e0c8      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7e4:	2304      	movs	r3, #4
 800c7e6:	77fb      	strb	r3, [r7, #31]
 800c7e8:	e0c5      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7ea:	2308      	movs	r3, #8
 800c7ec:	77fb      	strb	r3, [r7, #31]
 800c7ee:	e0c2      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	77fb      	strb	r3, [r7, #31]
 800c7f4:	bf00      	nop
 800c7f6:	e0be      	b.n	800c976 <UART_SetConfig+0x34a>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a4d      	ldr	r2, [pc, #308]	; (800c934 <UART_SetConfig+0x308>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d124      	bne.n	800c84c <UART_SetConfig+0x220>
 800c802:	4b48      	ldr	r3, [pc, #288]	; (800c924 <UART_SetConfig+0x2f8>)
 800c804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c810:	d012      	beq.n	800c838 <UART_SetConfig+0x20c>
 800c812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c816:	d802      	bhi.n	800c81e <UART_SetConfig+0x1f2>
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <UART_SetConfig+0x200>
 800c81c:	e012      	b.n	800c844 <UART_SetConfig+0x218>
 800c81e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c822:	d006      	beq.n	800c832 <UART_SetConfig+0x206>
 800c824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c828:	d009      	beq.n	800c83e <UART_SetConfig+0x212>
 800c82a:	e00b      	b.n	800c844 <UART_SetConfig+0x218>
 800c82c:	2300      	movs	r3, #0
 800c82e:	77fb      	strb	r3, [r7, #31]
 800c830:	e0a1      	b.n	800c976 <UART_SetConfig+0x34a>
 800c832:	2302      	movs	r3, #2
 800c834:	77fb      	strb	r3, [r7, #31]
 800c836:	e09e      	b.n	800c976 <UART_SetConfig+0x34a>
 800c838:	2304      	movs	r3, #4
 800c83a:	77fb      	strb	r3, [r7, #31]
 800c83c:	e09b      	b.n	800c976 <UART_SetConfig+0x34a>
 800c83e:	2308      	movs	r3, #8
 800c840:	77fb      	strb	r3, [r7, #31]
 800c842:	e098      	b.n	800c976 <UART_SetConfig+0x34a>
 800c844:	2310      	movs	r3, #16
 800c846:	77fb      	strb	r3, [r7, #31]
 800c848:	bf00      	nop
 800c84a:	e094      	b.n	800c976 <UART_SetConfig+0x34a>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a39      	ldr	r2, [pc, #228]	; (800c938 <UART_SetConfig+0x30c>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d124      	bne.n	800c8a0 <UART_SetConfig+0x274>
 800c856:	4b33      	ldr	r3, [pc, #204]	; (800c924 <UART_SetConfig+0x2f8>)
 800c858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c85c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c864:	d012      	beq.n	800c88c <UART_SetConfig+0x260>
 800c866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c86a:	d802      	bhi.n	800c872 <UART_SetConfig+0x246>
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d007      	beq.n	800c880 <UART_SetConfig+0x254>
 800c870:	e012      	b.n	800c898 <UART_SetConfig+0x26c>
 800c872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c876:	d006      	beq.n	800c886 <UART_SetConfig+0x25a>
 800c878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c87c:	d009      	beq.n	800c892 <UART_SetConfig+0x266>
 800c87e:	e00b      	b.n	800c898 <UART_SetConfig+0x26c>
 800c880:	2301      	movs	r3, #1
 800c882:	77fb      	strb	r3, [r7, #31]
 800c884:	e077      	b.n	800c976 <UART_SetConfig+0x34a>
 800c886:	2302      	movs	r3, #2
 800c888:	77fb      	strb	r3, [r7, #31]
 800c88a:	e074      	b.n	800c976 <UART_SetConfig+0x34a>
 800c88c:	2304      	movs	r3, #4
 800c88e:	77fb      	strb	r3, [r7, #31]
 800c890:	e071      	b.n	800c976 <UART_SetConfig+0x34a>
 800c892:	2308      	movs	r3, #8
 800c894:	77fb      	strb	r3, [r7, #31]
 800c896:	e06e      	b.n	800c976 <UART_SetConfig+0x34a>
 800c898:	2310      	movs	r3, #16
 800c89a:	77fb      	strb	r3, [r7, #31]
 800c89c:	bf00      	nop
 800c89e:	e06a      	b.n	800c976 <UART_SetConfig+0x34a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a25      	ldr	r2, [pc, #148]	; (800c93c <UART_SetConfig+0x310>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d124      	bne.n	800c8f4 <UART_SetConfig+0x2c8>
 800c8aa:	4b1e      	ldr	r3, [pc, #120]	; (800c924 <UART_SetConfig+0x2f8>)
 800c8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8b8:	d012      	beq.n	800c8e0 <UART_SetConfig+0x2b4>
 800c8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8be:	d802      	bhi.n	800c8c6 <UART_SetConfig+0x29a>
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d007      	beq.n	800c8d4 <UART_SetConfig+0x2a8>
 800c8c4:	e012      	b.n	800c8ec <UART_SetConfig+0x2c0>
 800c8c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ca:	d006      	beq.n	800c8da <UART_SetConfig+0x2ae>
 800c8cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8d0:	d009      	beq.n	800c8e6 <UART_SetConfig+0x2ba>
 800c8d2:	e00b      	b.n	800c8ec <UART_SetConfig+0x2c0>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	77fb      	strb	r3, [r7, #31]
 800c8d8:	e04d      	b.n	800c976 <UART_SetConfig+0x34a>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	77fb      	strb	r3, [r7, #31]
 800c8de:	e04a      	b.n	800c976 <UART_SetConfig+0x34a>
 800c8e0:	2304      	movs	r3, #4
 800c8e2:	77fb      	strb	r3, [r7, #31]
 800c8e4:	e047      	b.n	800c976 <UART_SetConfig+0x34a>
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	77fb      	strb	r3, [r7, #31]
 800c8ea:	e044      	b.n	800c976 <UART_SetConfig+0x34a>
 800c8ec:	2310      	movs	r3, #16
 800c8ee:	77fb      	strb	r3, [r7, #31]
 800c8f0:	bf00      	nop
 800c8f2:	e040      	b.n	800c976 <UART_SetConfig+0x34a>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a11      	ldr	r2, [pc, #68]	; (800c940 <UART_SetConfig+0x314>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d139      	bne.n	800c972 <UART_SetConfig+0x346>
 800c8fe:	4b09      	ldr	r3, [pc, #36]	; (800c924 <UART_SetConfig+0x2f8>)
 800c900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c90c:	d027      	beq.n	800c95e <UART_SetConfig+0x332>
 800c90e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c912:	d817      	bhi.n	800c944 <UART_SetConfig+0x318>
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01c      	beq.n	800c952 <UART_SetConfig+0x326>
 800c918:	e027      	b.n	800c96a <UART_SetConfig+0x33e>
 800c91a:	bf00      	nop
 800c91c:	efff69f3 	.word	0xefff69f3
 800c920:	40011000 	.word	0x40011000
 800c924:	40023800 	.word	0x40023800
 800c928:	40004400 	.word	0x40004400
 800c92c:	40004800 	.word	0x40004800
 800c930:	40004c00 	.word	0x40004c00
 800c934:	40005000 	.word	0x40005000
 800c938:	40011400 	.word	0x40011400
 800c93c:	40007800 	.word	0x40007800
 800c940:	40007c00 	.word	0x40007c00
 800c944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c948:	d006      	beq.n	800c958 <UART_SetConfig+0x32c>
 800c94a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c94e:	d009      	beq.n	800c964 <UART_SetConfig+0x338>
 800c950:	e00b      	b.n	800c96a <UART_SetConfig+0x33e>
 800c952:	2300      	movs	r3, #0
 800c954:	77fb      	strb	r3, [r7, #31]
 800c956:	e00e      	b.n	800c976 <UART_SetConfig+0x34a>
 800c958:	2302      	movs	r3, #2
 800c95a:	77fb      	strb	r3, [r7, #31]
 800c95c:	e00b      	b.n	800c976 <UART_SetConfig+0x34a>
 800c95e:	2304      	movs	r3, #4
 800c960:	77fb      	strb	r3, [r7, #31]
 800c962:	e008      	b.n	800c976 <UART_SetConfig+0x34a>
 800c964:	2308      	movs	r3, #8
 800c966:	77fb      	strb	r3, [r7, #31]
 800c968:	e005      	b.n	800c976 <UART_SetConfig+0x34a>
 800c96a:	2310      	movs	r3, #16
 800c96c:	77fb      	strb	r3, [r7, #31]
 800c96e:	bf00      	nop
 800c970:	e001      	b.n	800c976 <UART_SetConfig+0x34a>
 800c972:	2310      	movs	r3, #16
 800c974:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c97e:	d15b      	bne.n	800ca38 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800c980:	7ffb      	ldrb	r3, [r7, #31]
 800c982:	2b08      	cmp	r3, #8
 800c984:	d827      	bhi.n	800c9d6 <UART_SetConfig+0x3aa>
 800c986:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <UART_SetConfig+0x360>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800c9b1 	.word	0x0800c9b1
 800c990:	0800c9b9 	.word	0x0800c9b9
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	0800c9d7 	.word	0x0800c9d7
 800c99c:	0800c9c7 	.word	0x0800c9c7
 800c9a0:	0800c9d7 	.word	0x0800c9d7
 800c9a4:	0800c9d7 	.word	0x0800c9d7
 800c9a8:	0800c9d7 	.word	0x0800c9d7
 800c9ac:	0800c9cf 	.word	0x0800c9cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9b0:	f7fc ff6e 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800c9b4:	61b8      	str	r0, [r7, #24]
        break;
 800c9b6:	e013      	b.n	800c9e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9b8:	f7fc ff7e 	bl	80098b8 <HAL_RCC_GetPCLK2Freq>
 800c9bc:	61b8      	str	r0, [r7, #24]
        break;
 800c9be:	e00f      	b.n	800c9e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9c0:	4b49      	ldr	r3, [pc, #292]	; (800cae8 <UART_SetConfig+0x4bc>)
 800c9c2:	61bb      	str	r3, [r7, #24]
        break;
 800c9c4:	e00c      	b.n	800c9e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9c6:	f7fc fea5 	bl	8009714 <HAL_RCC_GetSysClockFreq>
 800c9ca:	61b8      	str	r0, [r7, #24]
        break;
 800c9cc:	e008      	b.n	800c9e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9d2:	61bb      	str	r3, [r7, #24]
        break;
 800c9d4:	e004      	b.n	800c9e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	77bb      	strb	r3, [r7, #30]
        break;
 800c9de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d074      	beq.n	800cad0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	005a      	lsls	r2, r3, #1
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	085b      	lsrs	r3, r3, #1
 800c9f0:	441a      	add	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	2b0f      	cmp	r3, #15
 800ca02:	d916      	bls.n	800ca32 <UART_SetConfig+0x406>
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca0a:	d212      	bcs.n	800ca32 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	f023 030f 	bic.w	r3, r3, #15
 800ca14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	085b      	lsrs	r3, r3, #1
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f003 0307 	and.w	r3, r3, #7
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	89fb      	ldrh	r3, [r7, #14]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	89fa      	ldrh	r2, [r7, #14]
 800ca2e:	60da      	str	r2, [r3, #12]
 800ca30:	e04e      	b.n	800cad0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	77bb      	strb	r3, [r7, #30]
 800ca36:	e04b      	b.n	800cad0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca38:	7ffb      	ldrb	r3, [r7, #31]
 800ca3a:	2b08      	cmp	r3, #8
 800ca3c:	d827      	bhi.n	800ca8e <UART_SetConfig+0x462>
 800ca3e:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <UART_SetConfig+0x418>)
 800ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca44:	0800ca69 	.word	0x0800ca69
 800ca48:	0800ca71 	.word	0x0800ca71
 800ca4c:	0800ca79 	.word	0x0800ca79
 800ca50:	0800ca8f 	.word	0x0800ca8f
 800ca54:	0800ca7f 	.word	0x0800ca7f
 800ca58:	0800ca8f 	.word	0x0800ca8f
 800ca5c:	0800ca8f 	.word	0x0800ca8f
 800ca60:	0800ca8f 	.word	0x0800ca8f
 800ca64:	0800ca87 	.word	0x0800ca87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca68:	f7fc ff12 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800ca6c:	61b8      	str	r0, [r7, #24]
        break;
 800ca6e:	e013      	b.n	800ca98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca70:	f7fc ff22 	bl	80098b8 <HAL_RCC_GetPCLK2Freq>
 800ca74:	61b8      	str	r0, [r7, #24]
        break;
 800ca76:	e00f      	b.n	800ca98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca78:	4b1b      	ldr	r3, [pc, #108]	; (800cae8 <UART_SetConfig+0x4bc>)
 800ca7a:	61bb      	str	r3, [r7, #24]
        break;
 800ca7c:	e00c      	b.n	800ca98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca7e:	f7fc fe49 	bl	8009714 <HAL_RCC_GetSysClockFreq>
 800ca82:	61b8      	str	r0, [r7, #24]
        break;
 800ca84:	e008      	b.n	800ca98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca8a:	61bb      	str	r3, [r7, #24]
        break;
 800ca8c:	e004      	b.n	800ca98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	77bb      	strb	r3, [r7, #30]
        break;
 800ca96:	bf00      	nop
    }

    if (pclk != 0U)
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d018      	beq.n	800cad0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	085a      	lsrs	r2, r3, #1
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	441a      	add	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	2b0f      	cmp	r3, #15
 800cab8:	d908      	bls.n	800cacc <UART_SetConfig+0x4a0>
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cac0:	d204      	bcs.n	800cacc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	693a      	ldr	r2, [r7, #16]
 800cac8:	60da      	str	r2, [r3, #12]
 800caca:	e001      	b.n	800cad0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cadc:	7fbb      	ldrb	r3, [r7, #30]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3720      	adds	r7, #32
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	00f42400 	.word	0x00f42400

0800caec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	430a      	orrs	r2, r1
 800cb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00a      	beq.n	800cb38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	430a      	orrs	r2, r1
 800cb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3c:	f003 0304 	and.w	r3, r3, #4
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00a      	beq.n	800cb5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	430a      	orrs	r2, r1
 800cb58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5e:	f003 0308 	and.w	r3, r3, #8
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00a      	beq.n	800cb7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	f003 0310 	and.w	r3, r3, #16
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00a      	beq.n	800cb9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	430a      	orrs	r2, r1
 800cb9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba2:	f003 0320 	and.w	r3, r3, #32
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00a      	beq.n	800cbc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	430a      	orrs	r2, r1
 800cbbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01a      	beq.n	800cc02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	430a      	orrs	r2, r1
 800cbe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbea:	d10a      	bne.n	800cc02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00a      	beq.n	800cc24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	430a      	orrs	r2, r1
 800cc22:	605a      	str	r2, [r3, #4]
  }
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc40:	f7f6 ff54 	bl	8003aec <HAL_GetTick>
 800cc44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0308 	and.w	r3, r3, #8
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d10e      	bne.n	800cc72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f817 	bl	800cc96 <UART_WaitOnFlagUntilTimeout>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e00d      	b.n	800cc8e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2220      	movs	r2, #32
 800cc76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2220      	movs	r2, #32
 800cc7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	603b      	str	r3, [r7, #0]
 800cca2:	4613      	mov	r3, r2
 800cca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cca6:	e05e      	b.n	800cd66 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccae:	d05a      	beq.n	800cd66 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccb0:	f7f6 ff1c 	bl	8003aec <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d302      	bcc.n	800ccc6 <UART_WaitOnFlagUntilTimeout+0x30>
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d11b      	bne.n	800ccfe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ccd4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f022 0201 	bic.w	r2, r2, #1
 800cce4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2220      	movs	r2, #32
 800ccea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e043      	b.n	800cd86 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 0304 	and.w	r3, r3, #4
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d02c      	beq.n	800cd66 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	69db      	ldr	r3, [r3, #28]
 800cd12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd1a:	d124      	bne.n	800cd66 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	689a      	ldr	r2, [r3, #8]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f022 0201 	bic.w	r2, r2, #1
 800cd44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2220      	movs	r2, #32
 800cd4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2220      	movs	r2, #32
 800cd50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2220      	movs	r2, #32
 800cd56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e00f      	b.n	800cd86 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	69da      	ldr	r2, [r3, #28]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	4013      	ands	r3, r2
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	bf0c      	ite	eq
 800cd76:	2301      	moveq	r3, #1
 800cd78:	2300      	movne	r3, #0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d091      	beq.n	800cca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
	...

0800cd90 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d027      	beq.n	800cdfa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	4b2f      	ldr	r3, [pc, #188]	; (800ce70 <FMC_SDRAM_Init+0xe0>)
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cdc0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800cdc6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800cdcc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800cdd2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800cdd8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800cdde:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800cde4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800cdea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	e032      	b.n	800ce60 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce06:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce10:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ce16:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	4b12      	ldr	r3, [pc, #72]	; (800ce70 <FMC_SDRAM_Init+0xe0>)
 800ce28:	4013      	ands	r3, r2
 800ce2a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce34:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ce3a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ce40:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ce46:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ce4c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	ffff8000 	.word	0xffff8000

0800ce74 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d02e      	beq.n	800ceec <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ce9a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ceaa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ceb4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800cebe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800cec8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	3b01      	subs	r3, #1
 800ced0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ced2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cedc:	4313      	orrs	r3, r2
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	609a      	str	r2, [r3, #8]
 800ceea:	e039      	b.n	800cf60 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	4b1e      	ldr	r3, [pc, #120]	; (800cf70 <FMC_SDRAM_Timing_Init+0xfc>)
 800cef6:	4013      	ands	r3, r2
 800cef8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	3b01      	subs	r3, #1
 800cf00:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	3b01      	subs	r3, #1
 800cf08:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf1e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf2e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800cf38:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800cf42:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	ff0f0fff 	.word	0xff0f0fff

0800cf74 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	691a      	ldr	r2, [r3, #16]
 800cf84:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <FMC_SDRAM_SendCommand+0x44>)
 800cf86:	4013      	ands	r3, r2
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	6811      	ldr	r1, [r2, #0]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	6852      	ldr	r2, [r2, #4]
 800cf90:	4311      	orrs	r1, r2
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	6892      	ldr	r2, [r2, #8]
 800cf96:	3a01      	subs	r2, #1
 800cf98:	0152      	lsls	r2, r2, #5
 800cf9a:	4311      	orrs	r1, r2
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	68d2      	ldr	r2, [r2, #12]
 800cfa0:	0252      	lsls	r2, r2, #9
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	ffc00000 	.word	0xffc00000

0800cfbc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	695a      	ldr	r2, [r3, #20]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	431a      	orrs	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
	...

0800cfe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	f107 001c 	add.w	r0, r7, #28
 800cff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d120      	bne.n	800d03e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68da      	ldr	r2, [r3, #12]
 800d00c:	4b20      	ldr	r3, [pc, #128]	; (800d090 <USB_CoreInit+0xac>)
 800d00e:	4013      	ands	r3, r2
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d022:	2b01      	cmp	r3, #1
 800d024:	d105      	bne.n	800d032 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f942 	bl	800d2bc <USB_CoreReset>
 800d038:	4603      	mov	r3, r0
 800d03a:	73fb      	strb	r3, [r7, #15]
 800d03c:	e010      	b.n	800d060 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 f936 	bl	800d2bc <USB_CoreReset>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d058:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d062:	2b01      	cmp	r3, #1
 800d064:	d10b      	bne.n	800d07e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	f043 0206 	orr.w	r2, r3, #6
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f043 0220 	orr.w	r2, r3, #32
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d08a:	b004      	add	sp, #16
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	ffbdffbf 	.word	0xffbdffbf

0800d094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	f043 0201 	orr.w	r2, r3, #1
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b083      	sub	sp, #12
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	f023 0201 	bic.w	r2, r3, #1
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d106      	bne.n	800d104 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	60da      	str	r2, [r3, #12]
 800d102:	e00b      	b.n	800d11c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	60da      	str	r2, [r3, #12]
 800d116:	e001      	b.n	800d11c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e003      	b.n	800d124 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d11c:	2032      	movs	r0, #50	; 0x32
 800d11e:	f7f6 fcf1 	bl	8003b04 <HAL_Delay>

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d136:	2300      	movs	r3, #0
 800d138:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	019b      	lsls	r3, r3, #6
 800d13e:	f043 0220 	orr.w	r2, r3, #32
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3301      	adds	r3, #1
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4a09      	ldr	r2, [pc, #36]	; (800d174 <USB_FlushTxFifo+0x48>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d901      	bls.n	800d158 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d154:	2303      	movs	r3, #3
 800d156:	e006      	b.n	800d166 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	f003 0320 	and.w	r3, r3, #32
 800d160:	2b20      	cmp	r3, #32
 800d162:	d0f0      	beq.n	800d146 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	00030d40 	.word	0x00030d40

0800d178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2210      	movs	r2, #16
 800d188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3301      	adds	r3, #1
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	4a09      	ldr	r2, [pc, #36]	; (800d1b8 <USB_FlushRxFifo+0x40>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d901      	bls.n	800d19c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d198:	2303      	movs	r3, #3
 800d19a:	e006      	b.n	800d1aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	f003 0310 	and.w	r3, r3, #16
 800d1a4:	2b10      	cmp	r3, #16
 800d1a6:	d0f0      	beq.n	800d18a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	00030d40 	.word	0x00030d40

0800d1bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b089      	sub	sp, #36	; 0x24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	71fb      	strb	r3, [r7, #7]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d1da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d11a      	bne.n	800d218 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1e2:	88bb      	ldrh	r3, [r7, #4]
 800d1e4:	3303      	adds	r3, #3
 800d1e6:	089b      	lsrs	r3, r3, #2
 800d1e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	61bb      	str	r3, [r7, #24]
 800d1ee:	e00f      	b.n	800d210 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	031a      	lsls	r2, r3, #12
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	3304      	adds	r3, #4
 800d208:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	3301      	adds	r3, #1
 800d20e:	61bb      	str	r3, [r7, #24]
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	429a      	cmp	r2, r3
 800d216:	d3eb      	bcc.n	800d1f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3724      	adds	r7, #36	; 0x24
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d226:	b480      	push	{r7}
 800d228:	b089      	sub	sp, #36	; 0x24
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	60f8      	str	r0, [r7, #12]
 800d22e:	60b9      	str	r1, [r7, #8]
 800d230:	4613      	mov	r3, r2
 800d232:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d23c:	88fb      	ldrh	r3, [r7, #6]
 800d23e:	3303      	adds	r3, #3
 800d240:	089b      	lsrs	r3, r3, #2
 800d242:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d244:	2300      	movs	r3, #0
 800d246:	61bb      	str	r3, [r7, #24]
 800d248:	e00b      	b.n	800d262 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	601a      	str	r2, [r3, #0]
    pDest++;
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	3304      	adds	r3, #4
 800d25a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	3301      	adds	r3, #1
 800d260:	61bb      	str	r3, [r7, #24]
 800d262:	69ba      	ldr	r2, [r7, #24]
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	429a      	cmp	r2, r3
 800d268:	d3ef      	bcc.n	800d24a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d26a:	69fb      	ldr	r3, [r7, #28]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3724      	adds	r7, #36	; 0x24
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	4013      	ands	r3, r2
 800d28e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d290:	68fb      	ldr	r3, [r7, #12]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
	...

0800d2bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4a13      	ldr	r2, [pc, #76]	; (800d320 <USB_CoreReset+0x64>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d901      	bls.n	800d2da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	e01b      	b.n	800d312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	daf2      	bge.n	800d2c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	f043 0201 	orr.w	r2, r3, #1
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	4a09      	ldr	r2, [pc, #36]	; (800d320 <USB_CoreReset+0x64>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d901      	bls.n	800d304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d300:	2303      	movs	r3, #3
 800d302:	e006      	b.n	800d312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d0f0      	beq.n	800d2f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3714      	adds	r7, #20
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	00030d40 	.word	0x00030d40

0800d324 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d324:	b084      	sub	sp, #16
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	f107 001c 	add.w	r0, r7, #28
 800d332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d340:	461a      	mov	r2, r3
 800d342:	2300      	movs	r3, #0
 800d344:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d018      	beq.n	800d390 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	2b01      	cmp	r3, #1
 800d362:	d10a      	bne.n	800d37a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d372:	f043 0304 	orr.w	r3, r3, #4
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	e014      	b.n	800d3a4 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d388:	f023 0304 	bic.w	r3, r3, #4
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	e009      	b.n	800d3a4 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d39e:	f023 0304 	bic.w	r3, r3, #4
 800d3a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d3a4:	2110      	movs	r1, #16
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7ff fec0 	bl	800d12c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7ff fee3 	bl	800d178 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	e015      	b.n	800d3e4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3d8:	461a      	mov	r2, r3
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	6a3b      	ldr	r3, [r7, #32]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d3e5      	bcc.n	800d3b8 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f8ac 	bl	800d54c <USB_DriveVbus>

  HAL_Delay(200U);
 800d3f4:	20c8      	movs	r0, #200	; 0xc8
 800d3f6:	f7f6 fb85 	bl	8003b04 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d406:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d41a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a14      	ldr	r2, [pc, #80]	; (800d470 <USB_HostInit+0x14c>)
 800d420:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a13      	ldr	r2, [pc, #76]	; (800d474 <USB_HostInit+0x150>)
 800d426:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d42a:	e009      	b.n	800d440 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2280      	movs	r2, #128	; 0x80
 800d430:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a10      	ldr	r2, [pc, #64]	; (800d478 <USB_HostInit+0x154>)
 800d436:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a10      	ldr	r2, [pc, #64]	; (800d47c <USB_HostInit+0x158>)
 800d43c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	2b00      	cmp	r3, #0
 800d444:	d105      	bne.n	800d452 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	f043 0210 	orr.w	r2, r3, #16
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	699a      	ldr	r2, [r3, #24]
 800d456:	4b0a      	ldr	r3, [pc, #40]	; (800d480 <USB_HostInit+0x15c>)
 800d458:	4313      	orrs	r3, r2
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d46a:	b004      	add	sp, #16
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	01000200 	.word	0x01000200
 800d474:	00e00300 	.word	0x00e00300
 800d478:	00600080 	.word	0x00600080
 800d47c:	004000e0 	.word	0x004000e0
 800d480:	a3200008 	.word	0xa3200008

0800d484 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	460b      	mov	r3, r1
 800d48e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4a2:	f023 0303 	bic.w	r3, r3, #3
 800d4a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d4c0:	78fb      	ldrb	r3, [r7, #3]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d107      	bne.n	800d4d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d4d2:	6053      	str	r3, [r2, #4]
 800d4d4:	e009      	b.n	800d4ea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d4d6:	78fb      	ldrb	r3, [r7, #3]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d106      	bne.n	800d4ea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f241 7370 	movw	r3, #6000	; 0x1770
 800d4e8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d504:	2300      	movs	r3, #0
 800d506:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d518:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d526:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d528:	2064      	movs	r0, #100	; 0x64
 800d52a:	f7f6 faeb 	bl	8003b04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d53a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d53c:	200a      	movs	r0, #10
 800d53e:	f7f6 fae1 	bl	8003b04 <HAL_Delay>

  return HAL_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d55c:	2300      	movs	r3, #0
 800d55e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d570:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d109      	bne.n	800d590 <USB_DriveVbus+0x44>
 800d57c:	78fb      	ldrb	r3, [r7, #3]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d106      	bne.n	800d590 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d58a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d58e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d59a:	d109      	bne.n	800d5b0 <USB_DriveVbus+0x64>
 800d59c:	78fb      	ldrb	r3, [r7, #3]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b085      	sub	sp, #20
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	0c5b      	lsrs	r3, r3, #17
 800d5dc:	f003 0303 	and.w	r3, r3, #3
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	b29b      	uxth	r3, r3
}
 800d602:	4618      	mov	r0, r3
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
	...

0800d610 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	4608      	mov	r0, r1
 800d61a:	4611      	mov	r1, r2
 800d61c:	461a      	mov	r2, r3
 800d61e:	4603      	mov	r3, r0
 800d620:	70fb      	strb	r3, [r7, #3]
 800d622:	460b      	mov	r3, r1
 800d624:	70bb      	strb	r3, [r7, #2]
 800d626:	4613      	mov	r3, r2
 800d628:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	015a      	lsls	r2, r3, #5
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	4413      	add	r3, r2
 800d63a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d63e:	461a      	mov	r2, r3
 800d640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d644:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d87e      	bhi.n	800d74c <USB_HC_Init+0x13c>
 800d64e:	a201      	add	r2, pc, #4	; (adr r2, 800d654 <USB_HC_Init+0x44>)
 800d650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d654:	0800d665 	.word	0x0800d665
 800d658:	0800d70f 	.word	0x0800d70f
 800d65c:	0800d665 	.word	0x0800d665
 800d660:	0800d6d1 	.word	0x0800d6d1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d664:	78fb      	ldrb	r3, [r7, #3]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d670:	461a      	mov	r2, r3
 800d672:	f240 439d 	movw	r3, #1181	; 0x49d
 800d676:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	da10      	bge.n	800d6a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	4413      	add	r3, r2
 800d688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	78fa      	ldrb	r2, [r7, #3]
 800d690:	0151      	lsls	r1, r2, #5
 800d692:	693a      	ldr	r2, [r7, #16]
 800d694:	440a      	add	r2, r1
 800d696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d69e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d6a0:	e057      	b.n	800d752 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d051      	beq.n	800d752 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d6ae:	78fb      	ldrb	r3, [r7, #3]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	78fa      	ldrb	r2, [r7, #3]
 800d6be:	0151      	lsls	r1, r2, #5
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	440a      	add	r2, r1
 800d6c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d6cc:	60d3      	str	r3, [r2, #12]
      break;
 800d6ce:	e040      	b.n	800d752 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d6d0:	78fb      	ldrb	r3, [r7, #3]
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6dc:	461a      	mov	r2, r3
 800d6de:	f240 639d 	movw	r3, #1693	; 0x69d
 800d6e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d6e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	da34      	bge.n	800d756 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d6ec:	78fb      	ldrb	r3, [r7, #3]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	78fa      	ldrb	r2, [r7, #3]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	693a      	ldr	r2, [r7, #16]
 800d700:	440a      	add	r2, r1
 800d702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d70a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d70c:	e023      	b.n	800d756 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d70e:	78fb      	ldrb	r3, [r7, #3]
 800d710:	015a      	lsls	r2, r3, #5
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	4413      	add	r3, r2
 800d716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d71a:	461a      	mov	r2, r3
 800d71c:	f240 2325 	movw	r3, #549	; 0x225
 800d720:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d722:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d726:	2b00      	cmp	r3, #0
 800d728:	da17      	bge.n	800d75a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	015a      	lsls	r2, r3, #5
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	4413      	add	r3, r2
 800d732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	78fa      	ldrb	r2, [r7, #3]
 800d73a:	0151      	lsls	r1, r2, #5
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	440a      	add	r2, r1
 800d740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d744:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d748:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d74a:	e006      	b.n	800d75a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	77fb      	strb	r3, [r7, #31]
      break;
 800d750:	e004      	b.n	800d75c <USB_HC_Init+0x14c>
      break;
 800d752:	bf00      	nop
 800d754:	e002      	b.n	800d75c <USB_HC_Init+0x14c>
      break;
 800d756:	bf00      	nop
 800d758:	e000      	b.n	800d75c <USB_HC_Init+0x14c>
      break;
 800d75a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d762:	699a      	ldr	r2, [r3, #24]
 800d764:	78fb      	ldrb	r3, [r7, #3]
 800d766:	f003 030f 	and.w	r3, r3, #15
 800d76a:	2101      	movs	r1, #1
 800d76c:	fa01 f303 	lsl.w	r3, r1, r3
 800d770:	6939      	ldr	r1, [r7, #16]
 800d772:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d776:	4313      	orrs	r3, r2
 800d778:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	699b      	ldr	r3, [r3, #24]
 800d77e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d786:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	da03      	bge.n	800d796 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d78e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d792:	61bb      	str	r3, [r7, #24]
 800d794:	e001      	b.n	800d79a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d796:	2300      	movs	r3, #0
 800d798:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff ff0f 	bl	800d5be <USB_GetHostSpeed>
 800d7a0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d7a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d106      	bne.n	800d7b8 <USB_HC_Init+0x1a8>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d003      	beq.n	800d7b8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d7b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7b4:	617b      	str	r3, [r7, #20]
 800d7b6:	e001      	b.n	800d7bc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7bc:	787b      	ldrb	r3, [r7, #1]
 800d7be:	059b      	lsls	r3, r3, #22
 800d7c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d7c4:	78bb      	ldrb	r3, [r7, #2]
 800d7c6:	02db      	lsls	r3, r3, #11
 800d7c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7cc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d7ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d7d2:	049b      	lsls	r3, r3, #18
 800d7d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d7d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d7da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d7dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d7e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7e6:	78fb      	ldrb	r3, [r7, #3]
 800d7e8:	0159      	lsls	r1, r3, #5
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	440b      	add	r3, r1
 800d7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7f2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7f8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d7fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	d10f      	bne.n	800d822 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d802:	78fb      	ldrb	r3, [r7, #3]
 800d804:	015a      	lsls	r2, r3, #5
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	4413      	add	r3, r2
 800d80a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	78fa      	ldrb	r2, [r7, #3]
 800d812:	0151      	lsls	r1, r2, #5
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	440a      	add	r2, r1
 800d818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d81c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d820:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d822:	7ffb      	ldrb	r3, [r7, #31]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3720      	adds	r7, #32
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08c      	sub	sp, #48	; 0x30
 800d830:	af02      	add	r7, sp, #8
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	4613      	mov	r3, r2
 800d838:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	785b      	ldrb	r3, [r3, #1]
 800d842:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d844:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d848:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d852:	2b00      	cmp	r3, #0
 800d854:	d02d      	beq.n	800d8b2 <USB_HC_StartXfer+0x86>
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	791b      	ldrb	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d129      	bne.n	800d8b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d117      	bne.n	800d894 <USB_HC_StartXfer+0x68>
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	79db      	ldrb	r3, [r3, #7]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <USB_HC_StartXfer+0x48>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	79db      	ldrb	r3, [r3, #7]
 800d870:	2b02      	cmp	r3, #2
 800d872:	d10f      	bne.n	800d894 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	015a      	lsls	r2, r3, #5
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	0151      	lsls	r1, r2, #5
 800d886:	6a3a      	ldr	r2, [r7, #32]
 800d888:	440a      	add	r2, r1
 800d88a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d892:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d894:	79fb      	ldrb	r3, [r7, #7]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10b      	bne.n	800d8b2 <USB_HC_StartXfer+0x86>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	795b      	ldrb	r3, [r3, #5]
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d107      	bne.n	800d8b2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	785b      	ldrb	r3, [r3, #1]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f000 fa31 	bl	800dd10 <USB_DoPing>
      return HAL_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	e0f9      	b.n	800daa6 <USB_HC_StartXfer+0x27a>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	695b      	ldr	r3, [r3, #20]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d018      	beq.n	800d8ec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	8912      	ldrh	r2, [r2, #8]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	8912      	ldrh	r2, [r2, #8]
 800d8ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8ce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d8d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d8d2:	8b7b      	ldrh	r3, [r7, #26]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d90b      	bls.n	800d8f0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d8d8:	8b7b      	ldrh	r3, [r7, #26]
 800d8da:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d8dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	8912      	ldrh	r2, [r2, #8]
 800d8e2:	fb02 f203 	mul.w	r2, r2, r3
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	611a      	str	r2, [r3, #16]
 800d8ea:	e001      	b.n	800d8f0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	78db      	ldrb	r3, [r3, #3]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d007      	beq.n	800d908 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	8912      	ldrh	r2, [r2, #8]
 800d8fe:	fb02 f203 	mul.w	r2, r2, r3
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	611a      	str	r2, [r3, #16]
 800d906:	e003      	b.n	800d910 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	695a      	ldr	r2, [r3, #20]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d91a:	04d9      	lsls	r1, r3, #19
 800d91c:	4b64      	ldr	r3, [pc, #400]	; (800dab0 <USB_HC_StartXfer+0x284>)
 800d91e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d920:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	7a9b      	ldrb	r3, [r3, #10]
 800d926:	075b      	lsls	r3, r3, #29
 800d928:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d92c:	69f9      	ldr	r1, [r7, #28]
 800d92e:	0148      	lsls	r0, r1, #5
 800d930:	6a39      	ldr	r1, [r7, #32]
 800d932:	4401      	add	r1, r0
 800d934:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d938:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d93a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d93c:	79fb      	ldrb	r3, [r7, #7]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d009      	beq.n	800d956 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	68d9      	ldr	r1, [r3, #12]
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	015a      	lsls	r2, r3, #5
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	4413      	add	r3, r2
 800d94e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d952:	460a      	mov	r2, r1
 800d954:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	bf0c      	ite	eq
 800d966:	2301      	moveq	r3, #1
 800d968:	2300      	movne	r3, #0
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	015a      	lsls	r2, r3, #5
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	4413      	add	r3, r2
 800d976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	69fa      	ldr	r2, [r7, #28]
 800d97e:	0151      	lsls	r1, r2, #5
 800d980:	6a3a      	ldr	r2, [r7, #32]
 800d982:	440a      	add	r2, r1
 800d984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d98c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	015a      	lsls	r2, r3, #5
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	4413      	add	r3, r2
 800d996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	7e7b      	ldrb	r3, [r7, #25]
 800d99e:	075b      	lsls	r3, r3, #29
 800d9a0:	69f9      	ldr	r1, [r7, #28]
 800d9a2:	0148      	lsls	r0, r1, #5
 800d9a4:	6a39      	ldr	r1, [r7, #32]
 800d9a6:	4401      	add	r1, r0
 800d9a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	015a      	lsls	r2, r3, #5
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9c6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	78db      	ldrb	r3, [r3, #3]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9d6:	613b      	str	r3, [r7, #16]
 800d9d8:	e003      	b.n	800d9e2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d9e0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9e8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	015a      	lsls	r2, r3, #5
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	e04f      	b.n	800daa6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	78db      	ldrb	r3, [r3, #3]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d14a      	bne.n	800daa4 <USB_HC_StartXfer+0x278>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d046      	beq.n	800daa4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	79db      	ldrb	r3, [r3, #7]
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d830      	bhi.n	800da80 <USB_HC_StartXfer+0x254>
 800da1e:	a201      	add	r2, pc, #4	; (adr r2, 800da24 <USB_HC_StartXfer+0x1f8>)
 800da20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da24:	0800da35 	.word	0x0800da35
 800da28:	0800da59 	.word	0x0800da59
 800da2c:	0800da35 	.word	0x0800da35
 800da30:	0800da59 	.word	0x0800da59
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	3303      	adds	r3, #3
 800da3a:	089b      	lsrs	r3, r3, #2
 800da3c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800da3e:	8afa      	ldrh	r2, [r7, #22]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da44:	b29b      	uxth	r3, r3
 800da46:	429a      	cmp	r2, r3
 800da48:	d91c      	bls.n	800da84 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	f043 0220 	orr.w	r2, r3, #32
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	619a      	str	r2, [r3, #24]
        }
        break;
 800da56:	e015      	b.n	800da84 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	3303      	adds	r3, #3
 800da5e:	089b      	lsrs	r3, r3, #2
 800da60:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800da62:	8afa      	ldrh	r2, [r7, #22]
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	429a      	cmp	r2, r3
 800da70:	d90a      	bls.n	800da88 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	619a      	str	r2, [r3, #24]
        }
        break;
 800da7e:	e003      	b.n	800da88 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800da80:	bf00      	nop
 800da82:	e002      	b.n	800da8a <USB_HC_StartXfer+0x25e>
        break;
 800da84:	bf00      	nop
 800da86:	e000      	b.n	800da8a <USB_HC_StartXfer+0x25e>
        break;
 800da88:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	68d9      	ldr	r1, [r3, #12]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	785a      	ldrb	r2, [r3, #1]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	b298      	uxth	r0, r3
 800da98:	2300      	movs	r3, #0
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	4603      	mov	r3, r0
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f7ff fb8c 	bl	800d1bc <USB_WritePacket>
  }

  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3728      	adds	r7, #40	; 0x28
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	1ff80000 	.word	0x1ff80000

0800dab4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	b29b      	uxth	r3, r3
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b089      	sub	sp, #36	; 0x24
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800dae6:	78fb      	ldrb	r3, [r7, #3]
 800dae8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800daea:	2300      	movs	r3, #0
 800daec:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	0c9b      	lsrs	r3, r3, #18
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	015a      	lsls	r2, r3, #5
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	4413      	add	r3, r2
 800db0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	0fdb      	lsrs	r3, r3, #31
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f003 0320 	and.w	r3, r3, #32
 800db22:	2b20      	cmp	r3, #32
 800db24:	d104      	bne.n	800db30 <USB_HC_Halt+0x5a>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e0e8      	b.n	800dd02 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <USB_HC_Halt+0x66>
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d173      	bne.n	800dc24 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	015a      	lsls	r2, r3, #5
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	4413      	add	r3, r2
 800db44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	0151      	lsls	r1, r2, #5
 800db4e:	69ba      	ldr	r2, [r7, #24]
 800db50:	440a      	add	r2, r1
 800db52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	f003 0320 	and.w	r3, r3, #32
 800db64:	2b00      	cmp	r3, #0
 800db66:	f040 80cb 	bne.w	800dd00 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d143      	bne.n	800dbfe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	015a      	lsls	r2, r3, #5
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	4413      	add	r3, r2
 800db7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	0151      	lsls	r1, r2, #5
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	440a      	add	r2, r1
 800db8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	015a      	lsls	r2, r3, #5
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	4413      	add	r3, r2
 800db9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	697a      	ldr	r2, [r7, #20]
 800dba6:	0151      	lsls	r1, r2, #5
 800dba8:	69ba      	ldr	r2, [r7, #24]
 800dbaa:	440a      	add	r2, r1
 800dbac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dbb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	0151      	lsls	r1, r2, #5
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	440a      	add	r2, r1
 800dbcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbd4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	61fb      	str	r3, [r7, #28]
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbe2:	d81d      	bhi.n	800dc20 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	015a      	lsls	r2, r3, #5
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	4413      	add	r3, r2
 800dbec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbfa:	d0ec      	beq.n	800dbd6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dbfc:	e080      	b.n	800dd00 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	015a      	lsls	r2, r3, #5
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	4413      	add	r3, r2
 800dc06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	0151      	lsls	r1, r2, #5
 800dc10:	69ba      	ldr	r2, [r7, #24]
 800dc12:	440a      	add	r2, r1
 800dc14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dc1e:	e06f      	b.n	800dd00 <USB_HC_Halt+0x22a>
            break;
 800dc20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dc22:	e06d      	b.n	800dd00 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	697a      	ldr	r2, [r7, #20]
 800dc34:	0151      	lsls	r1, r2, #5
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	440a      	add	r2, r1
 800dc3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d143      	bne.n	800dcdc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	015a      	lsls	r2, r3, #5
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	0151      	lsls	r1, r2, #5
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	440a      	add	r2, r1
 800dc6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	015a      	lsls	r2, r3, #5
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	0151      	lsls	r1, r2, #5
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	440a      	add	r2, r1
 800dc8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	015a      	lsls	r2, r3, #5
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	0151      	lsls	r1, r2, #5
 800dca6:	69ba      	ldr	r2, [r7, #24]
 800dca8:	440a      	add	r2, r1
 800dcaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dcb2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	61fb      	str	r3, [r7, #28]
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcc0:	d81d      	bhi.n	800dcfe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcd8:	d0ec      	beq.n	800dcb4 <USB_HC_Halt+0x1de>
 800dcda:	e011      	b.n	800dd00 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	0151      	lsls	r1, r2, #5
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	440a      	add	r2, r1
 800dcf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcfa:	6013      	str	r3, [r2, #0]
 800dcfc:	e000      	b.n	800dd00 <USB_HC_Halt+0x22a>
          break;
 800dcfe:	bf00      	nop
    }
  }

  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3724      	adds	r7, #36	; 0x24
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
	...

0800dd10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800dd24:	2301      	movs	r3, #1
 800dd26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	04da      	lsls	r2, r3, #19
 800dd2c:	4b15      	ldr	r3, [pc, #84]	; (800dd84 <USB_DoPing+0x74>)
 800dd2e:	4013      	ands	r3, r2
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	0151      	lsls	r1, r2, #5
 800dd34:	697a      	ldr	r2, [r7, #20]
 800dd36:	440a      	add	r2, r1
 800dd38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dd58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	015a      	lsls	r2, r3, #5
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd6e:	461a      	mov	r2, r3
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	371c      	adds	r7, #28
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	1ff80000 	.word	0x1ff80000

0800dd88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dd94:	2300      	movs	r3, #0
 800dd96:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff f98c 	bl	800d0b6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800dd9e:	2110      	movs	r1, #16
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff f9c3 	bl	800d12c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff f9e6 	bl	800d178 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ddac:	2300      	movs	r3, #0
 800ddae:	613b      	str	r3, [r7, #16]
 800ddb0:	e01f      	b.n	800ddf2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddd0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ddd8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dde6:	461a      	mov	r2, r3
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b0f      	cmp	r3, #15
 800ddf6:	d9dc      	bls.n	800ddb2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	613b      	str	r3, [r7, #16]
 800ddfc:	e034      	b.n	800de68 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4413      	add	r3, r2
 800de06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de14:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	015a      	lsls	r2, r3, #5
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	4413      	add	r3, r2
 800de2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de32:	461a      	mov	r2, r3
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	3301      	adds	r3, #1
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de44:	d80c      	bhi.n	800de60 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	015a      	lsls	r2, r3, #5
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	4413      	add	r3, r2
 800de4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de5c:	d0ec      	beq.n	800de38 <USB_StopHost+0xb0>
 800de5e:	e000      	b.n	800de62 <USB_StopHost+0xda>
        break;
 800de60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	3301      	adds	r3, #1
 800de66:	613b      	str	r3, [r7, #16]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	2b0f      	cmp	r3, #15
 800de6c:	d9c7      	bls.n	800ddfe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de74:	461a      	mov	r2, r3
 800de76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff f905 	bl	800d094 <USB_EnableGlobalInt>

  return HAL_OK;
 800de8a:	2300      	movs	r3, #0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3718      	adds	r7, #24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800de9a:	2100      	movs	r1, #0
 800de9c:	2000      	movs	r0, #0
 800de9e:	f008 fd09 	bl	80168b4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800dea2:	4b45      	ldr	r3, [pc, #276]	; (800dfb8 <MX_LWIP_Init+0x124>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800dea8:	4b44      	ldr	r3, [pc, #272]	; (800dfbc <MX_LWIP_Init+0x128>)
 800deaa:	2200      	movs	r2, #0
 800deac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800deae:	4b44      	ldr	r3, [pc, #272]	; (800dfc0 <MX_LWIP_Init+0x12c>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800deb4:	4b43      	ldr	r3, [pc, #268]	; (800dfc4 <MX_LWIP_Init+0x130>)
 800deb6:	9302      	str	r3, [sp, #8]
 800deb8:	4b43      	ldr	r3, [pc, #268]	; (800dfc8 <MX_LWIP_Init+0x134>)
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	2300      	movs	r3, #0
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	4b3f      	ldr	r3, [pc, #252]	; (800dfc0 <MX_LWIP_Init+0x12c>)
 800dec2:	4a3e      	ldr	r2, [pc, #248]	; (800dfbc <MX_LWIP_Init+0x128>)
 800dec4:	493c      	ldr	r1, [pc, #240]	; (800dfb8 <MX_LWIP_Init+0x124>)
 800dec6:	4841      	ldr	r0, [pc, #260]	; (800dfcc <MX_LWIP_Init+0x138>)
 800dec8:	f009 fa78 	bl	80173bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800decc:	483f      	ldr	r0, [pc, #252]	; (800dfcc <MX_LWIP_Init+0x138>)
 800dece:	f009 fc39 	bl	8017744 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ded2:	4b3e      	ldr	r3, [pc, #248]	; (800dfcc <MX_LWIP_Init+0x138>)
 800ded4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ded8:	089b      	lsrs	r3, r3, #2
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d009      	beq.n	800def8 <MX_LWIP_Init+0x64>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800dee4:	4839      	ldr	r0, [pc, #228]	; (800dfcc <MX_LWIP_Init+0x138>)
 800dee6:	f009 fc3d 	bl	8017764 <netif_set_up>
    LCD_UsrLog ((char *)"  State: Network link is up\n");
 800deea:	4b39      	ldr	r3, [pc, #228]	; (800dfd0 <MX_LWIP_Init+0x13c>)
 800deec:	4a39      	ldr	r2, [pc, #228]	; (800dfd4 <MX_LWIP_Init+0x140>)
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	4839      	ldr	r0, [pc, #228]	; (800dfd8 <MX_LWIP_Init+0x144>)
 800def2:	f016 fcc9 	bl	8024888 <puts>
 800def6:	e008      	b.n	800df0a <MX_LWIP_Init+0x76>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800def8:	4834      	ldr	r0, [pc, #208]	; (800dfcc <MX_LWIP_Init+0x138>)
 800defa:	f009 fca7 	bl	801784c <netif_set_down>
    LCD_UsrLog ((char *)"  State: Network link is down\n");
 800defe:	4b34      	ldr	r3, [pc, #208]	; (800dfd0 <MX_LWIP_Init+0x13c>)
 800df00:	4a34      	ldr	r2, [pc, #208]	; (800dfd4 <MX_LWIP_Init+0x140>)
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	4835      	ldr	r0, [pc, #212]	; (800dfdc <MX_LWIP_Init+0x148>)
 800df06:	f016 fcbf 	bl	8024888 <puts>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800df0a:	4935      	ldr	r1, [pc, #212]	; (800dfe0 <MX_LWIP_Init+0x14c>)
 800df0c:	482f      	ldr	r0, [pc, #188]	; (800dfcc <MX_LWIP_Init+0x138>)
 800df0e:	f009 fd3f 	bl	8017990 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800df12:	2200      	movs	r2, #0
 800df14:	2101      	movs	r1, #1
 800df16:	2001      	movs	r0, #1
 800df18:	f003 f8c2 	bl	80110a0 <osSemaphoreNew>
 800df1c:	4602      	mov	r2, r0
 800df1e:	4b31      	ldr	r3, [pc, #196]	; (800dfe4 <MX_LWIP_Init+0x150>)
 800df20:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800df22:	4b31      	ldr	r3, [pc, #196]	; (800dfe8 <MX_LWIP_Init+0x154>)
 800df24:	4a29      	ldr	r2, [pc, #164]	; (800dfcc <MX_LWIP_Init+0x138>)
 800df26:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800df28:	4b2e      	ldr	r3, [pc, #184]	; (800dfe4 <MX_LWIP_Init+0x150>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a2e      	ldr	r2, [pc, #184]	; (800dfe8 <MX_LWIP_Init+0x154>)
 800df2e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800df30:	2224      	movs	r2, #36	; 0x24
 800df32:	2100      	movs	r1, #0
 800df34:	482d      	ldr	r0, [pc, #180]	; (800dfec <MX_LWIP_Init+0x158>)
 800df36:	f016 fb83 	bl	8024640 <memset>
  attributes.name = "LinkThr";
 800df3a:	4b2c      	ldr	r3, [pc, #176]	; (800dfec <MX_LWIP_Init+0x158>)
 800df3c:	4a2c      	ldr	r2, [pc, #176]	; (800dff0 <MX_LWIP_Init+0x15c>)
 800df3e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800df40:	4b2a      	ldr	r3, [pc, #168]	; (800dfec <MX_LWIP_Init+0x158>)
 800df42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df46:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800df48:	4b28      	ldr	r3, [pc, #160]	; (800dfec <MX_LWIP_Init+0x158>)
 800df4a:	2210      	movs	r2, #16
 800df4c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800df4e:	4a27      	ldr	r2, [pc, #156]	; (800dfec <MX_LWIP_Init+0x158>)
 800df50:	4925      	ldr	r1, [pc, #148]	; (800dfe8 <MX_LWIP_Init+0x154>)
 800df52:	4828      	ldr	r0, [pc, #160]	; (800dff4 <MX_LWIP_Init+0x160>)
 800df54:	f002 fe48 	bl	8010be8 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 800df58:	4b1d      	ldr	r3, [pc, #116]	; (800dfd0 <MX_LWIP_Init+0x13c>)
 800df5a:	4a1e      	ldr	r2, [pc, #120]	; (800dfd4 <MX_LWIP_Init+0x140>)
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	4826      	ldr	r0, [pc, #152]	; (800dff8 <MX_LWIP_Init+0x164>)
 800df60:	f016 fc92 	bl	8024888 <puts>
  if(dhcp_start(&gnetif) == ERR_OK)
 800df64:	4819      	ldr	r0, [pc, #100]	; (800dfcc <MX_LWIP_Init+0x138>)
 800df66:	f011 fdab 	bl	801fac0 <dhcp_start>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d119      	bne.n	800dfa4 <MX_LWIP_Init+0x110>
  {
	  osDelay(2000);
 800df70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800df74:	f002 ff1e 	bl	8010db4 <osDelay>
	  LCD_UsrLog ("  Acquired DHCP address\n");
 800df78:	4b15      	ldr	r3, [pc, #84]	; (800dfd0 <MX_LWIP_Init+0x13c>)
 800df7a:	4a16      	ldr	r2, [pc, #88]	; (800dfd4 <MX_LWIP_Init+0x140>)
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	481f      	ldr	r0, [pc, #124]	; (800dffc <MX_LWIP_Init+0x168>)
 800df80:	f016 fc82 	bl	8024888 <puts>
	  sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&gnetif.ip_addr));
 800df84:	481e      	ldr	r0, [pc, #120]	; (800e000 <MX_LWIP_Init+0x16c>)
 800df86:	f014 fc93 	bl	80228b0 <ip4addr_ntoa>
 800df8a:	4603      	mov	r3, r0
 800df8c:	4619      	mov	r1, r3
 800df8e:	481d      	ldr	r0, [pc, #116]	; (800e004 <MX_LWIP_Init+0x170>)
 800df90:	f016 fcc6 	bl	8024920 <strcpy>
	  LCD_UsrLog ("  IP address assigned by a DHCP server: %s\n", iptxt);
 800df94:	4b0e      	ldr	r3, [pc, #56]	; (800dfd0 <MX_LWIP_Init+0x13c>)
 800df96:	4a0f      	ldr	r2, [pc, #60]	; (800dfd4 <MX_LWIP_Init+0x140>)
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	491a      	ldr	r1, [pc, #104]	; (800e004 <MX_LWIP_Init+0x170>)
 800df9c:	481a      	ldr	r0, [pc, #104]	; (800e008 <MX_LWIP_Init+0x174>)
 800df9e:	f016 fbff 	bl	80247a0 <iprintf>


/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800dfa2:	e005      	b.n	800dfb0 <MX_LWIP_Init+0x11c>
	  LCD_UsrLog ("  Failed to get IP address\n");
 800dfa4:	4b0a      	ldr	r3, [pc, #40]	; (800dfd0 <MX_LWIP_Init+0x13c>)
 800dfa6:	4a0b      	ldr	r2, [pc, #44]	; (800dfd4 <MX_LWIP_Init+0x140>)
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	4818      	ldr	r0, [pc, #96]	; (800e00c <MX_LWIP_Init+0x178>)
 800dfac:	f016 fc6c 	bl	8024888 <puts>
}
 800dfb0:	bf00      	nop
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20009b1c 	.word	0x20009b1c
 800dfbc:	20009b34 	.word	0x20009b34
 800dfc0:	20009b38 	.word	0x20009b38
 800dfc4:	080167c5 	.word	0x080167c5
 800dfc8:	0800e621 	.word	0x0800e621
 800dfcc:	20009ae0 	.word	0x20009ae0
 800dfd0:	20014758 	.word	0x20014758
 800dfd4:	ff000080 	.word	0xff000080
 800dfd8:	08025608 	.word	0x08025608
 800dfdc:	08025624 	.word	0x08025624
 800dfe0:	0800e705 	.word	0x0800e705
 800dfe4:	20000258 	.word	0x20000258
 800dfe8:	20009ab4 	.word	0x20009ab4
 800dfec:	20009abc 	.word	0x20009abc
 800dff0:	08025644 	.word	0x08025644
 800dff4:	0800e68d 	.word	0x0800e68d
 800dff8:	0802564c 	.word	0x0802564c
 800dffc:	08025674 	.word	0x08025674
 800e000:	20009ae4 	.word	0x20009ae4
 800e004:	20009b20 	.word	0x20009b20
 800e008:	0802568c 	.word	0x0802568c
 800e00c:	080256b8 	.word	0x080256b8

0800e010 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b08e      	sub	sp, #56	; 0x38
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e01c:	2200      	movs	r2, #0
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	605a      	str	r2, [r3, #4]
 800e022:	609a      	str	r2, [r3, #8]
 800e024:	60da      	str	r2, [r3, #12]
 800e026:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a44      	ldr	r2, [pc, #272]	; (800e140 <HAL_ETH_MspInit+0x130>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	f040 8081 	bne.w	800e136 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e034:	4b43      	ldr	r3, [pc, #268]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e038:	4a42      	ldr	r2, [pc, #264]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e03a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e03e:	6313      	str	r3, [r2, #48]	; 0x30
 800e040:	4b40      	ldr	r3, [pc, #256]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e048:	623b      	str	r3, [r7, #32]
 800e04a:	6a3b      	ldr	r3, [r7, #32]
 800e04c:	4b3d      	ldr	r3, [pc, #244]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e050:	4a3c      	ldr	r2, [pc, #240]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e056:	6313      	str	r3, [r2, #48]	; 0x30
 800e058:	4b3a      	ldr	r3, [pc, #232]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e060:	61fb      	str	r3, [r7, #28]
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4b37      	ldr	r3, [pc, #220]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e068:	4a36      	ldr	r2, [pc, #216]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e06a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e06e:	6313      	str	r3, [r2, #48]	; 0x30
 800e070:	4b34      	ldr	r3, [pc, #208]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e078:	61bb      	str	r3, [r7, #24]
 800e07a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e07c:	4b31      	ldr	r3, [pc, #196]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e080:	4a30      	ldr	r2, [pc, #192]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e086:	6313      	str	r3, [r2, #48]	; 0x30
 800e088:	4b2e      	ldr	r3, [pc, #184]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e090:	617b      	str	r3, [r7, #20]
 800e092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e094:	4b2b      	ldr	r3, [pc, #172]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e098:	4a2a      	ldr	r2, [pc, #168]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e09a:	f043 0304 	orr.w	r3, r3, #4
 800e09e:	6313      	str	r3, [r2, #48]	; 0x30
 800e0a0:	4b28      	ldr	r3, [pc, #160]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a4:	f003 0304 	and.w	r3, r3, #4
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0ac:	4b25      	ldr	r3, [pc, #148]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b0:	4a24      	ldr	r2, [pc, #144]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e0b2:	f043 0301 	orr.w	r3, r3, #1
 800e0b6:	6313      	str	r3, [r2, #48]	; 0x30
 800e0b8:	4b22      	ldr	r3, [pc, #136]	; (800e144 <HAL_ETH_MspInit+0x134>)
 800e0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	60fb      	str	r3, [r7, #12]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800e0c4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0ca:	2302      	movs	r3, #2
 800e0cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e0d6:	230b      	movs	r3, #11
 800e0d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0de:	4619      	mov	r1, r3
 800e0e0:	4819      	ldr	r0, [pc, #100]	; (800e148 <HAL_ETH_MspInit+0x138>)
 800e0e2:	f7f8 fa89 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e0e6:	2332      	movs	r3, #50	; 0x32
 800e0e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e0f6:	230b      	movs	r3, #11
 800e0f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0fe:	4619      	mov	r1, r3
 800e100:	4812      	ldr	r0, [pc, #72]	; (800e14c <HAL_ETH_MspInit+0x13c>)
 800e102:	f7f8 fa79 	bl	80065f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e106:	2386      	movs	r3, #134	; 0x86
 800e108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e10a:	2302      	movs	r3, #2
 800e10c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e112:	2303      	movs	r3, #3
 800e114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e116:	230b      	movs	r3, #11
 800e118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e11a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e11e:	4619      	mov	r1, r3
 800e120:	480b      	ldr	r0, [pc, #44]	; (800e150 <HAL_ETH_MspInit+0x140>)
 800e122:	f7f8 fa69 	bl	80065f8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e126:	2200      	movs	r2, #0
 800e128:	2105      	movs	r1, #5
 800e12a:	203d      	movs	r0, #61	; 0x3d
 800e12c:	f7f6 f84c 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e130:	203d      	movs	r0, #61	; 0x3d
 800e132:	f7f6 f865 	bl	8004200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e136:	bf00      	nop
 800e138:	3738      	adds	r7, #56	; 0x38
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	40028000 	.word	0x40028000
 800e144:	40023800 	.word	0x40023800
 800e148:	40021800 	.word	0x40021800
 800e14c:	40020800 	.word	0x40020800
 800e150:	40020000 	.word	0x40020000

0800e154 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800e15c:	4b04      	ldr	r3, [pc, #16]	; (800e170 <HAL_ETH_RxCpltCallback+0x1c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4618      	mov	r0, r3
 800e162:	f003 f8a1 	bl	80112a8 <osSemaphoreRelease>
}
 800e166:	bf00      	nop
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	2000025c 	.word	0x2000025c

0800e174 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b090      	sub	sp, #64	; 0x40
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e180:	4b5d      	ldr	r3, [pc, #372]	; (800e2f8 <low_level_init+0x184>)
 800e182:	4a5e      	ldr	r2, [pc, #376]	; (800e2fc <low_level_init+0x188>)
 800e184:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e186:	4b5c      	ldr	r3, [pc, #368]	; (800e2f8 <low_level_init+0x184>)
 800e188:	2201      	movs	r2, #1
 800e18a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800e18c:	4b5a      	ldr	r3, [pc, #360]	; (800e2f8 <low_level_init+0x184>)
 800e18e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e192:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e194:	4b58      	ldr	r3, [pc, #352]	; (800e2f8 <low_level_init+0x184>)
 800e196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e19a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800e19c:	4b56      	ldr	r3, [pc, #344]	; (800e2f8 <low_level_init+0x184>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800e1a6:	2380      	movs	r3, #128	; 0x80
 800e1a8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800e1aa:	23e1      	movs	r3, #225	; 0xe1
 800e1ac:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x06;
 800e1ae:	2306      	movs	r3, #6
 800e1b0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x0A;
 800e1b2:	230a      	movs	r3, #10
 800e1b4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x55;
 800e1b6:	2355      	movs	r3, #85	; 0x55
 800e1b8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800e1ba:	4a4f      	ldr	r2, [pc, #316]	; (800e2f8 <low_level_init+0x184>)
 800e1bc:	f107 030c 	add.w	r3, r7, #12
 800e1c0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800e1c2:	4b4d      	ldr	r3, [pc, #308]	; (800e2f8 <low_level_init+0x184>)
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800e1c8:	4b4b      	ldr	r3, [pc, #300]	; (800e2f8 <low_level_init+0x184>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e1ce:	4b4a      	ldr	r3, [pc, #296]	; (800e2f8 <low_level_init+0x184>)
 800e1d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e1d4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e1d6:	4848      	ldr	r0, [pc, #288]	; (800e2f8 <low_level_init+0x184>)
 800e1d8:	f7f7 f888 	bl	80052ec <HAL_ETH_Init>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800e1e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d108      	bne.n	800e1fc <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e1f0:	f043 0304 	orr.w	r3, r3, #4
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800e1fc:	2304      	movs	r3, #4
 800e1fe:	4a40      	ldr	r2, [pc, #256]	; (800e300 <low_level_init+0x18c>)
 800e200:	4940      	ldr	r1, [pc, #256]	; (800e304 <low_level_init+0x190>)
 800e202:	483d      	ldr	r0, [pc, #244]	; (800e2f8 <low_level_init+0x184>)
 800e204:	f7f7 fa0e 	bl	8005624 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800e208:	2304      	movs	r3, #4
 800e20a:	4a3f      	ldr	r2, [pc, #252]	; (800e308 <low_level_init+0x194>)
 800e20c:	493f      	ldr	r1, [pc, #252]	; (800e30c <low_level_init+0x198>)
 800e20e:	483a      	ldr	r0, [pc, #232]	; (800e2f8 <low_level_init+0x184>)
 800e210:	f7f7 fa71 	bl	80056f6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2206      	movs	r2, #6
 800e218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e21c:	4b36      	ldr	r3, [pc, #216]	; (800e2f8 <low_level_init+0x184>)
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	781a      	ldrb	r2, [r3, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e228:	4b33      	ldr	r3, [pc, #204]	; (800e2f8 <low_level_init+0x184>)
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	785a      	ldrb	r2, [r3, #1]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e234:	4b30      	ldr	r3, [pc, #192]	; (800e2f8 <low_level_init+0x184>)
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	789a      	ldrb	r2, [r3, #2]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e240:	4b2d      	ldr	r3, [pc, #180]	; (800e2f8 <low_level_init+0x184>)
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	78da      	ldrb	r2, [r3, #3]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e24c:	4b2a      	ldr	r3, [pc, #168]	; (800e2f8 <low_level_init+0x184>)
 800e24e:	695b      	ldr	r3, [r3, #20]
 800e250:	791a      	ldrb	r2, [r3, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e258:	4b27      	ldr	r3, [pc, #156]	; (800e2f8 <low_level_init+0x184>)
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	795a      	ldrb	r2, [r3, #5]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = 1500;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e26a:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e272:	f043 030a 	orr.w	r3, r3, #10
 800e276:	b2da      	uxtb	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800e27e:	2200      	movs	r2, #0
 800e280:	2101      	movs	r1, #1
 800e282:	2001      	movs	r0, #1
 800e284:	f002 ff0c 	bl	80110a0 <osSemaphoreNew>
 800e288:	4602      	mov	r2, r0
 800e28a:	4b21      	ldr	r3, [pc, #132]	; (800e310 <low_level_init+0x19c>)
 800e28c:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800e28e:	f107 0314 	add.w	r3, r7, #20
 800e292:	2224      	movs	r2, #36	; 0x24
 800e294:	2100      	movs	r1, #0
 800e296:	4618      	mov	r0, r3
 800e298:	f016 f9d2 	bl	8024640 <memset>
  attributes.name = "EthIf";
 800e29c:	4b1d      	ldr	r3, [pc, #116]	; (800e314 <low_level_init+0x1a0>)
 800e29e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800e2a0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800e2a4:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800e2a6:	2330      	movs	r3, #48	; 0x30
 800e2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800e2aa:	f107 0314 	add.w	r3, r7, #20
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	6879      	ldr	r1, [r7, #4]
 800e2b2:	4819      	ldr	r0, [pc, #100]	; (800e318 <low_level_init+0x1a4>)
 800e2b4:	f002 fc98 	bl	8010be8 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800e2b8:	480f      	ldr	r0, [pc, #60]	; (800e2f8 <low_level_init+0x184>)
 800e2ba:	f7f7 fd44 	bl	8005d46 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800e2be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	211d      	movs	r1, #29
 800e2c6:	480c      	ldr	r0, [pc, #48]	; (800e2f8 <low_level_init+0x184>)
 800e2c8:	f7f7 fc6f 	bl	8005baa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	f043 030b 	orr.w	r3, r3, #11
 800e2d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	211d      	movs	r1, #29
 800e2da:	4807      	ldr	r0, [pc, #28]	; (800e2f8 <low_level_init+0x184>)
 800e2dc:	f7f7 fccd 	bl	8005c7a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800e2e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	211d      	movs	r1, #29
 800e2e8:	4803      	ldr	r0, [pc, #12]	; (800e2f8 <low_level_init+0x184>)
 800e2ea:	f7f7 fc5e 	bl	8005baa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e2ee:	bf00      	nop
 800e2f0:	3740      	adds	r7, #64	; 0x40
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	2000b40c 	.word	0x2000b40c
 800e2fc:	40028000 	.word	0x40028000
 800e300:	2000b454 	.word	0x2000b454
 800e304:	20009b3c 	.word	0x20009b3c
 800e308:	20009bbc 	.word	0x20009bbc
 800e30c:	2000b38c 	.word	0x2000b38c
 800e310:	2000025c 	.word	0x2000025c
 800e314:	080256d4 	.word	0x080256d4
 800e318:	0800e5c1 	.word	0x0800e5c1

0800e31c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08a      	sub	sp, #40	; 0x28
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e326:	4b4b      	ldr	r3, [pc, #300]	; (800e454 <low_level_output+0x138>)
 800e328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800e33e:	4b45      	ldr	r3, [pc, #276]	; (800e454 <low_level_output+0x138>)
 800e340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e342:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	623b      	str	r3, [r7, #32]
 800e34c:	e05a      	b.n	800e404 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	da03      	bge.n	800e35e <low_level_output+0x42>
      {
        errval = ERR_USE;
 800e356:	23f8      	movs	r3, #248	; 0xf8
 800e358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800e35c:	e05c      	b.n	800e418 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	895b      	ldrh	r3, [r3, #10]
 800e362:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800e364:	2300      	movs	r3, #0
 800e366:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e368:	e02f      	b.n	800e3ca <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	18d0      	adds	r0, r2, r3
 800e370:	6a3b      	ldr	r3, [r7, #32]
 800e372:	685a      	ldr	r2, [r3, #4]
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	18d1      	adds	r1, r2, r3
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800e37e:	1a9b      	subs	r3, r3, r2
 800e380:	461a      	mov	r2, r3
 800e382:	f016 f952 	bl	802462a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	da03      	bge.n	800e39c <low_level_output+0x80>
        {
          errval = ERR_USE;
 800e394:	23f8      	movs	r3, #248	; 0xf8
 800e396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800e39a:	e03d      	b.n	800e418 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800e3a2:	693a      	ldr	r2, [r7, #16]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800e3ac:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	1ad3      	subs	r3, r2, r3
 800e3b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800e3b8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800e3c4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d8c8      	bhi.n	800e36a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800e3d8:	69fa      	ldr	r2, [r7, #28]
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	18d0      	adds	r0, r2, r3
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	f016 f91e 	bl	802462a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	623b      	str	r3, [r7, #32]
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1a1      	bne.n	800e34e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800e40a:	6979      	ldr	r1, [r7, #20]
 800e40c:	4811      	ldr	r0, [pc, #68]	; (800e454 <low_level_output+0x138>)
 800e40e:	f7f7 f9df 	bl	80057d0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800e418:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <low_level_output+0x138>)
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	f241 0314 	movw	r3, #4116	; 0x1014
 800e420:	4413      	add	r3, r2
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0320 	and.w	r3, r3, #32
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00d      	beq.n	800e448 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800e42c:	4b09      	ldr	r3, [pc, #36]	; (800e454 <low_level_output+0x138>)
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	f241 0314 	movw	r3, #4116	; 0x1014
 800e434:	4413      	add	r3, r2
 800e436:	2220      	movs	r2, #32
 800e438:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800e43a:	4b06      	ldr	r3, [pc, #24]	; (800e454 <low_level_output+0x138>)
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	f241 0304 	movw	r3, #4100	; 0x1004
 800e442:	4413      	add	r3, r2
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800e448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3728      	adds	r7, #40	; 0x28
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	2000b40c 	.word	0x2000b40c

0800e458 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08c      	sub	sp, #48	; 0x30
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e460:	2300      	movs	r3, #0
 800e462:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800e464:	2300      	movs	r3, #0
 800e466:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800e46c:	2300      	movs	r3, #0
 800e46e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800e478:	2300      	movs	r3, #0
 800e47a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800e47c:	484f      	ldr	r0, [pc, #316]	; (800e5bc <low_level_input+0x164>)
 800e47e:	f7f7 fa91 	bl	80059a4 <HAL_ETH_GetReceivedFrame_IT>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <low_level_input+0x34>

    return NULL;
 800e488:	2300      	movs	r3, #0
 800e48a:	e092      	b.n	800e5b2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800e48c:	4b4b      	ldr	r3, [pc, #300]	; (800e5bc <low_level_input+0x164>)
 800e48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e490:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800e492:	4b4a      	ldr	r3, [pc, #296]	; (800e5bc <low_level_input+0x164>)
 800e494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e496:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800e498:	89fb      	ldrh	r3, [r7, #14]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d007      	beq.n	800e4ae <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800e49e:	89fb      	ldrh	r3, [r7, #14]
 800e4a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f009 fb3c 	bl	8017b24 <pbuf_alloc>
 800e4ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d04b      	beq.n	800e54c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800e4b4:	4b41      	ldr	r3, [pc, #260]	; (800e5bc <low_level_input+0x164>)
 800e4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4c2:	e040      	b.n	800e546 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e4ce:	e021      	b.n	800e514 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d2:	685a      	ldr	r2, [r3, #4]
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	18d0      	adds	r0, r2, r3
 800e4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	18d1      	adds	r1, r2, r3
 800e4de:	69fa      	ldr	r2, [r7, #28]
 800e4e0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800e4e4:	1a9b      	subs	r3, r3, r2
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f016 f89f 	bl	802462a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800e4ec:	6a3b      	ldr	r3, [r7, #32]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800e4f2:	6a3b      	ldr	r3, [r7, #32]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800e4f8:	69fa      	ldr	r2, [r7, #28]
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800e502:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800e504:	69ba      	ldr	r2, [r7, #24]
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800e50e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	4413      	add	r3, r2
 800e51a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e51e:	4293      	cmp	r3, r2
 800e520:	d8d6      	bhi.n	800e4d0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	685a      	ldr	r2, [r3, #4]
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	18d0      	adds	r0, r2, r3
 800e52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	4413      	add	r3, r2
 800e530:	697a      	ldr	r2, [r7, #20]
 800e532:	4619      	mov	r1, r3
 800e534:	f016 f879 	bl	802462a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800e538:	69fa      	ldr	r2, [r7, #28]
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	4413      	add	r3, r2
 800e53e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	62bb      	str	r3, [r7, #40]	; 0x28
 800e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1bb      	bne.n	800e4c4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800e54c:	4b1b      	ldr	r3, [pc, #108]	; (800e5bc <low_level_input+0x164>)
 800e54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e550:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e552:	2300      	movs	r3, #0
 800e554:	613b      	str	r3, [r7, #16]
 800e556:	e00b      	b.n	800e570 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e560:	6a3b      	ldr	r3, [r7, #32]
 800e562:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	3301      	adds	r3, #1
 800e56e:	613b      	str	r3, [r7, #16]
 800e570:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <low_level_input+0x164>)
 800e572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	429a      	cmp	r2, r3
 800e578:	d3ee      	bcc.n	800e558 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800e57a:	4b10      	ldr	r3, [pc, #64]	; (800e5bc <low_level_input+0x164>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800e580:	4b0e      	ldr	r3, [pc, #56]	; (800e5bc <low_level_input+0x164>)
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	f241 0314 	movw	r3, #4116	; 0x1014
 800e588:	4413      	add	r3, r2
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00d      	beq.n	800e5b0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800e594:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <low_level_input+0x164>)
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	f241 0314 	movw	r3, #4116	; 0x1014
 800e59c:	4413      	add	r3, r2
 800e59e:	2280      	movs	r2, #128	; 0x80
 800e5a0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800e5a2:	4b06      	ldr	r3, [pc, #24]	; (800e5bc <low_level_input+0x164>)
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	f241 0308 	movw	r3, #4104	; 0x1008
 800e5aa:	4413      	add	r3, r2
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	601a      	str	r2, [r3, #0]
  }
  return p;
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3730      	adds	r7, #48	; 0x30
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	2000b40c 	.word	0x2000b40c

0800e5c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e5cc:	4b12      	ldr	r3, [pc, #72]	; (800e618 <ethernetif_input+0x58>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f002 fe01 	bl	80111dc <osSemaphoreAcquire>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1f5      	bne.n	800e5cc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800e5e0:	480e      	ldr	r0, [pc, #56]	; (800e61c <ethernetif_input+0x5c>)
 800e5e2:	f015 fa5d 	bl	8023aa0 <sys_mutex_lock>
        p = low_level_input( netif );
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f7ff ff36 	bl	800e458 <low_level_input>
 800e5ec:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	68f9      	ldr	r1, [r7, #12]
 800e5fa:	68b8      	ldr	r0, [r7, #8]
 800e5fc:	4798      	blx	r3
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800e604:	68b8      	ldr	r0, [r7, #8]
 800e606:	f009 fd6d 	bl	80180e4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800e60a:	4804      	ldr	r0, [pc, #16]	; (800e61c <ethernetif_input+0x5c>)
 800e60c:	f015 fa57 	bl	8023abe <sys_mutex_unlock>
      } while(p!=NULL);
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1e4      	bne.n	800e5e0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e616:	e7d9      	b.n	800e5cc <ethernetif_input+0xc>
 800e618:	2000025c 	.word	0x2000025c
 800e61c:	2000cc88 	.word	0x2000cc88

0800e620 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d106      	bne.n	800e63c <ethernetif_init+0x1c>
 800e62e:	4b0e      	ldr	r3, [pc, #56]	; (800e668 <ethernetif_init+0x48>)
 800e630:	f44f 720c 	mov.w	r2, #560	; 0x230
 800e634:	490d      	ldr	r1, [pc, #52]	; (800e66c <ethernetif_init+0x4c>)
 800e636:	480e      	ldr	r0, [pc, #56]	; (800e670 <ethernetif_init+0x50>)
 800e638:	f016 f8b2 	bl	80247a0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2273      	movs	r2, #115	; 0x73
 800e640:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2274      	movs	r2, #116	; 0x74
 800e648:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a09      	ldr	r2, [pc, #36]	; (800e674 <ethernetif_init+0x54>)
 800e650:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a08      	ldr	r2, [pc, #32]	; (800e678 <ethernetif_init+0x58>)
 800e656:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7ff fd8b 	bl	800e174 <low_level_init>

  return ERR_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	080256dc 	.word	0x080256dc
 800e66c:	080256f8 	.word	0x080256f8
 800e670:	08025708 	.word	0x08025708
 800e674:	080219ad 	.word	0x080219ad
 800e678:	0800e31d 	.word	0x0800e31d

0800e67c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e680:	f7f5 fa34 	bl	8003aec <HAL_GetTick>
 800e684:	4603      	mov	r3, r0
}
 800e686:	4618      	mov	r0, r3
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800e694:	2300      	movs	r3, #0
 800e696:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e69c:	f107 0308 	add.w	r3, r7, #8
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	4816      	ldr	r0, [pc, #88]	; (800e700 <ethernetif_set_link+0x74>)
 800e6a6:	f7f7 fa80 	bl	8005baa <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	f003 0304 	and.w	r3, r3, #4
 800e6b0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6ba:	f003 0304 	and.w	r3, r3, #4
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d108      	bne.n	800e6d4 <ethernetif_set_link+0x48>
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d005      	beq.n	800e6d4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f009 f8f7 	bl	80178c0 <netif_set_link_up>
 800e6d2:	e011      	b.n	800e6f8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6dc:	089b      	lsrs	r3, r3, #2
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d007      	beq.n	800e6f8 <ethernetif_set_link+0x6c>
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d104      	bne.n	800e6f8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f009 f91c 	bl	8017930 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800e6f8:	20c8      	movs	r0, #200	; 0xc8
 800e6fa:	f002 fb5b 	bl	8010db4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e6fe:	e7cd      	b.n	800e69c <ethernetif_set_link+0x10>
 800e700:	2000b40c 	.word	0x2000b40c

0800e704 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e71a:	089b      	lsrs	r3, r3, #2
 800e71c:	f003 0301 	and.w	r3, r3, #1
 800e720:	b2db      	uxtb	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	d05d      	beq.n	800e7e2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800e726:	4b34      	ldr	r3, [pc, #208]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d03f      	beq.n	800e7ae <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800e72e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e732:	2100      	movs	r1, #0
 800e734:	4830      	ldr	r0, [pc, #192]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e736:	f7f7 faa0 	bl	8005c7a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800e73a:	f7f5 f9d7 	bl	8003aec <HAL_GetTick>
 800e73e:	4603      	mov	r3, r0
 800e740:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e742:	f107 0308 	add.w	r3, r7, #8
 800e746:	461a      	mov	r2, r3
 800e748:	2101      	movs	r1, #1
 800e74a:	482b      	ldr	r0, [pc, #172]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e74c:	f7f7 fa2d 	bl	8005baa <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800e750:	f7f5 f9cc 	bl	8003aec <HAL_GetTick>
 800e754:	4602      	mov	r2, r0
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	1ad3      	subs	r3, r2, r3
 800e75a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e75e:	d828      	bhi.n	800e7b2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0eb      	beq.n	800e742 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800e76a:	f107 0308 	add.w	r3, r7, #8
 800e76e:	461a      	mov	r2, r3
 800e770:	211f      	movs	r1, #31
 800e772:	4821      	ldr	r0, [pc, #132]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e774:	f7f7 fa19 	bl	8005baa <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	f003 0310 	and.w	r3, r3, #16
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d004      	beq.n	800e78c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e782:	4b1d      	ldr	r3, [pc, #116]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e788:	60da      	str	r2, [r3, #12]
 800e78a:	e002      	b.n	800e792 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800e78c:	4b1a      	ldr	r3, [pc, #104]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e78e:	2200      	movs	r2, #0
 800e790:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800e79c:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	609a      	str	r2, [r3, #8]
 800e7a2:	e016      	b.n	800e7d2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800e7a4:	4b14      	ldr	r3, [pc, #80]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e7aa:	609a      	str	r2, [r3, #8]
 800e7ac:	e011      	b.n	800e7d2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800e7ae:	bf00      	nop
 800e7b0:	e000      	b.n	800e7b4 <ethernetif_update_config+0xb0>
          goto error;
 800e7b2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e7b4:	4b10      	ldr	r3, [pc, #64]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	08db      	lsrs	r3, r3, #3
 800e7ba:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800e7bc:	4b0e      	ldr	r3, [pc, #56]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	085b      	lsrs	r3, r3, #1
 800e7c2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	480a      	ldr	r0, [pc, #40]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7ce:	f7f7 fa54 	bl	8005c7a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	4808      	ldr	r0, [pc, #32]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7d6:	f7f7 fb15 	bl	8005e04 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800e7da:	4807      	ldr	r0, [pc, #28]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7dc:	f7f7 fab3 	bl	8005d46 <HAL_ETH_Start>
 800e7e0:	e002      	b.n	800e7e8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800e7e2:	4805      	ldr	r0, [pc, #20]	; (800e7f8 <ethernetif_update_config+0xf4>)
 800e7e4:	f7f7 fade 	bl	8005da4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 f807 	bl	800e7fc <ethernetif_notify_conn_changed>
}
 800e7ee:	bf00      	nop
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	2000b40c 	.word	0x2000b40c

0800e7fc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e810:	b590      	push	{r4, r7, lr}
 800e812:	b089      	sub	sp, #36	; 0x24
 800e814:	af04      	add	r7, sp, #16
 800e816:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e818:	2301      	movs	r3, #1
 800e81a:	2202      	movs	r2, #2
 800e81c:	2102      	movs	r1, #2
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fcb4 	bl	800f18c <USBH_FindInterface>
 800e824:	4603      	mov	r3, r0
 800e826:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e828:	7bfb      	ldrb	r3, [r7, #15]
 800e82a:	2bff      	cmp	r3, #255	; 0xff
 800e82c:	d002      	beq.n	800e834 <USBH_CDC_InterfaceInit+0x24>
 800e82e:	7bfb      	ldrb	r3, [r7, #15]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d901      	bls.n	800e838 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e834:	2302      	movs	r3, #2
 800e836:	e13d      	b.n	800eab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e838:	7bfb      	ldrb	r3, [r7, #15]
 800e83a:	4619      	mov	r1, r3
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fc89 	bl	800f154 <USBH_SelectInterface>
 800e842:	4603      	mov	r3, r0
 800e844:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e846:	7bbb      	ldrb	r3, [r7, #14]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e84c:	2302      	movs	r3, #2
 800e84e:	e131      	b.n	800eab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e856:	2050      	movs	r0, #80	; 0x50
 800e858:	f015 fec8 	bl	80245ec <malloc>
 800e85c:	4603      	mov	r3, r0
 800e85e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e866:	69db      	ldr	r3, [r3, #28]
 800e868:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e870:	2302      	movs	r3, #2
 800e872:	e11f      	b.n	800eab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e874:	2250      	movs	r2, #80	; 0x50
 800e876:	2100      	movs	r1, #0
 800e878:	68b8      	ldr	r0, [r7, #8]
 800e87a:	f015 fee1 	bl	8024640 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	211a      	movs	r1, #26
 800e884:	fb01 f303 	mul.w	r3, r1, r3
 800e888:	4413      	add	r3, r2
 800e88a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	b25b      	sxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	da15      	bge.n	800e8c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	211a      	movs	r1, #26
 800e89c:	fb01 f303 	mul.w	r3, r1, r3
 800e8a0:	4413      	add	r3, r2
 800e8a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e8a6:	781a      	ldrb	r2, [r3, #0]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	211a      	movs	r1, #26
 800e8b2:	fb01 f303 	mul.w	r3, r1, r3
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e8bc:	881a      	ldrh	r2, [r3, #0]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	785b      	ldrb	r3, [r3, #1]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f002 f890 	bl	80109ee <USBH_AllocPipe>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	7819      	ldrb	r1, [r3, #0]
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	7858      	ldrb	r0, [r3, #1]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	8952      	ldrh	r2, [r2, #10]
 800e8ee:	9202      	str	r2, [sp, #8]
 800e8f0:	2203      	movs	r2, #3
 800e8f2:	9201      	str	r2, [sp, #4]
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	4623      	mov	r3, r4
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f002 f848 	bl	8010990 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2200      	movs	r2, #0
 800e906:	4619      	mov	r1, r3
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f015 fb93 	bl	8024034 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e90e:	2300      	movs	r3, #0
 800e910:	2200      	movs	r2, #0
 800e912:	210a      	movs	r1, #10
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fc39 	bl	800f18c <USBH_FindInterface>
 800e91a:	4603      	mov	r3, r0
 800e91c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	2bff      	cmp	r3, #255	; 0xff
 800e922:	d002      	beq.n	800e92a <USBH_CDC_InterfaceInit+0x11a>
 800e924:	7bfb      	ldrb	r3, [r7, #15]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d901      	bls.n	800e92e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e92a:	2302      	movs	r3, #2
 800e92c:	e0c2      	b.n	800eab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	211a      	movs	r1, #26
 800e934:	fb01 f303 	mul.w	r3, r1, r3
 800e938:	4413      	add	r3, r2
 800e93a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	b25b      	sxtb	r3, r3
 800e942:	2b00      	cmp	r3, #0
 800e944:	da16      	bge.n	800e974 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e946:	7bfb      	ldrb	r3, [r7, #15]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	211a      	movs	r1, #26
 800e94c:	fb01 f303 	mul.w	r3, r1, r3
 800e950:	4413      	add	r3, r2
 800e952:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e956:	781a      	ldrb	r2, [r3, #0]
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	211a      	movs	r1, #26
 800e962:	fb01 f303 	mul.w	r3, r1, r3
 800e966:	4413      	add	r3, r2
 800e968:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e96c:	881a      	ldrh	r2, [r3, #0]
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	835a      	strh	r2, [r3, #26]
 800e972:	e015      	b.n	800e9a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	211a      	movs	r1, #26
 800e97a:	fb01 f303 	mul.w	r3, r1, r3
 800e97e:	4413      	add	r3, r2
 800e980:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e984:	781a      	ldrb	r2, [r3, #0]
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	211a      	movs	r1, #26
 800e990:	fb01 f303 	mul.w	r3, r1, r3
 800e994:	4413      	add	r3, r2
 800e996:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e99a:	881a      	ldrh	r2, [r3, #0]
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	211a      	movs	r1, #26
 800e9a6:	fb01 f303 	mul.w	r3, r1, r3
 800e9aa:	4413      	add	r3, r2
 800e9ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	b25b      	sxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	da16      	bge.n	800e9e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e9b8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	211a      	movs	r1, #26
 800e9be:	fb01 f303 	mul.w	r3, r1, r3
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e9c8:	781a      	ldrb	r2, [r3, #0]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e9ce:	7bfb      	ldrb	r3, [r7, #15]
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	211a      	movs	r1, #26
 800e9d4:	fb01 f303 	mul.w	r3, r1, r3
 800e9d8:	4413      	add	r3, r2
 800e9da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e9de:	881a      	ldrh	r2, [r3, #0]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	835a      	strh	r2, [r3, #26]
 800e9e4:	e015      	b.n	800ea12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	211a      	movs	r1, #26
 800e9ec:	fb01 f303 	mul.w	r3, r1, r3
 800e9f0:	4413      	add	r3, r2
 800e9f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e9f6:	781a      	ldrb	r2, [r3, #0]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	211a      	movs	r1, #26
 800ea02:	fb01 f303 	mul.w	r3, r1, r3
 800ea06:	4413      	add	r3, r2
 800ea08:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ea0c:	881a      	ldrh	r2, [r3, #0]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	7b9b      	ldrb	r3, [r3, #14]
 800ea16:	4619      	mov	r1, r3
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f001 ffe8 	bl	80109ee <USBH_AllocPipe>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	461a      	mov	r2, r3
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	7bdb      	ldrb	r3, [r3, #15]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f001 ffde 	bl	80109ee <USBH_AllocPipe>
 800ea32:	4603      	mov	r3, r0
 800ea34:	461a      	mov	r2, r3
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	7b59      	ldrb	r1, [r3, #13]
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	7b98      	ldrb	r0, [r3, #14]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	8b12      	ldrh	r2, [r2, #24]
 800ea52:	9202      	str	r2, [sp, #8]
 800ea54:	2202      	movs	r2, #2
 800ea56:	9201      	str	r2, [sp, #4]
 800ea58:	9300      	str	r3, [sp, #0]
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f001 ff96 	bl	8010990 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	7b19      	ldrb	r1, [r3, #12]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	7bd8      	ldrb	r0, [r3, #15]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	8b52      	ldrh	r2, [r2, #26]
 800ea7c:	9202      	str	r2, [sp, #8]
 800ea7e:	2202      	movs	r2, #2
 800ea80:	9201      	str	r2, [sp, #4]
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	4623      	mov	r3, r4
 800ea86:	4602      	mov	r2, r0
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f001 ff81 	bl	8010990 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	7b5b      	ldrb	r3, [r3, #13]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f015 fac8 	bl	8024034 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	7b1b      	ldrb	r3, [r3, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f015 fac1 	bl	8024034 <USBH_LL_SetToggle>

  return USBH_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd90      	pop	{r4, r7, pc}

0800eabc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eaca:	69db      	ldr	r3, [r3, #28]
 800eacc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00e      	beq.n	800eaf4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	4619      	mov	r1, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f001 ff76 	bl	80109ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f001 ffa1 	bl	8010a30 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	7b1b      	ldrb	r3, [r3, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00e      	beq.n	800eb1a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	7b1b      	ldrb	r3, [r3, #12]
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f001 ff63 	bl	80109ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	7b1b      	ldrb	r3, [r3, #12]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f001 ff8e 	bl	8010a30 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	7b5b      	ldrb	r3, [r3, #13]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00e      	beq.n	800eb40 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	7b5b      	ldrb	r3, [r3, #13]
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f001 ff50 	bl	80109ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	7b5b      	ldrb	r3, [r3, #13]
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f001 ff7b 	bl	8010a30 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00b      	beq.n	800eb64 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb52:	69db      	ldr	r3, [r3, #28]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f015 fd51 	bl	80245fc <free>
    phost->pActiveClass->pData = 0U;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb60:	2200      	movs	r2, #0
 800eb62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb7c:	69db      	ldr	r3, [r3, #28]
 800eb7e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	3340      	adds	r3, #64	; 0x40
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f8b1 	bl	800ecee <GetLineCoding>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800eb90:	7afb      	ldrb	r3, [r7, #11]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d105      	bne.n	800eba2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb9c:	2102      	movs	r1, #2
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800eba2:	7afb      	ldrb	r3, [r7, #11]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebc2:	69db      	ldr	r3, [r3, #28]
 800ebc4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	d877      	bhi.n	800ecc0 <USBH_CDC_Process+0x114>
 800ebd0:	a201      	add	r2, pc, #4	; (adr r2, 800ebd8 <USBH_CDC_Process+0x2c>)
 800ebd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd6:	bf00      	nop
 800ebd8:	0800ebed 	.word	0x0800ebed
 800ebdc:	0800ebf3 	.word	0x0800ebf3
 800ebe0:	0800ec23 	.word	0x0800ec23
 800ebe4:	0800ec97 	.word	0x0800ec97
 800ebe8:	0800eca5 	.word	0x0800eca5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf0:	e06d      	b.n	800ecce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f897 	bl	800ed2c <SetLineCoding>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ec02:	7bbb      	ldrb	r3, [r7, #14]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d104      	bne.n	800ec12 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ec10:	e058      	b.n	800ecc4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ec12:	7bbb      	ldrb	r3, [r7, #14]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d055      	beq.n	800ecc4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ec20:	e050      	b.n	800ecc4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	3340      	adds	r3, #64	; 0x40
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 f860 	bl	800ecee <GetLineCoding>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ec32:	7bbb      	ldrb	r3, [r7, #14]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d126      	bne.n	800ec86 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec4a:	791b      	ldrb	r3, [r3, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d13b      	bne.n	800ecc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec5a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d133      	bne.n	800ecc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec6a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d12b      	bne.n	800ecc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec78:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d124      	bne.n	800ecc8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f984 	bl	800ef8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ec84:	e020      	b.n	800ecc8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ec86:	7bbb      	ldrb	r3, [r7, #14]
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d01d      	beq.n	800ecc8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2204      	movs	r2, #4
 800ec90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ec94:	e018      	b.n	800ecc8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f867 	bl	800ed6a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 f8f8 	bl	800ee92 <CDC_ProcessReception>
      break;
 800eca2:	e014      	b.n	800ecce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800eca4:	2100      	movs	r1, #0
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 f94f 	bl	800ff4a <USBH_ClrFeature>
 800ecac:	4603      	mov	r3, r0
 800ecae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ecb0:	7bbb      	ldrb	r3, [r7, #14]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10a      	bne.n	800eccc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ecbe:	e005      	b.n	800eccc <USBH_CDC_Process+0x120>

    default:
      break;
 800ecc0:	bf00      	nop
 800ecc2:	e004      	b.n	800ecce <USBH_CDC_Process+0x122>
      break;
 800ecc4:	bf00      	nop
 800ecc6:	e002      	b.n	800ecce <USBH_CDC_Process+0x122>
      break;
 800ecc8:	bf00      	nop
 800ecca:	e000      	b.n	800ecce <USBH_CDC_Process+0x122>
      break;
 800eccc:	bf00      	nop

  }

  return status;
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	22a1      	movs	r2, #161	; 0xa1
 800ecfc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2221      	movs	r2, #33	; 0x21
 800ed02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2207      	movs	r2, #7
 800ed14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	2207      	movs	r2, #7
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f001 faf4 	bl	801030a <USBH_CtlReq>
 800ed22:	4603      	mov	r3, r0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2221      	movs	r2, #33	; 0x21
 800ed3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2220      	movs	r2, #32
 800ed40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2207      	movs	r2, #7
 800ed52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2207      	movs	r2, #7
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 fad5 	bl	801030a <USBH_CtlReq>
 800ed60:	4603      	mov	r3, r0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b086      	sub	sp, #24
 800ed6e:	af02      	add	r7, sp, #8
 800ed70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d002      	beq.n	800ed90 <CDC_ProcessTransmission+0x26>
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d025      	beq.n	800edda <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800ed8e:	e07c      	b.n	800ee8a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	8b12      	ldrh	r2, [r2, #24]
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d90c      	bls.n	800edb6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	69d9      	ldr	r1, [r3, #28]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	8b1a      	ldrh	r2, [r3, #24]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	7b58      	ldrb	r0, [r3, #13]
 800eda8:	2301      	movs	r3, #1
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	4603      	mov	r3, r0
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f001 fdab 	bl	801090a <USBH_BulkSendData>
 800edb4:	e00c      	b.n	800edd0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	7b58      	ldrb	r0, [r3, #13]
 800edc4:	2301      	movs	r3, #1
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	4603      	mov	r3, r0
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f001 fd9d 	bl	801090a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2202      	movs	r2, #2
 800edd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800edd8:	e057      	b.n	800ee8a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	7b5b      	ldrb	r3, [r3, #13]
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f015 f8fd 	bl	8023fe0 <USBH_LL_GetURBState>
 800ede6:	4603      	mov	r3, r0
 800ede8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800edea:	7afb      	ldrb	r3, [r7, #11]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d136      	bne.n	800ee5e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	8b12      	ldrh	r2, [r2, #24]
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d90e      	bls.n	800ee1a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	8b12      	ldrh	r2, [r2, #24]
 800ee04:	1a9a      	subs	r2, r3, r2
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	8b12      	ldrh	r2, [r2, #24]
 800ee12:	441a      	add	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	61da      	str	r2, [r3, #28]
 800ee18:	e002      	b.n	800ee20 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ee30:	e006      	b.n	800ee40 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 f892 	bl	800ef64 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2204      	movs	r2, #4
 800ee44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee54:	2300      	movs	r3, #0
 800ee56:	2200      	movs	r2, #0
 800ee58:	f002 fb3a 	bl	80114d0 <osMessageQueuePut>
      break;
 800ee5c:	e014      	b.n	800ee88 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800ee5e:	7afb      	ldrb	r3, [r7, #11]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d111      	bne.n	800ee88 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2201      	movs	r2, #1
 800ee68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2204      	movs	r2, #4
 800ee70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee80:	2300      	movs	r3, #0
 800ee82:	2200      	movs	r2, #0
 800ee84:	f002 fb24 	bl	80114d0 <osMessageQueuePut>
      break;
 800ee88:	bf00      	nop
  }
}
 800ee8a:	bf00      	nop
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b086      	sub	sp, #24
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eea4:	2300      	movs	r3, #0
 800eea6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800eeae:	2b03      	cmp	r3, #3
 800eeb0:	d002      	beq.n	800eeb8 <CDC_ProcessReception+0x26>
 800eeb2:	2b04      	cmp	r3, #4
 800eeb4:	d00e      	beq.n	800eed4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800eeb6:	e051      	b.n	800ef5c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	6a19      	ldr	r1, [r3, #32]
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	8b5a      	ldrh	r2, [r3, #26]
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	7b1b      	ldrb	r3, [r3, #12]
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f001 fd45 	bl	8010954 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2204      	movs	r2, #4
 800eece:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800eed2:	e043      	b.n	800ef5c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	7b1b      	ldrb	r3, [r3, #12]
 800eed8:	4619      	mov	r1, r3
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f015 f880 	bl	8023fe0 <USBH_LL_GetURBState>
 800eee0:	4603      	mov	r3, r0
 800eee2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800eee4:	7cfb      	ldrb	r3, [r7, #19]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d137      	bne.n	800ef5a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	7b1b      	ldrb	r3, [r3, #12]
 800eeee:	4619      	mov	r1, r3
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f014 ffe3 	bl	8023ebc <USBH_LL_GetLastXferSize>
 800eef6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d016      	beq.n	800ef30 <CDC_ProcessReception+0x9e>
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	8b5b      	ldrh	r3, [r3, #26]
 800ef06:	461a      	mov	r2, r3
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d910      	bls.n	800ef30 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	1ad2      	subs	r2, r2, r3
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	6a1a      	ldr	r2, [r3, #32]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	441a      	add	r2, r3
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	2203      	movs	r2, #3
 800ef2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ef2e:	e006      	b.n	800ef3e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f81d 	bl	800ef78 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2204      	movs	r2, #4
 800ef42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ef52:	2300      	movs	r3, #0
 800ef54:	2200      	movs	r2, #0
 800ef56:	f002 fabb 	bl	80114d0 <osMessageQueuePut>
      break;
 800ef5a:	bf00      	nop
  }
}
 800ef5c:	bf00      	nop
 800ef5e:	3718      	adds	r7, #24
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ef80:	bf00      	nop
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	4613      	mov	r3, r2
 800efac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d101      	bne.n	800efb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800efb4:	2302      	movs	r3, #2
 800efb6:	e044      	b.n	800f042 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	79fa      	ldrb	r2, [r7, #7]
 800efbc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f000 f841 	bl	800f058 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d003      	beq.n	800f004 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800f004:	2200      	movs	r2, #0
 800f006:	2104      	movs	r1, #4
 800f008:	2010      	movs	r0, #16
 800f00a:	f002 f9db 	bl	80113c4 <osMessageQueueNew>
 800f00e:	4602      	mov	r2, r0
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800f016:	4b0d      	ldr	r3, [pc, #52]	; (800f04c <USBH_Init+0xac>)
 800f018:	4a0d      	ldr	r2, [pc, #52]	; (800f050 <USBH_Init+0xb0>)
 800f01a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800f01c:	4b0b      	ldr	r3, [pc, #44]	; (800f04c <USBH_Init+0xac>)
 800f01e:	2280      	movs	r2, #128	; 0x80
 800f020:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800f022:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <USBH_Init+0xac>)
 800f024:	2218      	movs	r2, #24
 800f026:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800f028:	4a08      	ldr	r2, [pc, #32]	; (800f04c <USBH_Init+0xac>)
 800f02a:	68f9      	ldr	r1, [r7, #12]
 800f02c:	4809      	ldr	r0, [pc, #36]	; (800f054 <USBH_Init+0xb4>)
 800f02e:	f001 fddb 	bl	8010be8 <osThreadNew>
 800f032:	4602      	mov	r2, r0
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f014 fe8c 	bl	8023d58 <USBH_LL_Init>

  return USBH_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	2000cc24 	.word	0x2000cc24
 800f050:	08025734 	.word	0x08025734
 800f054:	0800fcc1 	.word	0x0800fcc1

0800f058 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f058:	b480      	push	{r7}
 800f05a:	b085      	sub	sp, #20
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f060:	2300      	movs	r3, #0
 800f062:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f064:	2300      	movs	r3, #0
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	e009      	b.n	800f07e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	33e0      	adds	r3, #224	; 0xe0
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	2200      	movs	r2, #0
 800f076:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	3301      	adds	r3, #1
 800f07c:	60fb      	str	r3, [r7, #12]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2b0e      	cmp	r3, #14
 800f082:	d9f2      	bls.n	800f06a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f084:	2300      	movs	r3, #0
 800f086:	60fb      	str	r3, [r7, #12]
 800f088:	e009      	b.n	800f09e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	4413      	add	r3, r2
 800f090:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f094:	2200      	movs	r2, #0
 800f096:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	3301      	adds	r3, #1
 800f09c:	60fb      	str	r3, [r7, #12]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0a4:	d3f1      	bcc.n	800f08a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2240      	movs	r2, #64	; 0x40
 800f0ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d016      	beq.n	800f142 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10e      	bne.n	800f13c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f124:	1c59      	adds	r1, r3, #1
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	33de      	adds	r3, #222	; 0xde
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	73fb      	strb	r3, [r7, #15]
 800f13a:	e004      	b.n	800f146 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f13c:	2302      	movs	r3, #2
 800f13e:	73fb      	strb	r3, [r7, #15]
 800f140:	e001      	b.n	800f146 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f142:	2302      	movs	r3, #2
 800f144:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f146:	7bfb      	ldrb	r3, [r7, #15]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f160:	2300      	movs	r3, #0
 800f162:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f16a:	78fa      	ldrb	r2, [r7, #3]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d204      	bcs.n	800f17a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	78fa      	ldrb	r2, [r7, #3]
 800f174:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f178:	e001      	b.n	800f17e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f17a:	2302      	movs	r3, #2
 800f17c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3714      	adds	r7, #20
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b087      	sub	sp, #28
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	4608      	mov	r0, r1
 800f196:	4611      	mov	r1, r2
 800f198:	461a      	mov	r2, r3
 800f19a:	4603      	mov	r3, r0
 800f19c:	70fb      	strb	r3, [r7, #3]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	70bb      	strb	r3, [r7, #2]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f1b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f1b6:	e025      	b.n	800f204 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f1b8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ba:	221a      	movs	r2, #26
 800f1bc:	fb02 f303 	mul.w	r3, r2, r3
 800f1c0:	3308      	adds	r3, #8
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	3302      	adds	r3, #2
 800f1c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	795b      	ldrb	r3, [r3, #5]
 800f1ce:	78fa      	ldrb	r2, [r7, #3]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d002      	beq.n	800f1da <USBH_FindInterface+0x4e>
 800f1d4:	78fb      	ldrb	r3, [r7, #3]
 800f1d6:	2bff      	cmp	r3, #255	; 0xff
 800f1d8:	d111      	bne.n	800f1fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f1de:	78ba      	ldrb	r2, [r7, #2]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d002      	beq.n	800f1ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f1e4:	78bb      	ldrb	r3, [r7, #2]
 800f1e6:	2bff      	cmp	r3, #255	; 0xff
 800f1e8:	d109      	bne.n	800f1fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f1ee:	787a      	ldrb	r2, [r7, #1]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d002      	beq.n	800f1fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f1f4:	787b      	ldrb	r3, [r7, #1]
 800f1f6:	2bff      	cmp	r3, #255	; 0xff
 800f1f8:	d101      	bne.n	800f1fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f1fa:	7dfb      	ldrb	r3, [r7, #23]
 800f1fc:	e006      	b.n	800f20c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f1fe:	7dfb      	ldrb	r3, [r7, #23]
 800f200:	3301      	adds	r3, #1
 800f202:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f204:	7dfb      	ldrb	r3, [r7, #23]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d9d6      	bls.n	800f1b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f20a:	23ff      	movs	r3, #255	; 0xff
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	371c      	adds	r7, #28
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f014 fdd5 	bl	8023dd0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800f226:	2101      	movs	r1, #1
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f014 feec 	bl	8024006 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f22e:	2300      	movs	r3, #0
}
 800f230:	4618      	mov	r0, r3
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b088      	sub	sp, #32
 800f23c:	af04      	add	r7, sp, #16
 800f23e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f240:	2302      	movs	r3, #2
 800f242:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f244:	2300      	movs	r3, #0
 800f246:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b01      	cmp	r3, #1
 800f252:	d102      	bne.n	800f25a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2203      	movs	r2, #3
 800f258:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b0b      	cmp	r3, #11
 800f262:	f200 823c 	bhi.w	800f6de <USBH_Process+0x4a6>
 800f266:	a201      	add	r2, pc, #4	; (adr r2, 800f26c <USBH_Process+0x34>)
 800f268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26c:	0800f29d 	.word	0x0800f29d
 800f270:	0800f2eb 	.word	0x0800f2eb
 800f274:	0800f36f 	.word	0x0800f36f
 800f278:	0800f65d 	.word	0x0800f65d
 800f27c:	0800f6df 	.word	0x0800f6df
 800f280:	0800f42f 	.word	0x0800f42f
 800f284:	0800f5e7 	.word	0x0800f5e7
 800f288:	0800f481 	.word	0x0800f481
 800f28c:	0800f4bd 	.word	0x0800f4bd
 800f290:	0800f4f7 	.word	0x0800f4f7
 800f294:	0800f53f 	.word	0x0800f53f
 800f298:	0800f645 	.word	0x0800f645
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 821c 	beq.w	800f6e2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f2b0:	20c8      	movs	r0, #200	; 0xc8
 800f2b2:	f014 feef 	bl	8024094 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f014 fde5 	bl	8023e86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f002 f8f4 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800f2e8:	e1fb      	b.n	800f6e2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d107      	bne.n	800f304 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2202      	movs	r2, #2
 800f300:	701a      	strb	r2, [r3, #0]
 800f302:	e025      	b.n	800f350 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f30a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f30e:	d914      	bls.n	800f33a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f316:	3301      	adds	r3, #1
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f326:	2b03      	cmp	r3, #3
 800f328:	d903      	bls.n	800f332 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	220d      	movs	r2, #13
 800f32e:	701a      	strb	r2, [r3, #0]
 800f330:	e00e      	b.n	800f350 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	701a      	strb	r2, [r3, #0]
 800f338:	e00a      	b.n	800f350 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f340:	f103 020a 	add.w	r2, r3, #10
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f34a:	200a      	movs	r0, #10
 800f34c:	f014 fea2 	bl	8024094 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f364:	2300      	movs	r3, #0
 800f366:	2200      	movs	r2, #0
 800f368:	f002 f8b2 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f36c:	e1c0      	b.n	800f6f0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f374:	2b00      	cmp	r3, #0
 800f376:	d005      	beq.n	800f384 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f37e:	2104      	movs	r1, #4
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f384:	2064      	movs	r0, #100	; 0x64
 800f386:	f014 fe85 	bl	8024094 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f014 fd56 	bl	8023e3c <USBH_LL_GetSpeed>
 800f390:	4603      	mov	r3, r0
 800f392:	461a      	mov	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2205      	movs	r2, #5
 800f39e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f001 fb23 	bl	80109ee <USBH_AllocPipe>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f3b0:	2180      	movs	r1, #128	; 0x80
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f001 fb1b 	bl	80109ee <USBH_AllocPipe>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	7919      	ldrb	r1, [r3, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f3d4:	b292      	uxth	r2, r2
 800f3d6:	9202      	str	r2, [sp, #8]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	9201      	str	r2, [sp, #4]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2280      	movs	r2, #128	; 0x80
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f001 fad4 	bl	8010990 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	7959      	ldrb	r1, [r3, #5]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f3fc:	b292      	uxth	r2, r2
 800f3fe:	9202      	str	r2, [sp, #8]
 800f400:	2200      	movs	r2, #0
 800f402:	9201      	str	r2, [sp, #4]
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	4603      	mov	r3, r0
 800f408:	2200      	movs	r2, #0
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f001 fac0 	bl	8010990 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2201      	movs	r2, #1
 800f414:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f424:	2300      	movs	r3, #0
 800f426:	2200      	movs	r2, #0
 800f428:	f002 f852 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f42c:	e160      	b.n	800f6f0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f964 	bl	800f6fc <USBH_HandleEnum>
 800f434:	4603      	mov	r3, r0
 800f436:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f438:	7bbb      	ldrb	r3, [r7, #14]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 8152 	bne.w	800f6e6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f450:	2b01      	cmp	r3, #1
 800f452:	d103      	bne.n	800f45c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2208      	movs	r2, #8
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	e002      	b.n	800f462 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2207      	movs	r2, #7
 800f460:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2205      	movs	r2, #5
 800f466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f476:	2300      	movs	r3, #0
 800f478:	2200      	movs	r2, #0
 800f47a:	f002 f829 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800f47e:	e132      	b.n	800f6e6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 812f 	beq.w	800f6ea <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f492:	2101      	movs	r1, #1
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2208      	movs	r2, #8
 800f49c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2205      	movs	r2, #5
 800f4a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f002 f80b 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800f4ba:	e116      	b.n	800f6ea <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 fcf8 	bl	800febc <USBH_SetCfg>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d102      	bne.n	800f4d8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2209      	movs	r2, #9
 800f4d6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f001 ffee 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f4f4:	e0fc      	b.n	800f6f0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f4fc:	f003 0320 	and.w	r3, r3, #32
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00a      	beq.n	800f51a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f504:	2101      	movs	r1, #1
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fcfb 	bl	800ff02 <USBH_SetFeature>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d106      	bne.n	800f520 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	220a      	movs	r2, #10
 800f516:	701a      	strb	r2, [r3, #0]
 800f518:	e002      	b.n	800f520 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	220a      	movs	r2, #10
 800f51e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f534:	2300      	movs	r3, #0
 800f536:	2200      	movs	r2, #0
 800f538:	f001 ffca 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f53c:	e0d8      	b.n	800f6f0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f544:	2b00      	cmp	r3, #0
 800f546:	d03f      	beq.n	800f5c8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f550:	2300      	movs	r3, #0
 800f552:	73fb      	strb	r3, [r7, #15]
 800f554:	e016      	b.n	800f584 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f556:	7bfa      	ldrb	r2, [r7, #15]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	32de      	adds	r2, #222	; 0xde
 800f55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f560:	791a      	ldrb	r2, [r3, #4]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f568:	429a      	cmp	r2, r3
 800f56a:	d108      	bne.n	800f57e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f56c:	7bfa      	ldrb	r2, [r7, #15]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	32de      	adds	r2, #222	; 0xde
 800f572:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f57c:	e005      	b.n	800f58a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f57e:	7bfb      	ldrb	r3, [r7, #15]
 800f580:	3301      	adds	r3, #1
 800f582:	73fb      	strb	r3, [r7, #15]
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d0e5      	beq.n	800f556 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f590:	2b00      	cmp	r3, #0
 800f592:	d016      	beq.n	800f5c2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f59a:	689b      	ldr	r3, [r3, #8]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	4798      	blx	r3
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d109      	bne.n	800f5ba <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2206      	movs	r2, #6
 800f5aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5b2:	2103      	movs	r1, #3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	4798      	blx	r3
 800f5b8:	e006      	b.n	800f5c8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	220d      	movs	r2, #13
 800f5be:	701a      	strb	r2, [r3, #0]
 800f5c0:	e002      	b.n	800f5c8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	220d      	movs	r2, #13
 800f5c6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2205      	movs	r2, #5
 800f5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f5dc:	2300      	movs	r3, #0
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f001 ff76 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f5e4:	e084      	b.n	800f6f0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d017      	beq.n	800f620 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	4798      	blx	r3
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f600:	7bbb      	ldrb	r3, [r7, #14]
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d103      	bne.n	800f610 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	220b      	movs	r2, #11
 800f60c:	701a      	strb	r2, [r3, #0]
 800f60e:	e00a      	b.n	800f626 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800f610:	7bbb      	ldrb	r3, [r7, #14]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b02      	cmp	r3, #2
 800f616:	d106      	bne.n	800f626 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	220d      	movs	r2, #13
 800f61c:	701a      	strb	r2, [r3, #0]
 800f61e:	e002      	b.n	800f626 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	220d      	movs	r2, #13
 800f624:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2205      	movs	r2, #5
 800f62a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f63a:	2300      	movs	r3, #0
 800f63c:	2200      	movs	r2, #0
 800f63e:	f001 ff47 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f642:	e055      	b.n	800f6f0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d04f      	beq.n	800f6ee <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	4798      	blx	r3
      }
      break;
 800f65a:	e048      	b.n	800f6ee <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7ff fcf7 	bl	800f058 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f670:	2b00      	cmp	r3, #0
 800f672:	d009      	beq.n	800f688 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d005      	beq.n	800f69e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f698:	2105      	movs	r1, #5
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d107      	bne.n	800f6ba <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7ff fdb0 	bl	800f218 <USBH_Start>
 800f6b8:	e002      	b.n	800f6c0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f014 fb88 	bl	8023dd0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f001 fefa 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      break;
 800f6dc:	e008      	b.n	800f6f0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800f6de:	bf00      	nop
 800f6e0:	e006      	b.n	800f6f0 <USBH_Process+0x4b8>
      break;
 800f6e2:	bf00      	nop
 800f6e4:	e004      	b.n	800f6f0 <USBH_Process+0x4b8>
      break;
 800f6e6:	bf00      	nop
 800f6e8:	e002      	b.n	800f6f0 <USBH_Process+0x4b8>
    break;
 800f6ea:	bf00      	nop
 800f6ec:	e000      	b.n	800f6f0 <USBH_Process+0x4b8>
      break;
 800f6ee:	bf00      	nop
  }
  return USBH_OK;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop

0800f6fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b088      	sub	sp, #32
 800f700:	af04      	add	r7, sp, #16
 800f702:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f704:	2301      	movs	r3, #1
 800f706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f708:	2301      	movs	r3, #1
 800f70a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	785b      	ldrb	r3, [r3, #1]
 800f710:	2b07      	cmp	r3, #7
 800f712:	f200 8208 	bhi.w	800fb26 <USBH_HandleEnum+0x42a>
 800f716:	a201      	add	r2, pc, #4	; (adr r2, 800f71c <USBH_HandleEnum+0x20>)
 800f718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71c:	0800f73d 	.word	0x0800f73d
 800f720:	0800f7fb 	.word	0x0800f7fb
 800f724:	0800f865 	.word	0x0800f865
 800f728:	0800f8f3 	.word	0x0800f8f3
 800f72c:	0800f95d 	.word	0x0800f95d
 800f730:	0800f9cd 	.word	0x0800f9cd
 800f734:	0800fa69 	.word	0x0800fa69
 800f738:	0800fae7 	.word	0x0800fae7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f73c:	2108      	movs	r1, #8
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 faec 	bl	800fd1c <USBH_Get_DevDesc>
 800f744:	4603      	mov	r3, r0
 800f746:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f748:	7bbb      	ldrb	r3, [r7, #14]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d130      	bne.n	800f7b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	7919      	ldrb	r1, [r3, #4]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f772:	b292      	uxth	r2, r2
 800f774:	9202      	str	r2, [sp, #8]
 800f776:	2200      	movs	r2, #0
 800f778:	9201      	str	r2, [sp, #4]
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	4603      	mov	r3, r0
 800f77e:	2280      	movs	r2, #128	; 0x80
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f001 f905 	bl	8010990 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	7959      	ldrb	r1, [r3, #5]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f79a:	b292      	uxth	r2, r2
 800f79c:	9202      	str	r2, [sp, #8]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	9201      	str	r2, [sp, #4]
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f001 f8f1 	bl	8010990 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f7ae:	e1bc      	b.n	800fb2a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7b0:	7bbb      	ldrb	r3, [r7, #14]
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	f040 81b9 	bne.w	800fb2a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f7be:	3301      	adds	r3, #1
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f7ce:	2b03      	cmp	r3, #3
 800f7d0:	d903      	bls.n	800f7da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	220d      	movs	r2, #13
 800f7d6:	701a      	strb	r2, [r3, #0]
      break;
 800f7d8:	e1a7      	b.n	800fb2a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	795b      	ldrb	r3, [r3, #5]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f001 f925 	bl	8010a30 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	791b      	ldrb	r3, [r3, #4]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f001 f91f 	bl	8010a30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	701a      	strb	r2, [r3, #0]
      break;
 800f7f8:	e197      	b.n	800fb2a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f7fa:	2112      	movs	r1, #18
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fa8d 	bl	800fd1c <USBH_Get_DevDesc>
 800f802:	4603      	mov	r3, r0
 800f804:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f806:	7bbb      	ldrb	r3, [r7, #14]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d103      	bne.n	800f814 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2202      	movs	r2, #2
 800f810:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f812:	e18c      	b.n	800fb2e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f814:	7bbb      	ldrb	r3, [r7, #14]
 800f816:	2b03      	cmp	r3, #3
 800f818:	f040 8189 	bne.w	800fb2e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f822:	3301      	adds	r3, #1
 800f824:	b2da      	uxtb	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f832:	2b03      	cmp	r3, #3
 800f834:	d903      	bls.n	800f83e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	220d      	movs	r2, #13
 800f83a:	701a      	strb	r2, [r3, #0]
      break;
 800f83c:	e177      	b.n	800fb2e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	795b      	ldrb	r3, [r3, #5]
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f001 f8f3 	bl	8010a30 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	791b      	ldrb	r3, [r3, #4]
 800f84e:	4619      	mov	r1, r3
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f001 f8ed 	bl	8010a30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	701a      	strb	r2, [r3, #0]
      break;
 800f862:	e164      	b.n	800fb2e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f864:	2101      	movs	r1, #1
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fb04 	bl	800fe74 <USBH_SetAddress>
 800f86c:	4603      	mov	r3, r0
 800f86e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f870:	7bbb      	ldrb	r3, [r7, #14]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d132      	bne.n	800f8dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f876:	2002      	movs	r0, #2
 800f878:	f014 fc0c 	bl	8024094 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2203      	movs	r2, #3
 800f888:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	7919      	ldrb	r1, [r3, #4]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f89e:	b292      	uxth	r2, r2
 800f8a0:	9202      	str	r2, [sp, #8]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	9201      	str	r2, [sp, #4]
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2280      	movs	r2, #128	; 0x80
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f001 f86f 	bl	8010990 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	7959      	ldrb	r1, [r3, #5]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f8c6:	b292      	uxth	r2, r2
 800f8c8:	9202      	str	r2, [sp, #8]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	9201      	str	r2, [sp, #4]
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f001 f85b 	bl	8010990 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f8da:	e12a      	b.n	800fb32 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
 800f8de:	2b03      	cmp	r3, #3
 800f8e0:	f040 8127 	bne.w	800fb32 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	220d      	movs	r2, #13
 800f8e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	705a      	strb	r2, [r3, #1]
      break;
 800f8f0:	e11f      	b.n	800fb32 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f8f2:	2109      	movs	r1, #9
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 fa39 	bl	800fd6c <USBH_Get_CfgDesc>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f8fe:	7bbb      	ldrb	r3, [r7, #14]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d103      	bne.n	800f90c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2204      	movs	r2, #4
 800f908:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f90a:	e114      	b.n	800fb36 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
 800f90e:	2b03      	cmp	r3, #3
 800f910:	f040 8111 	bne.w	800fb36 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f91a:	3301      	adds	r3, #1
 800f91c:	b2da      	uxtb	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f92a:	2b03      	cmp	r3, #3
 800f92c:	d903      	bls.n	800f936 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	220d      	movs	r2, #13
 800f932:	701a      	strb	r2, [r3, #0]
      break;
 800f934:	e0ff      	b.n	800fb36 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	795b      	ldrb	r3, [r3, #5]
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f001 f877 	bl	8010a30 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	791b      	ldrb	r3, [r3, #4]
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f001 f871 	bl	8010a30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	701a      	strb	r2, [r3, #0]
      break;
 800f95a:	e0ec      	b.n	800fb36 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fa01 	bl	800fd6c <USBH_Get_CfgDesc>
 800f96a:	4603      	mov	r3, r0
 800f96c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f96e:	7bbb      	ldrb	r3, [r7, #14]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d103      	bne.n	800f97c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2205      	movs	r2, #5
 800f978:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f97a:	e0de      	b.n	800fb3a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f97c:	7bbb      	ldrb	r3, [r7, #14]
 800f97e:	2b03      	cmp	r3, #3
 800f980:	f040 80db 	bne.w	800fb3a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f98a:	3301      	adds	r3, #1
 800f98c:	b2da      	uxtb	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d903      	bls.n	800f9a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	220d      	movs	r2, #13
 800f9a2:	701a      	strb	r2, [r3, #0]
      break;
 800f9a4:	e0c9      	b.n	800fb3a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	795b      	ldrb	r3, [r3, #5]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f001 f83f 	bl	8010a30 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	791b      	ldrb	r3, [r3, #4]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f001 f839 	bl	8010a30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	701a      	strb	r2, [r3, #0]
      break;
 800f9ca:	e0b6      	b.n	800fb3a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d036      	beq.n	800fa44 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f9e2:	23ff      	movs	r3, #255	; 0xff
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f9e5 	bl	800fdb4 <USBH_Get_StringDesc>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f9ee:	7bbb      	ldrb	r3, [r7, #14]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d111      	bne.n	800fa18 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2206      	movs	r2, #6
 800f9f8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2205      	movs	r2, #5
 800f9fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fa0e:	2300      	movs	r3, #0
 800fa10:	2200      	movs	r2, #0
 800fa12:	f001 fd5d 	bl	80114d0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800fa16:	e092      	b.n	800fb3e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa18:	7bbb      	ldrb	r3, [r7, #14]
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	f040 808f 	bne.w	800fb3e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2206      	movs	r2, #6
 800fa24:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2205      	movs	r2, #5
 800fa2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f001 fd47 	bl	80114d0 <osMessageQueuePut>
      break;
 800fa42:	e07c      	b.n	800fb3e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2206      	movs	r2, #6
 800fa48:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2205      	movs	r2, #5
 800fa4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fa5e:	2300      	movs	r3, #0
 800fa60:	2200      	movs	r2, #0
 800fa62:	f001 fd35 	bl	80114d0 <osMessageQueuePut>
      break;
 800fa66:	e06a      	b.n	800fb3e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d027      	beq.n	800fac2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fa7e:	23ff      	movs	r3, #255	; 0xff
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 f997 	bl	800fdb4 <USBH_Get_StringDesc>
 800fa86:	4603      	mov	r3, r0
 800fa88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fa8a:	7bbb      	ldrb	r3, [r7, #14]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d103      	bne.n	800fa98 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2207      	movs	r2, #7
 800fa94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800fa96:	e054      	b.n	800fb42 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa98:	7bbb      	ldrb	r3, [r7, #14]
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	d151      	bne.n	800fb42 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2207      	movs	r2, #7
 800faa2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2205      	movs	r2, #5
 800faa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fab8:	2300      	movs	r3, #0
 800faba:	2200      	movs	r2, #0
 800fabc:	f001 fd08 	bl	80114d0 <osMessageQueuePut>
      break;
 800fac0:	e03f      	b.n	800fb42 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2207      	movs	r2, #7
 800fac6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2205      	movs	r2, #5
 800facc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fadc:	2300      	movs	r3, #0
 800fade:	2200      	movs	r2, #0
 800fae0:	f001 fcf6 	bl	80114d0 <osMessageQueuePut>
      break;
 800fae4:	e02d      	b.n	800fb42 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800faec:	2b00      	cmp	r3, #0
 800faee:	d017      	beq.n	800fb20 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fafc:	23ff      	movs	r3, #255	; 0xff
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f958 	bl	800fdb4 <USBH_Get_StringDesc>
 800fb04:	4603      	mov	r3, r0
 800fb06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fb08:	7bbb      	ldrb	r3, [r7, #14]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d102      	bne.n	800fb14 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800fb12:	e018      	b.n	800fb46 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb14:	7bbb      	ldrb	r3, [r7, #14]
 800fb16:	2b03      	cmp	r3, #3
 800fb18:	d115      	bne.n	800fb46 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb1e:	e012      	b.n	800fb46 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800fb20:	2300      	movs	r3, #0
 800fb22:	73fb      	strb	r3, [r7, #15]
      break;
 800fb24:	e00f      	b.n	800fb46 <USBH_HandleEnum+0x44a>

    default:
      break;
 800fb26:	bf00      	nop
 800fb28:	e00e      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb2a:	bf00      	nop
 800fb2c:	e00c      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb2e:	bf00      	nop
 800fb30:	e00a      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb32:	bf00      	nop
 800fb34:	e008      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb36:	bf00      	nop
 800fb38:	e006      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb3a:	bf00      	nop
 800fb3c:	e004      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb3e:	bf00      	nop
 800fb40:	e002      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb42:	bf00      	nop
 800fb44:	e000      	b.n	800fb48 <USBH_HandleEnum+0x44c>
      break;
 800fb46:	bf00      	nop
  }
  return Status;
 800fb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop

0800fb54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	683a      	ldr	r2, [r7, #0]
 800fb62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800fb66:	bf00      	nop
 800fb68:	370c      	adds	r7, #12
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb80:	1c5a      	adds	r2, r3, #1
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 f804 	bl	800fb96 <USBH_HandleSof>
}
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	2b0b      	cmp	r3, #11
 800fba6:	d10a      	bne.n	800fbbe <USBH_HandleSof+0x28>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d005      	beq.n	800fbbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbb8:	699b      	ldr	r3, [r3, #24]
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	4798      	blx	r3
  }
}
 800fbbe:	bf00      	nop
 800fbc0:	3708      	adds	r7, #8
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b082      	sub	sp, #8
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fbea:	2300      	movs	r3, #0
 800fbec:	2200      	movs	r2, #0
 800fbee:	f001 fc6f 	bl	80114d0 <osMessageQueuePut>
#endif
#endif

  return;
 800fbf2:	bf00      	nop
}
 800fbf4:	3708      	adds	r7, #8
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}

0800fbfa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fbfa:	b480      	push	{r7}
 800fbfc:	b083      	sub	sp, #12
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fc0a:	bf00      	nop
}
 800fc0c:	370c      	adds	r7, #12
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b082      	sub	sp, #8
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f001 fc3f 	bl	80114d0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800fc52:	2300      	movs	r3, #0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2201      	movs	r2, #1
 800fc68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f014 f8c2 	bl	8023e06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	791b      	ldrb	r3, [r3, #4]
 800fc86:	4619      	mov	r1, r3
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 fed1 	bl	8010a30 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	795b      	ldrb	r3, [r3, #5]
 800fc92:	4619      	mov	r1, r3
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fecb 	bl	8010a30 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fcae:	2300      	movs	r3, #0
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f001 fc0d 	bl	80114d0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800fcd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f001 fc6d 	bl	80115b8 <osMessageQueueGet>
 800fcde:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1f0      	bne.n	800fcc8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff faa6 	bl	800f238 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800fcec:	e7ec      	b.n	800fcc8 <USBH_Process_OS+0x8>

0800fcee <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b082      	sub	sp, #8
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f001 fbdf 	bl	80114d0 <osMessageQueuePut>
#endif

  return USBH_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af02      	add	r7, sp, #8
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	460b      	mov	r3, r1
 800fd26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800fd2e:	78fb      	ldrb	r3, [r7, #3]
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	4613      	mov	r3, r2
 800fd36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 f864 	bl	800fe0a <USBH_GetDescriptor>
 800fd42:	4603      	mov	r3, r0
 800fd44:	73fb      	strb	r3, [r7, #15]
 800fd46:	7bfb      	ldrb	r3, [r7, #15]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10a      	bne.n	800fd62 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fd58:	78fa      	ldrb	r2, [r7, #3]
 800fd5a:	b292      	uxth	r2, r2
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	f000 f918 	bl	800ff92 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b086      	sub	sp, #24
 800fd70:	af02      	add	r7, sp, #8
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	460b      	mov	r3, r1
 800fd76:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	331c      	adds	r3, #28
 800fd7c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800fd7e:	887b      	ldrh	r3, [r7, #2]
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd88:	2100      	movs	r1, #0
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f83d 	bl	800fe0a <USBH_GetDescriptor>
 800fd90:	4603      	mov	r3, r0
 800fd92:	72fb      	strb	r3, [r7, #11]
 800fd94:	7afb      	ldrb	r3, [r7, #11]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d107      	bne.n	800fdaa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800fda0:	887a      	ldrh	r2, [r7, #2]
 800fda2:	68f9      	ldr	r1, [r7, #12]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f000 f964 	bl	8010072 <USBH_ParseCfgDesc>
  }

  return status;
 800fdaa:	7afb      	ldrb	r3, [r7, #11]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	607a      	str	r2, [r7, #4]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	72fb      	strb	r3, [r7, #11]
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800fdc8:	7afb      	ldrb	r3, [r7, #11]
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800fdd0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800fdd8:	893b      	ldrh	r3, [r7, #8]
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	460b      	mov	r3, r1
 800fdde:	2100      	movs	r1, #0
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f000 f812 	bl	800fe0a <USBH_GetDescriptor>
 800fde6:	4603      	mov	r3, r0
 800fde8:	75fb      	strb	r3, [r7, #23]
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d107      	bne.n	800fe00 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fdf6:	893a      	ldrh	r2, [r7, #8]
 800fdf8:	6879      	ldr	r1, [r7, #4]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 fa37 	bl	801026e <USBH_ParseStringDesc>
  }

  return status;
 800fe00:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	60f8      	str	r0, [r7, #12]
 800fe12:	607b      	str	r3, [r7, #4]
 800fe14:	460b      	mov	r3, r1
 800fe16:	72fb      	strb	r3, [r7, #11]
 800fe18:	4613      	mov	r3, r2
 800fe1a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	789b      	ldrb	r3, [r3, #2]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d11c      	bne.n	800fe5e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fe24:	7afb      	ldrb	r3, [r7, #11]
 800fe26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2206      	movs	r2, #6
 800fe34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	893a      	ldrh	r2, [r7, #8]
 800fe3a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fe3c:	893b      	ldrh	r3, [r7, #8]
 800fe3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fe42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fe46:	d104      	bne.n	800fe52 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f240 4209 	movw	r2, #1033	; 0x409
 800fe4e:	829a      	strh	r2, [r3, #20]
 800fe50:	e002      	b.n	800fe58 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	8b3a      	ldrh	r2, [r7, #24]
 800fe5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fe5e:	8b3b      	ldrh	r3, [r7, #24]
 800fe60:	461a      	mov	r2, r3
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f000 fa50 	bl	801030a <USBH_CtlReq>
 800fe6a:	4603      	mov	r3, r0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	789b      	ldrb	r3, [r3, #2]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d10f      	bne.n	800fea8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2205      	movs	r2, #5
 800fe92:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fe94:	78fb      	ldrb	r3, [r7, #3]
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fea8:	2200      	movs	r2, #0
 800feaa:	2100      	movs	r1, #0
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 fa2c 	bl	801030a <USBH_CtlReq>
 800feb2:	4603      	mov	r3, r0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	789b      	ldrb	r3, [r3, #2]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d10e      	bne.n	800feee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2209      	movs	r2, #9
 800feda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	887a      	ldrh	r2, [r7, #2]
 800fee0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800feee:	2200      	movs	r2, #0
 800fef0:	2100      	movs	r1, #0
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 fa09 	bl	801030a <USBH_CtlReq>
 800fef8:	4603      	mov	r3, r0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	789b      	ldrb	r3, [r3, #2]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d10f      	bne.n	800ff36 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2203      	movs	r2, #3
 800ff20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ff22:	78fb      	ldrb	r3, [r7, #3]
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ff36:	2200      	movs	r2, #0
 800ff38:	2100      	movs	r1, #0
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f9e5 	bl	801030a <USBH_CtlReq>
 800ff40:	4603      	mov	r3, r0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b082      	sub	sp, #8
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	460b      	mov	r3, r1
 800ff54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	789b      	ldrb	r3, [r3, #2]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d10f      	bne.n	800ff7e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2202      	movs	r2, #2
 800ff62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ff70:	78fb      	ldrb	r3, [r7, #3]
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ff7e:	2200      	movs	r2, #0
 800ff80:	2100      	movs	r1, #0
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 f9c1 	bl	801030a <USBH_CtlReq>
 800ff88:	4603      	mov	r3, r0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ff92:	b480      	push	{r7}
 800ff94:	b085      	sub	sp, #20
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	60f8      	str	r0, [r7, #12]
 800ff9a:	60b9      	str	r1, [r7, #8]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	781a      	ldrb	r2, [r3, #0]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	785a      	ldrb	r2, [r3, #1]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	3302      	adds	r3, #2
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	3303      	adds	r3, #3
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	021b      	lsls	r3, r3, #8
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	791a      	ldrb	r2, [r3, #4]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	795a      	ldrb	r2, [r3, #5]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	799a      	ldrb	r2, [r3, #6]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	79da      	ldrb	r2, [r3, #7]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ffec:	88fb      	ldrh	r3, [r7, #6]
 800ffee:	2b08      	cmp	r3, #8
 800fff0:	d939      	bls.n	8010066 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	3308      	adds	r3, #8
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	3309      	adds	r3, #9
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	b29b      	uxth	r3, r3
 8010002:	021b      	lsls	r3, r3, #8
 8010004:	b29b      	uxth	r3, r3
 8010006:	4313      	orrs	r3, r2
 8010008:	b29a      	uxth	r2, r3
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	330a      	adds	r3, #10
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	b29a      	uxth	r2, r3
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	330b      	adds	r3, #11
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	b29b      	uxth	r3, r3
 801001e:	021b      	lsls	r3, r3, #8
 8010020:	b29b      	uxth	r3, r3
 8010022:	4313      	orrs	r3, r2
 8010024:	b29a      	uxth	r2, r3
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	330c      	adds	r3, #12
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	b29a      	uxth	r2, r3
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	330d      	adds	r3, #13
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	b29b      	uxth	r3, r3
 801003a:	021b      	lsls	r3, r3, #8
 801003c:	b29b      	uxth	r3, r3
 801003e:	4313      	orrs	r3, r2
 8010040:	b29a      	uxth	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	7b9a      	ldrb	r2, [r3, #14]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	7bda      	ldrb	r2, [r3, #15]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	7c1a      	ldrb	r2, [r3, #16]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	7c5a      	ldrb	r2, [r3, #17]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	745a      	strb	r2, [r3, #17]
  }
}
 8010066:	bf00      	nop
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b08a      	sub	sp, #40	; 0x28
 8010076:	af00      	add	r7, sp, #0
 8010078:	60f8      	str	r0, [r7, #12]
 801007a:	60b9      	str	r1, [r7, #8]
 801007c:	4613      	mov	r3, r2
 801007e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010084:	2300      	movs	r3, #0
 8010086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 801008a:	2300      	movs	r3, #0
 801008c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	781a      	ldrb	r2, [r3, #0]
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	785a      	ldrb	r2, [r3, #1]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	3302      	adds	r3, #2
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	3303      	adds	r3, #3
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	021b      	lsls	r3, r3, #8
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4313      	orrs	r3, r2
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	791a      	ldrb	r2, [r3, #4]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	795a      	ldrb	r2, [r3, #5]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	799a      	ldrb	r2, [r3, #6]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	79da      	ldrb	r2, [r3, #7]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	7a1a      	ldrb	r2, [r3, #8]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80100e8:	88fb      	ldrh	r3, [r7, #6]
 80100ea:	2b09      	cmp	r3, #9
 80100ec:	d95f      	bls.n	80101ae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80100ee:	2309      	movs	r3, #9
 80100f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80100f6:	e051      	b.n	801019c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80100f8:	f107 0316 	add.w	r3, r7, #22
 80100fc:	4619      	mov	r1, r3
 80100fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010100:	f000 f8e8 	bl	80102d4 <USBH_GetNextDesc>
 8010104:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8010106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010108:	785b      	ldrb	r3, [r3, #1]
 801010a:	2b04      	cmp	r3, #4
 801010c:	d146      	bne.n	801019c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801010e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010112:	221a      	movs	r2, #26
 8010114:	fb02 f303 	mul.w	r3, r2, r3
 8010118:	3308      	adds	r3, #8
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	4413      	add	r3, r2
 801011e:	3302      	adds	r3, #2
 8010120:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010124:	69f8      	ldr	r0, [r7, #28]
 8010126:	f000 f846 	bl	80101b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801012a:	2300      	movs	r3, #0
 801012c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8010130:	2300      	movs	r3, #0
 8010132:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010134:	e022      	b.n	801017c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010136:	f107 0316 	add.w	r3, r7, #22
 801013a:	4619      	mov	r1, r3
 801013c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801013e:	f000 f8c9 	bl	80102d4 <USBH_GetNextDesc>
 8010142:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	785b      	ldrb	r3, [r3, #1]
 8010148:	2b05      	cmp	r3, #5
 801014a:	d117      	bne.n	801017c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801014c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010150:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010154:	3201      	adds	r2, #1
 8010156:	00d2      	lsls	r2, r2, #3
 8010158:	211a      	movs	r1, #26
 801015a:	fb01 f303 	mul.w	r3, r1, r3
 801015e:	4413      	add	r3, r2
 8010160:	3308      	adds	r3, #8
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	4413      	add	r3, r2
 8010166:	3304      	adds	r3, #4
 8010168:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 801016a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801016c:	69b8      	ldr	r0, [r7, #24]
 801016e:	f000 f851 	bl	8010214 <USBH_ParseEPDesc>
            ep_ix++;
 8010172:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010176:	3301      	adds	r3, #1
 8010178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	791b      	ldrb	r3, [r3, #4]
 8010180:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010184:	429a      	cmp	r2, r3
 8010186:	d204      	bcs.n	8010192 <USBH_ParseCfgDesc+0x120>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	885a      	ldrh	r2, [r3, #2]
 801018c:	8afb      	ldrh	r3, [r7, #22]
 801018e:	429a      	cmp	r2, r3
 8010190:	d8d1      	bhi.n	8010136 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8010192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010196:	3301      	adds	r3, #1
 8010198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801019c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d804      	bhi.n	80101ae <USBH_ParseCfgDesc+0x13c>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	885a      	ldrh	r2, [r3, #2]
 80101a8:	8afb      	ldrh	r3, [r7, #22]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d8a4      	bhi.n	80100f8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80101ae:	bf00      	nop
 80101b0:	3728      	adds	r7, #40	; 0x28
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80101b6:	b480      	push	{r7}
 80101b8:	b083      	sub	sp, #12
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
 80101be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	781a      	ldrb	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	785a      	ldrb	r2, [r3, #1]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	789a      	ldrb	r2, [r3, #2]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	78da      	ldrb	r2, [r3, #3]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	791a      	ldrb	r2, [r3, #4]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	795a      	ldrb	r2, [r3, #5]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	799a      	ldrb	r2, [r3, #6]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	79da      	ldrb	r2, [r3, #7]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	7a1a      	ldrb	r2, [r3, #8]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	721a      	strb	r2, [r3, #8]
}
 8010208:	bf00      	nop
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	781a      	ldrb	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	785a      	ldrb	r2, [r3, #1]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	789a      	ldrb	r2, [r3, #2]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	78da      	ldrb	r2, [r3, #3]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	3304      	adds	r3, #4
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	b29a      	uxth	r2, r3
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	3305      	adds	r3, #5
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	b29b      	uxth	r3, r3
 801024e:	021b      	lsls	r3, r3, #8
 8010250:	b29b      	uxth	r3, r3
 8010252:	4313      	orrs	r3, r2
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	799a      	ldrb	r2, [r3, #6]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	719a      	strb	r2, [r3, #6]
}
 8010262:	bf00      	nop
 8010264:	370c      	adds	r7, #12
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr

0801026e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801026e:	b480      	push	{r7}
 8010270:	b087      	sub	sp, #28
 8010272:	af00      	add	r7, sp, #0
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	60b9      	str	r1, [r7, #8]
 8010278:	4613      	mov	r3, r2
 801027a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3301      	adds	r3, #1
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b03      	cmp	r3, #3
 8010284:	d120      	bne.n	80102c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	1e9a      	subs	r2, r3, #2
 801028c:	88fb      	ldrh	r3, [r7, #6]
 801028e:	4293      	cmp	r3, r2
 8010290:	bf28      	it	cs
 8010292:	4613      	movcs	r3, r2
 8010294:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	3302      	adds	r3, #2
 801029a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801029c:	2300      	movs	r3, #0
 801029e:	82fb      	strh	r3, [r7, #22]
 80102a0:	e00b      	b.n	80102ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80102a2:	8afb      	ldrh	r3, [r7, #22]
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	4413      	add	r3, r2
 80102a8:	781a      	ldrb	r2, [r3, #0]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	3301      	adds	r3, #1
 80102b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80102b4:	8afb      	ldrh	r3, [r7, #22]
 80102b6:	3302      	adds	r3, #2
 80102b8:	82fb      	strh	r3, [r7, #22]
 80102ba:	8afa      	ldrh	r2, [r7, #22]
 80102bc:	8abb      	ldrh	r3, [r7, #20]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d3ef      	bcc.n	80102a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	2200      	movs	r2, #0
 80102c6:	701a      	strb	r2, [r3, #0]
  }
}
 80102c8:	bf00      	nop
 80102ca:	371c      	adds	r7, #28
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	881a      	ldrh	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	4413      	add	r3, r2
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4413      	add	r3, r2
 80102fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80102fc:	68fb      	ldr	r3, [r7, #12]
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3714      	adds	r7, #20
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b086      	sub	sp, #24
 801030e:	af00      	add	r7, sp, #0
 8010310:	60f8      	str	r0, [r7, #12]
 8010312:	60b9      	str	r1, [r7, #8]
 8010314:	4613      	mov	r3, r2
 8010316:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010318:	2301      	movs	r3, #1
 801031a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	789b      	ldrb	r3, [r3, #2]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d002      	beq.n	801032a <USBH_CtlReq+0x20>
 8010324:	2b02      	cmp	r3, #2
 8010326:	d01d      	beq.n	8010364 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010328:	e043      	b.n	80103b2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	88fa      	ldrh	r2, [r7, #6]
 8010334:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2201      	movs	r2, #1
 801033a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2202      	movs	r2, #2
 8010340:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010342:	2301      	movs	r3, #1
 8010344:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2203      	movs	r2, #3
 801034a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801035a:	2300      	movs	r3, #0
 801035c:	2200      	movs	r2, #0
 801035e:	f001 f8b7 	bl	80114d0 <osMessageQueuePut>
      break;
 8010362:	e026      	b.n	80103b2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f000 f829 	bl	80103bc <USBH_HandleControl>
 801036a:	4603      	mov	r3, r0
 801036c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d002      	beq.n	801037a <USBH_CtlReq+0x70>
 8010374:	7dfb      	ldrb	r3, [r7, #23]
 8010376:	2b03      	cmp	r3, #3
 8010378:	d106      	bne.n	8010388 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2201      	movs	r2, #1
 801037e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2200      	movs	r2, #0
 8010384:	761a      	strb	r2, [r3, #24]
 8010386:	e005      	b.n	8010394 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010388:	7dfb      	ldrb	r3, [r7, #23]
 801038a:	2b02      	cmp	r3, #2
 801038c:	d102      	bne.n	8010394 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2201      	movs	r2, #1
 8010392:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2203      	movs	r2, #3
 8010398:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80103a8:	2300      	movs	r3, #0
 80103aa:	2200      	movs	r2, #0
 80103ac:	f001 f890 	bl	80114d0 <osMessageQueuePut>
      break;
 80103b0:	bf00      	nop
  }
  return status;
 80103b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af02      	add	r7, sp, #8
 80103c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80103c4:	2301      	movs	r3, #1
 80103c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80103c8:	2300      	movs	r3, #0
 80103ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	7e1b      	ldrb	r3, [r3, #24]
 80103d0:	3b01      	subs	r3, #1
 80103d2:	2b0a      	cmp	r3, #10
 80103d4:	f200 822b 	bhi.w	801082e <USBH_HandleControl+0x472>
 80103d8:	a201      	add	r2, pc, #4	; (adr r2, 80103e0 <USBH_HandleControl+0x24>)
 80103da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103de:	bf00      	nop
 80103e0:	0801040d 	.word	0x0801040d
 80103e4:	08010427 	.word	0x08010427
 80103e8:	080104c9 	.word	0x080104c9
 80103ec:	080104ef 	.word	0x080104ef
 80103f0:	0801057b 	.word	0x0801057b
 80103f4:	080105a7 	.word	0x080105a7
 80103f8:	08010669 	.word	0x08010669
 80103fc:	0801068b 	.word	0x0801068b
 8010400:	0801071d 	.word	0x0801071d
 8010404:	08010745 	.word	0x08010745
 8010408:	080107d7 	.word	0x080107d7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f103 0110 	add.w	r1, r3, #16
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	795b      	ldrb	r3, [r3, #5]
 8010416:	461a      	mov	r2, r3
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f000 fa19 	bl	8010850 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2202      	movs	r2, #2
 8010422:	761a      	strb	r2, [r3, #24]
      break;
 8010424:	e20e      	b.n	8010844 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	795b      	ldrb	r3, [r3, #5]
 801042a:	4619      	mov	r1, r3
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f013 fdd7 	bl	8023fe0 <USBH_LL_GetURBState>
 8010432:	4603      	mov	r3, r0
 8010434:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010436:	7bbb      	ldrb	r3, [r7, #14]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d12c      	bne.n	8010496 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7c1b      	ldrb	r3, [r3, #16]
 8010440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010444:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	8adb      	ldrh	r3, [r3, #22]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00a      	beq.n	8010464 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801044e:	7b7b      	ldrb	r3, [r7, #13]
 8010450:	2b80      	cmp	r3, #128	; 0x80
 8010452:	d103      	bne.n	801045c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2203      	movs	r2, #3
 8010458:	761a      	strb	r2, [r3, #24]
 801045a:	e00d      	b.n	8010478 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2205      	movs	r2, #5
 8010460:	761a      	strb	r2, [r3, #24]
 8010462:	e009      	b.n	8010478 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010464:	7b7b      	ldrb	r3, [r7, #13]
 8010466:	2b80      	cmp	r3, #128	; 0x80
 8010468:	d103      	bne.n	8010472 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2209      	movs	r2, #9
 801046e:	761a      	strb	r2, [r3, #24]
 8010470:	e002      	b.n	8010478 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2207      	movs	r2, #7
 8010476:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2203      	movs	r2, #3
 801047c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801048c:	2300      	movs	r3, #0
 801048e:	2200      	movs	r2, #0
 8010490:	f001 f81e 	bl	80114d0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010494:	e1cd      	b.n	8010832 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010496:	7bbb      	ldrb	r3, [r7, #14]
 8010498:	2b04      	cmp	r3, #4
 801049a:	d003      	beq.n	80104a4 <USBH_HandleControl+0xe8>
 801049c:	7bbb      	ldrb	r3, [r7, #14]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	f040 81c7 	bne.w	8010832 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	220b      	movs	r2, #11
 80104a8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2203      	movs	r2, #3
 80104ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80104be:	2300      	movs	r3, #0
 80104c0:	2200      	movs	r2, #0
 80104c2:	f001 f805 	bl	80114d0 <osMessageQueuePut>
      break;
 80104c6:	e1b4      	b.n	8010832 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6899      	ldr	r1, [r3, #8]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	899a      	ldrh	r2, [r3, #12]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	791b      	ldrb	r3, [r3, #4]
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f9f4 	bl	80108ce <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2204      	movs	r2, #4
 80104ea:	761a      	strb	r2, [r3, #24]
      break;
 80104ec:	e1aa      	b.n	8010844 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	791b      	ldrb	r3, [r3, #4]
 80104f2:	4619      	mov	r1, r3
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f013 fd73 	bl	8023fe0 <USBH_LL_GetURBState>
 80104fa:	4603      	mov	r3, r0
 80104fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80104fe:	7bbb      	ldrb	r3, [r7, #14]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d110      	bne.n	8010526 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2209      	movs	r2, #9
 8010508:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2203      	movs	r2, #3
 801050e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801051e:	2300      	movs	r3, #0
 8010520:	2200      	movs	r2, #0
 8010522:	f000 ffd5 	bl	80114d0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010526:	7bbb      	ldrb	r3, [r7, #14]
 8010528:	2b05      	cmp	r3, #5
 801052a:	d110      	bne.n	801054e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801052c:	2303      	movs	r3, #3
 801052e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2203      	movs	r2, #3
 8010534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010544:	2300      	movs	r3, #0
 8010546:	2200      	movs	r2, #0
 8010548:	f000 ffc2 	bl	80114d0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801054c:	e173      	b.n	8010836 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801054e:	7bbb      	ldrb	r3, [r7, #14]
 8010550:	2b04      	cmp	r3, #4
 8010552:	f040 8170 	bne.w	8010836 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	220b      	movs	r2, #11
 801055a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2203      	movs	r2, #3
 8010560:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010570:	2300      	movs	r3, #0
 8010572:	2200      	movs	r2, #0
 8010574:	f000 ffac 	bl	80114d0 <osMessageQueuePut>
      break;
 8010578:	e15d      	b.n	8010836 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6899      	ldr	r1, [r3, #8]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	899a      	ldrh	r2, [r3, #12]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	7958      	ldrb	r0, [r3, #5]
 8010586:	2301      	movs	r3, #1
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	4603      	mov	r3, r0
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 f979 	bl	8010884 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010598:	b29a      	uxth	r2, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2206      	movs	r2, #6
 80105a2:	761a      	strb	r2, [r3, #24]
      break;
 80105a4:	e14e      	b.n	8010844 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	795b      	ldrb	r3, [r3, #5]
 80105aa:	4619      	mov	r1, r3
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f013 fd17 	bl	8023fe0 <USBH_LL_GetURBState>
 80105b2:	4603      	mov	r3, r0
 80105b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80105b6:	7bbb      	ldrb	r3, [r7, #14]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d111      	bne.n	80105e0 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2207      	movs	r2, #7
 80105c0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2203      	movs	r2, #3
 80105c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80105d6:	2300      	movs	r3, #0
 80105d8:	2200      	movs	r2, #0
 80105da:	f000 ff79 	bl	80114d0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80105de:	e12c      	b.n	801083a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80105e0:	7bbb      	ldrb	r3, [r7, #14]
 80105e2:	2b05      	cmp	r3, #5
 80105e4:	d113      	bne.n	801060e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	220c      	movs	r2, #12
 80105ea:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80105ec:	2303      	movs	r3, #3
 80105ee:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2203      	movs	r2, #3
 80105f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010604:	2300      	movs	r3, #0
 8010606:	2200      	movs	r2, #0
 8010608:	f000 ff62 	bl	80114d0 <osMessageQueuePut>
      break;
 801060c:	e115      	b.n	801083a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 801060e:	7bbb      	ldrb	r3, [r7, #14]
 8010610:	2b02      	cmp	r3, #2
 8010612:	d111      	bne.n	8010638 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2205      	movs	r2, #5
 8010618:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2203      	movs	r2, #3
 801061e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801062e:	2300      	movs	r3, #0
 8010630:	2200      	movs	r2, #0
 8010632:	f000 ff4d 	bl	80114d0 <osMessageQueuePut>
      break;
 8010636:	e100      	b.n	801083a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8010638:	7bbb      	ldrb	r3, [r7, #14]
 801063a:	2b04      	cmp	r3, #4
 801063c:	f040 80fd 	bne.w	801083a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	220b      	movs	r2, #11
 8010644:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010646:	2302      	movs	r3, #2
 8010648:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2203      	movs	r2, #3
 801064e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801065e:	2300      	movs	r3, #0
 8010660:	2200      	movs	r2, #0
 8010662:	f000 ff35 	bl	80114d0 <osMessageQueuePut>
      break;
 8010666:	e0e8      	b.n	801083a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	791b      	ldrb	r3, [r3, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	2100      	movs	r1, #0
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f000 f92c 	bl	80108ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801067c:	b29a      	uxth	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2208      	movs	r2, #8
 8010686:	761a      	strb	r2, [r3, #24]

      break;
 8010688:	e0dc      	b.n	8010844 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	791b      	ldrb	r3, [r3, #4]
 801068e:	4619      	mov	r1, r3
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f013 fca5 	bl	8023fe0 <USBH_LL_GetURBState>
 8010696:	4603      	mov	r3, r0
 8010698:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801069a:	7bbb      	ldrb	r3, [r7, #14]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d113      	bne.n	80106c8 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	220d      	movs	r2, #13
 80106a4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80106a6:	2300      	movs	r3, #0
 80106a8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2203      	movs	r2, #3
 80106ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80106be:	2300      	movs	r3, #0
 80106c0:	2200      	movs	r2, #0
 80106c2:	f000 ff05 	bl	80114d0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80106c6:	e0ba      	b.n	801083e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80106c8:	7bbb      	ldrb	r3, [r7, #14]
 80106ca:	2b04      	cmp	r3, #4
 80106cc:	d111      	bne.n	80106f2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	220b      	movs	r2, #11
 80106d2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2203      	movs	r2, #3
 80106d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80106e8:	2300      	movs	r3, #0
 80106ea:	2200      	movs	r2, #0
 80106ec:	f000 fef0 	bl	80114d0 <osMessageQueuePut>
      break;
 80106f0:	e0a5      	b.n	801083e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
 80106f4:	2b05      	cmp	r3, #5
 80106f6:	f040 80a2 	bne.w	801083e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80106fa:	2303      	movs	r3, #3
 80106fc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2203      	movs	r2, #3
 8010702:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010712:	2300      	movs	r3, #0
 8010714:	2200      	movs	r2, #0
 8010716:	f000 fedb 	bl	80114d0 <osMessageQueuePut>
      break;
 801071a:	e090      	b.n	801083e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	795a      	ldrb	r2, [r3, #5]
 8010720:	2301      	movs	r3, #1
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	4613      	mov	r3, r2
 8010726:	2200      	movs	r2, #0
 8010728:	2100      	movs	r1, #0
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f8aa 	bl	8010884 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010736:	b29a      	uxth	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	220a      	movs	r2, #10
 8010740:	761a      	strb	r2, [r3, #24]
      break;
 8010742:	e07f      	b.n	8010844 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	795b      	ldrb	r3, [r3, #5]
 8010748:	4619      	mov	r1, r3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f013 fc48 	bl	8023fe0 <USBH_LL_GetURBState>
 8010750:	4603      	mov	r3, r0
 8010752:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010754:	7bbb      	ldrb	r3, [r7, #14]
 8010756:	2b01      	cmp	r3, #1
 8010758:	d113      	bne.n	8010782 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	220d      	movs	r2, #13
 8010762:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2203      	movs	r2, #3
 8010768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010778:	2300      	movs	r3, #0
 801077a:	2200      	movs	r2, #0
 801077c:	f000 fea8 	bl	80114d0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010780:	e05f      	b.n	8010842 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010782:	7bbb      	ldrb	r3, [r7, #14]
 8010784:	2b02      	cmp	r3, #2
 8010786:	d111      	bne.n	80107ac <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2209      	movs	r2, #9
 801078c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2203      	movs	r2, #3
 8010792:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80107a2:	2300      	movs	r3, #0
 80107a4:	2200      	movs	r2, #0
 80107a6:	f000 fe93 	bl	80114d0 <osMessageQueuePut>
      break;
 80107aa:	e04a      	b.n	8010842 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80107ac:	7bbb      	ldrb	r3, [r7, #14]
 80107ae:	2b04      	cmp	r3, #4
 80107b0:	d147      	bne.n	8010842 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	220b      	movs	r2, #11
 80107b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2203      	movs	r2, #3
 80107bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80107cc:	2300      	movs	r3, #0
 80107ce:	2200      	movs	r2, #0
 80107d0:	f000 fe7e 	bl	80114d0 <osMessageQueuePut>
      break;
 80107d4:	e035      	b.n	8010842 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	7e5b      	ldrb	r3, [r3, #25]
 80107da:	3301      	adds	r3, #1
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	765a      	strb	r2, [r3, #25]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7e5b      	ldrb	r3, [r3, #25]
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d806      	bhi.n	80107f8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2201      	movs	r2, #1
 80107f4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80107f6:	e025      	b.n	8010844 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80107fe:	2106      	movs	r1, #6
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2200      	movs	r2, #0
 8010808:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	795b      	ldrb	r3, [r3, #5]
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 f90d 	bl	8010a30 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	791b      	ldrb	r3, [r3, #4]
 801081a:	4619      	mov	r1, r3
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 f907 	bl	8010a30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010828:	2302      	movs	r3, #2
 801082a:	73fb      	strb	r3, [r7, #15]
      break;
 801082c:	e00a      	b.n	8010844 <USBH_HandleControl+0x488>

    default:
      break;
 801082e:	bf00      	nop
 8010830:	e008      	b.n	8010844 <USBH_HandleControl+0x488>
      break;
 8010832:	bf00      	nop
 8010834:	e006      	b.n	8010844 <USBH_HandleControl+0x488>
      break;
 8010836:	bf00      	nop
 8010838:	e004      	b.n	8010844 <USBH_HandleControl+0x488>
      break;
 801083a:	bf00      	nop
 801083c:	e002      	b.n	8010844 <USBH_HandleControl+0x488>
      break;
 801083e:	bf00      	nop
 8010840:	e000      	b.n	8010844 <USBH_HandleControl+0x488>
      break;
 8010842:	bf00      	nop
  }

  return status;
 8010844:	7bfb      	ldrb	r3, [r7, #15]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3710      	adds	r7, #16
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop

08010850 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b088      	sub	sp, #32
 8010854:	af04      	add	r7, sp, #16
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	4613      	mov	r3, r2
 801085c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801085e:	79f9      	ldrb	r1, [r7, #7]
 8010860:	2300      	movs	r3, #0
 8010862:	9303      	str	r3, [sp, #12]
 8010864:	2308      	movs	r3, #8
 8010866:	9302      	str	r3, [sp, #8]
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	9301      	str	r3, [sp, #4]
 801086c:	2300      	movs	r3, #0
 801086e:	9300      	str	r3, [sp, #0]
 8010870:	2300      	movs	r3, #0
 8010872:	2200      	movs	r2, #0
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f013 fb82 	bl	8023f7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b088      	sub	sp, #32
 8010888:	af04      	add	r7, sp, #16
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	4611      	mov	r1, r2
 8010890:	461a      	mov	r2, r3
 8010892:	460b      	mov	r3, r1
 8010894:	80fb      	strh	r3, [r7, #6]
 8010896:	4613      	mov	r3, r2
 8010898:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d001      	beq.n	80108a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80108a4:	2300      	movs	r3, #0
 80108a6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80108a8:	7979      	ldrb	r1, [r7, #5]
 80108aa:	7e3b      	ldrb	r3, [r7, #24]
 80108ac:	9303      	str	r3, [sp, #12]
 80108ae:	88fb      	ldrh	r3, [r7, #6]
 80108b0:	9302      	str	r3, [sp, #8]
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	2301      	movs	r3, #1
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	2300      	movs	r3, #0
 80108bc:	2200      	movs	r2, #0
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f013 fb5d 	bl	8023f7e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b088      	sub	sp, #32
 80108d2:	af04      	add	r7, sp, #16
 80108d4:	60f8      	str	r0, [r7, #12]
 80108d6:	60b9      	str	r1, [r7, #8]
 80108d8:	4611      	mov	r1, r2
 80108da:	461a      	mov	r2, r3
 80108dc:	460b      	mov	r3, r1
 80108de:	80fb      	strh	r3, [r7, #6]
 80108e0:	4613      	mov	r3, r2
 80108e2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80108e4:	7979      	ldrb	r1, [r7, #5]
 80108e6:	2300      	movs	r3, #0
 80108e8:	9303      	str	r3, [sp, #12]
 80108ea:	88fb      	ldrh	r3, [r7, #6]
 80108ec:	9302      	str	r3, [sp, #8]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	9301      	str	r3, [sp, #4]
 80108f2:	2301      	movs	r3, #1
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	2300      	movs	r3, #0
 80108f8:	2201      	movs	r2, #1
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f013 fb3f 	bl	8023f7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010900:	2300      	movs	r3, #0

}
 8010902:	4618      	mov	r0, r3
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b088      	sub	sp, #32
 801090e:	af04      	add	r7, sp, #16
 8010910:	60f8      	str	r0, [r7, #12]
 8010912:	60b9      	str	r1, [r7, #8]
 8010914:	4611      	mov	r1, r2
 8010916:	461a      	mov	r2, r3
 8010918:	460b      	mov	r3, r1
 801091a:	80fb      	strh	r3, [r7, #6]
 801091c:	4613      	mov	r3, r2
 801091e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010926:	2b00      	cmp	r3, #0
 8010928:	d001      	beq.n	801092e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801092a:	2300      	movs	r3, #0
 801092c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801092e:	7979      	ldrb	r1, [r7, #5]
 8010930:	7e3b      	ldrb	r3, [r7, #24]
 8010932:	9303      	str	r3, [sp, #12]
 8010934:	88fb      	ldrh	r3, [r7, #6]
 8010936:	9302      	str	r3, [sp, #8]
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	9301      	str	r3, [sp, #4]
 801093c:	2301      	movs	r3, #1
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	2302      	movs	r3, #2
 8010942:	2200      	movs	r2, #0
 8010944:	68f8      	ldr	r0, [r7, #12]
 8010946:	f013 fb1a 	bl	8023f7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801094a:	2300      	movs	r3, #0
}
 801094c:	4618      	mov	r0, r3
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b088      	sub	sp, #32
 8010958:	af04      	add	r7, sp, #16
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	4611      	mov	r1, r2
 8010960:	461a      	mov	r2, r3
 8010962:	460b      	mov	r3, r1
 8010964:	80fb      	strh	r3, [r7, #6]
 8010966:	4613      	mov	r3, r2
 8010968:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801096a:	7979      	ldrb	r1, [r7, #5]
 801096c:	2300      	movs	r3, #0
 801096e:	9303      	str	r3, [sp, #12]
 8010970:	88fb      	ldrh	r3, [r7, #6]
 8010972:	9302      	str	r3, [sp, #8]
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	2301      	movs	r3, #1
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	2302      	movs	r3, #2
 801097e:	2201      	movs	r2, #1
 8010980:	68f8      	ldr	r0, [r7, #12]
 8010982:	f013 fafc 	bl	8023f7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af04      	add	r7, sp, #16
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	4608      	mov	r0, r1
 801099a:	4611      	mov	r1, r2
 801099c:	461a      	mov	r2, r3
 801099e:	4603      	mov	r3, r0
 80109a0:	70fb      	strb	r3, [r7, #3]
 80109a2:	460b      	mov	r3, r1
 80109a4:	70bb      	strb	r3, [r7, #2]
 80109a6:	4613      	mov	r3, r2
 80109a8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80109aa:	7878      	ldrb	r0, [r7, #1]
 80109ac:	78ba      	ldrb	r2, [r7, #2]
 80109ae:	78f9      	ldrb	r1, [r7, #3]
 80109b0:	8b3b      	ldrh	r3, [r7, #24]
 80109b2:	9302      	str	r3, [sp, #8]
 80109b4:	7d3b      	ldrb	r3, [r7, #20]
 80109b6:	9301      	str	r3, [sp, #4]
 80109b8:	7c3b      	ldrb	r3, [r7, #16]
 80109ba:	9300      	str	r3, [sp, #0]
 80109bc:	4603      	mov	r3, r0
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f013 fa8f 	bl	8023ee2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80109c4:	2300      	movs	r3, #0
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3708      	adds	r7, #8
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}

080109ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b082      	sub	sp, #8
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
 80109d6:	460b      	mov	r3, r1
 80109d8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80109da:	78fb      	ldrb	r3, [r7, #3]
 80109dc:	4619      	mov	r1, r3
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f013 faae 	bl	8023f40 <USBH_LL_ClosePipe>

  return USBH_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b084      	sub	sp, #16
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	460b      	mov	r3, r1
 80109f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f836 	bl	8010a6c <USBH_GetFreePipe>
 8010a00:	4603      	mov	r3, r0
 8010a02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010a04:	89fb      	ldrh	r3, [r7, #14]
 8010a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d00a      	beq.n	8010a24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010a0e:	78fa      	ldrb	r2, [r7, #3]
 8010a10:	89fb      	ldrh	r3, [r7, #14]
 8010a12:	f003 030f 	and.w	r3, r3, #15
 8010a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a1a:	6879      	ldr	r1, [r7, #4]
 8010a1c:	33e0      	adds	r3, #224	; 0xe0
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	440b      	add	r3, r1
 8010a22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010a24:	89fb      	ldrh	r3, [r7, #14]
 8010a26:	b2db      	uxtb	r3, r3
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3710      	adds	r7, #16
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010a3c:	78fb      	ldrb	r3, [r7, #3]
 8010a3e:	2b0a      	cmp	r3, #10
 8010a40:	d80d      	bhi.n	8010a5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010a42:	78fb      	ldrb	r3, [r7, #3]
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	33e0      	adds	r3, #224	; 0xe0
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4413      	add	r3, r2
 8010a4c:	685a      	ldr	r2, [r3, #4]
 8010a4e:	78fb      	ldrb	r3, [r7, #3]
 8010a50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010a54:	6879      	ldr	r1, [r7, #4]
 8010a56:	33e0      	adds	r3, #224	; 0xe0
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	440b      	add	r3, r1
 8010a5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b085      	sub	sp, #20
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010a74:	2300      	movs	r3, #0
 8010a76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010a78:	2300      	movs	r3, #0
 8010a7a:	73fb      	strb	r3, [r7, #15]
 8010a7c:	e00f      	b.n	8010a9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010a7e:	7bfb      	ldrb	r3, [r7, #15]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	33e0      	adds	r3, #224	; 0xe0
 8010a84:	009b      	lsls	r3, r3, #2
 8010a86:	4413      	add	r3, r2
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d102      	bne.n	8010a98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	e007      	b.n	8010aa8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	73fb      	strb	r3, [r7, #15]
 8010a9e:	7bfb      	ldrb	r3, [r7, #15]
 8010aa0:	2b0a      	cmp	r3, #10
 8010aa2:	d9ec      	bls.n	8010a7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3714      	adds	r7, #20
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010ab4:	b480      	push	{r7}
 8010ab6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010ab8:	bf00      	nop
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
	...

08010ac4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010aca:	f3ef 8305 	mrs	r3, IPSR
 8010ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ad0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d10f      	bne.n	8010af6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8010ada:	607b      	str	r3, [r7, #4]
  return(result);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d105      	bne.n	8010aee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8010ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d007      	beq.n	8010afe <osKernelInitialize+0x3a>
 8010aee:	4b0e      	ldr	r3, [pc, #56]	; (8010b28 <osKernelInitialize+0x64>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d103      	bne.n	8010afe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010af6:	f06f 0305 	mvn.w	r3, #5
 8010afa:	60fb      	str	r3, [r7, #12]
 8010afc:	e00c      	b.n	8010b18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010afe:	4b0a      	ldr	r3, [pc, #40]	; (8010b28 <osKernelInitialize+0x64>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d105      	bne.n	8010b12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010b06:	4b08      	ldr	r3, [pc, #32]	; (8010b28 <osKernelInitialize+0x64>)
 8010b08:	2201      	movs	r2, #1
 8010b0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	e002      	b.n	8010b18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010b18:	68fb      	ldr	r3, [r7, #12]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3714      	adds	r7, #20
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop
 8010b28:	20000260 	.word	0x20000260

08010b2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b32:	f3ef 8305 	mrs	r3, IPSR
 8010b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d10f      	bne.n	8010b5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8010b42:	607b      	str	r3, [r7, #4]
  return(result);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d105      	bne.n	8010b56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8010b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d007      	beq.n	8010b66 <osKernelStart+0x3a>
 8010b56:	4b0f      	ldr	r3, [pc, #60]	; (8010b94 <osKernelStart+0x68>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d103      	bne.n	8010b66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8010b5e:	f06f 0305 	mvn.w	r3, #5
 8010b62:	60fb      	str	r3, [r7, #12]
 8010b64:	e010      	b.n	8010b88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010b66:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <osKernelStart+0x68>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d109      	bne.n	8010b82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010b6e:	f7ff ffa1 	bl	8010ab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010b72:	4b08      	ldr	r3, [pc, #32]	; (8010b94 <osKernelStart+0x68>)
 8010b74:	2202      	movs	r2, #2
 8010b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010b78:	f002 faca 	bl	8013110 <vTaskStartScheduler>
      stat = osOK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	e002      	b.n	8010b88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010b88:	68fb      	ldr	r3, [r7, #12]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	20000260 	.word	0x20000260

08010b98 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b9e:	f3ef 8305 	mrs	r3, IPSR
 8010ba2:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ba4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10f      	bne.n	8010bca <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010baa:	f3ef 8310 	mrs	r3, PRIMASK
 8010bae:	607b      	str	r3, [r7, #4]
  return(result);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d105      	bne.n	8010bc2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8010bba:	603b      	str	r3, [r7, #0]
  return(result);
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d007      	beq.n	8010bd2 <osKernelGetTickCount+0x3a>
 8010bc2:	4b08      	ldr	r3, [pc, #32]	; (8010be4 <osKernelGetTickCount+0x4c>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	d103      	bne.n	8010bd2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8010bca:	f002 fbc5 	bl	8013358 <xTaskGetTickCountFromISR>
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	e002      	b.n	8010bd8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8010bd2:	f002 fbb1 	bl	8013338 <xTaskGetTickCount>
 8010bd6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20000260 	.word	0x20000260

08010be8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b090      	sub	sp, #64	; 0x40
 8010bec:	af04      	add	r7, sp, #16
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bf8:	f3ef 8305 	mrs	r3, IPSR
 8010bfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8010bfe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f040 808f 	bne.w	8010d24 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c06:	f3ef 8310 	mrs	r3, PRIMASK
 8010c0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d105      	bne.n	8010c1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c12:	f3ef 8311 	mrs	r3, BASEPRI
 8010c16:	617b      	str	r3, [r7, #20]
  return(result);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <osThreadNew+0x3e>
 8010c1e:	4b44      	ldr	r3, [pc, #272]	; (8010d30 <osThreadNew+0x148>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	d07e      	beq.n	8010d24 <osThreadNew+0x13c>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d07b      	beq.n	8010d24 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010c2c:	2380      	movs	r3, #128	; 0x80
 8010c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010c30:	2318      	movs	r3, #24
 8010c32:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010c34:	2300      	movs	r3, #0
 8010c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d045      	beq.n	8010cd0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d002      	beq.n	8010c52 <osThreadNew+0x6a>
        name = attr->name;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d002      	beq.n	8010c60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	699b      	ldr	r3, [r3, #24]
 8010c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d008      	beq.n	8010c78 <osThreadNew+0x90>
 8010c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c68:	2b38      	cmp	r3, #56	; 0x38
 8010c6a:	d805      	bhi.n	8010c78 <osThreadNew+0x90>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	f003 0301 	and.w	r3, r3, #1
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d001      	beq.n	8010c7c <osThreadNew+0x94>
        return (NULL);
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e054      	b.n	8010d26 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	695b      	ldr	r3, [r3, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d003      	beq.n	8010c8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	695b      	ldr	r3, [r3, #20]
 8010c88:	089b      	lsrs	r3, r3, #2
 8010c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	689b      	ldr	r3, [r3, #8]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00e      	beq.n	8010cb2 <osThreadNew+0xca>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	2b5f      	cmp	r3, #95	; 0x5f
 8010c9a:	d90a      	bls.n	8010cb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d006      	beq.n	8010cb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d002      	beq.n	8010cb2 <osThreadNew+0xca>
        mem = 1;
 8010cac:	2301      	movs	r3, #1
 8010cae:	623b      	str	r3, [r7, #32]
 8010cb0:	e010      	b.n	8010cd4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d10c      	bne.n	8010cd4 <osThreadNew+0xec>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d108      	bne.n	8010cd4 <osThreadNew+0xec>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	691b      	ldr	r3, [r3, #16]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d104      	bne.n	8010cd4 <osThreadNew+0xec>
          mem = 0;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	623b      	str	r3, [r7, #32]
 8010cce:	e001      	b.n	8010cd4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010cd4:	6a3b      	ldr	r3, [r7, #32]
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d110      	bne.n	8010cfc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010ce2:	9202      	str	r2, [sp, #8]
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f001 ff53 	bl	8012b9c <xTaskCreateStatic>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	613b      	str	r3, [r7, #16]
 8010cfa:	e013      	b.n	8010d24 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d110      	bne.n	8010d24 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	f107 0310 	add.w	r3, r7, #16
 8010d0a:	9301      	str	r3, [sp, #4]
 8010d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0e:	9300      	str	r3, [sp, #0]
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f001 ffa1 	bl	8012c5c <xTaskCreate>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d001      	beq.n	8010d24 <osThreadNew+0x13c>
          hTask = NULL;
 8010d20:	2300      	movs	r3, #0
 8010d22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010d24:	693b      	ldr	r3, [r7, #16]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3730      	adds	r7, #48	; 0x30
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	20000260 	.word	0x20000260

08010d34 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b088      	sub	sp, #32
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d40:	f3ef 8305 	mrs	r3, IPSR
 8010d44:	613b      	str	r3, [r7, #16]
  return(result);
 8010d46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10f      	bne.n	8010d6c <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8010d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d105      	bne.n	8010d64 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d58:	f3ef 8311 	mrs	r3, BASEPRI
 8010d5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d007      	beq.n	8010d74 <osThreadTerminate+0x40>
 8010d64:	4b12      	ldr	r3, [pc, #72]	; (8010db0 <osThreadTerminate+0x7c>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b02      	cmp	r3, #2
 8010d6a:	d103      	bne.n	8010d74 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8010d6c:	f06f 0305 	mvn.w	r3, #5
 8010d70:	61fb      	str	r3, [r7, #28]
 8010d72:	e017      	b.n	8010da4 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d103      	bne.n	8010d82 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8010d7a:	f06f 0303 	mvn.w	r3, #3
 8010d7e:	61fb      	str	r3, [r7, #28]
 8010d80:	e010      	b.n	8010da4 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8010d82:	69b8      	ldr	r0, [r7, #24]
 8010d84:	f002 f95c 	bl	8013040 <eTaskGetState>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8010d8c:	7dfb      	ldrb	r3, [r7, #23]
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	d005      	beq.n	8010d9e <osThreadTerminate+0x6a>
      stat = osOK;
 8010d92:	2300      	movs	r3, #0
 8010d94:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8010d96:	69b8      	ldr	r0, [r7, #24]
 8010d98:	f002 f8a8 	bl	8012eec <vTaskDelete>
 8010d9c:	e002      	b.n	8010da4 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8010d9e:	f06f 0302 	mvn.w	r3, #2
 8010da2:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8010da4:	69fb      	ldr	r3, [r7, #28]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3720      	adds	r7, #32
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20000260 	.word	0x20000260

08010db4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dbc:	f3ef 8305 	mrs	r3, IPSR
 8010dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8010dc2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d10f      	bne.n	8010de8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8010dcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d105      	bne.n	8010de0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8010dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d007      	beq.n	8010df0 <osDelay+0x3c>
 8010de0:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <osDelay+0x58>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	d103      	bne.n	8010df0 <osDelay+0x3c>
    stat = osErrorISR;
 8010de8:	f06f 0305 	mvn.w	r3, #5
 8010dec:	617b      	str	r3, [r7, #20]
 8010dee:	e007      	b.n	8010e00 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010df0:	2300      	movs	r3, #0
 8010df2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d002      	beq.n	8010e00 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f002 f8ea 	bl	8012fd4 <vTaskDelay>
    }
  }

  return (stat);
 8010e00:	697b      	ldr	r3, [r7, #20]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3718      	adds	r7, #24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	20000260 	.word	0x20000260

08010e10 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b08a      	sub	sp, #40	; 0x28
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e1c:	f3ef 8305 	mrs	r3, IPSR
 8010e20:	613b      	str	r3, [r7, #16]
  return(result);
 8010e22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f040 8085 	bne.w	8010f34 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8010e2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d105      	bne.n	8010e42 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e36:	f3ef 8311 	mrs	r3, BASEPRI
 8010e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <osMutexNew+0x3a>
 8010e42:	4b3f      	ldr	r3, [pc, #252]	; (8010f40 <osMutexNew+0x130>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	d074      	beq.n	8010f34 <osMutexNew+0x124>
    if (attr != NULL) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d003      	beq.n	8010e58 <osMutexNew+0x48>
      type = attr->attr_bits;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	623b      	str	r3, [r7, #32]
 8010e56:	e001      	b.n	8010e5c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010e5c:	6a3b      	ldr	r3, [r7, #32]
 8010e5e:	f003 0301 	and.w	r3, r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d002      	beq.n	8010e6c <osMutexNew+0x5c>
      rmtx = 1U;
 8010e66:	2301      	movs	r3, #1
 8010e68:	61fb      	str	r3, [r7, #28]
 8010e6a:	e001      	b.n	8010e70 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	f003 0308 	and.w	r3, r3, #8
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d15c      	bne.n	8010f34 <osMutexNew+0x124>
      mem = -1;
 8010e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e7e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d015      	beq.n	8010eb2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d006      	beq.n	8010e9c <osMutexNew+0x8c>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	2b4f      	cmp	r3, #79	; 0x4f
 8010e94:	d902      	bls.n	8010e9c <osMutexNew+0x8c>
          mem = 1;
 8010e96:	2301      	movs	r3, #1
 8010e98:	61bb      	str	r3, [r7, #24]
 8010e9a:	e00c      	b.n	8010eb6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d108      	bne.n	8010eb6 <osMutexNew+0xa6>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d104      	bne.n	8010eb6 <osMutexNew+0xa6>
            mem = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	61bb      	str	r3, [r7, #24]
 8010eb0:	e001      	b.n	8010eb6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d112      	bne.n	8010ee2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d007      	beq.n	8010ed2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	2004      	movs	r0, #4
 8010eca:	f000 febc 	bl	8011c46 <xQueueCreateMutexStatic>
 8010ece:	6278      	str	r0, [r7, #36]	; 0x24
 8010ed0:	e016      	b.n	8010f00 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	2001      	movs	r0, #1
 8010eda:	f000 feb4 	bl	8011c46 <xQueueCreateMutexStatic>
 8010ede:	6278      	str	r0, [r7, #36]	; 0x24
 8010ee0:	e00e      	b.n	8010f00 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010ee2:	69bb      	ldr	r3, [r7, #24]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10b      	bne.n	8010f00 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d004      	beq.n	8010ef8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010eee:	2004      	movs	r0, #4
 8010ef0:	f000 fe91 	bl	8011c16 <xQueueCreateMutex>
 8010ef4:	6278      	str	r0, [r7, #36]	; 0x24
 8010ef6:	e003      	b.n	8010f00 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010ef8:	2001      	movs	r0, #1
 8010efa:	f000 fe8c 	bl	8011c16 <xQueueCreateMutex>
 8010efe:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00c      	beq.n	8010f20 <osMutexNew+0x110>
        if (attr != NULL) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <osMutexNew+0x104>
          name = attr->name;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	617b      	str	r3, [r7, #20]
 8010f12:	e001      	b.n	8010f18 <osMutexNew+0x108>
        } else {
          name = NULL;
 8010f14:	2300      	movs	r3, #0
 8010f16:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010f18:	6979      	ldr	r1, [r7, #20]
 8010f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f1c:	f001 fdb8 	bl	8012a90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d006      	beq.n	8010f34 <osMutexNew+0x124>
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d003      	beq.n	8010f34 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2e:	f043 0301 	orr.w	r3, r3, #1
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3728      	adds	r7, #40	; 0x28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	20000260 	.word	0x20000260

08010f44 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b088      	sub	sp, #32
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f023 0301 	bic.w	r3, r3, #1
 8010f54:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f62:	f3ef 8305 	mrs	r3, IPSR
 8010f66:	613b      	str	r3, [r7, #16]
  return(result);
 8010f68:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d10f      	bne.n	8010f8e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8010f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d105      	bne.n	8010f86 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8010f7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d007      	beq.n	8010f96 <osMutexAcquire+0x52>
 8010f86:	4b1d      	ldr	r3, [pc, #116]	; (8010ffc <osMutexAcquire+0xb8>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	d103      	bne.n	8010f96 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010f8e:	f06f 0305 	mvn.w	r3, #5
 8010f92:	61fb      	str	r3, [r7, #28]
 8010f94:	e02c      	b.n	8010ff0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d103      	bne.n	8010fa4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010f9c:	f06f 0303 	mvn.w	r3, #3
 8010fa0:	61fb      	str	r3, [r7, #28]
 8010fa2:	e025      	b.n	8010ff0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d011      	beq.n	8010fce <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	69b8      	ldr	r0, [r7, #24]
 8010fae:	f000 fe9a 	bl	8011ce6 <xQueueTakeMutexRecursive>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d01b      	beq.n	8010ff0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010fbe:	f06f 0301 	mvn.w	r3, #1
 8010fc2:	61fb      	str	r3, [r7, #28]
 8010fc4:	e014      	b.n	8010ff0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010fc6:	f06f 0302 	mvn.w	r3, #2
 8010fca:	61fb      	str	r3, [r7, #28]
 8010fcc:	e010      	b.n	8010ff0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010fce:	6839      	ldr	r1, [r7, #0]
 8010fd0:	69b8      	ldr	r0, [r7, #24]
 8010fd2:	f001 fa3f 	bl	8012454 <xQueueSemaphoreTake>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d009      	beq.n	8010ff0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d003      	beq.n	8010fea <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010fe2:	f06f 0301 	mvn.w	r3, #1
 8010fe6:	61fb      	str	r3, [r7, #28]
 8010fe8:	e002      	b.n	8010ff0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010fea:	f06f 0302 	mvn.w	r3, #2
 8010fee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010ff0:	69fb      	ldr	r3, [r7, #28]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3720      	adds	r7, #32
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20000260 	.word	0x20000260

08011000 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011000:	b580      	push	{r7, lr}
 8011002:	b088      	sub	sp, #32
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f023 0301 	bic.w	r3, r3, #1
 801100e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f003 0301 	and.w	r3, r3, #1
 8011016:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8011018:	2300      	movs	r3, #0
 801101a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801101c:	f3ef 8305 	mrs	r3, IPSR
 8011020:	613b      	str	r3, [r7, #16]
  return(result);
 8011022:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8011024:	2b00      	cmp	r3, #0
 8011026:	d10f      	bne.n	8011048 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011028:	f3ef 8310 	mrs	r3, PRIMASK
 801102c:	60fb      	str	r3, [r7, #12]
  return(result);
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d105      	bne.n	8011040 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011034:	f3ef 8311 	mrs	r3, BASEPRI
 8011038:	60bb      	str	r3, [r7, #8]
  return(result);
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d007      	beq.n	8011050 <osMutexRelease+0x50>
 8011040:	4b16      	ldr	r3, [pc, #88]	; (801109c <osMutexRelease+0x9c>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b02      	cmp	r3, #2
 8011046:	d103      	bne.n	8011050 <osMutexRelease+0x50>
    stat = osErrorISR;
 8011048:	f06f 0305 	mvn.w	r3, #5
 801104c:	61fb      	str	r3, [r7, #28]
 801104e:	e01f      	b.n	8011090 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8011050:	69bb      	ldr	r3, [r7, #24]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d103      	bne.n	801105e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8011056:	f06f 0303 	mvn.w	r3, #3
 801105a:	61fb      	str	r3, [r7, #28]
 801105c:	e018      	b.n	8011090 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d009      	beq.n	8011078 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011064:	69b8      	ldr	r0, [r7, #24]
 8011066:	f000 fe09 	bl	8011c7c <xQueueGiveMutexRecursive>
 801106a:	4603      	mov	r3, r0
 801106c:	2b01      	cmp	r3, #1
 801106e:	d00f      	beq.n	8011090 <osMutexRelease+0x90>
        stat = osErrorResource;
 8011070:	f06f 0302 	mvn.w	r3, #2
 8011074:	61fb      	str	r3, [r7, #28]
 8011076:	e00b      	b.n	8011090 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011078:	2300      	movs	r3, #0
 801107a:	2200      	movs	r2, #0
 801107c:	2100      	movs	r1, #0
 801107e:	69b8      	ldr	r0, [r7, #24]
 8011080:	f000 fed6 	bl	8011e30 <xQueueGenericSend>
 8011084:	4603      	mov	r3, r0
 8011086:	2b01      	cmp	r3, #1
 8011088:	d002      	beq.n	8011090 <osMutexRelease+0x90>
        stat = osErrorResource;
 801108a:	f06f 0302 	mvn.w	r3, #2
 801108e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8011090:	69fb      	ldr	r3, [r7, #28]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3720      	adds	r7, #32
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	20000260 	.word	0x20000260

080110a0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b08c      	sub	sp, #48	; 0x30
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80110ac:	2300      	movs	r3, #0
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110b0:	f3ef 8305 	mrs	r3, IPSR
 80110b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80110b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f040 8087 	bne.w	80111cc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110be:	f3ef 8310 	mrs	r3, PRIMASK
 80110c2:	617b      	str	r3, [r7, #20]
  return(result);
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d105      	bne.n	80110d6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80110ca:	f3ef 8311 	mrs	r3, BASEPRI
 80110ce:	613b      	str	r3, [r7, #16]
  return(result);
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d003      	beq.n	80110de <osSemaphoreNew+0x3e>
 80110d6:	4b40      	ldr	r3, [pc, #256]	; (80111d8 <osSemaphoreNew+0x138>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d076      	beq.n	80111cc <osSemaphoreNew+0x12c>
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d073      	beq.n	80111cc <osSemaphoreNew+0x12c>
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d86f      	bhi.n	80111cc <osSemaphoreNew+0x12c>
    mem = -1;
 80110ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d015      	beq.n	8011124 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d006      	beq.n	801110e <osSemaphoreNew+0x6e>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	2b4f      	cmp	r3, #79	; 0x4f
 8011106:	d902      	bls.n	801110e <osSemaphoreNew+0x6e>
        mem = 1;
 8011108:	2301      	movs	r3, #1
 801110a:	623b      	str	r3, [r7, #32]
 801110c:	e00c      	b.n	8011128 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d108      	bne.n	8011128 <osSemaphoreNew+0x88>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d104      	bne.n	8011128 <osSemaphoreNew+0x88>
          mem = 0;
 801111e:	2300      	movs	r3, #0
 8011120:	623b      	str	r3, [r7, #32]
 8011122:	e001      	b.n	8011128 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011124:	2300      	movs	r3, #0
 8011126:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801112e:	d04d      	beq.n	80111cc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d129      	bne.n	801118a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8011136:	6a3b      	ldr	r3, [r7, #32]
 8011138:	2b01      	cmp	r3, #1
 801113a:	d10b      	bne.n	8011154 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	689a      	ldr	r2, [r3, #8]
 8011140:	2303      	movs	r3, #3
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	4613      	mov	r3, r2
 8011146:	2200      	movs	r2, #0
 8011148:	2100      	movs	r1, #0
 801114a:	2001      	movs	r0, #1
 801114c:	f000 fc68 	bl	8011a20 <xQueueGenericCreateStatic>
 8011150:	6278      	str	r0, [r7, #36]	; 0x24
 8011152:	e005      	b.n	8011160 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011154:	2203      	movs	r2, #3
 8011156:	2100      	movs	r1, #0
 8011158:	2001      	movs	r0, #1
 801115a:	f000 fcde 	bl	8011b1a <xQueueGenericCreate>
 801115e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011162:	2b00      	cmp	r3, #0
 8011164:	d022      	beq.n	80111ac <osSemaphoreNew+0x10c>
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d01f      	beq.n	80111ac <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801116c:	2300      	movs	r3, #0
 801116e:	2200      	movs	r2, #0
 8011170:	2100      	movs	r1, #0
 8011172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011174:	f000 fe5c 	bl	8011e30 <xQueueGenericSend>
 8011178:	4603      	mov	r3, r0
 801117a:	2b01      	cmp	r3, #1
 801117c:	d016      	beq.n	80111ac <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801117e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011180:	f001 fb39 	bl	80127f6 <vQueueDelete>
            hSemaphore = NULL;
 8011184:	2300      	movs	r3, #0
 8011186:	627b      	str	r3, [r7, #36]	; 0x24
 8011188:	e010      	b.n	80111ac <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801118a:	6a3b      	ldr	r3, [r7, #32]
 801118c:	2b01      	cmp	r3, #1
 801118e:	d108      	bne.n	80111a2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	461a      	mov	r2, r3
 8011196:	68b9      	ldr	r1, [r7, #8]
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f000 fddb 	bl	8011d54 <xQueueCreateCountingSemaphoreStatic>
 801119e:	6278      	str	r0, [r7, #36]	; 0x24
 80111a0:	e004      	b.n	80111ac <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80111a2:	68b9      	ldr	r1, [r7, #8]
 80111a4:	68f8      	ldr	r0, [r7, #12]
 80111a6:	f000 fe0e 	bl	8011dc6 <xQueueCreateCountingSemaphore>
 80111aa:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00c      	beq.n	80111cc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d003      	beq.n	80111c0 <osSemaphoreNew+0x120>
          name = attr->name;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	61fb      	str	r3, [r7, #28]
 80111be:	e001      	b.n	80111c4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80111c4:	69f9      	ldr	r1, [r7, #28]
 80111c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111c8:	f001 fc62 	bl	8012a90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80111cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3728      	adds	r7, #40	; 0x28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	20000260 	.word	0x20000260

080111dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80111dc:	b580      	push	{r7, lr}
 80111de:	b088      	sub	sp, #32
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80111ea:	2300      	movs	r3, #0
 80111ec:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d103      	bne.n	80111fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80111f4:	f06f 0303 	mvn.w	r3, #3
 80111f8:	61fb      	str	r3, [r7, #28]
 80111fa:	e04b      	b.n	8011294 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111fc:	f3ef 8305 	mrs	r3, IPSR
 8011200:	617b      	str	r3, [r7, #20]
  return(result);
 8011202:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10f      	bne.n	8011228 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011208:	f3ef 8310 	mrs	r3, PRIMASK
 801120c:	613b      	str	r3, [r7, #16]
  return(result);
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d105      	bne.n	8011220 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011214:	f3ef 8311 	mrs	r3, BASEPRI
 8011218:	60fb      	str	r3, [r7, #12]
  return(result);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d026      	beq.n	801126e <osSemaphoreAcquire+0x92>
 8011220:	4b1f      	ldr	r3, [pc, #124]	; (80112a0 <osSemaphoreAcquire+0xc4>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b02      	cmp	r3, #2
 8011226:	d122      	bne.n	801126e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d003      	beq.n	8011236 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801122e:	f06f 0303 	mvn.w	r3, #3
 8011232:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011234:	e02d      	b.n	8011292 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011236:	2300      	movs	r3, #0
 8011238:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801123a:	f107 0308 	add.w	r3, r7, #8
 801123e:	461a      	mov	r2, r3
 8011240:	2100      	movs	r1, #0
 8011242:	69b8      	ldr	r0, [r7, #24]
 8011244:	f001 fa16 	bl	8012674 <xQueueReceiveFromISR>
 8011248:	4603      	mov	r3, r0
 801124a:	2b01      	cmp	r3, #1
 801124c:	d003      	beq.n	8011256 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801124e:	f06f 0302 	mvn.w	r3, #2
 8011252:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011254:	e01d      	b.n	8011292 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d01a      	beq.n	8011292 <osSemaphoreAcquire+0xb6>
 801125c:	4b11      	ldr	r3, [pc, #68]	; (80112a4 <osSemaphoreAcquire+0xc8>)
 801125e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011262:	601a      	str	r2, [r3, #0]
 8011264:	f3bf 8f4f 	dsb	sy
 8011268:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801126c:	e011      	b.n	8011292 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801126e:	6839      	ldr	r1, [r7, #0]
 8011270:	69b8      	ldr	r0, [r7, #24]
 8011272:	f001 f8ef 	bl	8012454 <xQueueSemaphoreTake>
 8011276:	4603      	mov	r3, r0
 8011278:	2b01      	cmp	r3, #1
 801127a:	d00b      	beq.n	8011294 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d003      	beq.n	801128a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011282:	f06f 0301 	mvn.w	r3, #1
 8011286:	61fb      	str	r3, [r7, #28]
 8011288:	e004      	b.n	8011294 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801128a:	f06f 0302 	mvn.w	r3, #2
 801128e:	61fb      	str	r3, [r7, #28]
 8011290:	e000      	b.n	8011294 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011292:	bf00      	nop
      }
    }
  }

  return (stat);
 8011294:	69fb      	ldr	r3, [r7, #28]
}
 8011296:	4618      	mov	r0, r3
 8011298:	3720      	adds	r7, #32
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	20000260 	.word	0x20000260
 80112a4:	e000ed04 	.word	0xe000ed04

080112a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b088      	sub	sp, #32
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80112b4:	2300      	movs	r3, #0
 80112b6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d103      	bne.n	80112c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80112be:	f06f 0303 	mvn.w	r3, #3
 80112c2:	61fb      	str	r3, [r7, #28]
 80112c4:	e03e      	b.n	8011344 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112c6:	f3ef 8305 	mrs	r3, IPSR
 80112ca:	617b      	str	r3, [r7, #20]
  return(result);
 80112cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d10f      	bne.n	80112f2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112d2:	f3ef 8310 	mrs	r3, PRIMASK
 80112d6:	613b      	str	r3, [r7, #16]
  return(result);
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d105      	bne.n	80112ea <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80112de:	f3ef 8311 	mrs	r3, BASEPRI
 80112e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d01e      	beq.n	8011328 <osSemaphoreRelease+0x80>
 80112ea:	4b19      	ldr	r3, [pc, #100]	; (8011350 <osSemaphoreRelease+0xa8>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	d11a      	bne.n	8011328 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80112f2:	2300      	movs	r3, #0
 80112f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80112f6:	f107 0308 	add.w	r3, r7, #8
 80112fa:	4619      	mov	r1, r3
 80112fc:	69b8      	ldr	r0, [r7, #24]
 80112fe:	f000 ff35 	bl	801216c <xQueueGiveFromISR>
 8011302:	4603      	mov	r3, r0
 8011304:	2b01      	cmp	r3, #1
 8011306:	d003      	beq.n	8011310 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011308:	f06f 0302 	mvn.w	r3, #2
 801130c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801130e:	e018      	b.n	8011342 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d015      	beq.n	8011342 <osSemaphoreRelease+0x9a>
 8011316:	4b0f      	ldr	r3, [pc, #60]	; (8011354 <osSemaphoreRelease+0xac>)
 8011318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801131c:	601a      	str	r2, [r3, #0]
 801131e:	f3bf 8f4f 	dsb	sy
 8011322:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011326:	e00c      	b.n	8011342 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011328:	2300      	movs	r3, #0
 801132a:	2200      	movs	r2, #0
 801132c:	2100      	movs	r1, #0
 801132e:	69b8      	ldr	r0, [r7, #24]
 8011330:	f000 fd7e 	bl	8011e30 <xQueueGenericSend>
 8011334:	4603      	mov	r3, r0
 8011336:	2b01      	cmp	r3, #1
 8011338:	d004      	beq.n	8011344 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801133a:	f06f 0302 	mvn.w	r3, #2
 801133e:	61fb      	str	r3, [r7, #28]
 8011340:	e000      	b.n	8011344 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011342:	bf00      	nop
    }
  }

  return (stat);
 8011344:	69fb      	ldr	r3, [r7, #28]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3720      	adds	r7, #32
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	20000260 	.word	0x20000260
 8011354:	e000ed04 	.word	0xe000ed04

08011358 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011358:	b580      	push	{r7, lr}
 801135a:	b088      	sub	sp, #32
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011364:	f3ef 8305 	mrs	r3, IPSR
 8011368:	617b      	str	r3, [r7, #20]
  return(result);
 801136a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10f      	bne.n	8011390 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011370:	f3ef 8310 	mrs	r3, PRIMASK
 8011374:	613b      	str	r3, [r7, #16]
  return(result);
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d105      	bne.n	8011388 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801137c:	f3ef 8311 	mrs	r3, BASEPRI
 8011380:	60fb      	str	r3, [r7, #12]
  return(result);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d007      	beq.n	8011398 <osSemaphoreDelete+0x40>
 8011388:	4b0d      	ldr	r3, [pc, #52]	; (80113c0 <osSemaphoreDelete+0x68>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b02      	cmp	r3, #2
 801138e:	d103      	bne.n	8011398 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8011390:	f06f 0305 	mvn.w	r3, #5
 8011394:	61fb      	str	r3, [r7, #28]
 8011396:	e00e      	b.n	80113b6 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d103      	bne.n	80113a6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801139e:	f06f 0303 	mvn.w	r3, #3
 80113a2:	61fb      	str	r3, [r7, #28]
 80113a4:	e007      	b.n	80113b6 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80113a6:	69b8      	ldr	r0, [r7, #24]
 80113a8:	f001 fb9a 	bl	8012ae0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80113ac:	2300      	movs	r3, #0
 80113ae:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80113b0:	69b8      	ldr	r0, [r7, #24]
 80113b2:	f001 fa20 	bl	80127f6 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80113b6:	69fb      	ldr	r3, [r7, #28]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3720      	adds	r7, #32
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	20000260 	.word	0x20000260

080113c4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08c      	sub	sp, #48	; 0x30
 80113c8:	af02      	add	r7, sp, #8
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80113d0:	2300      	movs	r3, #0
 80113d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113d4:	f3ef 8305 	mrs	r3, IPSR
 80113d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80113da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d170      	bne.n	80114c2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113e0:	f3ef 8310 	mrs	r3, PRIMASK
 80113e4:	617b      	str	r3, [r7, #20]
  return(result);
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d105      	bne.n	80113f8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80113ec:	f3ef 8311 	mrs	r3, BASEPRI
 80113f0:	613b      	str	r3, [r7, #16]
  return(result);
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d003      	beq.n	8011400 <osMessageQueueNew+0x3c>
 80113f8:	4b34      	ldr	r3, [pc, #208]	; (80114cc <osMessageQueueNew+0x108>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2b02      	cmp	r3, #2
 80113fe:	d060      	beq.n	80114c2 <osMessageQueueNew+0xfe>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d05d      	beq.n	80114c2 <osMessageQueueNew+0xfe>
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d05a      	beq.n	80114c2 <osMessageQueueNew+0xfe>
    mem = -1;
 801140c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011410:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d029      	beq.n	801146c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d012      	beq.n	8011446 <osMessageQueueNew+0x82>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	2b4f      	cmp	r3, #79	; 0x4f
 8011426:	d90e      	bls.n	8011446 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00a      	beq.n	8011446 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	695a      	ldr	r2, [r3, #20]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	68b9      	ldr	r1, [r7, #8]
 8011438:	fb01 f303 	mul.w	r3, r1, r3
 801143c:	429a      	cmp	r2, r3
 801143e:	d302      	bcc.n	8011446 <osMessageQueueNew+0x82>
        mem = 1;
 8011440:	2301      	movs	r3, #1
 8011442:	623b      	str	r3, [r7, #32]
 8011444:	e014      	b.n	8011470 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	689b      	ldr	r3, [r3, #8]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d110      	bne.n	8011470 <osMessageQueueNew+0xac>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10c      	bne.n	8011470 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801145a:	2b00      	cmp	r3, #0
 801145c:	d108      	bne.n	8011470 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d104      	bne.n	8011470 <osMessageQueueNew+0xac>
          mem = 0;
 8011466:	2300      	movs	r3, #0
 8011468:	623b      	str	r3, [r7, #32]
 801146a:	e001      	b.n	8011470 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801146c:	2300      	movs	r3, #0
 801146e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011470:	6a3b      	ldr	r3, [r7, #32]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d10c      	bne.n	8011490 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	691a      	ldr	r2, [r3, #16]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6899      	ldr	r1, [r3, #8]
 801147e:	2300      	movs	r3, #0
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	460b      	mov	r3, r1
 8011484:	68b9      	ldr	r1, [r7, #8]
 8011486:	68f8      	ldr	r0, [r7, #12]
 8011488:	f000 faca 	bl	8011a20 <xQueueGenericCreateStatic>
 801148c:	6278      	str	r0, [r7, #36]	; 0x24
 801148e:	e008      	b.n	80114a2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8011490:	6a3b      	ldr	r3, [r7, #32]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d105      	bne.n	80114a2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011496:	2200      	movs	r2, #0
 8011498:	68b9      	ldr	r1, [r7, #8]
 801149a:	68f8      	ldr	r0, [r7, #12]
 801149c:	f000 fb3d 	bl	8011b1a <xQueueGenericCreate>
 80114a0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00c      	beq.n	80114c2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d003      	beq.n	80114b6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	61fb      	str	r3, [r7, #28]
 80114b4:	e001      	b.n	80114ba <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80114b6:	2300      	movs	r3, #0
 80114b8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80114ba:	69f9      	ldr	r1, [r7, #28]
 80114bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114be:	f001 fae7 	bl	8012a90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80114c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3728      	adds	r7, #40	; 0x28
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	20000260 	.word	0x20000260

080114d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b08a      	sub	sp, #40	; 0x28
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	603b      	str	r3, [r7, #0]
 80114dc:	4613      	mov	r3, r2
 80114de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114e8:	f3ef 8305 	mrs	r3, IPSR
 80114ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80114ee:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d10f      	bne.n	8011514 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114f4:	f3ef 8310 	mrs	r3, PRIMASK
 80114f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d105      	bne.n	801150c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011500:	f3ef 8311 	mrs	r3, BASEPRI
 8011504:	617b      	str	r3, [r7, #20]
  return(result);
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d02c      	beq.n	8011566 <osMessageQueuePut+0x96>
 801150c:	4b28      	ldr	r3, [pc, #160]	; (80115b0 <osMessageQueuePut+0xe0>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b02      	cmp	r3, #2
 8011512:	d128      	bne.n	8011566 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011514:	6a3b      	ldr	r3, [r7, #32]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d005      	beq.n	8011526 <osMessageQueuePut+0x56>
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d002      	beq.n	8011526 <osMessageQueuePut+0x56>
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d003      	beq.n	801152e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8011526:	f06f 0303 	mvn.w	r3, #3
 801152a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801152c:	e039      	b.n	80115a2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801152e:	2300      	movs	r3, #0
 8011530:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011532:	f107 0210 	add.w	r2, r7, #16
 8011536:	2300      	movs	r3, #0
 8011538:	68b9      	ldr	r1, [r7, #8]
 801153a:	6a38      	ldr	r0, [r7, #32]
 801153c:	f000 fd7a 	bl	8012034 <xQueueGenericSendFromISR>
 8011540:	4603      	mov	r3, r0
 8011542:	2b01      	cmp	r3, #1
 8011544:	d003      	beq.n	801154e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8011546:	f06f 0302 	mvn.w	r3, #2
 801154a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801154c:	e029      	b.n	80115a2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d026      	beq.n	80115a2 <osMessageQueuePut+0xd2>
 8011554:	4b17      	ldr	r3, [pc, #92]	; (80115b4 <osMessageQueuePut+0xe4>)
 8011556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801155a:	601a      	str	r2, [r3, #0]
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011564:	e01d      	b.n	80115a2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011566:	6a3b      	ldr	r3, [r7, #32]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d002      	beq.n	8011572 <osMessageQueuePut+0xa2>
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d103      	bne.n	801157a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8011572:	f06f 0303 	mvn.w	r3, #3
 8011576:	627b      	str	r3, [r7, #36]	; 0x24
 8011578:	e014      	b.n	80115a4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801157a:	2300      	movs	r3, #0
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	68b9      	ldr	r1, [r7, #8]
 8011580:	6a38      	ldr	r0, [r7, #32]
 8011582:	f000 fc55 	bl	8011e30 <xQueueGenericSend>
 8011586:	4603      	mov	r3, r0
 8011588:	2b01      	cmp	r3, #1
 801158a:	d00b      	beq.n	80115a4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d003      	beq.n	801159a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8011592:	f06f 0301 	mvn.w	r3, #1
 8011596:	627b      	str	r3, [r7, #36]	; 0x24
 8011598:	e004      	b.n	80115a4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801159a:	f06f 0302 	mvn.w	r3, #2
 801159e:	627b      	str	r3, [r7, #36]	; 0x24
 80115a0:	e000      	b.n	80115a4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115a2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3728      	adds	r7, #40	; 0x28
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	20000260 	.word	0x20000260
 80115b4:	e000ed04 	.word	0xe000ed04

080115b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08a      	sub	sp, #40	; 0x28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	607a      	str	r2, [r7, #4]
 80115c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80115ca:	2300      	movs	r3, #0
 80115cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115ce:	f3ef 8305 	mrs	r3, IPSR
 80115d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80115d4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10f      	bne.n	80115fa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115da:	f3ef 8310 	mrs	r3, PRIMASK
 80115de:	61bb      	str	r3, [r7, #24]
  return(result);
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d105      	bne.n	80115f2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80115e6:	f3ef 8311 	mrs	r3, BASEPRI
 80115ea:	617b      	str	r3, [r7, #20]
  return(result);
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d02c      	beq.n	801164c <osMessageQueueGet+0x94>
 80115f2:	4b28      	ldr	r3, [pc, #160]	; (8011694 <osMessageQueueGet+0xdc>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d128      	bne.n	801164c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115fa:	6a3b      	ldr	r3, [r7, #32]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d005      	beq.n	801160c <osMessageQueueGet+0x54>
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d002      	beq.n	801160c <osMessageQueueGet+0x54>
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d003      	beq.n	8011614 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801160c:	f06f 0303 	mvn.w	r3, #3
 8011610:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011612:	e038      	b.n	8011686 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8011614:	2300      	movs	r3, #0
 8011616:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011618:	f107 0310 	add.w	r3, r7, #16
 801161c:	461a      	mov	r2, r3
 801161e:	68b9      	ldr	r1, [r7, #8]
 8011620:	6a38      	ldr	r0, [r7, #32]
 8011622:	f001 f827 	bl	8012674 <xQueueReceiveFromISR>
 8011626:	4603      	mov	r3, r0
 8011628:	2b01      	cmp	r3, #1
 801162a:	d003      	beq.n	8011634 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801162c:	f06f 0302 	mvn.w	r3, #2
 8011630:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011632:	e028      	b.n	8011686 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d025      	beq.n	8011686 <osMessageQueueGet+0xce>
 801163a:	4b17      	ldr	r3, [pc, #92]	; (8011698 <osMessageQueueGet+0xe0>)
 801163c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011640:	601a      	str	r2, [r3, #0]
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801164a:	e01c      	b.n	8011686 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d002      	beq.n	8011658 <osMessageQueueGet+0xa0>
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d103      	bne.n	8011660 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011658:	f06f 0303 	mvn.w	r3, #3
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
 801165e:	e013      	b.n	8011688 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011660:	683a      	ldr	r2, [r7, #0]
 8011662:	68b9      	ldr	r1, [r7, #8]
 8011664:	6a38      	ldr	r0, [r7, #32]
 8011666:	f000 fe13 	bl	8012290 <xQueueReceive>
 801166a:	4603      	mov	r3, r0
 801166c:	2b01      	cmp	r3, #1
 801166e:	d00b      	beq.n	8011688 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d003      	beq.n	801167e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8011676:	f06f 0301 	mvn.w	r3, #1
 801167a:	627b      	str	r3, [r7, #36]	; 0x24
 801167c:	e004      	b.n	8011688 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801167e:	f06f 0302 	mvn.w	r3, #2
 8011682:	627b      	str	r3, [r7, #36]	; 0x24
 8011684:	e000      	b.n	8011688 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011686:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801168a:	4618      	mov	r0, r3
 801168c:	3728      	adds	r7, #40	; 0x28
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	20000260 	.word	0x20000260
 8011698:	e000ed04 	.word	0xe000ed04

0801169c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 801169c:	b580      	push	{r7, lr}
 801169e:	b088      	sub	sp, #32
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d102      	bne.n	80116b4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80116ae:	2300      	movs	r3, #0
 80116b0:	61fb      	str	r3, [r7, #28]
 80116b2:	e01e      	b.n	80116f2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116b4:	f3ef 8305 	mrs	r3, IPSR
 80116b8:	617b      	str	r3, [r7, #20]
  return(result);
 80116ba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d10f      	bne.n	80116e0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116c0:	f3ef 8310 	mrs	r3, PRIMASK
 80116c4:	613b      	str	r3, [r7, #16]
  return(result);
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d105      	bne.n	80116d8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80116cc:	f3ef 8311 	mrs	r3, BASEPRI
 80116d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d008      	beq.n	80116ea <osMessageQueueGetCount+0x4e>
 80116d8:	4b08      	ldr	r3, [pc, #32]	; (80116fc <osMessageQueueGetCount+0x60>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b02      	cmp	r3, #2
 80116de:	d104      	bne.n	80116ea <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80116e0:	69b8      	ldr	r0, [r7, #24]
 80116e2:	f001 f869 	bl	80127b8 <uxQueueMessagesWaitingFromISR>
 80116e6:	61f8      	str	r0, [r7, #28]
 80116e8:	e003      	b.n	80116f2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80116ea:	69b8      	ldr	r0, [r7, #24]
 80116ec:	f001 f845 	bl	801277a <uxQueueMessagesWaiting>
 80116f0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80116f2:	69fb      	ldr	r3, [r7, #28]
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3720      	adds	r7, #32
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	20000260 	.word	0x20000260

08011700 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8011700:	b580      	push	{r7, lr}
 8011702:	b088      	sub	sp, #32
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801170c:	f3ef 8305 	mrs	r3, IPSR
 8011710:	617b      	str	r3, [r7, #20]
  return(result);
 8011712:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011714:	2b00      	cmp	r3, #0
 8011716:	d10f      	bne.n	8011738 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011718:	f3ef 8310 	mrs	r3, PRIMASK
 801171c:	613b      	str	r3, [r7, #16]
  return(result);
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d105      	bne.n	8011730 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011724:	f3ef 8311 	mrs	r3, BASEPRI
 8011728:	60fb      	str	r3, [r7, #12]
  return(result);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d007      	beq.n	8011740 <osMessageQueueDelete+0x40>
 8011730:	4b0d      	ldr	r3, [pc, #52]	; (8011768 <osMessageQueueDelete+0x68>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b02      	cmp	r3, #2
 8011736:	d103      	bne.n	8011740 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8011738:	f06f 0305 	mvn.w	r3, #5
 801173c:	61fb      	str	r3, [r7, #28]
 801173e:	e00e      	b.n	801175e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d103      	bne.n	801174e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8011746:	f06f 0303 	mvn.w	r3, #3
 801174a:	61fb      	str	r3, [r7, #28]
 801174c:	e007      	b.n	801175e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 801174e:	69b8      	ldr	r0, [r7, #24]
 8011750:	f001 f9c6 	bl	8012ae0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011754:	2300      	movs	r3, #0
 8011756:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8011758:	69b8      	ldr	r0, [r7, #24]
 801175a:	f001 f84c 	bl	80127f6 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801175e:	69fb      	ldr	r3, [r7, #28]
}
 8011760:	4618      	mov	r0, r3
 8011762:	3720      	adds	r7, #32
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	20000260 	.word	0x20000260

0801176c <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 801176c:	b480      	push	{r7}
 801176e:	af00      	add	r7, sp, #0
 8011770:	bf00      	nop
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
	...

0801177c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	4a07      	ldr	r2, [pc, #28]	; (80117a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801178c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	4a06      	ldr	r2, [pc, #24]	; (80117ac <vApplicationGetIdleTaskMemory+0x30>)
 8011792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2280      	movs	r2, #128	; 0x80
 8011798:	601a      	str	r2, [r3, #0]
}
 801179a:	bf00      	nop
 801179c:	3714      	adds	r7, #20
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	20000264 	.word	0x20000264
 80117ac:	200002c4 	.word	0x200002c4

080117b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	4a07      	ldr	r2, [pc, #28]	; (80117dc <vApplicationGetTimerTaskMemory+0x2c>)
 80117c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	4a06      	ldr	r2, [pc, #24]	; (80117e0 <vApplicationGetTimerTaskMemory+0x30>)
 80117c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117ce:	601a      	str	r2, [r3, #0]
}
 80117d0:	bf00      	nop
 80117d2:	3714      	adds	r7, #20
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	200004c4 	.word	0x200004c4
 80117e0:	20000524 	.word	0x20000524

080117e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f103 0208 	add.w	r2, r3, #8
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f103 0208 	add.w	r2, r3, #8
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f103 0208 	add.w	r2, r3, #8
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011818:	bf00      	nop
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr

08011824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011832:	bf00      	nop
 8011834:	370c      	adds	r7, #12
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr

0801183e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801183e:	b480      	push	{r7}
 8011840:	b085      	sub	sp, #20
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	689a      	ldr	r2, [r3, #8]
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	689b      	ldr	r3, [r3, #8]
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	601a      	str	r2, [r3, #0]
}
 801187a:	bf00      	nop
 801187c:	3714      	adds	r7, #20
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011886:	b480      	push	{r7}
 8011888:	b085      	sub	sp, #20
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
 801188e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801189c:	d103      	bne.n	80118a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	60fb      	str	r3, [r7, #12]
 80118a4:	e00c      	b.n	80118c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	3308      	adds	r3, #8
 80118aa:	60fb      	str	r3, [r7, #12]
 80118ac:	e002      	b.n	80118b4 <vListInsert+0x2e>
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	68ba      	ldr	r2, [r7, #8]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d2f6      	bcs.n	80118ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	685a      	ldr	r2, [r3, #4]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	683a      	ldr	r2, [r7, #0]
 80118ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	68fa      	ldr	r2, [r7, #12]
 80118d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	683a      	ldr	r2, [r7, #0]
 80118da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	601a      	str	r2, [r3, #0]
}
 80118ec:	bf00      	nop
 80118ee:	3714      	adds	r7, #20
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr

080118f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	691b      	ldr	r3, [r3, #16]
 8011904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	6892      	ldr	r2, [r2, #8]
 801190e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	6852      	ldr	r2, [r2, #4]
 8011918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	429a      	cmp	r2, r3
 8011922:	d103      	bne.n	801192c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	689a      	ldr	r2, [r3, #8]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	1e5a      	subs	r2, r3, #1
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
}
 8011940:	4618      	mov	r0, r3
 8011942:	3714      	adds	r7, #20
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr

0801194c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d10b      	bne.n	8011978 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011964:	b672      	cpsid	i
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	b662      	cpsie	i
 8011974:	60bb      	str	r3, [r7, #8]
 8011976:	e7fe      	b.n	8011976 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8011978:	f002 fea6 	bl	80146c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011984:	68f9      	ldr	r1, [r7, #12]
 8011986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011988:	fb01 f303 	mul.w	r3, r1, r3
 801198c:	441a      	add	r2, r3
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2200      	movs	r2, #0
 8011996:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681a      	ldr	r2, [r3, #0]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119a8:	3b01      	subs	r3, #1
 80119aa:	68f9      	ldr	r1, [r7, #12]
 80119ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119ae:	fb01 f303 	mul.w	r3, r1, r3
 80119b2:	441a      	add	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	22ff      	movs	r2, #255	; 0xff
 80119bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	22ff      	movs	r2, #255	; 0xff
 80119c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d114      	bne.n	80119f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	691b      	ldr	r3, [r3, #16]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d01a      	beq.n	8011a0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	3310      	adds	r3, #16
 80119da:	4618      	mov	r0, r3
 80119dc:	f001 fe66 	bl	80136ac <xTaskRemoveFromEventList>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d012      	beq.n	8011a0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80119e6:	4b0d      	ldr	r3, [pc, #52]	; (8011a1c <xQueueGenericReset+0xd0>)
 80119e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ec:	601a      	str	r2, [r3, #0]
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	f3bf 8f6f 	isb	sy
 80119f6:	e009      	b.n	8011a0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	3310      	adds	r3, #16
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7ff fef1 	bl	80117e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	3324      	adds	r3, #36	; 0x24
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7ff feec 	bl	80117e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a0c:	f002 fe8e 	bl	801472c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a10:	2301      	movs	r3, #1
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	e000ed04 	.word	0xe000ed04

08011a20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08e      	sub	sp, #56	; 0x38
 8011a24:	af02      	add	r7, sp, #8
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d10b      	bne.n	8011a4c <xQueueGenericCreateStatic+0x2c>
 8011a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a38:	b672      	cpsid	i
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	b662      	cpsie	i
 8011a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a4a:	e7fe      	b.n	8011a4a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d10b      	bne.n	8011a6a <xQueueGenericCreateStatic+0x4a>
 8011a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a56:	b672      	cpsid	i
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	b662      	cpsie	i
 8011a66:	627b      	str	r3, [r7, #36]	; 0x24
 8011a68:	e7fe      	b.n	8011a68 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d002      	beq.n	8011a76 <xQueueGenericCreateStatic+0x56>
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d001      	beq.n	8011a7a <xQueueGenericCreateStatic+0x5a>
 8011a76:	2301      	movs	r3, #1
 8011a78:	e000      	b.n	8011a7c <xQueueGenericCreateStatic+0x5c>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d10b      	bne.n	8011a98 <xQueueGenericCreateStatic+0x78>
 8011a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a84:	b672      	cpsid	i
 8011a86:	f383 8811 	msr	BASEPRI, r3
 8011a8a:	f3bf 8f6f 	isb	sy
 8011a8e:	f3bf 8f4f 	dsb	sy
 8011a92:	b662      	cpsie	i
 8011a94:	623b      	str	r3, [r7, #32]
 8011a96:	e7fe      	b.n	8011a96 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d102      	bne.n	8011aa4 <xQueueGenericCreateStatic+0x84>
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <xQueueGenericCreateStatic+0x88>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e000      	b.n	8011aaa <xQueueGenericCreateStatic+0x8a>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d10b      	bne.n	8011ac6 <xQueueGenericCreateStatic+0xa6>
 8011aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab2:	b672      	cpsid	i
 8011ab4:	f383 8811 	msr	BASEPRI, r3
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	b662      	cpsie	i
 8011ac2:	61fb      	str	r3, [r7, #28]
 8011ac4:	e7fe      	b.n	8011ac4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011ac6:	2350      	movs	r3, #80	; 0x50
 8011ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	2b50      	cmp	r3, #80	; 0x50
 8011ace:	d00b      	beq.n	8011ae8 <xQueueGenericCreateStatic+0xc8>
 8011ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad4:	b672      	cpsid	i
 8011ad6:	f383 8811 	msr	BASEPRI, r3
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	f3bf 8f4f 	dsb	sy
 8011ae2:	b662      	cpsie	i
 8011ae4:	61bb      	str	r3, [r7, #24]
 8011ae6:	e7fe      	b.n	8011ae6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011ae8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d00d      	beq.n	8011b10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af6:	2201      	movs	r2, #1
 8011af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011afc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	4613      	mov	r3, r2
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	68b9      	ldr	r1, [r7, #8]
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f000 f846 	bl	8011b9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3730      	adds	r7, #48	; 0x30
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b08a      	sub	sp, #40	; 0x28
 8011b1e:	af02      	add	r7, sp, #8
 8011b20:	60f8      	str	r0, [r7, #12]
 8011b22:	60b9      	str	r1, [r7, #8]
 8011b24:	4613      	mov	r3, r2
 8011b26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10b      	bne.n	8011b46 <xQueueGenericCreate+0x2c>
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	b672      	cpsid	i
 8011b34:	f383 8811 	msr	BASEPRI, r3
 8011b38:	f3bf 8f6f 	isb	sy
 8011b3c:	f3bf 8f4f 	dsb	sy
 8011b40:	b662      	cpsie	i
 8011b42:	613b      	str	r3, [r7, #16]
 8011b44:	e7fe      	b.n	8011b44 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d102      	bne.n	8011b52 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	61fb      	str	r3, [r7, #28]
 8011b50:	e004      	b.n	8011b5c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	68ba      	ldr	r2, [r7, #8]
 8011b56:	fb02 f303 	mul.w	r3, r2, r3
 8011b5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	3350      	adds	r3, #80	; 0x50
 8011b60:	4618      	mov	r0, r3
 8011b62:	f002 fed3 	bl	801490c <pvPortMalloc>
 8011b66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d011      	beq.n	8011b92 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	3350      	adds	r3, #80	; 0x50
 8011b76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b80:	79fa      	ldrb	r2, [r7, #7]
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	4613      	mov	r3, r2
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	68b9      	ldr	r1, [r7, #8]
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f000 f805 	bl	8011b9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b92:	69bb      	ldr	r3, [r7, #24]
	}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3720      	adds	r7, #32
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
 8011ba8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d103      	bne.n	8011bb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	69ba      	ldr	r2, [r7, #24]
 8011bb4:	601a      	str	r2, [r3, #0]
 8011bb6:	e002      	b.n	8011bbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	68ba      	ldr	r2, [r7, #8]
 8011bc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011bca:	2101      	movs	r1, #1
 8011bcc:	69b8      	ldr	r0, [r7, #24]
 8011bce:	f7ff febd 	bl	801194c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	78fa      	ldrb	r2, [r7, #3]
 8011bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011bda:	bf00      	nop
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b082      	sub	sp, #8
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00e      	beq.n	8011c0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011c02:	2300      	movs	r3, #0
 8011c04:	2200      	movs	r2, #0
 8011c06:	2100      	movs	r1, #0
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f000 f911 	bl	8011e30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b086      	sub	sp, #24
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011c20:	2301      	movs	r3, #1
 8011c22:	617b      	str	r3, [r7, #20]
 8011c24:	2300      	movs	r3, #0
 8011c26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011c28:	79fb      	ldrb	r3, [r7, #7]
 8011c2a:	461a      	mov	r2, r3
 8011c2c:	6939      	ldr	r1, [r7, #16]
 8011c2e:	6978      	ldr	r0, [r7, #20]
 8011c30:	f7ff ff73 	bl	8011b1a <xQueueGenericCreate>
 8011c34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f7ff ffd3 	bl	8011be2 <prvInitialiseMutex>

		return xNewQueue;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
	}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3718      	adds	r7, #24
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b088      	sub	sp, #32
 8011c4a:	af02      	add	r7, sp, #8
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	6039      	str	r1, [r7, #0]
 8011c50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011c52:	2301      	movs	r3, #1
 8011c54:	617b      	str	r3, [r7, #20]
 8011c56:	2300      	movs	r3, #0
 8011c58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011c5a:	79fb      	ldrb	r3, [r7, #7]
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	2200      	movs	r2, #0
 8011c62:	6939      	ldr	r1, [r7, #16]
 8011c64:	6978      	ldr	r0, [r7, #20]
 8011c66:	f7ff fedb 	bl	8011a20 <xQueueGenericCreateStatic>
 8011c6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7ff ffb8 	bl	8011be2 <prvInitialiseMutex>

		return xNewQueue;
 8011c72:	68fb      	ldr	r3, [r7, #12]
	}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3718      	adds	r7, #24
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011c7c:	b590      	push	{r4, r7, lr}
 8011c7e:	b087      	sub	sp, #28
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10b      	bne.n	8011ca6 <xQueueGiveMutexRecursive+0x2a>
 8011c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c92:	b672      	cpsid	i
 8011c94:	f383 8811 	msr	BASEPRI, r3
 8011c98:	f3bf 8f6f 	isb	sy
 8011c9c:	f3bf 8f4f 	dsb	sy
 8011ca0:	b662      	cpsie	i
 8011ca2:	60fb      	str	r3, [r7, #12]
 8011ca4:	e7fe      	b.n	8011ca4 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	689c      	ldr	r4, [r3, #8]
 8011caa:	f001 febf 	bl	8013a2c <xTaskGetCurrentTaskHandle>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	429c      	cmp	r4, r3
 8011cb2:	d111      	bne.n	8011cd8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	1e5a      	subs	r2, r3, #1
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d105      	bne.n	8011cd2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	2200      	movs	r2, #0
 8011cca:	2100      	movs	r1, #0
 8011ccc:	6938      	ldr	r0, [r7, #16]
 8011cce:	f000 f8af 	bl	8011e30 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	617b      	str	r3, [r7, #20]
 8011cd6:	e001      	b.n	8011cdc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011cdc:	697b      	ldr	r3, [r7, #20]
	}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	371c      	adds	r7, #28
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd90      	pop	{r4, r7, pc}

08011ce6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011ce6:	b590      	push	{r4, r7, lr}
 8011ce8:	b087      	sub	sp, #28
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d10b      	bne.n	8011d12 <xQueueTakeMutexRecursive+0x2c>
 8011cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cfe:	b672      	cpsid	i
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
 8011d0c:	b662      	cpsie	i
 8011d0e:	60fb      	str	r3, [r7, #12]
 8011d10:	e7fe      	b.n	8011d10 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	689c      	ldr	r4, [r3, #8]
 8011d16:	f001 fe89 	bl	8013a2c <xTaskGetCurrentTaskHandle>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	429c      	cmp	r4, r3
 8011d1e:	d107      	bne.n	8011d30 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	1c5a      	adds	r2, r3, #1
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	e00c      	b.n	8011d4a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011d30:	6839      	ldr	r1, [r7, #0]
 8011d32:	6938      	ldr	r0, [r7, #16]
 8011d34:	f000 fb8e 	bl	8012454 <xQueueSemaphoreTake>
 8011d38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d004      	beq.n	8011d4a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	1c5a      	adds	r2, r3, #1
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011d4a:	697b      	ldr	r3, [r7, #20]
	}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	371c      	adds	r7, #28
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd90      	pop	{r4, r7, pc}

08011d54 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b08a      	sub	sp, #40	; 0x28
 8011d58:	af02      	add	r7, sp, #8
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d10b      	bne.n	8011d7e <xQueueCreateCountingSemaphoreStatic+0x2a>
 8011d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6a:	b672      	cpsid	i
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	b662      	cpsie	i
 8011d7a:	61bb      	str	r3, [r7, #24]
 8011d7c:	e7fe      	b.n	8011d7c <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d90b      	bls.n	8011d9e <xQueueCreateCountingSemaphoreStatic+0x4a>
 8011d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8a:	b672      	cpsid	i
 8011d8c:	f383 8811 	msr	BASEPRI, r3
 8011d90:	f3bf 8f6f 	isb	sy
 8011d94:	f3bf 8f4f 	dsb	sy
 8011d98:	b662      	cpsie	i
 8011d9a:	617b      	str	r3, [r7, #20]
 8011d9c:	e7fe      	b.n	8011d9c <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011d9e:	2302      	movs	r3, #2
 8011da0:	9300      	str	r3, [sp, #0]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2200      	movs	r2, #0
 8011da6:	2100      	movs	r1, #0
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f7ff fe39 	bl	8011a20 <xQueueGenericCreateStatic>
 8011dae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d002      	beq.n	8011dbc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	68ba      	ldr	r2, [r7, #8]
 8011dba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011dbc:	69fb      	ldr	r3, [r7, #28]
	}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3720      	adds	r7, #32
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b086      	sub	sp, #24
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d10b      	bne.n	8011dee <xQueueCreateCountingSemaphore+0x28>
 8011dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dda:	b672      	cpsid	i
 8011ddc:	f383 8811 	msr	BASEPRI, r3
 8011de0:	f3bf 8f6f 	isb	sy
 8011de4:	f3bf 8f4f 	dsb	sy
 8011de8:	b662      	cpsie	i
 8011dea:	613b      	str	r3, [r7, #16]
 8011dec:	e7fe      	b.n	8011dec <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011dee:	683a      	ldr	r2, [r7, #0]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d90b      	bls.n	8011e0e <xQueueCreateCountingSemaphore+0x48>
 8011df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dfa:	b672      	cpsid	i
 8011dfc:	f383 8811 	msr	BASEPRI, r3
 8011e00:	f3bf 8f6f 	isb	sy
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	b662      	cpsie	i
 8011e0a:	60fb      	str	r3, [r7, #12]
 8011e0c:	e7fe      	b.n	8011e0c <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011e0e:	2202      	movs	r2, #2
 8011e10:	2100      	movs	r1, #0
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7ff fe81 	bl	8011b1a <xQueueGenericCreate>
 8011e18:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d002      	beq.n	8011e26 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	683a      	ldr	r2, [r7, #0]
 8011e24:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011e26:	697b      	ldr	r3, [r7, #20]
	}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3718      	adds	r7, #24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b08e      	sub	sp, #56	; 0x38
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
 8011e3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d10b      	bne.n	8011e64 <xQueueGenericSend+0x34>
 8011e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e50:	b672      	cpsid	i
 8011e52:	f383 8811 	msr	BASEPRI, r3
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	b662      	cpsie	i
 8011e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e62:	e7fe      	b.n	8011e62 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d103      	bne.n	8011e72 <xQueueGenericSend+0x42>
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d101      	bne.n	8011e76 <xQueueGenericSend+0x46>
 8011e72:	2301      	movs	r3, #1
 8011e74:	e000      	b.n	8011e78 <xQueueGenericSend+0x48>
 8011e76:	2300      	movs	r3, #0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d10b      	bne.n	8011e94 <xQueueGenericSend+0x64>
 8011e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e80:	b672      	cpsid	i
 8011e82:	f383 8811 	msr	BASEPRI, r3
 8011e86:	f3bf 8f6f 	isb	sy
 8011e8a:	f3bf 8f4f 	dsb	sy
 8011e8e:	b662      	cpsie	i
 8011e90:	627b      	str	r3, [r7, #36]	; 0x24
 8011e92:	e7fe      	b.n	8011e92 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	d103      	bne.n	8011ea2 <xQueueGenericSend+0x72>
 8011e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d101      	bne.n	8011ea6 <xQueueGenericSend+0x76>
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	e000      	b.n	8011ea8 <xQueueGenericSend+0x78>
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10b      	bne.n	8011ec4 <xQueueGenericSend+0x94>
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	b672      	cpsid	i
 8011eb2:	f383 8811 	msr	BASEPRI, r3
 8011eb6:	f3bf 8f6f 	isb	sy
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	b662      	cpsie	i
 8011ec0:	623b      	str	r3, [r7, #32]
 8011ec2:	e7fe      	b.n	8011ec2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ec4:	f001 fdc2 	bl	8013a4c <xTaskGetSchedulerState>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d102      	bne.n	8011ed4 <xQueueGenericSend+0xa4>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d101      	bne.n	8011ed8 <xQueueGenericSend+0xa8>
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e000      	b.n	8011eda <xQueueGenericSend+0xaa>
 8011ed8:	2300      	movs	r3, #0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d10b      	bne.n	8011ef6 <xQueueGenericSend+0xc6>
 8011ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee2:	b672      	cpsid	i
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	b662      	cpsie	i
 8011ef2:	61fb      	str	r3, [r7, #28]
 8011ef4:	e7fe      	b.n	8011ef4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ef6:	f002 fbe7 	bl	80146c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d302      	bcc.n	8011f0c <xQueueGenericSend+0xdc>
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	2b02      	cmp	r3, #2
 8011f0a:	d129      	bne.n	8011f60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f0c:	683a      	ldr	r2, [r7, #0]
 8011f0e:	68b9      	ldr	r1, [r7, #8]
 8011f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f12:	f000 fcac 	bl	801286e <prvCopyDataToQueue>
 8011f16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d010      	beq.n	8011f42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f22:	3324      	adds	r3, #36	; 0x24
 8011f24:	4618      	mov	r0, r3
 8011f26:	f001 fbc1 	bl	80136ac <xTaskRemoveFromEventList>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d013      	beq.n	8011f58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f30:	4b3f      	ldr	r3, [pc, #252]	; (8012030 <xQueueGenericSend+0x200>)
 8011f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f36:	601a      	str	r2, [r3, #0]
 8011f38:	f3bf 8f4f 	dsb	sy
 8011f3c:	f3bf 8f6f 	isb	sy
 8011f40:	e00a      	b.n	8011f58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d007      	beq.n	8011f58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f48:	4b39      	ldr	r3, [pc, #228]	; (8012030 <xQueueGenericSend+0x200>)
 8011f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	f3bf 8f4f 	dsb	sy
 8011f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f58:	f002 fbe8 	bl	801472c <vPortExitCritical>
				return pdPASS;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	e063      	b.n	8012028 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d103      	bne.n	8011f6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f66:	f002 fbe1 	bl	801472c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e05c      	b.n	8012028 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f74:	f107 0314 	add.w	r3, r7, #20
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f001 fbfb 	bl	8013774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f82:	f002 fbd3 	bl	801472c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f86:	f001 f92b 	bl	80131e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f8a:	f002 fb9d 	bl	80146c8 <vPortEnterCritical>
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f94:	b25b      	sxtb	r3, r3
 8011f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f9a:	d103      	bne.n	8011fa4 <xQueueGenericSend+0x174>
 8011f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011faa:	b25b      	sxtb	r3, r3
 8011fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fb0:	d103      	bne.n	8011fba <xQueueGenericSend+0x18a>
 8011fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fba:	f002 fbb7 	bl	801472c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fbe:	1d3a      	adds	r2, r7, #4
 8011fc0:	f107 0314 	add.w	r3, r7, #20
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f001 fbea 	bl	80137a0 <xTaskCheckForTimeOut>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d124      	bne.n	801201c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fd4:	f000 fd43 	bl	8012a5e <prvIsQueueFull>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d018      	beq.n	8012010 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe0:	3310      	adds	r3, #16
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f001 fb0e 	bl	8013608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fee:	f000 fcce 	bl	801298e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ff2:	f001 f903 	bl	80131fc <xTaskResumeAll>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f47f af7c 	bne.w	8011ef6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011ffe:	4b0c      	ldr	r3, [pc, #48]	; (8012030 <xQueueGenericSend+0x200>)
 8012000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012004:	601a      	str	r2, [r3, #0]
 8012006:	f3bf 8f4f 	dsb	sy
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	e772      	b.n	8011ef6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012012:	f000 fcbc 	bl	801298e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012016:	f001 f8f1 	bl	80131fc <xTaskResumeAll>
 801201a:	e76c      	b.n	8011ef6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801201c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801201e:	f000 fcb6 	bl	801298e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012022:	f001 f8eb 	bl	80131fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012026:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012028:	4618      	mov	r0, r3
 801202a:	3738      	adds	r7, #56	; 0x38
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}
 8012030:	e000ed04 	.word	0xe000ed04

08012034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b08e      	sub	sp, #56	; 0x38
 8012038:	af00      	add	r7, sp, #0
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	607a      	str	r2, [r7, #4]
 8012040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012048:	2b00      	cmp	r3, #0
 801204a:	d10b      	bne.n	8012064 <xQueueGenericSendFromISR+0x30>
 801204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012050:	b672      	cpsid	i
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	b662      	cpsie	i
 8012060:	627b      	str	r3, [r7, #36]	; 0x24
 8012062:	e7fe      	b.n	8012062 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d103      	bne.n	8012072 <xQueueGenericSendFromISR+0x3e>
 801206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801206e:	2b00      	cmp	r3, #0
 8012070:	d101      	bne.n	8012076 <xQueueGenericSendFromISR+0x42>
 8012072:	2301      	movs	r3, #1
 8012074:	e000      	b.n	8012078 <xQueueGenericSendFromISR+0x44>
 8012076:	2300      	movs	r3, #0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d10b      	bne.n	8012094 <xQueueGenericSendFromISR+0x60>
 801207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012080:	b672      	cpsid	i
 8012082:	f383 8811 	msr	BASEPRI, r3
 8012086:	f3bf 8f6f 	isb	sy
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	b662      	cpsie	i
 8012090:	623b      	str	r3, [r7, #32]
 8012092:	e7fe      	b.n	8012092 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	2b02      	cmp	r3, #2
 8012098:	d103      	bne.n	80120a2 <xQueueGenericSendFromISR+0x6e>
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d101      	bne.n	80120a6 <xQueueGenericSendFromISR+0x72>
 80120a2:	2301      	movs	r3, #1
 80120a4:	e000      	b.n	80120a8 <xQueueGenericSendFromISR+0x74>
 80120a6:	2300      	movs	r3, #0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10b      	bne.n	80120c4 <xQueueGenericSendFromISR+0x90>
 80120ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b0:	b672      	cpsid	i
 80120b2:	f383 8811 	msr	BASEPRI, r3
 80120b6:	f3bf 8f6f 	isb	sy
 80120ba:	f3bf 8f4f 	dsb	sy
 80120be:	b662      	cpsie	i
 80120c0:	61fb      	str	r3, [r7, #28]
 80120c2:	e7fe      	b.n	80120c2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120c4:	f002 fbe0 	bl	8014888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80120c8:	f3ef 8211 	mrs	r2, BASEPRI
 80120cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d0:	b672      	cpsid	i
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	b662      	cpsie	i
 80120e0:	61ba      	str	r2, [r7, #24]
 80120e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80120e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80120e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80120e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d302      	bcc.n	80120fa <xQueueGenericSendFromISR+0xc6>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	2b02      	cmp	r3, #2
 80120f8:	d12c      	bne.n	8012154 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012104:	683a      	ldr	r2, [r7, #0]
 8012106:	68b9      	ldr	r1, [r7, #8]
 8012108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801210a:	f000 fbb0 	bl	801286e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801210e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012116:	d112      	bne.n	801213e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801211c:	2b00      	cmp	r3, #0
 801211e:	d016      	beq.n	801214e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012122:	3324      	adds	r3, #36	; 0x24
 8012124:	4618      	mov	r0, r3
 8012126:	f001 fac1 	bl	80136ac <xTaskRemoveFromEventList>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00e      	beq.n	801214e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d00b      	beq.n	801214e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2201      	movs	r2, #1
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	e007      	b.n	801214e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801213e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012142:	3301      	adds	r3, #1
 8012144:	b2db      	uxtb	r3, r3
 8012146:	b25a      	sxtb	r2, r3
 8012148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801214e:	2301      	movs	r3, #1
 8012150:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012152:	e001      	b.n	8012158 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012154:	2300      	movs	r3, #0
 8012156:	637b      	str	r3, [r7, #52]	; 0x34
 8012158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012164:	4618      	mov	r0, r3
 8012166:	3738      	adds	r7, #56	; 0x38
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08e      	sub	sp, #56	; 0x38
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10b      	bne.n	8012198 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	b672      	cpsid	i
 8012186:	f383 8811 	msr	BASEPRI, r3
 801218a:	f3bf 8f6f 	isb	sy
 801218e:	f3bf 8f4f 	dsb	sy
 8012192:	b662      	cpsie	i
 8012194:	623b      	str	r3, [r7, #32]
 8012196:	e7fe      	b.n	8012196 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00b      	beq.n	80121b8 <xQueueGiveFromISR+0x4c>
 80121a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a4:	b672      	cpsid	i
 80121a6:	f383 8811 	msr	BASEPRI, r3
 80121aa:	f3bf 8f6f 	isb	sy
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	b662      	cpsie	i
 80121b4:	61fb      	str	r3, [r7, #28]
 80121b6:	e7fe      	b.n	80121b6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80121b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d103      	bne.n	80121c8 <xQueueGiveFromISR+0x5c>
 80121c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d101      	bne.n	80121cc <xQueueGiveFromISR+0x60>
 80121c8:	2301      	movs	r3, #1
 80121ca:	e000      	b.n	80121ce <xQueueGiveFromISR+0x62>
 80121cc:	2300      	movs	r3, #0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d10b      	bne.n	80121ea <xQueueGiveFromISR+0x7e>
 80121d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d6:	b672      	cpsid	i
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	b662      	cpsie	i
 80121e6:	61bb      	str	r3, [r7, #24]
 80121e8:	e7fe      	b.n	80121e8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121ea:	f002 fb4d 	bl	8014888 <vPortValidateInterruptPriority>
	__asm volatile
 80121ee:	f3ef 8211 	mrs	r2, BASEPRI
 80121f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f6:	b672      	cpsid	i
 80121f8:	f383 8811 	msr	BASEPRI, r3
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	b662      	cpsie	i
 8012206:	617a      	str	r2, [r7, #20]
 8012208:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801220a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012212:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801221a:	429a      	cmp	r2, r3
 801221c:	d22b      	bcs.n	8012276 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222a:	1c5a      	adds	r2, r3, #1
 801222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012238:	d112      	bne.n	8012260 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801223e:	2b00      	cmp	r3, #0
 8012240:	d016      	beq.n	8012270 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012244:	3324      	adds	r3, #36	; 0x24
 8012246:	4618      	mov	r0, r3
 8012248:	f001 fa30 	bl	80136ac <xTaskRemoveFromEventList>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	d00e      	beq.n	8012270 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00b      	beq.n	8012270 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	2201      	movs	r2, #1
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	e007      	b.n	8012270 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012264:	3301      	adds	r3, #1
 8012266:	b2db      	uxtb	r3, r3
 8012268:	b25a      	sxtb	r2, r3
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012270:	2301      	movs	r3, #1
 8012272:	637b      	str	r3, [r7, #52]	; 0x34
 8012274:	e001      	b.n	801227a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012276:	2300      	movs	r3, #0
 8012278:	637b      	str	r3, [r7, #52]	; 0x34
 801227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012286:	4618      	mov	r0, r3
 8012288:	3738      	adds	r7, #56	; 0x38
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
	...

08012290 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b08c      	sub	sp, #48	; 0x30
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801229c:	2300      	movs	r3, #0
 801229e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d10b      	bne.n	80122c2 <xQueueReceive+0x32>
	__asm volatile
 80122aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ae:	b672      	cpsid	i
 80122b0:	f383 8811 	msr	BASEPRI, r3
 80122b4:	f3bf 8f6f 	isb	sy
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	b662      	cpsie	i
 80122be:	623b      	str	r3, [r7, #32]
 80122c0:	e7fe      	b.n	80122c0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d103      	bne.n	80122d0 <xQueueReceive+0x40>
 80122c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d101      	bne.n	80122d4 <xQueueReceive+0x44>
 80122d0:	2301      	movs	r3, #1
 80122d2:	e000      	b.n	80122d6 <xQueueReceive+0x46>
 80122d4:	2300      	movs	r3, #0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d10b      	bne.n	80122f2 <xQueueReceive+0x62>
 80122da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122de:	b672      	cpsid	i
 80122e0:	f383 8811 	msr	BASEPRI, r3
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	b662      	cpsie	i
 80122ee:	61fb      	str	r3, [r7, #28]
 80122f0:	e7fe      	b.n	80122f0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122f2:	f001 fbab 	bl	8013a4c <xTaskGetSchedulerState>
 80122f6:	4603      	mov	r3, r0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d102      	bne.n	8012302 <xQueueReceive+0x72>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d101      	bne.n	8012306 <xQueueReceive+0x76>
 8012302:	2301      	movs	r3, #1
 8012304:	e000      	b.n	8012308 <xQueueReceive+0x78>
 8012306:	2300      	movs	r3, #0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10b      	bne.n	8012324 <xQueueReceive+0x94>
 801230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012310:	b672      	cpsid	i
 8012312:	f383 8811 	msr	BASEPRI, r3
 8012316:	f3bf 8f6f 	isb	sy
 801231a:	f3bf 8f4f 	dsb	sy
 801231e:	b662      	cpsie	i
 8012320:	61bb      	str	r3, [r7, #24]
 8012322:	e7fe      	b.n	8012322 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012324:	f002 f9d0 	bl	80146c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801232c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	2b00      	cmp	r3, #0
 8012332:	d01f      	beq.n	8012374 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012334:	68b9      	ldr	r1, [r7, #8]
 8012336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012338:	f000 fb03 	bl	8012942 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233e:	1e5a      	subs	r2, r3, #1
 8012340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012342:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00f      	beq.n	801236c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	3310      	adds	r3, #16
 8012350:	4618      	mov	r0, r3
 8012352:	f001 f9ab 	bl	80136ac <xTaskRemoveFromEventList>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d007      	beq.n	801236c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801235c:	4b3c      	ldr	r3, [pc, #240]	; (8012450 <xQueueReceive+0x1c0>)
 801235e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	f3bf 8f4f 	dsb	sy
 8012368:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801236c:	f002 f9de 	bl	801472c <vPortExitCritical>
				return pdPASS;
 8012370:	2301      	movs	r3, #1
 8012372:	e069      	b.n	8012448 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d103      	bne.n	8012382 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801237a:	f002 f9d7 	bl	801472c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801237e:	2300      	movs	r3, #0
 8012380:	e062      	b.n	8012448 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d106      	bne.n	8012396 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012388:	f107 0310 	add.w	r3, r7, #16
 801238c:	4618      	mov	r0, r3
 801238e:	f001 f9f1 	bl	8013774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012392:	2301      	movs	r3, #1
 8012394:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012396:	f002 f9c9 	bl	801472c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801239a:	f000 ff21 	bl	80131e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801239e:	f002 f993 	bl	80146c8 <vPortEnterCritical>
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123a8:	b25b      	sxtb	r3, r3
 80123aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123ae:	d103      	bne.n	80123b8 <xQueueReceive+0x128>
 80123b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b2:	2200      	movs	r2, #0
 80123b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123be:	b25b      	sxtb	r3, r3
 80123c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123c4:	d103      	bne.n	80123ce <xQueueReceive+0x13e>
 80123c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c8:	2200      	movs	r2, #0
 80123ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123ce:	f002 f9ad 	bl	801472c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123d2:	1d3a      	adds	r2, r7, #4
 80123d4:	f107 0310 	add.w	r3, r7, #16
 80123d8:	4611      	mov	r1, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f001 f9e0 	bl	80137a0 <xTaskCheckForTimeOut>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d123      	bne.n	801242e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123e8:	f000 fb23 	bl	8012a32 <prvIsQueueEmpty>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d017      	beq.n	8012422 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80123f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f4:	3324      	adds	r3, #36	; 0x24
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	4611      	mov	r1, r2
 80123fa:	4618      	mov	r0, r3
 80123fc:	f001 f904 	bl	8013608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012402:	f000 fac4 	bl	801298e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012406:	f000 fef9 	bl	80131fc <xTaskResumeAll>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d189      	bne.n	8012324 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012410:	4b0f      	ldr	r3, [pc, #60]	; (8012450 <xQueueReceive+0x1c0>)
 8012412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012416:	601a      	str	r2, [r3, #0]
 8012418:	f3bf 8f4f 	dsb	sy
 801241c:	f3bf 8f6f 	isb	sy
 8012420:	e780      	b.n	8012324 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012424:	f000 fab3 	bl	801298e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012428:	f000 fee8 	bl	80131fc <xTaskResumeAll>
 801242c:	e77a      	b.n	8012324 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801242e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012430:	f000 faad 	bl	801298e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012434:	f000 fee2 	bl	80131fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801243a:	f000 fafa 	bl	8012a32 <prvIsQueueEmpty>
 801243e:	4603      	mov	r3, r0
 8012440:	2b00      	cmp	r3, #0
 8012442:	f43f af6f 	beq.w	8012324 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012446:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012448:	4618      	mov	r0, r3
 801244a:	3730      	adds	r7, #48	; 0x30
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	e000ed04 	.word	0xe000ed04

08012454 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b08e      	sub	sp, #56	; 0x38
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801245e:	2300      	movs	r3, #0
 8012460:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012466:	2300      	movs	r3, #0
 8012468:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10b      	bne.n	8012488 <xQueueSemaphoreTake+0x34>
 8012470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012474:	b672      	cpsid	i
 8012476:	f383 8811 	msr	BASEPRI, r3
 801247a:	f3bf 8f6f 	isb	sy
 801247e:	f3bf 8f4f 	dsb	sy
 8012482:	b662      	cpsie	i
 8012484:	623b      	str	r3, [r7, #32]
 8012486:	e7fe      	b.n	8012486 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00b      	beq.n	80124a8 <xQueueSemaphoreTake+0x54>
 8012490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012494:	b672      	cpsid	i
 8012496:	f383 8811 	msr	BASEPRI, r3
 801249a:	f3bf 8f6f 	isb	sy
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	b662      	cpsie	i
 80124a4:	61fb      	str	r3, [r7, #28]
 80124a6:	e7fe      	b.n	80124a6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124a8:	f001 fad0 	bl	8013a4c <xTaskGetSchedulerState>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d102      	bne.n	80124b8 <xQueueSemaphoreTake+0x64>
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <xQueueSemaphoreTake+0x68>
 80124b8:	2301      	movs	r3, #1
 80124ba:	e000      	b.n	80124be <xQueueSemaphoreTake+0x6a>
 80124bc:	2300      	movs	r3, #0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10b      	bne.n	80124da <xQueueSemaphoreTake+0x86>
 80124c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c6:	b672      	cpsid	i
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	b662      	cpsie	i
 80124d6:	61bb      	str	r3, [r7, #24]
 80124d8:	e7fe      	b.n	80124d8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124da:	f002 f8f5 	bl	80146c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80124de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124e2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80124e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d024      	beq.n	8012534 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80124ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ec:	1e5a      	subs	r2, r3, #1
 80124ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80124f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d104      	bne.n	8012504 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80124fa:	f001 fc21 	bl	8013d40 <pvTaskIncrementMutexHeldCount>
 80124fe:	4602      	mov	r2, r0
 8012500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012502:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012506:	691b      	ldr	r3, [r3, #16]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00f      	beq.n	801252c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250e:	3310      	adds	r3, #16
 8012510:	4618      	mov	r0, r3
 8012512:	f001 f8cb 	bl	80136ac <xTaskRemoveFromEventList>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d007      	beq.n	801252c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801251c:	4b54      	ldr	r3, [pc, #336]	; (8012670 <xQueueSemaphoreTake+0x21c>)
 801251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801252c:	f002 f8fe 	bl	801472c <vPortExitCritical>
				return pdPASS;
 8012530:	2301      	movs	r3, #1
 8012532:	e098      	b.n	8012666 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d112      	bne.n	8012560 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00b      	beq.n	8012558 <xQueueSemaphoreTake+0x104>
 8012540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012544:	b672      	cpsid	i
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	b662      	cpsie	i
 8012554:	617b      	str	r3, [r7, #20]
 8012556:	e7fe      	b.n	8012556 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012558:	f002 f8e8 	bl	801472c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801255c:	2300      	movs	r3, #0
 801255e:	e082      	b.n	8012666 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012562:	2b00      	cmp	r3, #0
 8012564:	d106      	bne.n	8012574 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012566:	f107 030c 	add.w	r3, r7, #12
 801256a:	4618      	mov	r0, r3
 801256c:	f001 f902 	bl	8013774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012570:	2301      	movs	r3, #1
 8012572:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012574:	f002 f8da 	bl	801472c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012578:	f000 fe32 	bl	80131e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801257c:	f002 f8a4 	bl	80146c8 <vPortEnterCritical>
 8012580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012586:	b25b      	sxtb	r3, r3
 8012588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801258c:	d103      	bne.n	8012596 <xQueueSemaphoreTake+0x142>
 801258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012590:	2200      	movs	r2, #0
 8012592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801259c:	b25b      	sxtb	r3, r3
 801259e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125a2:	d103      	bne.n	80125ac <xQueueSemaphoreTake+0x158>
 80125a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a6:	2200      	movs	r2, #0
 80125a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80125ac:	f002 f8be 	bl	801472c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125b0:	463a      	mov	r2, r7
 80125b2:	f107 030c 	add.w	r3, r7, #12
 80125b6:	4611      	mov	r1, r2
 80125b8:	4618      	mov	r0, r3
 80125ba:	f001 f8f1 	bl	80137a0 <xTaskCheckForTimeOut>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d132      	bne.n	801262a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125c6:	f000 fa34 	bl	8012a32 <prvIsQueueEmpty>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d026      	beq.n	801261e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80125d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d109      	bne.n	80125ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80125d8:	f002 f876 	bl	80146c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80125dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	4618      	mov	r0, r3
 80125e2:	f001 fa51 	bl	8013a88 <xTaskPriorityInherit>
 80125e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80125e8:	f002 f8a0 	bl	801472c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80125ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ee:	3324      	adds	r3, #36	; 0x24
 80125f0:	683a      	ldr	r2, [r7, #0]
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f001 f807 	bl	8013608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80125fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125fc:	f000 f9c7 	bl	801298e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012600:	f000 fdfc 	bl	80131fc <xTaskResumeAll>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	f47f af67 	bne.w	80124da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801260c:	4b18      	ldr	r3, [pc, #96]	; (8012670 <xQueueSemaphoreTake+0x21c>)
 801260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	e75d      	b.n	80124da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801261e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012620:	f000 f9b5 	bl	801298e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012624:	f000 fdea 	bl	80131fc <xTaskResumeAll>
 8012628:	e757      	b.n	80124da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801262a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801262c:	f000 f9af 	bl	801298e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012630:	f000 fde4 	bl	80131fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012636:	f000 f9fc 	bl	8012a32 <prvIsQueueEmpty>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	f43f af4c 	beq.w	80124da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00d      	beq.n	8012664 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012648:	f002 f83e 	bl	80146c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801264c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801264e:	f000 f8f6 	bl	801283e <prvGetDisinheritPriorityAfterTimeout>
 8012652:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012656:	689b      	ldr	r3, [r3, #8]
 8012658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801265a:	4618      	mov	r0, r3
 801265c:	f001 faec 	bl	8013c38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012660:	f002 f864 	bl	801472c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012666:	4618      	mov	r0, r3
 8012668:	3738      	adds	r7, #56	; 0x38
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	e000ed04 	.word	0xe000ed04

08012674 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b08e      	sub	sp, #56	; 0x38
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012686:	2b00      	cmp	r3, #0
 8012688:	d10b      	bne.n	80126a2 <xQueueReceiveFromISR+0x2e>
 801268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801268e:	b672      	cpsid	i
 8012690:	f383 8811 	msr	BASEPRI, r3
 8012694:	f3bf 8f6f 	isb	sy
 8012698:	f3bf 8f4f 	dsb	sy
 801269c:	b662      	cpsie	i
 801269e:	623b      	str	r3, [r7, #32]
 80126a0:	e7fe      	b.n	80126a0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d103      	bne.n	80126b0 <xQueueReceiveFromISR+0x3c>
 80126a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d101      	bne.n	80126b4 <xQueueReceiveFromISR+0x40>
 80126b0:	2301      	movs	r3, #1
 80126b2:	e000      	b.n	80126b6 <xQueueReceiveFromISR+0x42>
 80126b4:	2300      	movs	r3, #0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10b      	bne.n	80126d2 <xQueueReceiveFromISR+0x5e>
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	b672      	cpsid	i
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	b662      	cpsie	i
 80126ce:	61fb      	str	r3, [r7, #28]
 80126d0:	e7fe      	b.n	80126d0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126d2:	f002 f8d9 	bl	8014888 <vPortValidateInterruptPriority>
	__asm volatile
 80126d6:	f3ef 8211 	mrs	r2, BASEPRI
 80126da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126de:	b672      	cpsid	i
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	b662      	cpsie	i
 80126ee:	61ba      	str	r2, [r7, #24]
 80126f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80126f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80126f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d02f      	beq.n	8012762 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801270c:	68b9      	ldr	r1, [r7, #8]
 801270e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012710:	f000 f917 	bl	8012942 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012716:	1e5a      	subs	r2, r3, #1
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801271c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012724:	d112      	bne.n	801274c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012728:	691b      	ldr	r3, [r3, #16]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d016      	beq.n	801275c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012730:	3310      	adds	r3, #16
 8012732:	4618      	mov	r0, r3
 8012734:	f000 ffba 	bl	80136ac <xTaskRemoveFromEventList>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00e      	beq.n	801275c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d00b      	beq.n	801275c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2201      	movs	r2, #1
 8012748:	601a      	str	r2, [r3, #0]
 801274a:	e007      	b.n	801275c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801274c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012750:	3301      	adds	r3, #1
 8012752:	b2db      	uxtb	r3, r3
 8012754:	b25a      	sxtb	r2, r3
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801275c:	2301      	movs	r3, #1
 801275e:	637b      	str	r3, [r7, #52]	; 0x34
 8012760:	e001      	b.n	8012766 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8012762:	2300      	movs	r3, #0
 8012764:	637b      	str	r3, [r7, #52]	; 0x34
 8012766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012768:	613b      	str	r3, [r7, #16]
	__asm volatile
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012772:	4618      	mov	r0, r3
 8012774:	3738      	adds	r7, #56	; 0x38
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801277a:	b580      	push	{r7, lr}
 801277c:	b084      	sub	sp, #16
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d10b      	bne.n	80127a0 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8012788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801278c:	b672      	cpsid	i
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	b662      	cpsie	i
 801279c:	60bb      	str	r3, [r7, #8]
 801279e:	e7fe      	b.n	801279e <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80127a0:	f001 ff92 	bl	80146c8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80127aa:	f001 ffbf 	bl	801472c <vPortExitCritical>

	return uxReturn;
 80127ae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80127b0:	4618      	mov	r0, r3
 80127b2:	3710      	adds	r7, #16
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80127b8:	b480      	push	{r7}
 80127ba:	b087      	sub	sp, #28
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d10b      	bne.n	80127e2 <uxQueueMessagesWaitingFromISR+0x2a>
 80127ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ce:	b672      	cpsid	i
 80127d0:	f383 8811 	msr	BASEPRI, r3
 80127d4:	f3bf 8f6f 	isb	sy
 80127d8:	f3bf 8f4f 	dsb	sy
 80127dc:	b662      	cpsie	i
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	e7fe      	b.n	80127e0 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127e6:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80127e8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80127ea:	4618      	mov	r0, r3
 80127ec:	371c      	adds	r7, #28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr

080127f6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80127f6:	b580      	push	{r7, lr}
 80127f8:	b084      	sub	sp, #16
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d10b      	bne.n	8012820 <vQueueDelete+0x2a>
 8012808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280c:	b672      	cpsid	i
 801280e:	f383 8811 	msr	BASEPRI, r3
 8012812:	f3bf 8f6f 	isb	sy
 8012816:	f3bf 8f4f 	dsb	sy
 801281a:	b662      	cpsie	i
 801281c:	60bb      	str	r3, [r7, #8]
 801281e:	e7fe      	b.n	801281e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f000 f95d 	bl	8012ae0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f002 f937 	bl	8014aa4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012836:	bf00      	nop
 8012838:	3710      	adds	r7, #16
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801283e:	b480      	push	{r7}
 8012840:	b085      	sub	sp, #20
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284a:	2b00      	cmp	r3, #0
 801284c:	d006      	beq.n	801285c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012858:	60fb      	str	r3, [r7, #12]
 801285a:	e001      	b.n	8012860 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801285c:	2300      	movs	r3, #0
 801285e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012860:	68fb      	ldr	r3, [r7, #12]
	}
 8012862:	4618      	mov	r0, r3
 8012864:	3714      	adds	r7, #20
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801286e:	b580      	push	{r7, lr}
 8012870:	b086      	sub	sp, #24
 8012872:	af00      	add	r7, sp, #0
 8012874:	60f8      	str	r0, [r7, #12]
 8012876:	60b9      	str	r1, [r7, #8]
 8012878:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801287a:	2300      	movs	r3, #0
 801287c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012882:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012888:	2b00      	cmp	r3, #0
 801288a:	d10d      	bne.n	80128a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d14d      	bne.n	8012930 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	4618      	mov	r0, r3
 801289a:	f001 f95d 	bl	8013b58 <xTaskPriorityDisinherit>
 801289e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2200      	movs	r2, #0
 80128a4:	609a      	str	r2, [r3, #8]
 80128a6:	e043      	b.n	8012930 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d119      	bne.n	80128e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	6858      	ldr	r0, [r3, #4]
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b6:	461a      	mov	r2, r3
 80128b8:	68b9      	ldr	r1, [r7, #8]
 80128ba:	f011 feb6 	bl	802462a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	685a      	ldr	r2, [r3, #4]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c6:	441a      	add	r2, r3
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	685a      	ldr	r2, [r3, #4]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d32b      	bcc.n	8012930 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	605a      	str	r2, [r3, #4]
 80128e0:	e026      	b.n	8012930 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	68d8      	ldr	r0, [r3, #12]
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ea:	461a      	mov	r2, r3
 80128ec:	68b9      	ldr	r1, [r7, #8]
 80128ee:	f011 fe9c 	bl	802462a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	68da      	ldr	r2, [r3, #12]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fa:	425b      	negs	r3, r3
 80128fc:	441a      	add	r2, r3
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	68da      	ldr	r2, [r3, #12]
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	429a      	cmp	r2, r3
 801290c:	d207      	bcs.n	801291e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	689a      	ldr	r2, [r3, #8]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012916:	425b      	negs	r3, r3
 8012918:	441a      	add	r2, r3
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b02      	cmp	r3, #2
 8012922:	d105      	bne.n	8012930 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d002      	beq.n	8012930 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	3b01      	subs	r3, #1
 801292e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012938:	697b      	ldr	r3, [r7, #20]
}
 801293a:	4618      	mov	r0, r3
 801293c:	3718      	adds	r7, #24
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b082      	sub	sp, #8
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012950:	2b00      	cmp	r3, #0
 8012952:	d018      	beq.n	8012986 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	68da      	ldr	r2, [r3, #12]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801295c:	441a      	add	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	68da      	ldr	r2, [r3, #12]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	429a      	cmp	r2, r3
 801296c:	d303      	bcc.n	8012976 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	68d9      	ldr	r1, [r3, #12]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801297e:	461a      	mov	r2, r3
 8012980:	6838      	ldr	r0, [r7, #0]
 8012982:	f011 fe52 	bl	802462a <memcpy>
	}
}
 8012986:	bf00      	nop
 8012988:	3708      	adds	r7, #8
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}

0801298e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801298e:	b580      	push	{r7, lr}
 8012990:	b084      	sub	sp, #16
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012996:	f001 fe97 	bl	80146c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129a2:	e011      	b.n	80129c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d012      	beq.n	80129d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	3324      	adds	r3, #36	; 0x24
 80129b0:	4618      	mov	r0, r3
 80129b2:	f000 fe7b 	bl	80136ac <xTaskRemoveFromEventList>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d001      	beq.n	80129c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80129bc:	f000 ff54 	bl	8013868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80129c0:	7bfb      	ldrb	r3, [r7, #15]
 80129c2:	3b01      	subs	r3, #1
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	dce9      	bgt.n	80129a4 <prvUnlockQueue+0x16>
 80129d0:	e000      	b.n	80129d4 <prvUnlockQueue+0x46>
					break;
 80129d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	22ff      	movs	r2, #255	; 0xff
 80129d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80129dc:	f001 fea6 	bl	801472c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80129e0:	f001 fe72 	bl	80146c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129ec:	e011      	b.n	8012a12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	691b      	ldr	r3, [r3, #16]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d012      	beq.n	8012a1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	3310      	adds	r3, #16
 80129fa:	4618      	mov	r0, r3
 80129fc:	f000 fe56 	bl	80136ac <xTaskRemoveFromEventList>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012a06:	f000 ff2f 	bl	8013868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012a0a:	7bbb      	ldrb	r3, [r7, #14]
 8012a0c:	3b01      	subs	r3, #1
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	dce9      	bgt.n	80129ee <prvUnlockQueue+0x60>
 8012a1a:	e000      	b.n	8012a1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012a1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	22ff      	movs	r2, #255	; 0xff
 8012a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a26:	f001 fe81 	bl	801472c <vPortExitCritical>
}
 8012a2a:	bf00      	nop
 8012a2c:	3710      	adds	r7, #16
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012a32:	b580      	push	{r7, lr}
 8012a34:	b084      	sub	sp, #16
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a3a:	f001 fe45 	bl	80146c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d102      	bne.n	8012a4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012a46:	2301      	movs	r3, #1
 8012a48:	60fb      	str	r3, [r7, #12]
 8012a4a:	e001      	b.n	8012a50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a50:	f001 fe6c 	bl	801472c <vPortExitCritical>

	return xReturn;
 8012a54:	68fb      	ldr	r3, [r7, #12]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3710      	adds	r7, #16
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b084      	sub	sp, #16
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a66:	f001 fe2f 	bl	80146c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d102      	bne.n	8012a7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a76:	2301      	movs	r3, #1
 8012a78:	60fb      	str	r3, [r7, #12]
 8012a7a:	e001      	b.n	8012a80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a80:	f001 fe54 	bl	801472c <vPortExitCritical>

	return xReturn;
 8012a84:	68fb      	ldr	r3, [r7, #12]
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
	...

08012a90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012a90:	b480      	push	{r7}
 8012a92:	b085      	sub	sp, #20
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	60fb      	str	r3, [r7, #12]
 8012a9e:	e014      	b.n	8012aca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012aa0:	4a0e      	ldr	r2, [pc, #56]	; (8012adc <vQueueAddToRegistry+0x4c>)
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10b      	bne.n	8012ac4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012aac:	490b      	ldr	r1, [pc, #44]	; (8012adc <vQueueAddToRegistry+0x4c>)
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	683a      	ldr	r2, [r7, #0]
 8012ab2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012ab6:	4a09      	ldr	r2, [pc, #36]	; (8012adc <vQueueAddToRegistry+0x4c>)
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	4413      	add	r3, r2
 8012abe:	687a      	ldr	r2, [r7, #4]
 8012ac0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012ac2:	e005      	b.n	8012ad0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	60fb      	str	r3, [r7, #12]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2b07      	cmp	r3, #7
 8012ace:	d9e7      	bls.n	8012aa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012ad0:	bf00      	nop
 8012ad2:	3714      	adds	r7, #20
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr
 8012adc:	2000cc48 	.word	0x2000cc48

08012ae0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b085      	sub	sp, #20
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ae8:	2300      	movs	r3, #0
 8012aea:	60fb      	str	r3, [r7, #12]
 8012aec:	e016      	b.n	8012b1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012aee:	4a10      	ldr	r2, [pc, #64]	; (8012b30 <vQueueUnregisterQueue+0x50>)
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	00db      	lsls	r3, r3, #3
 8012af4:	4413      	add	r3, r2
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d10b      	bne.n	8012b16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012afe:	4a0c      	ldr	r2, [pc, #48]	; (8012b30 <vQueueUnregisterQueue+0x50>)
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2100      	movs	r1, #0
 8012b04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012b08:	4a09      	ldr	r2, [pc, #36]	; (8012b30 <vQueueUnregisterQueue+0x50>)
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	00db      	lsls	r3, r3, #3
 8012b0e:	4413      	add	r3, r2
 8012b10:	2200      	movs	r2, #0
 8012b12:	605a      	str	r2, [r3, #4]
				break;
 8012b14:	e005      	b.n	8012b22 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	60fb      	str	r3, [r7, #12]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2b07      	cmp	r3, #7
 8012b20:	d9e5      	bls.n	8012aee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012b22:	bf00      	nop
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	2000cc48 	.word	0x2000cc48

08012b34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b086      	sub	sp, #24
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012b44:	f001 fdc0 	bl	80146c8 <vPortEnterCritical>
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b4e:	b25b      	sxtb	r3, r3
 8012b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b54:	d103      	bne.n	8012b5e <vQueueWaitForMessageRestricted+0x2a>
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b64:	b25b      	sxtb	r3, r3
 8012b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b6a:	d103      	bne.n	8012b74 <vQueueWaitForMessageRestricted+0x40>
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b74:	f001 fdda 	bl	801472c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d106      	bne.n	8012b8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	3324      	adds	r3, #36	; 0x24
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	68b9      	ldr	r1, [r7, #8]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 fd63 	bl	8013654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012b8e:	6978      	ldr	r0, [r7, #20]
 8012b90:	f7ff fefd 	bl	801298e <prvUnlockQueue>
	}
 8012b94:	bf00      	nop
 8012b96:	3718      	adds	r7, #24
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b08e      	sub	sp, #56	; 0x38
 8012ba0:	af04      	add	r7, sp, #16
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	607a      	str	r2, [r7, #4]
 8012ba8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d10b      	bne.n	8012bc8 <xTaskCreateStatic+0x2c>
 8012bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb4:	b672      	cpsid	i
 8012bb6:	f383 8811 	msr	BASEPRI, r3
 8012bba:	f3bf 8f6f 	isb	sy
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	b662      	cpsie	i
 8012bc4:	623b      	str	r3, [r7, #32]
 8012bc6:	e7fe      	b.n	8012bc6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8012bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10b      	bne.n	8012be6 <xTaskCreateStatic+0x4a>
 8012bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd2:	b672      	cpsid	i
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	b662      	cpsie	i
 8012be2:	61fb      	str	r3, [r7, #28]
 8012be4:	e7fe      	b.n	8012be4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012be6:	2360      	movs	r3, #96	; 0x60
 8012be8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	2b60      	cmp	r3, #96	; 0x60
 8012bee:	d00b      	beq.n	8012c08 <xTaskCreateStatic+0x6c>
 8012bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf4:	b672      	cpsid	i
 8012bf6:	f383 8811 	msr	BASEPRI, r3
 8012bfa:	f3bf 8f6f 	isb	sy
 8012bfe:	f3bf 8f4f 	dsb	sy
 8012c02:	b662      	cpsie	i
 8012c04:	61bb      	str	r3, [r7, #24]
 8012c06:	e7fe      	b.n	8012c06 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012c08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d01e      	beq.n	8012c4e <xTaskCreateStatic+0xb2>
 8012c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d01b      	beq.n	8012c4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c22:	2202      	movs	r2, #2
 8012c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012c28:	2300      	movs	r3, #0
 8012c2a:	9303      	str	r3, [sp, #12]
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	9302      	str	r3, [sp, #8]
 8012c30:	f107 0314 	add.w	r3, r7, #20
 8012c34:	9301      	str	r3, [sp, #4]
 8012c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	687a      	ldr	r2, [r7, #4]
 8012c3e:	68b9      	ldr	r1, [r7, #8]
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f000 f850 	bl	8012ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c48:	f000 f8e0 	bl	8012e0c <prvAddNewTaskToReadyList>
 8012c4c:	e001      	b.n	8012c52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c52:	697b      	ldr	r3, [r7, #20]
	}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3728      	adds	r7, #40	; 0x28
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b08c      	sub	sp, #48	; 0x30
 8012c60:	af04      	add	r7, sp, #16
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	603b      	str	r3, [r7, #0]
 8012c68:	4613      	mov	r3, r2
 8012c6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c6c:	88fb      	ldrh	r3, [r7, #6]
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	4618      	mov	r0, r3
 8012c72:	f001 fe4b 	bl	801490c <pvPortMalloc>
 8012c76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d00e      	beq.n	8012c9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c7e:	2060      	movs	r0, #96	; 0x60
 8012c80:	f001 fe44 	bl	801490c <pvPortMalloc>
 8012c84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c86:	69fb      	ldr	r3, [r7, #28]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d003      	beq.n	8012c94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	697a      	ldr	r2, [r7, #20]
 8012c90:	631a      	str	r2, [r3, #48]	; 0x30
 8012c92:	e005      	b.n	8012ca0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c94:	6978      	ldr	r0, [r7, #20]
 8012c96:	f001 ff05 	bl	8014aa4 <vPortFree>
 8012c9a:	e001      	b.n	8012ca0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d017      	beq.n	8012cd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012cae:	88fa      	ldrh	r2, [r7, #6]
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	9303      	str	r3, [sp, #12]
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	9302      	str	r3, [sp, #8]
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	68b9      	ldr	r1, [r7, #8]
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f000 f80e 	bl	8012ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012cca:	69f8      	ldr	r0, [r7, #28]
 8012ccc:	f000 f89e 	bl	8012e0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	61bb      	str	r3, [r7, #24]
 8012cd4:	e002      	b.n	8012cdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012cdc:	69bb      	ldr	r3, [r7, #24]
	}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3720      	adds	r7, #32
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b088      	sub	sp, #32
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	60f8      	str	r0, [r7, #12]
 8012cee:	60b9      	str	r1, [r7, #8]
 8012cf0:	607a      	str	r2, [r7, #4]
 8012cf2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	21a5      	movs	r1, #165	; 0xa5
 8012d00:	f011 fc9e 	bl	8024640 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d08:	6879      	ldr	r1, [r7, #4]
 8012d0a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012d0e:	440b      	add	r3, r1
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	f023 0307 	bic.w	r3, r3, #7
 8012d1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	f003 0307 	and.w	r3, r3, #7
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00b      	beq.n	8012d40 <prvInitialiseNewTask+0x5a>
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	b672      	cpsid	i
 8012d2e:	f383 8811 	msr	BASEPRI, r3
 8012d32:	f3bf 8f6f 	isb	sy
 8012d36:	f3bf 8f4f 	dsb	sy
 8012d3a:	b662      	cpsie	i
 8012d3c:	617b      	str	r3, [r7, #20]
 8012d3e:	e7fe      	b.n	8012d3e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d01f      	beq.n	8012d86 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d46:	2300      	movs	r3, #0
 8012d48:	61fb      	str	r3, [r7, #28]
 8012d4a:	e012      	b.n	8012d72 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d4c:	68ba      	ldr	r2, [r7, #8]
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	4413      	add	r3, r2
 8012d52:	7819      	ldrb	r1, [r3, #0]
 8012d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	4413      	add	r3, r2
 8012d5a:	3334      	adds	r3, #52	; 0x34
 8012d5c:	460a      	mov	r2, r1
 8012d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	4413      	add	r3, r2
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d006      	beq.n	8012d7a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	61fb      	str	r3, [r7, #28]
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	2b0f      	cmp	r3, #15
 8012d76:	d9e9      	bls.n	8012d4c <prvInitialiseNewTask+0x66>
 8012d78:	e000      	b.n	8012d7c <prvInitialiseNewTask+0x96>
			{
				break;
 8012d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d84:	e003      	b.n	8012d8e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d90:	2b37      	cmp	r3, #55	; 0x37
 8012d92:	d901      	bls.n	8012d98 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012d94:	2337      	movs	r3, #55	; 0x37
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012da2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da6:	2200      	movs	r2, #0
 8012da8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	3304      	adds	r3, #4
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7fe fd38 	bl	8011824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db6:	3318      	adds	r3, #24
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7fe fd33 	bl	8011824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ddc:	2200      	movs	r2, #0
 8012dde:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de2:	2200      	movs	r2, #0
 8012de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012de8:	683a      	ldr	r2, [r7, #0]
 8012dea:	68f9      	ldr	r1, [r7, #12]
 8012dec:	69b8      	ldr	r0, [r7, #24]
 8012dee:	f001 fb63 	bl	80144b8 <pxPortInitialiseStack>
 8012df2:	4602      	mov	r2, r0
 8012df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d002      	beq.n	8012e04 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e04:	bf00      	nop
 8012e06:	3720      	adds	r7, #32
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012e14:	f001 fc58 	bl	80146c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012e18:	4b2d      	ldr	r3, [pc, #180]	; (8012ed0 <prvAddNewTaskToReadyList+0xc4>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	4a2c      	ldr	r2, [pc, #176]	; (8012ed0 <prvAddNewTaskToReadyList+0xc4>)
 8012e20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012e22:	4b2c      	ldr	r3, [pc, #176]	; (8012ed4 <prvAddNewTaskToReadyList+0xc8>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d109      	bne.n	8012e3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012e2a:	4a2a      	ldr	r2, [pc, #168]	; (8012ed4 <prvAddNewTaskToReadyList+0xc8>)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012e30:	4b27      	ldr	r3, [pc, #156]	; (8012ed0 <prvAddNewTaskToReadyList+0xc4>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	d110      	bne.n	8012e5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012e38:	f000 fd3c 	bl	80138b4 <prvInitialiseTaskLists>
 8012e3c:	e00d      	b.n	8012e5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012e3e:	4b26      	ldr	r3, [pc, #152]	; (8012ed8 <prvAddNewTaskToReadyList+0xcc>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d109      	bne.n	8012e5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012e46:	4b23      	ldr	r3, [pc, #140]	; (8012ed4 <prvAddNewTaskToReadyList+0xc8>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d802      	bhi.n	8012e5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e54:	4a1f      	ldr	r2, [pc, #124]	; (8012ed4 <prvAddNewTaskToReadyList+0xc8>)
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e5a:	4b20      	ldr	r3, [pc, #128]	; (8012edc <prvAddNewTaskToReadyList+0xd0>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	4a1e      	ldr	r2, [pc, #120]	; (8012edc <prvAddNewTaskToReadyList+0xd0>)
 8012e62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012e64:	4b1d      	ldr	r3, [pc, #116]	; (8012edc <prvAddNewTaskToReadyList+0xd0>)
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e70:	4b1b      	ldr	r3, [pc, #108]	; (8012ee0 <prvAddNewTaskToReadyList+0xd4>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d903      	bls.n	8012e80 <prvAddNewTaskToReadyList+0x74>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e7c:	4a18      	ldr	r2, [pc, #96]	; (8012ee0 <prvAddNewTaskToReadyList+0xd4>)
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e84:	4613      	mov	r3, r2
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	4413      	add	r3, r2
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	4a15      	ldr	r2, [pc, #84]	; (8012ee4 <prvAddNewTaskToReadyList+0xd8>)
 8012e8e:	441a      	add	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	3304      	adds	r3, #4
 8012e94:	4619      	mov	r1, r3
 8012e96:	4610      	mov	r0, r2
 8012e98:	f7fe fcd1 	bl	801183e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e9c:	f001 fc46 	bl	801472c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012ea0:	4b0d      	ldr	r3, [pc, #52]	; (8012ed8 <prvAddNewTaskToReadyList+0xcc>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d00e      	beq.n	8012ec6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012ea8:	4b0a      	ldr	r3, [pc, #40]	; (8012ed4 <prvAddNewTaskToReadyList+0xc8>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d207      	bcs.n	8012ec6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012eb6:	4b0c      	ldr	r3, [pc, #48]	; (8012ee8 <prvAddNewTaskToReadyList+0xdc>)
 8012eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ebc:	601a      	str	r2, [r3, #0]
 8012ebe:	f3bf 8f4f 	dsb	sy
 8012ec2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ec6:	bf00      	nop
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	20000df8 	.word	0x20000df8
 8012ed4:	20000924 	.word	0x20000924
 8012ed8:	20000e04 	.word	0x20000e04
 8012edc:	20000e14 	.word	0x20000e14
 8012ee0:	20000e00 	.word	0x20000e00
 8012ee4:	20000928 	.word	0x20000928
 8012ee8:	e000ed04 	.word	0xe000ed04

08012eec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012ef4:	f001 fbe8 	bl	80146c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d102      	bne.n	8012f04 <vTaskDelete+0x18>
 8012efe:	4b2d      	ldr	r3, [pc, #180]	; (8012fb4 <vTaskDelete+0xc8>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	e000      	b.n	8012f06 <vTaskDelete+0x1a>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	3304      	adds	r3, #4
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7fe fcf3 	bl	80118f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d004      	beq.n	8012f24 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	3318      	adds	r3, #24
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fe fcea 	bl	80118f8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8012f24:	4b24      	ldr	r3, [pc, #144]	; (8012fb8 <vTaskDelete+0xcc>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	3301      	adds	r3, #1
 8012f2a:	4a23      	ldr	r2, [pc, #140]	; (8012fb8 <vTaskDelete+0xcc>)
 8012f2c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8012f2e:	4b21      	ldr	r3, [pc, #132]	; (8012fb4 <vTaskDelete+0xc8>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d10b      	bne.n	8012f50 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	3304      	adds	r3, #4
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	481f      	ldr	r0, [pc, #124]	; (8012fbc <vTaskDelete+0xd0>)
 8012f40:	f7fe fc7d 	bl	801183e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012f44:	4b1e      	ldr	r3, [pc, #120]	; (8012fc0 <vTaskDelete+0xd4>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	3301      	adds	r3, #1
 8012f4a:	4a1d      	ldr	r2, [pc, #116]	; (8012fc0 <vTaskDelete+0xd4>)
 8012f4c:	6013      	str	r3, [r2, #0]
 8012f4e:	e009      	b.n	8012f64 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8012f50:	4b1c      	ldr	r3, [pc, #112]	; (8012fc4 <vTaskDelete+0xd8>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	3b01      	subs	r3, #1
 8012f56:	4a1b      	ldr	r2, [pc, #108]	; (8012fc4 <vTaskDelete+0xd8>)
 8012f58:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 fd16 	bl	801398c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8012f60:	f000 fd44 	bl	80139ec <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8012f64:	f001 fbe2 	bl	801472c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8012f68:	4b17      	ldr	r3, [pc, #92]	; (8012fc8 <vTaskDelete+0xdc>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d01c      	beq.n	8012faa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8012f70:	4b10      	ldr	r3, [pc, #64]	; (8012fb4 <vTaskDelete+0xc8>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68fa      	ldr	r2, [r7, #12]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d117      	bne.n	8012faa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8012f7a:	4b14      	ldr	r3, [pc, #80]	; (8012fcc <vTaskDelete+0xe0>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d00b      	beq.n	8012f9a <vTaskDelete+0xae>
 8012f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f86:	b672      	cpsid	i
 8012f88:	f383 8811 	msr	BASEPRI, r3
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f3bf 8f4f 	dsb	sy
 8012f94:	b662      	cpsie	i
 8012f96:	60bb      	str	r3, [r7, #8]
 8012f98:	e7fe      	b.n	8012f98 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 8012f9a:	4b0d      	ldr	r3, [pc, #52]	; (8012fd0 <vTaskDelete+0xe4>)
 8012f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fa0:	601a      	str	r2, [r3, #0]
 8012fa2:	f3bf 8f4f 	dsb	sy
 8012fa6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012faa:	bf00      	nop
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	20000924 	.word	0x20000924
 8012fb8:	20000e14 	.word	0x20000e14
 8012fbc:	20000dcc 	.word	0x20000dcc
 8012fc0:	20000de0 	.word	0x20000de0
 8012fc4:	20000df8 	.word	0x20000df8
 8012fc8:	20000e04 	.word	0x20000e04
 8012fcc:	20000e20 	.word	0x20000e20
 8012fd0:	e000ed04 	.word	0xe000ed04

08012fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d018      	beq.n	8013018 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012fe6:	4b14      	ldr	r3, [pc, #80]	; (8013038 <vTaskDelay+0x64>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d00b      	beq.n	8013006 <vTaskDelay+0x32>
 8012fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff2:	b672      	cpsid	i
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	b662      	cpsie	i
 8013002:	60bb      	str	r3, [r7, #8]
 8013004:	e7fe      	b.n	8013004 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8013006:	f000 f8eb 	bl	80131e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801300a:	2100      	movs	r1, #0
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 feab 	bl	8013d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013012:	f000 f8f3 	bl	80131fc <xTaskResumeAll>
 8013016:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d107      	bne.n	801302e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801301e:	4b07      	ldr	r3, [pc, #28]	; (801303c <vTaskDelay+0x68>)
 8013020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	f3bf 8f4f 	dsb	sy
 801302a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801302e:	bf00      	nop
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	20000e20 	.word	0x20000e20
 801303c:	e000ed04 	.word	0xe000ed04

08013040 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013040:	b580      	push	{r7, lr}
 8013042:	b088      	sub	sp, #32
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801304c:	69bb      	ldr	r3, [r7, #24]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d10b      	bne.n	801306a <eTaskGetState+0x2a>
 8013052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013056:	b672      	cpsid	i
 8013058:	f383 8811 	msr	BASEPRI, r3
 801305c:	f3bf 8f6f 	isb	sy
 8013060:	f3bf 8f4f 	dsb	sy
 8013064:	b662      	cpsie	i
 8013066:	60bb      	str	r3, [r7, #8]
 8013068:	e7fe      	b.n	8013068 <eTaskGetState+0x28>

		if( pxTCB == pxCurrentTCB )
 801306a:	4b24      	ldr	r3, [pc, #144]	; (80130fc <eTaskGetState+0xbc>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	69ba      	ldr	r2, [r7, #24]
 8013070:	429a      	cmp	r2, r3
 8013072:	d102      	bne.n	801307a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013074:	2300      	movs	r3, #0
 8013076:	77fb      	strb	r3, [r7, #31]
 8013078:	e03a      	b.n	80130f0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801307a:	f001 fb25 	bl	80146c8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	695b      	ldr	r3, [r3, #20]
 8013082:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013084:	4b1e      	ldr	r3, [pc, #120]	; (8013100 <eTaskGetState+0xc0>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801308a:	4b1e      	ldr	r3, [pc, #120]	; (8013104 <eTaskGetState+0xc4>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013090:	f001 fb4c 	bl	801472c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013094:	697a      	ldr	r2, [r7, #20]
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	429a      	cmp	r2, r3
 801309a:	d003      	beq.n	80130a4 <eTaskGetState+0x64>
 801309c:	697a      	ldr	r2, [r7, #20]
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d102      	bne.n	80130aa <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80130a4:	2302      	movs	r3, #2
 80130a6:	77fb      	strb	r3, [r7, #31]
 80130a8:	e022      	b.n	80130f0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	4a16      	ldr	r2, [pc, #88]	; (8013108 <eTaskGetState+0xc8>)
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d112      	bne.n	80130d8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d10b      	bne.n	80130d2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80130c0:	b2db      	uxtb	r3, r3
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d102      	bne.n	80130cc <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80130c6:	2302      	movs	r3, #2
 80130c8:	77fb      	strb	r3, [r7, #31]
 80130ca:	e011      	b.n	80130f0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80130cc:	2303      	movs	r3, #3
 80130ce:	77fb      	strb	r3, [r7, #31]
 80130d0:	e00e      	b.n	80130f0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80130d2:	2302      	movs	r3, #2
 80130d4:	77fb      	strb	r3, [r7, #31]
 80130d6:	e00b      	b.n	80130f0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	4a0c      	ldr	r2, [pc, #48]	; (801310c <eTaskGetState+0xcc>)
 80130dc:	4293      	cmp	r3, r2
 80130de:	d002      	beq.n	80130e6 <eTaskGetState+0xa6>
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d102      	bne.n	80130ec <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80130e6:	2304      	movs	r3, #4
 80130e8:	77fb      	strb	r3, [r7, #31]
 80130ea:	e001      	b.n	80130f0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80130ec:	2301      	movs	r3, #1
 80130ee:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80130f0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80130f2:	4618      	mov	r0, r3
 80130f4:	3720      	adds	r7, #32
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	20000924 	.word	0x20000924
 8013100:	20000db0 	.word	0x20000db0
 8013104:	20000db4 	.word	0x20000db4
 8013108:	20000de4 	.word	0x20000de4
 801310c:	20000dcc 	.word	0x20000dcc

08013110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b08a      	sub	sp, #40	; 0x28
 8013114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013116:	2300      	movs	r3, #0
 8013118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801311a:	2300      	movs	r3, #0
 801311c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801311e:	463a      	mov	r2, r7
 8013120:	1d39      	adds	r1, r7, #4
 8013122:	f107 0308 	add.w	r3, r7, #8
 8013126:	4618      	mov	r0, r3
 8013128:	f7fe fb28 	bl	801177c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801312c:	6839      	ldr	r1, [r7, #0]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	68ba      	ldr	r2, [r7, #8]
 8013132:	9202      	str	r2, [sp, #8]
 8013134:	9301      	str	r3, [sp, #4]
 8013136:	2300      	movs	r3, #0
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	2300      	movs	r3, #0
 801313c:	460a      	mov	r2, r1
 801313e:	4922      	ldr	r1, [pc, #136]	; (80131c8 <vTaskStartScheduler+0xb8>)
 8013140:	4822      	ldr	r0, [pc, #136]	; (80131cc <vTaskStartScheduler+0xbc>)
 8013142:	f7ff fd2b 	bl	8012b9c <xTaskCreateStatic>
 8013146:	4602      	mov	r2, r0
 8013148:	4b21      	ldr	r3, [pc, #132]	; (80131d0 <vTaskStartScheduler+0xc0>)
 801314a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801314c:	4b20      	ldr	r3, [pc, #128]	; (80131d0 <vTaskStartScheduler+0xc0>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d002      	beq.n	801315a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013154:	2301      	movs	r3, #1
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	e001      	b.n	801315e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801315a:	2300      	movs	r3, #0
 801315c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	2b01      	cmp	r3, #1
 8013162:	d102      	bne.n	801316a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013164:	f000 fe54 	bl	8013e10 <xTimerCreateTimerTask>
 8013168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	2b01      	cmp	r3, #1
 801316e:	d117      	bne.n	80131a0 <vTaskStartScheduler+0x90>
 8013170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013174:	b672      	cpsid	i
 8013176:	f383 8811 	msr	BASEPRI, r3
 801317a:	f3bf 8f6f 	isb	sy
 801317e:	f3bf 8f4f 	dsb	sy
 8013182:	b662      	cpsie	i
 8013184:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013186:	4b13      	ldr	r3, [pc, #76]	; (80131d4 <vTaskStartScheduler+0xc4>)
 8013188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801318c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801318e:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <vTaskStartScheduler+0xc8>)
 8013190:	2201      	movs	r2, #1
 8013192:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013194:	4b11      	ldr	r3, [pc, #68]	; (80131dc <vTaskStartScheduler+0xcc>)
 8013196:	2200      	movs	r2, #0
 8013198:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801319a:	f001 fa19 	bl	80145d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801319e:	e00f      	b.n	80131c0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131a6:	d10b      	bne.n	80131c0 <vTaskStartScheduler+0xb0>
 80131a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ac:	b672      	cpsid	i
 80131ae:	f383 8811 	msr	BASEPRI, r3
 80131b2:	f3bf 8f6f 	isb	sy
 80131b6:	f3bf 8f4f 	dsb	sy
 80131ba:	b662      	cpsie	i
 80131bc:	60fb      	str	r3, [r7, #12]
 80131be:	e7fe      	b.n	80131be <vTaskStartScheduler+0xae>
}
 80131c0:	bf00      	nop
 80131c2:	3718      	adds	r7, #24
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	08025740 	.word	0x08025740
 80131cc:	08013881 	.word	0x08013881
 80131d0:	20000e1c 	.word	0x20000e1c
 80131d4:	20000e18 	.word	0x20000e18
 80131d8:	20000e04 	.word	0x20000e04
 80131dc:	20000dfc 	.word	0x20000dfc

080131e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80131e0:	b480      	push	{r7}
 80131e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80131e4:	4b04      	ldr	r3, [pc, #16]	; (80131f8 <vTaskSuspendAll+0x18>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	3301      	adds	r3, #1
 80131ea:	4a03      	ldr	r2, [pc, #12]	; (80131f8 <vTaskSuspendAll+0x18>)
 80131ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80131ee:	bf00      	nop
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr
 80131f8:	20000e20 	.word	0x20000e20

080131fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013202:	2300      	movs	r3, #0
 8013204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013206:	2300      	movs	r3, #0
 8013208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801320a:	4b42      	ldr	r3, [pc, #264]	; (8013314 <xTaskResumeAll+0x118>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d10b      	bne.n	801322a <xTaskResumeAll+0x2e>
 8013212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013216:	b672      	cpsid	i
 8013218:	f383 8811 	msr	BASEPRI, r3
 801321c:	f3bf 8f6f 	isb	sy
 8013220:	f3bf 8f4f 	dsb	sy
 8013224:	b662      	cpsie	i
 8013226:	603b      	str	r3, [r7, #0]
 8013228:	e7fe      	b.n	8013228 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801322a:	f001 fa4d 	bl	80146c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801322e:	4b39      	ldr	r3, [pc, #228]	; (8013314 <xTaskResumeAll+0x118>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	3b01      	subs	r3, #1
 8013234:	4a37      	ldr	r2, [pc, #220]	; (8013314 <xTaskResumeAll+0x118>)
 8013236:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013238:	4b36      	ldr	r3, [pc, #216]	; (8013314 <xTaskResumeAll+0x118>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d162      	bne.n	8013306 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013240:	4b35      	ldr	r3, [pc, #212]	; (8013318 <xTaskResumeAll+0x11c>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d05e      	beq.n	8013306 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013248:	e02f      	b.n	80132aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801324a:	4b34      	ldr	r3, [pc, #208]	; (801331c <xTaskResumeAll+0x120>)
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	3318      	adds	r3, #24
 8013256:	4618      	mov	r0, r3
 8013258:	f7fe fb4e 	bl	80118f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	3304      	adds	r3, #4
 8013260:	4618      	mov	r0, r3
 8013262:	f7fe fb49 	bl	80118f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801326a:	4b2d      	ldr	r3, [pc, #180]	; (8013320 <xTaskResumeAll+0x124>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	429a      	cmp	r2, r3
 8013270:	d903      	bls.n	801327a <xTaskResumeAll+0x7e>
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013276:	4a2a      	ldr	r2, [pc, #168]	; (8013320 <xTaskResumeAll+0x124>)
 8013278:	6013      	str	r3, [r2, #0]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801327e:	4613      	mov	r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4413      	add	r3, r2
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	4a27      	ldr	r2, [pc, #156]	; (8013324 <xTaskResumeAll+0x128>)
 8013288:	441a      	add	r2, r3
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	3304      	adds	r3, #4
 801328e:	4619      	mov	r1, r3
 8013290:	4610      	mov	r0, r2
 8013292:	f7fe fad4 	bl	801183e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801329a:	4b23      	ldr	r3, [pc, #140]	; (8013328 <xTaskResumeAll+0x12c>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d302      	bcc.n	80132aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80132a4:	4b21      	ldr	r3, [pc, #132]	; (801332c <xTaskResumeAll+0x130>)
 80132a6:	2201      	movs	r2, #1
 80132a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132aa:	4b1c      	ldr	r3, [pc, #112]	; (801331c <xTaskResumeAll+0x120>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1cb      	bne.n	801324a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80132b8:	f000 fb98 	bl	80139ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80132bc:	4b1c      	ldr	r3, [pc, #112]	; (8013330 <xTaskResumeAll+0x134>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d010      	beq.n	80132ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80132c8:	f000 f858 	bl	801337c <xTaskIncrementTick>
 80132cc:	4603      	mov	r3, r0
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d002      	beq.n	80132d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80132d2:	4b16      	ldr	r3, [pc, #88]	; (801332c <xTaskResumeAll+0x130>)
 80132d4:	2201      	movs	r2, #1
 80132d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	3b01      	subs	r3, #1
 80132dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d1f1      	bne.n	80132c8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80132e4:	4b12      	ldr	r3, [pc, #72]	; (8013330 <xTaskResumeAll+0x134>)
 80132e6:	2200      	movs	r2, #0
 80132e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80132ea:	4b10      	ldr	r3, [pc, #64]	; (801332c <xTaskResumeAll+0x130>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d009      	beq.n	8013306 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80132f2:	2301      	movs	r3, #1
 80132f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80132f6:	4b0f      	ldr	r3, [pc, #60]	; (8013334 <xTaskResumeAll+0x138>)
 80132f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132fc:	601a      	str	r2, [r3, #0]
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013306:	f001 fa11 	bl	801472c <vPortExitCritical>

	return xAlreadyYielded;
 801330a:	68bb      	ldr	r3, [r7, #8]
}
 801330c:	4618      	mov	r0, r3
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	20000e20 	.word	0x20000e20
 8013318:	20000df8 	.word	0x20000df8
 801331c:	20000db8 	.word	0x20000db8
 8013320:	20000e00 	.word	0x20000e00
 8013324:	20000928 	.word	0x20000928
 8013328:	20000924 	.word	0x20000924
 801332c:	20000e0c 	.word	0x20000e0c
 8013330:	20000e08 	.word	0x20000e08
 8013334:	e000ed04 	.word	0xe000ed04

08013338 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013338:	b480      	push	{r7}
 801333a:	b083      	sub	sp, #12
 801333c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801333e:	4b05      	ldr	r3, [pc, #20]	; (8013354 <xTaskGetTickCount+0x1c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013344:	687b      	ldr	r3, [r7, #4]
}
 8013346:	4618      	mov	r0, r3
 8013348:	370c      	adds	r7, #12
 801334a:	46bd      	mov	sp, r7
 801334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013350:	4770      	bx	lr
 8013352:	bf00      	nop
 8013354:	20000dfc 	.word	0x20000dfc

08013358 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801335e:	f001 fa93 	bl	8014888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013362:	2300      	movs	r3, #0
 8013364:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013366:	4b04      	ldr	r3, [pc, #16]	; (8013378 <xTaskGetTickCountFromISR+0x20>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801336c:	683b      	ldr	r3, [r7, #0]
}
 801336e:	4618      	mov	r0, r3
 8013370:	3708      	adds	r7, #8
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
 8013376:	bf00      	nop
 8013378:	20000dfc 	.word	0x20000dfc

0801337c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b086      	sub	sp, #24
 8013380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013382:	2300      	movs	r3, #0
 8013384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013386:	4b53      	ldr	r3, [pc, #332]	; (80134d4 <xTaskIncrementTick+0x158>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	f040 8090 	bne.w	80134b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013390:	4b51      	ldr	r3, [pc, #324]	; (80134d8 <xTaskIncrementTick+0x15c>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	3301      	adds	r3, #1
 8013396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013398:	4a4f      	ldr	r2, [pc, #316]	; (80134d8 <xTaskIncrementTick+0x15c>)
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d121      	bne.n	80133e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80133a4:	4b4d      	ldr	r3, [pc, #308]	; (80134dc <xTaskIncrementTick+0x160>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d00b      	beq.n	80133c6 <xTaskIncrementTick+0x4a>
 80133ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b2:	b672      	cpsid	i
 80133b4:	f383 8811 	msr	BASEPRI, r3
 80133b8:	f3bf 8f6f 	isb	sy
 80133bc:	f3bf 8f4f 	dsb	sy
 80133c0:	b662      	cpsie	i
 80133c2:	603b      	str	r3, [r7, #0]
 80133c4:	e7fe      	b.n	80133c4 <xTaskIncrementTick+0x48>
 80133c6:	4b45      	ldr	r3, [pc, #276]	; (80134dc <xTaskIncrementTick+0x160>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	4b44      	ldr	r3, [pc, #272]	; (80134e0 <xTaskIncrementTick+0x164>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	4a42      	ldr	r2, [pc, #264]	; (80134dc <xTaskIncrementTick+0x160>)
 80133d2:	6013      	str	r3, [r2, #0]
 80133d4:	4a42      	ldr	r2, [pc, #264]	; (80134e0 <xTaskIncrementTick+0x164>)
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	6013      	str	r3, [r2, #0]
 80133da:	4b42      	ldr	r3, [pc, #264]	; (80134e4 <xTaskIncrementTick+0x168>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	3301      	adds	r3, #1
 80133e0:	4a40      	ldr	r2, [pc, #256]	; (80134e4 <xTaskIncrementTick+0x168>)
 80133e2:	6013      	str	r3, [r2, #0]
 80133e4:	f000 fb02 	bl	80139ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80133e8:	4b3f      	ldr	r3, [pc, #252]	; (80134e8 <xTaskIncrementTick+0x16c>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	693a      	ldr	r2, [r7, #16]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d349      	bcc.n	8013486 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133f2:	4b3a      	ldr	r3, [pc, #232]	; (80134dc <xTaskIncrementTick+0x160>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d104      	bne.n	8013406 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133fc:	4b3a      	ldr	r3, [pc, #232]	; (80134e8 <xTaskIncrementTick+0x16c>)
 80133fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013402:	601a      	str	r2, [r3, #0]
					break;
 8013404:	e03f      	b.n	8013486 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013406:	4b35      	ldr	r3, [pc, #212]	; (80134dc <xTaskIncrementTick+0x160>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013416:	693a      	ldr	r2, [r7, #16]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	429a      	cmp	r2, r3
 801341c:	d203      	bcs.n	8013426 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801341e:	4a32      	ldr	r2, [pc, #200]	; (80134e8 <xTaskIncrementTick+0x16c>)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013424:	e02f      	b.n	8013486 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	3304      	adds	r3, #4
 801342a:	4618      	mov	r0, r3
 801342c:	f7fe fa64 	bl	80118f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013434:	2b00      	cmp	r3, #0
 8013436:	d004      	beq.n	8013442 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	3318      	adds	r3, #24
 801343c:	4618      	mov	r0, r3
 801343e:	f7fe fa5b 	bl	80118f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	4b29      	ldr	r3, [pc, #164]	; (80134ec <xTaskIncrementTick+0x170>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	429a      	cmp	r2, r3
 801344c:	d903      	bls.n	8013456 <xTaskIncrementTick+0xda>
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013452:	4a26      	ldr	r2, [pc, #152]	; (80134ec <xTaskIncrementTick+0x170>)
 8013454:	6013      	str	r3, [r2, #0]
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801345a:	4613      	mov	r3, r2
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	4413      	add	r3, r2
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	4a23      	ldr	r2, [pc, #140]	; (80134f0 <xTaskIncrementTick+0x174>)
 8013464:	441a      	add	r2, r3
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	3304      	adds	r3, #4
 801346a:	4619      	mov	r1, r3
 801346c:	4610      	mov	r0, r2
 801346e:	f7fe f9e6 	bl	801183e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013476:	4b1f      	ldr	r3, [pc, #124]	; (80134f4 <xTaskIncrementTick+0x178>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347c:	429a      	cmp	r2, r3
 801347e:	d3b8      	bcc.n	80133f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013480:	2301      	movs	r3, #1
 8013482:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013484:	e7b5      	b.n	80133f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013486:	4b1b      	ldr	r3, [pc, #108]	; (80134f4 <xTaskIncrementTick+0x178>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801348c:	4918      	ldr	r1, [pc, #96]	; (80134f0 <xTaskIncrementTick+0x174>)
 801348e:	4613      	mov	r3, r2
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	4413      	add	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	440b      	add	r3, r1
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2b01      	cmp	r3, #1
 801349c:	d901      	bls.n	80134a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801349e:	2301      	movs	r3, #1
 80134a0:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80134a2:	4b15      	ldr	r3, [pc, #84]	; (80134f8 <xTaskIncrementTick+0x17c>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d109      	bne.n	80134be <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 80134aa:	f7fe f95f 	bl	801176c <vApplicationTickHook>
 80134ae:	e006      	b.n	80134be <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80134b0:	4b11      	ldr	r3, [pc, #68]	; (80134f8 <xTaskIncrementTick+0x17c>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	3301      	adds	r3, #1
 80134b6:	4a10      	ldr	r2, [pc, #64]	; (80134f8 <xTaskIncrementTick+0x17c>)
 80134b8:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80134ba:	f7fe f957 	bl	801176c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80134be:	4b0f      	ldr	r3, [pc, #60]	; (80134fc <xTaskIncrementTick+0x180>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 80134c6:	2301      	movs	r3, #1
 80134c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80134ca:	697b      	ldr	r3, [r7, #20]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3718      	adds	r7, #24
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	20000e20 	.word	0x20000e20
 80134d8:	20000dfc 	.word	0x20000dfc
 80134dc:	20000db0 	.word	0x20000db0
 80134e0:	20000db4 	.word	0x20000db4
 80134e4:	20000e10 	.word	0x20000e10
 80134e8:	20000e18 	.word	0x20000e18
 80134ec:	20000e00 	.word	0x20000e00
 80134f0:	20000928 	.word	0x20000928
 80134f4:	20000924 	.word	0x20000924
 80134f8:	20000e08 	.word	0x20000e08
 80134fc:	20000e0c 	.word	0x20000e0c

08013500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b086      	sub	sp, #24
 8013504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013506:	4b3b      	ldr	r3, [pc, #236]	; (80135f4 <vTaskSwitchContext+0xf4>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d003      	beq.n	8013516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801350e:	4b3a      	ldr	r3, [pc, #232]	; (80135f8 <vTaskSwitchContext+0xf8>)
 8013510:	2201      	movs	r2, #1
 8013512:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013514:	e069      	b.n	80135ea <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8013516:	4b38      	ldr	r3, [pc, #224]	; (80135f8 <vTaskSwitchContext+0xf8>)
 8013518:	2200      	movs	r2, #0
 801351a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801351c:	4b37      	ldr	r3, [pc, #220]	; (80135fc <vTaskSwitchContext+0xfc>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013522:	613b      	str	r3, [r7, #16]
 8013524:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8013528:	60fb      	str	r3, [r7, #12]
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	68fa      	ldr	r2, [r7, #12]
 8013530:	429a      	cmp	r2, r3
 8013532:	d111      	bne.n	8013558 <vTaskSwitchContext+0x58>
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	3304      	adds	r3, #4
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	429a      	cmp	r2, r3
 801353e:	d10b      	bne.n	8013558 <vTaskSwitchContext+0x58>
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	3308      	adds	r3, #8
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	68fa      	ldr	r2, [r7, #12]
 8013548:	429a      	cmp	r2, r3
 801354a:	d105      	bne.n	8013558 <vTaskSwitchContext+0x58>
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	330c      	adds	r3, #12
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	429a      	cmp	r2, r3
 8013556:	d008      	beq.n	801356a <vTaskSwitchContext+0x6a>
 8013558:	4b28      	ldr	r3, [pc, #160]	; (80135fc <vTaskSwitchContext+0xfc>)
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	4b27      	ldr	r3, [pc, #156]	; (80135fc <vTaskSwitchContext+0xfc>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	3334      	adds	r3, #52	; 0x34
 8013562:	4619      	mov	r1, r3
 8013564:	4610      	mov	r0, r2
 8013566:	f7ed f82a 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801356a:	4b25      	ldr	r3, [pc, #148]	; (8013600 <vTaskSwitchContext+0x100>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	617b      	str	r3, [r7, #20]
 8013570:	e011      	b.n	8013596 <vTaskSwitchContext+0x96>
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d10b      	bne.n	8013590 <vTaskSwitchContext+0x90>
 8013578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357c:	b672      	cpsid	i
 801357e:	f383 8811 	msr	BASEPRI, r3
 8013582:	f3bf 8f6f 	isb	sy
 8013586:	f3bf 8f4f 	dsb	sy
 801358a:	b662      	cpsie	i
 801358c:	607b      	str	r3, [r7, #4]
 801358e:	e7fe      	b.n	801358e <vTaskSwitchContext+0x8e>
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	3b01      	subs	r3, #1
 8013594:	617b      	str	r3, [r7, #20]
 8013596:	491b      	ldr	r1, [pc, #108]	; (8013604 <vTaskSwitchContext+0x104>)
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	4613      	mov	r3, r2
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	4413      	add	r3, r2
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	440b      	add	r3, r1
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d0e3      	beq.n	8013572 <vTaskSwitchContext+0x72>
 80135aa:	697a      	ldr	r2, [r7, #20]
 80135ac:	4613      	mov	r3, r2
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	4413      	add	r3, r2
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	4a13      	ldr	r2, [pc, #76]	; (8013604 <vTaskSwitchContext+0x104>)
 80135b6:	4413      	add	r3, r2
 80135b8:	60bb      	str	r3, [r7, #8]
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	685a      	ldr	r2, [r3, #4]
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	605a      	str	r2, [r3, #4]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	685a      	ldr	r2, [r3, #4]
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	3308      	adds	r3, #8
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d104      	bne.n	80135da <vTaskSwitchContext+0xda>
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	685a      	ldr	r2, [r3, #4]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	605a      	str	r2, [r3, #4]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	4a06      	ldr	r2, [pc, #24]	; (80135fc <vTaskSwitchContext+0xfc>)
 80135e2:	6013      	str	r3, [r2, #0]
 80135e4:	4a06      	ldr	r2, [pc, #24]	; (8013600 <vTaskSwitchContext+0x100>)
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	6013      	str	r3, [r2, #0]
}
 80135ea:	bf00      	nop
 80135ec:	3718      	adds	r7, #24
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	20000e20 	.word	0x20000e20
 80135f8:	20000e0c 	.word	0x20000e0c
 80135fc:	20000924 	.word	0x20000924
 8013600:	20000e00 	.word	0x20000e00
 8013604:	20000928 	.word	0x20000928

08013608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b084      	sub	sp, #16
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d10b      	bne.n	8013630 <vTaskPlaceOnEventList+0x28>
 8013618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361c:	b672      	cpsid	i
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	b662      	cpsie	i
 801362c:	60fb      	str	r3, [r7, #12]
 801362e:	e7fe      	b.n	801362e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013630:	4b07      	ldr	r3, [pc, #28]	; (8013650 <vTaskPlaceOnEventList+0x48>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	3318      	adds	r3, #24
 8013636:	4619      	mov	r1, r3
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7fe f924 	bl	8011886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801363e:	2101      	movs	r1, #1
 8013640:	6838      	ldr	r0, [r7, #0]
 8013642:	f000 fb91 	bl	8013d68 <prvAddCurrentTaskToDelayedList>
}
 8013646:	bf00      	nop
 8013648:	3710      	adds	r7, #16
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	20000924 	.word	0x20000924

08013654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013654:	b580      	push	{r7, lr}
 8013656:	b086      	sub	sp, #24
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d10b      	bne.n	801367e <vTaskPlaceOnEventListRestricted+0x2a>
 8013666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366a:	b672      	cpsid	i
 801366c:	f383 8811 	msr	BASEPRI, r3
 8013670:	f3bf 8f6f 	isb	sy
 8013674:	f3bf 8f4f 	dsb	sy
 8013678:	b662      	cpsie	i
 801367a:	617b      	str	r3, [r7, #20]
 801367c:	e7fe      	b.n	801367c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801367e:	4b0a      	ldr	r3, [pc, #40]	; (80136a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	3318      	adds	r3, #24
 8013684:	4619      	mov	r1, r3
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f7fe f8d9 	bl	801183e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013696:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013698:	6879      	ldr	r1, [r7, #4]
 801369a:	68b8      	ldr	r0, [r7, #8]
 801369c:	f000 fb64 	bl	8013d68 <prvAddCurrentTaskToDelayedList>
	}
 80136a0:	bf00      	nop
 80136a2:	3718      	adds	r7, #24
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	20000924 	.word	0x20000924

080136ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b086      	sub	sp, #24
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d10b      	bne.n	80136da <xTaskRemoveFromEventList+0x2e>
 80136c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c6:	b672      	cpsid	i
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	b662      	cpsie	i
 80136d6:	60fb      	str	r3, [r7, #12]
 80136d8:	e7fe      	b.n	80136d8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	3318      	adds	r3, #24
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fe f90a 	bl	80118f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80136e4:	4b1d      	ldr	r3, [pc, #116]	; (801375c <xTaskRemoveFromEventList+0xb0>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d11d      	bne.n	8013728 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	3304      	adds	r3, #4
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fe f901 	bl	80118f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136fa:	4b19      	ldr	r3, [pc, #100]	; (8013760 <xTaskRemoveFromEventList+0xb4>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d903      	bls.n	801370a <xTaskRemoveFromEventList+0x5e>
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013706:	4a16      	ldr	r2, [pc, #88]	; (8013760 <xTaskRemoveFromEventList+0xb4>)
 8013708:	6013      	str	r3, [r2, #0]
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801370e:	4613      	mov	r3, r2
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	4413      	add	r3, r2
 8013714:	009b      	lsls	r3, r3, #2
 8013716:	4a13      	ldr	r2, [pc, #76]	; (8013764 <xTaskRemoveFromEventList+0xb8>)
 8013718:	441a      	add	r2, r3
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	3304      	adds	r3, #4
 801371e:	4619      	mov	r1, r3
 8013720:	4610      	mov	r0, r2
 8013722:	f7fe f88c 	bl	801183e <vListInsertEnd>
 8013726:	e005      	b.n	8013734 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	3318      	adds	r3, #24
 801372c:	4619      	mov	r1, r3
 801372e:	480e      	ldr	r0, [pc, #56]	; (8013768 <xTaskRemoveFromEventList+0xbc>)
 8013730:	f7fe f885 	bl	801183e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013738:	4b0c      	ldr	r3, [pc, #48]	; (801376c <xTaskRemoveFromEventList+0xc0>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801373e:	429a      	cmp	r2, r3
 8013740:	d905      	bls.n	801374e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013742:	2301      	movs	r3, #1
 8013744:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013746:	4b0a      	ldr	r3, [pc, #40]	; (8013770 <xTaskRemoveFromEventList+0xc4>)
 8013748:	2201      	movs	r2, #1
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	e001      	b.n	8013752 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801374e:	2300      	movs	r3, #0
 8013750:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013752:	697b      	ldr	r3, [r7, #20]
}
 8013754:	4618      	mov	r0, r3
 8013756:	3718      	adds	r7, #24
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	20000e20 	.word	0x20000e20
 8013760:	20000e00 	.word	0x20000e00
 8013764:	20000928 	.word	0x20000928
 8013768:	20000db8 	.word	0x20000db8
 801376c:	20000924 	.word	0x20000924
 8013770:	20000e0c 	.word	0x20000e0c

08013774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013774:	b480      	push	{r7}
 8013776:	b083      	sub	sp, #12
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801377c:	4b06      	ldr	r3, [pc, #24]	; (8013798 <vTaskInternalSetTimeOutState+0x24>)
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013784:	4b05      	ldr	r3, [pc, #20]	; (801379c <vTaskInternalSetTimeOutState+0x28>)
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	605a      	str	r2, [r3, #4]
}
 801378c:	bf00      	nop
 801378e:	370c      	adds	r7, #12
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr
 8013798:	20000e10 	.word	0x20000e10
 801379c:	20000dfc 	.word	0x20000dfc

080137a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b088      	sub	sp, #32
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d10b      	bne.n	80137c8 <xTaskCheckForTimeOut+0x28>
 80137b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b4:	b672      	cpsid	i
 80137b6:	f383 8811 	msr	BASEPRI, r3
 80137ba:	f3bf 8f6f 	isb	sy
 80137be:	f3bf 8f4f 	dsb	sy
 80137c2:	b662      	cpsie	i
 80137c4:	613b      	str	r3, [r7, #16]
 80137c6:	e7fe      	b.n	80137c6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d10b      	bne.n	80137e6 <xTaskCheckForTimeOut+0x46>
 80137ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d2:	b672      	cpsid	i
 80137d4:	f383 8811 	msr	BASEPRI, r3
 80137d8:	f3bf 8f6f 	isb	sy
 80137dc:	f3bf 8f4f 	dsb	sy
 80137e0:	b662      	cpsie	i
 80137e2:	60fb      	str	r3, [r7, #12]
 80137e4:	e7fe      	b.n	80137e4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80137e6:	f000 ff6f 	bl	80146c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80137ea:	4b1d      	ldr	r3, [pc, #116]	; (8013860 <xTaskCheckForTimeOut+0xc0>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	69ba      	ldr	r2, [r7, #24]
 80137f6:	1ad3      	subs	r3, r2, r3
 80137f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013802:	d102      	bne.n	801380a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013804:	2300      	movs	r3, #0
 8013806:	61fb      	str	r3, [r7, #28]
 8013808:	e023      	b.n	8013852 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	4b15      	ldr	r3, [pc, #84]	; (8013864 <xTaskCheckForTimeOut+0xc4>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	429a      	cmp	r2, r3
 8013814:	d007      	beq.n	8013826 <xTaskCheckForTimeOut+0x86>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	69ba      	ldr	r2, [r7, #24]
 801381c:	429a      	cmp	r2, r3
 801381e:	d302      	bcc.n	8013826 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013820:	2301      	movs	r3, #1
 8013822:	61fb      	str	r3, [r7, #28]
 8013824:	e015      	b.n	8013852 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	697a      	ldr	r2, [r7, #20]
 801382c:	429a      	cmp	r2, r3
 801382e:	d20b      	bcs.n	8013848 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	1ad2      	subs	r2, r2, r3
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff ff99 	bl	8013774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013842:	2300      	movs	r3, #0
 8013844:	61fb      	str	r3, [r7, #28]
 8013846:	e004      	b.n	8013852 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2200      	movs	r2, #0
 801384c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801384e:	2301      	movs	r3, #1
 8013850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013852:	f000 ff6b 	bl	801472c <vPortExitCritical>

	return xReturn;
 8013856:	69fb      	ldr	r3, [r7, #28]
}
 8013858:	4618      	mov	r0, r3
 801385a:	3720      	adds	r7, #32
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	20000dfc 	.word	0x20000dfc
 8013864:	20000e10 	.word	0x20000e10

08013868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013868:	b480      	push	{r7}
 801386a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801386c:	4b03      	ldr	r3, [pc, #12]	; (801387c <vTaskMissedYield+0x14>)
 801386e:	2201      	movs	r2, #1
 8013870:	601a      	str	r2, [r3, #0]
}
 8013872:	bf00      	nop
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr
 801387c:	20000e0c 	.word	0x20000e0c

08013880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013888:	f000 f854 	bl	8013934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801388c:	4b07      	ldr	r3, [pc, #28]	; (80138ac <prvIdleTask+0x2c>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	2b01      	cmp	r3, #1
 8013892:	d907      	bls.n	80138a4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013894:	4b06      	ldr	r3, [pc, #24]	; (80138b0 <prvIdleTask+0x30>)
 8013896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801389a:	601a      	str	r2, [r3, #0]
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80138a4:	f7ec fe84 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80138a8:	e7ee      	b.n	8013888 <prvIdleTask+0x8>
 80138aa:	bf00      	nop
 80138ac:	20000928 	.word	0x20000928
 80138b0:	e000ed04 	.word	0xe000ed04

080138b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80138ba:	2300      	movs	r3, #0
 80138bc:	607b      	str	r3, [r7, #4]
 80138be:	e00c      	b.n	80138da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	4613      	mov	r3, r2
 80138c4:	009b      	lsls	r3, r3, #2
 80138c6:	4413      	add	r3, r2
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	4a12      	ldr	r2, [pc, #72]	; (8013914 <prvInitialiseTaskLists+0x60>)
 80138cc:	4413      	add	r3, r2
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fd ff88 	bl	80117e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	3301      	adds	r3, #1
 80138d8:	607b      	str	r3, [r7, #4]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2b37      	cmp	r3, #55	; 0x37
 80138de:	d9ef      	bls.n	80138c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80138e0:	480d      	ldr	r0, [pc, #52]	; (8013918 <prvInitialiseTaskLists+0x64>)
 80138e2:	f7fd ff7f 	bl	80117e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80138e6:	480d      	ldr	r0, [pc, #52]	; (801391c <prvInitialiseTaskLists+0x68>)
 80138e8:	f7fd ff7c 	bl	80117e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80138ec:	480c      	ldr	r0, [pc, #48]	; (8013920 <prvInitialiseTaskLists+0x6c>)
 80138ee:	f7fd ff79 	bl	80117e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80138f2:	480c      	ldr	r0, [pc, #48]	; (8013924 <prvInitialiseTaskLists+0x70>)
 80138f4:	f7fd ff76 	bl	80117e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80138f8:	480b      	ldr	r0, [pc, #44]	; (8013928 <prvInitialiseTaskLists+0x74>)
 80138fa:	f7fd ff73 	bl	80117e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80138fe:	4b0b      	ldr	r3, [pc, #44]	; (801392c <prvInitialiseTaskLists+0x78>)
 8013900:	4a05      	ldr	r2, [pc, #20]	; (8013918 <prvInitialiseTaskLists+0x64>)
 8013902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013904:	4b0a      	ldr	r3, [pc, #40]	; (8013930 <prvInitialiseTaskLists+0x7c>)
 8013906:	4a05      	ldr	r2, [pc, #20]	; (801391c <prvInitialiseTaskLists+0x68>)
 8013908:	601a      	str	r2, [r3, #0]
}
 801390a:	bf00      	nop
 801390c:	3708      	adds	r7, #8
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	20000928 	.word	0x20000928
 8013918:	20000d88 	.word	0x20000d88
 801391c:	20000d9c 	.word	0x20000d9c
 8013920:	20000db8 	.word	0x20000db8
 8013924:	20000dcc 	.word	0x20000dcc
 8013928:	20000de4 	.word	0x20000de4
 801392c:	20000db0 	.word	0x20000db0
 8013930:	20000db4 	.word	0x20000db4

08013934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801393a:	e019      	b.n	8013970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801393c:	f000 fec4 	bl	80146c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013940:	4b0f      	ldr	r3, [pc, #60]	; (8013980 <prvCheckTasksWaitingTermination+0x4c>)
 8013942:	68db      	ldr	r3, [r3, #12]
 8013944:	68db      	ldr	r3, [r3, #12]
 8013946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	3304      	adds	r3, #4
 801394c:	4618      	mov	r0, r3
 801394e:	f7fd ffd3 	bl	80118f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013952:	4b0c      	ldr	r3, [pc, #48]	; (8013984 <prvCheckTasksWaitingTermination+0x50>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	3b01      	subs	r3, #1
 8013958:	4a0a      	ldr	r2, [pc, #40]	; (8013984 <prvCheckTasksWaitingTermination+0x50>)
 801395a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801395c:	4b0a      	ldr	r3, [pc, #40]	; (8013988 <prvCheckTasksWaitingTermination+0x54>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	3b01      	subs	r3, #1
 8013962:	4a09      	ldr	r2, [pc, #36]	; (8013988 <prvCheckTasksWaitingTermination+0x54>)
 8013964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013966:	f000 fee1 	bl	801472c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 f80e 	bl	801398c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013970:	4b05      	ldr	r3, [pc, #20]	; (8013988 <prvCheckTasksWaitingTermination+0x54>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d1e1      	bne.n	801393c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013978:	bf00      	nop
 801397a:	3708      	adds	r7, #8
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}
 8013980:	20000dcc 	.word	0x20000dcc
 8013984:	20000df8 	.word	0x20000df8
 8013988:	20000de0 	.word	0x20000de0

0801398c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801398c:	b580      	push	{r7, lr}
 801398e:	b084      	sub	sp, #16
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801399a:	2b00      	cmp	r3, #0
 801399c:	d108      	bne.n	80139b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a2:	4618      	mov	r0, r3
 80139a4:	f001 f87e 	bl	8014aa4 <vPortFree>
				vPortFree( pxTCB );
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f001 f87b 	bl	8014aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80139ae:	e019      	b.n	80139e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d103      	bne.n	80139c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f001 f872 	bl	8014aa4 <vPortFree>
	}
 80139c0:	e010      	b.n	80139e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d00b      	beq.n	80139e4 <prvDeleteTCB+0x58>
 80139cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d0:	b672      	cpsid	i
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	b662      	cpsie	i
 80139e0:	60fb      	str	r3, [r7, #12]
 80139e2:	e7fe      	b.n	80139e2 <prvDeleteTCB+0x56>
	}
 80139e4:	bf00      	nop
 80139e6:	3710      	adds	r7, #16
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}

080139ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139f2:	4b0c      	ldr	r3, [pc, #48]	; (8013a24 <prvResetNextTaskUnblockTime+0x38>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d104      	bne.n	8013a06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80139fc:	4b0a      	ldr	r3, [pc, #40]	; (8013a28 <prvResetNextTaskUnblockTime+0x3c>)
 80139fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013a04:	e008      	b.n	8013a18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a06:	4b07      	ldr	r3, [pc, #28]	; (8013a24 <prvResetNextTaskUnblockTime+0x38>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	4a04      	ldr	r2, [pc, #16]	; (8013a28 <prvResetNextTaskUnblockTime+0x3c>)
 8013a16:	6013      	str	r3, [r2, #0]
}
 8013a18:	bf00      	nop
 8013a1a:	370c      	adds	r7, #12
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr
 8013a24:	20000db0 	.word	0x20000db0
 8013a28:	20000e18 	.word	0x20000e18

08013a2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013a32:	4b05      	ldr	r3, [pc, #20]	; (8013a48 <xTaskGetCurrentTaskHandle+0x1c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013a38:	687b      	ldr	r3, [r7, #4]
	}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	20000924 	.word	0x20000924

08013a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b083      	sub	sp, #12
 8013a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013a52:	4b0b      	ldr	r3, [pc, #44]	; (8013a80 <xTaskGetSchedulerState+0x34>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d102      	bne.n	8013a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	607b      	str	r3, [r7, #4]
 8013a5e:	e008      	b.n	8013a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a60:	4b08      	ldr	r3, [pc, #32]	; (8013a84 <xTaskGetSchedulerState+0x38>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d102      	bne.n	8013a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013a68:	2302      	movs	r3, #2
 8013a6a:	607b      	str	r3, [r7, #4]
 8013a6c:	e001      	b.n	8013a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013a72:	687b      	ldr	r3, [r7, #4]
	}
 8013a74:	4618      	mov	r0, r3
 8013a76:	370c      	adds	r7, #12
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7e:	4770      	bx	lr
 8013a80:	20000e04 	.word	0x20000e04
 8013a84:	20000e20 	.word	0x20000e20

08013a88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013a94:	2300      	movs	r3, #0
 8013a96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d051      	beq.n	8013b42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa2:	4b2a      	ldr	r3, [pc, #168]	; (8013b4c <xTaskPriorityInherit+0xc4>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d241      	bcs.n	8013b30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	699b      	ldr	r3, [r3, #24]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	db06      	blt.n	8013ac2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ab4:	4b25      	ldr	r3, [pc, #148]	; (8013b4c <xTaskPriorityInherit+0xc4>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	6959      	ldr	r1, [r3, #20]
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aca:	4613      	mov	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	4413      	add	r3, r2
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	4a1f      	ldr	r2, [pc, #124]	; (8013b50 <xTaskPriorityInherit+0xc8>)
 8013ad4:	4413      	add	r3, r2
 8013ad6:	4299      	cmp	r1, r3
 8013ad8:	d122      	bne.n	8013b20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	3304      	adds	r3, #4
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7fd ff0a 	bl	80118f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013ae4:	4b19      	ldr	r3, [pc, #100]	; (8013b4c <xTaskPriorityInherit+0xc4>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013af2:	4b18      	ldr	r3, [pc, #96]	; (8013b54 <xTaskPriorityInherit+0xcc>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d903      	bls.n	8013b02 <xTaskPriorityInherit+0x7a>
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013afe:	4a15      	ldr	r2, [pc, #84]	; (8013b54 <xTaskPriorityInherit+0xcc>)
 8013b00:	6013      	str	r3, [r2, #0]
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b06:	4613      	mov	r3, r2
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	4413      	add	r3, r2
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	4a10      	ldr	r2, [pc, #64]	; (8013b50 <xTaskPriorityInherit+0xc8>)
 8013b10:	441a      	add	r2, r3
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	3304      	adds	r3, #4
 8013b16:	4619      	mov	r1, r3
 8013b18:	4610      	mov	r0, r2
 8013b1a:	f7fd fe90 	bl	801183e <vListInsertEnd>
 8013b1e:	e004      	b.n	8013b2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013b20:	4b0a      	ldr	r3, [pc, #40]	; (8013b4c <xTaskPriorityInherit+0xc4>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	60fb      	str	r3, [r7, #12]
 8013b2e:	e008      	b.n	8013b42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b34:	4b05      	ldr	r3, [pc, #20]	; (8013b4c <xTaskPriorityInherit+0xc4>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d201      	bcs.n	8013b42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013b3e:	2301      	movs	r3, #1
 8013b40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013b42:	68fb      	ldr	r3, [r7, #12]
	}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	20000924 	.word	0x20000924
 8013b50:	20000928 	.word	0x20000928
 8013b54:	20000e00 	.word	0x20000e00

08013b58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b086      	sub	sp, #24
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013b64:	2300      	movs	r3, #0
 8013b66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d058      	beq.n	8013c20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013b6e:	4b2f      	ldr	r3, [pc, #188]	; (8013c2c <xTaskPriorityDisinherit+0xd4>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d00b      	beq.n	8013b90 <xTaskPriorityDisinherit+0x38>
 8013b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b7c:	b672      	cpsid	i
 8013b7e:	f383 8811 	msr	BASEPRI, r3
 8013b82:	f3bf 8f6f 	isb	sy
 8013b86:	f3bf 8f4f 	dsb	sy
 8013b8a:	b662      	cpsie	i
 8013b8c:	60fb      	str	r3, [r7, #12]
 8013b8e:	e7fe      	b.n	8013b8e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d10b      	bne.n	8013bb0 <xTaskPriorityDisinherit+0x58>
 8013b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9c:	b672      	cpsid	i
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	b662      	cpsie	i
 8013bac:	60bb      	str	r3, [r7, #8]
 8013bae:	e7fe      	b.n	8013bae <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bb4:	1e5a      	subs	r2, r3, #1
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d02c      	beq.n	8013c20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d128      	bne.n	8013c20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	3304      	adds	r3, #4
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fd fe90 	bl	80118f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bf0:	4b0f      	ldr	r3, [pc, #60]	; (8013c30 <xTaskPriorityDisinherit+0xd8>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d903      	bls.n	8013c00 <xTaskPriorityDisinherit+0xa8>
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bfc:	4a0c      	ldr	r2, [pc, #48]	; (8013c30 <xTaskPriorityDisinherit+0xd8>)
 8013bfe:	6013      	str	r3, [r2, #0]
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c04:	4613      	mov	r3, r2
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	4413      	add	r3, r2
 8013c0a:	009b      	lsls	r3, r3, #2
 8013c0c:	4a09      	ldr	r2, [pc, #36]	; (8013c34 <xTaskPriorityDisinherit+0xdc>)
 8013c0e:	441a      	add	r2, r3
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	3304      	adds	r3, #4
 8013c14:	4619      	mov	r1, r3
 8013c16:	4610      	mov	r0, r2
 8013c18:	f7fd fe11 	bl	801183e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c20:	697b      	ldr	r3, [r7, #20]
	}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3718      	adds	r7, #24
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
 8013c2a:	bf00      	nop
 8013c2c:	20000924 	.word	0x20000924
 8013c30:	20000e00 	.word	0x20000e00
 8013c34:	20000928 	.word	0x20000928

08013c38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b088      	sub	sp, #32
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013c46:	2301      	movs	r3, #1
 8013c48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d06c      	beq.n	8013d2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013c50:	69bb      	ldr	r3, [r7, #24]
 8013c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d10b      	bne.n	8013c70 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8013c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5c:	b672      	cpsid	i
 8013c5e:	f383 8811 	msr	BASEPRI, r3
 8013c62:	f3bf 8f6f 	isb	sy
 8013c66:	f3bf 8f4f 	dsb	sy
 8013c6a:	b662      	cpsie	i
 8013c6c:	60fb      	str	r3, [r7, #12]
 8013c6e:	e7fe      	b.n	8013c6e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c74:	683a      	ldr	r2, [r7, #0]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d902      	bls.n	8013c80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	61fb      	str	r3, [r7, #28]
 8013c7e:	e002      	b.n	8013c86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c8a:	69fa      	ldr	r2, [r7, #28]
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d04c      	beq.n	8013d2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013c90:	69bb      	ldr	r3, [r7, #24]
 8013c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c94:	697a      	ldr	r2, [r7, #20]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d147      	bne.n	8013d2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013c9a:	4b26      	ldr	r3, [pc, #152]	; (8013d34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	69ba      	ldr	r2, [r7, #24]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d10b      	bne.n	8013cbc <vTaskPriorityDisinheritAfterTimeout+0x84>
 8013ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca8:	b672      	cpsid	i
 8013caa:	f383 8811 	msr	BASEPRI, r3
 8013cae:	f3bf 8f6f 	isb	sy
 8013cb2:	f3bf 8f4f 	dsb	sy
 8013cb6:	b662      	cpsie	i
 8013cb8:	60bb      	str	r3, [r7, #8]
 8013cba:	e7fe      	b.n	8013cba <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	69fa      	ldr	r2, [r7, #28]
 8013cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	699b      	ldr	r3, [r3, #24]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	db04      	blt.n	8013cda <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013cda:	69bb      	ldr	r3, [r7, #24]
 8013cdc:	6959      	ldr	r1, [r3, #20]
 8013cde:	693a      	ldr	r2, [r7, #16]
 8013ce0:	4613      	mov	r3, r2
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	4413      	add	r3, r2
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	4a13      	ldr	r2, [pc, #76]	; (8013d38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013cea:	4413      	add	r3, r2
 8013cec:	4299      	cmp	r1, r3
 8013cee:	d11c      	bne.n	8013d2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	3304      	adds	r3, #4
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fd fdff 	bl	80118f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cfe:	4b0f      	ldr	r3, [pc, #60]	; (8013d3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d903      	bls.n	8013d0e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0a:	4a0c      	ldr	r2, [pc, #48]	; (8013d3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013d0c:	6013      	str	r3, [r2, #0]
 8013d0e:	69bb      	ldr	r3, [r7, #24]
 8013d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d12:	4613      	mov	r3, r2
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	4413      	add	r3, r2
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	4a07      	ldr	r2, [pc, #28]	; (8013d38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013d1c:	441a      	add	r2, r3
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	3304      	adds	r3, #4
 8013d22:	4619      	mov	r1, r3
 8013d24:	4610      	mov	r0, r2
 8013d26:	f7fd fd8a 	bl	801183e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013d2a:	bf00      	nop
 8013d2c:	3720      	adds	r7, #32
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	20000924 	.word	0x20000924
 8013d38:	20000928 	.word	0x20000928
 8013d3c:	20000e00 	.word	0x20000e00

08013d40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013d40:	b480      	push	{r7}
 8013d42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013d44:	4b07      	ldr	r3, [pc, #28]	; (8013d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d004      	beq.n	8013d56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013d4c:	4b05      	ldr	r3, [pc, #20]	; (8013d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d52:	3201      	adds	r2, #1
 8013d54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013d56:	4b03      	ldr	r3, [pc, #12]	; (8013d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8013d58:	681b      	ldr	r3, [r3, #0]
	}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr
 8013d64:	20000924 	.word	0x20000924

08013d68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013d72:	4b21      	ldr	r3, [pc, #132]	; (8013df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d78:	4b20      	ldr	r3, [pc, #128]	; (8013dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	3304      	adds	r3, #4
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7fd fdba 	bl	80118f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d8a:	d10a      	bne.n	8013da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d007      	beq.n	8013da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d92:	4b1a      	ldr	r3, [pc, #104]	; (8013dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	3304      	adds	r3, #4
 8013d98:	4619      	mov	r1, r3
 8013d9a:	4819      	ldr	r0, [pc, #100]	; (8013e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8013d9c:	f7fd fd4f 	bl	801183e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013da0:	e026      	b.n	8013df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	4413      	add	r3, r2
 8013da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013daa:	4b14      	ldr	r3, [pc, #80]	; (8013dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	68ba      	ldr	r2, [r7, #8]
 8013db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013db2:	68ba      	ldr	r2, [r7, #8]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d209      	bcs.n	8013dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013dba:	4b12      	ldr	r3, [pc, #72]	; (8013e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	4b0f      	ldr	r3, [pc, #60]	; (8013dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	3304      	adds	r3, #4
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	4610      	mov	r0, r2
 8013dc8:	f7fd fd5d 	bl	8011886 <vListInsert>
}
 8013dcc:	e010      	b.n	8013df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013dce:	4b0e      	ldr	r3, [pc, #56]	; (8013e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	4b0a      	ldr	r3, [pc, #40]	; (8013dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	3304      	adds	r3, #4
 8013dd8:	4619      	mov	r1, r3
 8013dda:	4610      	mov	r0, r2
 8013ddc:	f7fd fd53 	bl	8011886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013de0:	4b0a      	ldr	r3, [pc, #40]	; (8013e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	68ba      	ldr	r2, [r7, #8]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d202      	bcs.n	8013df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013dea:	4a08      	ldr	r2, [pc, #32]	; (8013e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	6013      	str	r3, [r2, #0]
}
 8013df0:	bf00      	nop
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	20000dfc 	.word	0x20000dfc
 8013dfc:	20000924 	.word	0x20000924
 8013e00:	20000de4 	.word	0x20000de4
 8013e04:	20000db4 	.word	0x20000db4
 8013e08:	20000db0 	.word	0x20000db0
 8013e0c:	20000e18 	.word	0x20000e18

08013e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b08a      	sub	sp, #40	; 0x28
 8013e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013e16:	2300      	movs	r3, #0
 8013e18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013e1a:	f000 fb0d 	bl	8014438 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013e1e:	4b1d      	ldr	r3, [pc, #116]	; (8013e94 <xTimerCreateTimerTask+0x84>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d021      	beq.n	8013e6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013e26:	2300      	movs	r3, #0
 8013e28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013e2e:	1d3a      	adds	r2, r7, #4
 8013e30:	f107 0108 	add.w	r1, r7, #8
 8013e34:	f107 030c 	add.w	r3, r7, #12
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7fd fcb9 	bl	80117b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013e3e:	6879      	ldr	r1, [r7, #4]
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	9202      	str	r2, [sp, #8]
 8013e46:	9301      	str	r3, [sp, #4]
 8013e48:	2302      	movs	r3, #2
 8013e4a:	9300      	str	r3, [sp, #0]
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	460a      	mov	r2, r1
 8013e50:	4911      	ldr	r1, [pc, #68]	; (8013e98 <xTimerCreateTimerTask+0x88>)
 8013e52:	4812      	ldr	r0, [pc, #72]	; (8013e9c <xTimerCreateTimerTask+0x8c>)
 8013e54:	f7fe fea2 	bl	8012b9c <xTaskCreateStatic>
 8013e58:	4602      	mov	r2, r0
 8013e5a:	4b11      	ldr	r3, [pc, #68]	; (8013ea0 <xTimerCreateTimerTask+0x90>)
 8013e5c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013e5e:	4b10      	ldr	r3, [pc, #64]	; (8013ea0 <xTimerCreateTimerTask+0x90>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d001      	beq.n	8013e6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013e66:	2301      	movs	r3, #1
 8013e68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d10b      	bne.n	8013e88 <xTimerCreateTimerTask+0x78>
 8013e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e74:	b672      	cpsid	i
 8013e76:	f383 8811 	msr	BASEPRI, r3
 8013e7a:	f3bf 8f6f 	isb	sy
 8013e7e:	f3bf 8f4f 	dsb	sy
 8013e82:	b662      	cpsie	i
 8013e84:	613b      	str	r3, [r7, #16]
 8013e86:	e7fe      	b.n	8013e86 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8013e88:	697b      	ldr	r3, [r7, #20]
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3718      	adds	r7, #24
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
 8013e92:	bf00      	nop
 8013e94:	20000e54 	.word	0x20000e54
 8013e98:	08025748 	.word	0x08025748
 8013e9c:	08013fdd 	.word	0x08013fdd
 8013ea0:	20000e58 	.word	0x20000e58

08013ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b08a      	sub	sp, #40	; 0x28
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d10b      	bne.n	8013ed4 <xTimerGenericCommand+0x30>
 8013ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec0:	b672      	cpsid	i
 8013ec2:	f383 8811 	msr	BASEPRI, r3
 8013ec6:	f3bf 8f6f 	isb	sy
 8013eca:	f3bf 8f4f 	dsb	sy
 8013ece:	b662      	cpsie	i
 8013ed0:	623b      	str	r3, [r7, #32]
 8013ed2:	e7fe      	b.n	8013ed2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013ed4:	4b19      	ldr	r3, [pc, #100]	; (8013f3c <xTimerGenericCommand+0x98>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d02a      	beq.n	8013f32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	2b05      	cmp	r3, #5
 8013eec:	dc18      	bgt.n	8013f20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013eee:	f7ff fdad 	bl	8013a4c <xTaskGetSchedulerState>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	d109      	bne.n	8013f0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013ef8:	4b10      	ldr	r3, [pc, #64]	; (8013f3c <xTimerGenericCommand+0x98>)
 8013efa:	6818      	ldr	r0, [r3, #0]
 8013efc:	f107 0110 	add.w	r1, r7, #16
 8013f00:	2300      	movs	r3, #0
 8013f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f04:	f7fd ff94 	bl	8011e30 <xQueueGenericSend>
 8013f08:	6278      	str	r0, [r7, #36]	; 0x24
 8013f0a:	e012      	b.n	8013f32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013f0c:	4b0b      	ldr	r3, [pc, #44]	; (8013f3c <xTimerGenericCommand+0x98>)
 8013f0e:	6818      	ldr	r0, [r3, #0]
 8013f10:	f107 0110 	add.w	r1, r7, #16
 8013f14:	2300      	movs	r3, #0
 8013f16:	2200      	movs	r2, #0
 8013f18:	f7fd ff8a 	bl	8011e30 <xQueueGenericSend>
 8013f1c:	6278      	str	r0, [r7, #36]	; 0x24
 8013f1e:	e008      	b.n	8013f32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013f20:	4b06      	ldr	r3, [pc, #24]	; (8013f3c <xTimerGenericCommand+0x98>)
 8013f22:	6818      	ldr	r0, [r3, #0]
 8013f24:	f107 0110 	add.w	r1, r7, #16
 8013f28:	2300      	movs	r3, #0
 8013f2a:	683a      	ldr	r2, [r7, #0]
 8013f2c:	f7fe f882 	bl	8012034 <xQueueGenericSendFromISR>
 8013f30:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3728      	adds	r7, #40	; 0x28
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	20000e54 	.word	0x20000e54

08013f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b088      	sub	sp, #32
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f4a:	4b23      	ldr	r3, [pc, #140]	; (8013fd8 <prvProcessExpiredTimer+0x98>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	3304      	adds	r3, #4
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fd fccd 	bl	80118f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f64:	f003 0304 	and.w	r3, r3, #4
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d023      	beq.n	8013fb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	699a      	ldr	r2, [r3, #24]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	18d1      	adds	r1, r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	683a      	ldr	r2, [r7, #0]
 8013f78:	6978      	ldr	r0, [r7, #20]
 8013f7a:	f000 f8d3 	bl	8014124 <prvInsertTimerInActiveList>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d020      	beq.n	8013fc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013f84:	2300      	movs	r3, #0
 8013f86:	9300      	str	r3, [sp, #0]
 8013f88:	2300      	movs	r3, #0
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	6978      	ldr	r0, [r7, #20]
 8013f90:	f7ff ff88 	bl	8013ea4 <xTimerGenericCommand>
 8013f94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d114      	bne.n	8013fc6 <prvProcessExpiredTimer+0x86>
 8013f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa0:	b672      	cpsid	i
 8013fa2:	f383 8811 	msr	BASEPRI, r3
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	b662      	cpsie	i
 8013fb0:	60fb      	str	r3, [r7, #12]
 8013fb2:	e7fe      	b.n	8013fb2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fba:	f023 0301 	bic.w	r3, r3, #1
 8013fbe:	b2da      	uxtb	r2, r3
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	6a1b      	ldr	r3, [r3, #32]
 8013fca:	6978      	ldr	r0, [r7, #20]
 8013fcc:	4798      	blx	r3
}
 8013fce:	bf00      	nop
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	20000e4c 	.word	0x20000e4c

08013fdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013fe4:	f107 0308 	add.w	r3, r7, #8
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f000 f857 	bl	801409c <prvGetNextExpireTime>
 8013fee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 f803 	bl	8014000 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013ffa:	f000 f8d5 	bl	80141a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013ffe:	e7f1      	b.n	8013fe4 <prvTimerTask+0x8>

08014000 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801400a:	f7ff f8e9 	bl	80131e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801400e:	f107 0308 	add.w	r3, r7, #8
 8014012:	4618      	mov	r0, r3
 8014014:	f000 f866 	bl	80140e4 <prvSampleTimeNow>
 8014018:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d130      	bne.n	8014082 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10a      	bne.n	801403c <prvProcessTimerOrBlockTask+0x3c>
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	429a      	cmp	r2, r3
 801402c:	d806      	bhi.n	801403c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801402e:	f7ff f8e5 	bl	80131fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014032:	68f9      	ldr	r1, [r7, #12]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f7ff ff83 	bl	8013f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801403a:	e024      	b.n	8014086 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d008      	beq.n	8014054 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014042:	4b13      	ldr	r3, [pc, #76]	; (8014090 <prvProcessTimerOrBlockTask+0x90>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d101      	bne.n	8014050 <prvProcessTimerOrBlockTask+0x50>
 801404c:	2301      	movs	r3, #1
 801404e:	e000      	b.n	8014052 <prvProcessTimerOrBlockTask+0x52>
 8014050:	2300      	movs	r3, #0
 8014052:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014054:	4b0f      	ldr	r3, [pc, #60]	; (8014094 <prvProcessTimerOrBlockTask+0x94>)
 8014056:	6818      	ldr	r0, [r3, #0]
 8014058:	687a      	ldr	r2, [r7, #4]
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	4619      	mov	r1, r3
 8014062:	f7fe fd67 	bl	8012b34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014066:	f7ff f8c9 	bl	80131fc <xTaskResumeAll>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d10a      	bne.n	8014086 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014070:	4b09      	ldr	r3, [pc, #36]	; (8014098 <prvProcessTimerOrBlockTask+0x98>)
 8014072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014076:	601a      	str	r2, [r3, #0]
 8014078:	f3bf 8f4f 	dsb	sy
 801407c:	f3bf 8f6f 	isb	sy
}
 8014080:	e001      	b.n	8014086 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014082:	f7ff f8bb 	bl	80131fc <xTaskResumeAll>
}
 8014086:	bf00      	nop
 8014088:	3710      	adds	r7, #16
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
 801408e:	bf00      	nop
 8014090:	20000e50 	.word	0x20000e50
 8014094:	20000e54 	.word	0x20000e54
 8014098:	e000ed04 	.word	0xe000ed04

0801409c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801409c:	b480      	push	{r7}
 801409e:	b085      	sub	sp, #20
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80140a4:	4b0e      	ldr	r3, [pc, #56]	; (80140e0 <prvGetNextExpireTime+0x44>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <prvGetNextExpireTime+0x16>
 80140ae:	2201      	movs	r2, #1
 80140b0:	e000      	b.n	80140b4 <prvGetNextExpireTime+0x18>
 80140b2:	2200      	movs	r2, #0
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d105      	bne.n	80140cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80140c0:	4b07      	ldr	r3, [pc, #28]	; (80140e0 <prvGetNextExpireTime+0x44>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	60fb      	str	r3, [r7, #12]
 80140ca:	e001      	b.n	80140d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80140cc:	2300      	movs	r3, #0
 80140ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80140d0:	68fb      	ldr	r3, [r7, #12]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3714      	adds	r7, #20
 80140d6:	46bd      	mov	sp, r7
 80140d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140dc:	4770      	bx	lr
 80140de:	bf00      	nop
 80140e0:	20000e4c 	.word	0x20000e4c

080140e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80140ec:	f7ff f924 	bl	8013338 <xTaskGetTickCount>
 80140f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80140f2:	4b0b      	ldr	r3, [pc, #44]	; (8014120 <prvSampleTimeNow+0x3c>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	68fa      	ldr	r2, [r7, #12]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d205      	bcs.n	8014108 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80140fc:	f000 f936 	bl	801436c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2201      	movs	r2, #1
 8014104:	601a      	str	r2, [r3, #0]
 8014106:	e002      	b.n	801410e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2200      	movs	r2, #0
 801410c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801410e:	4a04      	ldr	r2, [pc, #16]	; (8014120 <prvSampleTimeNow+0x3c>)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014114:	68fb      	ldr	r3, [r7, #12]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3710      	adds	r7, #16
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	20000e5c 	.word	0x20000e5c

08014124 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
 8014130:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014132:	2300      	movs	r3, #0
 8014134:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	68ba      	ldr	r2, [r7, #8]
 801413a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	429a      	cmp	r2, r3
 8014148:	d812      	bhi.n	8014170 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801414a:	687a      	ldr	r2, [r7, #4]
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	1ad2      	subs	r2, r2, r3
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	699b      	ldr	r3, [r3, #24]
 8014154:	429a      	cmp	r2, r3
 8014156:	d302      	bcc.n	801415e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014158:	2301      	movs	r3, #1
 801415a:	617b      	str	r3, [r7, #20]
 801415c:	e01b      	b.n	8014196 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801415e:	4b10      	ldr	r3, [pc, #64]	; (80141a0 <prvInsertTimerInActiveList+0x7c>)
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	3304      	adds	r3, #4
 8014166:	4619      	mov	r1, r3
 8014168:	4610      	mov	r0, r2
 801416a:	f7fd fb8c 	bl	8011886 <vListInsert>
 801416e:	e012      	b.n	8014196 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	429a      	cmp	r2, r3
 8014176:	d206      	bcs.n	8014186 <prvInsertTimerInActiveList+0x62>
 8014178:	68ba      	ldr	r2, [r7, #8]
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	429a      	cmp	r2, r3
 801417e:	d302      	bcc.n	8014186 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014180:	2301      	movs	r3, #1
 8014182:	617b      	str	r3, [r7, #20]
 8014184:	e007      	b.n	8014196 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014186:	4b07      	ldr	r3, [pc, #28]	; (80141a4 <prvInsertTimerInActiveList+0x80>)
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	3304      	adds	r3, #4
 801418e:	4619      	mov	r1, r3
 8014190:	4610      	mov	r0, r2
 8014192:	f7fd fb78 	bl	8011886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014196:	697b      	ldr	r3, [r7, #20]
}
 8014198:	4618      	mov	r0, r3
 801419a:	3718      	adds	r7, #24
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	20000e50 	.word	0x20000e50
 80141a4:	20000e4c 	.word	0x20000e4c

080141a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b08e      	sub	sp, #56	; 0x38
 80141ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80141ae:	e0cc      	b.n	801434a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	da19      	bge.n	80141ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80141b6:	1d3b      	adds	r3, r7, #4
 80141b8:	3304      	adds	r3, #4
 80141ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10b      	bne.n	80141da <prvProcessReceivedCommands+0x32>
 80141c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c6:	b672      	cpsid	i
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	b662      	cpsie	i
 80141d6:	61fb      	str	r3, [r7, #28]
 80141d8:	e7fe      	b.n	80141d8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80141da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e0:	6850      	ldr	r0, [r2, #4]
 80141e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e4:	6892      	ldr	r2, [r2, #8]
 80141e6:	4611      	mov	r1, r2
 80141e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f2c0 80ab 	blt.w	8014348 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80141f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f8:	695b      	ldr	r3, [r3, #20]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d004      	beq.n	8014208 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80141fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014200:	3304      	adds	r3, #4
 8014202:	4618      	mov	r0, r3
 8014204:	f7fd fb78 	bl	80118f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014208:	463b      	mov	r3, r7
 801420a:	4618      	mov	r0, r3
 801420c:	f7ff ff6a 	bl	80140e4 <prvSampleTimeNow>
 8014210:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2b09      	cmp	r3, #9
 8014216:	f200 8098 	bhi.w	801434a <prvProcessReceivedCommands+0x1a2>
 801421a:	a201      	add	r2, pc, #4	; (adr r2, 8014220 <prvProcessReceivedCommands+0x78>)
 801421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014220:	08014249 	.word	0x08014249
 8014224:	08014249 	.word	0x08014249
 8014228:	08014249 	.word	0x08014249
 801422c:	080142bf 	.word	0x080142bf
 8014230:	080142d3 	.word	0x080142d3
 8014234:	0801431f 	.word	0x0801431f
 8014238:	08014249 	.word	0x08014249
 801423c:	08014249 	.word	0x08014249
 8014240:	080142bf 	.word	0x080142bf
 8014244:	080142d3 	.word	0x080142d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801424e:	f043 0301 	orr.w	r3, r3, #1
 8014252:	b2da      	uxtb	r2, r3
 8014254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425e:	699b      	ldr	r3, [r3, #24]
 8014260:	18d1      	adds	r1, r2, r3
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014268:	f7ff ff5c 	bl	8014124 <prvInsertTimerInActiveList>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d06b      	beq.n	801434a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014274:	6a1b      	ldr	r3, [r3, #32]
 8014276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014278:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014280:	f003 0304 	and.w	r3, r3, #4
 8014284:	2b00      	cmp	r3, #0
 8014286:	d060      	beq.n	801434a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014288:	68ba      	ldr	r2, [r7, #8]
 801428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428c:	699b      	ldr	r3, [r3, #24]
 801428e:	441a      	add	r2, r3
 8014290:	2300      	movs	r3, #0
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	2300      	movs	r3, #0
 8014296:	2100      	movs	r1, #0
 8014298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801429a:	f7ff fe03 	bl	8013ea4 <xTimerGenericCommand>
 801429e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d151      	bne.n	801434a <prvProcessReceivedCommands+0x1a2>
 80142a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142aa:	b672      	cpsid	i
 80142ac:	f383 8811 	msr	BASEPRI, r3
 80142b0:	f3bf 8f6f 	isb	sy
 80142b4:	f3bf 8f4f 	dsb	sy
 80142b8:	b662      	cpsie	i
 80142ba:	61bb      	str	r3, [r7, #24]
 80142bc:	e7fe      	b.n	80142bc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80142be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80142c4:	f023 0301 	bic.w	r3, r3, #1
 80142c8:	b2da      	uxtb	r2, r3
 80142ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80142d0:	e03b      	b.n	801434a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80142d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80142d8:	f043 0301 	orr.w	r3, r3, #1
 80142dc:	b2da      	uxtb	r2, r3
 80142de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80142e4:	68ba      	ldr	r2, [r7, #8]
 80142e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80142ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ec:	699b      	ldr	r3, [r3, #24]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d10b      	bne.n	801430a <prvProcessReceivedCommands+0x162>
 80142f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f6:	b672      	cpsid	i
 80142f8:	f383 8811 	msr	BASEPRI, r3
 80142fc:	f3bf 8f6f 	isb	sy
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	b662      	cpsie	i
 8014306:	617b      	str	r3, [r7, #20]
 8014308:	e7fe      	b.n	8014308 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	699a      	ldr	r2, [r3, #24]
 801430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014310:	18d1      	adds	r1, r2, r3
 8014312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014318:	f7ff ff04 	bl	8014124 <prvInsertTimerInActiveList>
					break;
 801431c:	e015      	b.n	801434a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014324:	f003 0302 	and.w	r3, r3, #2
 8014328:	2b00      	cmp	r3, #0
 801432a:	d103      	bne.n	8014334 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801432c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801432e:	f000 fbb9 	bl	8014aa4 <vPortFree>
 8014332:	e00a      	b.n	801434a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801433a:	f023 0301 	bic.w	r3, r3, #1
 801433e:	b2da      	uxtb	r2, r3
 8014340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014346:	e000      	b.n	801434a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801434a:	4b07      	ldr	r3, [pc, #28]	; (8014368 <prvProcessReceivedCommands+0x1c0>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	1d39      	adds	r1, r7, #4
 8014350:	2200      	movs	r2, #0
 8014352:	4618      	mov	r0, r3
 8014354:	f7fd ff9c 	bl	8012290 <xQueueReceive>
 8014358:	4603      	mov	r3, r0
 801435a:	2b00      	cmp	r3, #0
 801435c:	f47f af28 	bne.w	80141b0 <prvProcessReceivedCommands+0x8>
	}
}
 8014360:	bf00      	nop
 8014362:	3730      	adds	r7, #48	; 0x30
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}
 8014368:	20000e54 	.word	0x20000e54

0801436c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b088      	sub	sp, #32
 8014370:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014372:	e049      	b.n	8014408 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014374:	4b2e      	ldr	r3, [pc, #184]	; (8014430 <prvSwitchTimerLists+0xc4>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801437e:	4b2c      	ldr	r3, [pc, #176]	; (8014430 <prvSwitchTimerLists+0xc4>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	3304      	adds	r3, #4
 801438c:	4618      	mov	r0, r3
 801438e:	f7fd fab3 	bl	80118f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	6a1b      	ldr	r3, [r3, #32]
 8014396:	68f8      	ldr	r0, [r7, #12]
 8014398:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143a0:	f003 0304 	and.w	r3, r3, #4
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d02f      	beq.n	8014408 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	699b      	ldr	r3, [r3, #24]
 80143ac:	693a      	ldr	r2, [r7, #16]
 80143ae:	4413      	add	r3, r2
 80143b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80143b2:	68ba      	ldr	r2, [r7, #8]
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d90e      	bls.n	80143d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	68ba      	ldr	r2, [r7, #8]
 80143be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	68fa      	ldr	r2, [r7, #12]
 80143c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80143c6:	4b1a      	ldr	r3, [pc, #104]	; (8014430 <prvSwitchTimerLists+0xc4>)
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	3304      	adds	r3, #4
 80143ce:	4619      	mov	r1, r3
 80143d0:	4610      	mov	r0, r2
 80143d2:	f7fd fa58 	bl	8011886 <vListInsert>
 80143d6:	e017      	b.n	8014408 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80143d8:	2300      	movs	r3, #0
 80143da:	9300      	str	r3, [sp, #0]
 80143dc:	2300      	movs	r3, #0
 80143de:	693a      	ldr	r2, [r7, #16]
 80143e0:	2100      	movs	r1, #0
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f7ff fd5e 	bl	8013ea4 <xTimerGenericCommand>
 80143e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d10b      	bne.n	8014408 <prvSwitchTimerLists+0x9c>
 80143f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f4:	b672      	cpsid	i
 80143f6:	f383 8811 	msr	BASEPRI, r3
 80143fa:	f3bf 8f6f 	isb	sy
 80143fe:	f3bf 8f4f 	dsb	sy
 8014402:	b662      	cpsie	i
 8014404:	603b      	str	r3, [r7, #0]
 8014406:	e7fe      	b.n	8014406 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014408:	4b09      	ldr	r3, [pc, #36]	; (8014430 <prvSwitchTimerLists+0xc4>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d1b0      	bne.n	8014374 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014412:	4b07      	ldr	r3, [pc, #28]	; (8014430 <prvSwitchTimerLists+0xc4>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014418:	4b06      	ldr	r3, [pc, #24]	; (8014434 <prvSwitchTimerLists+0xc8>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	4a04      	ldr	r2, [pc, #16]	; (8014430 <prvSwitchTimerLists+0xc4>)
 801441e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014420:	4a04      	ldr	r2, [pc, #16]	; (8014434 <prvSwitchTimerLists+0xc8>)
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	6013      	str	r3, [r2, #0]
}
 8014426:	bf00      	nop
 8014428:	3718      	adds	r7, #24
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	20000e4c 	.word	0x20000e4c
 8014434:	20000e50 	.word	0x20000e50

08014438 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801443e:	f000 f943 	bl	80146c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014442:	4b15      	ldr	r3, [pc, #84]	; (8014498 <prvCheckForValidListAndQueue+0x60>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d120      	bne.n	801448c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801444a:	4814      	ldr	r0, [pc, #80]	; (801449c <prvCheckForValidListAndQueue+0x64>)
 801444c:	f7fd f9ca 	bl	80117e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014450:	4813      	ldr	r0, [pc, #76]	; (80144a0 <prvCheckForValidListAndQueue+0x68>)
 8014452:	f7fd f9c7 	bl	80117e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014456:	4b13      	ldr	r3, [pc, #76]	; (80144a4 <prvCheckForValidListAndQueue+0x6c>)
 8014458:	4a10      	ldr	r2, [pc, #64]	; (801449c <prvCheckForValidListAndQueue+0x64>)
 801445a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801445c:	4b12      	ldr	r3, [pc, #72]	; (80144a8 <prvCheckForValidListAndQueue+0x70>)
 801445e:	4a10      	ldr	r2, [pc, #64]	; (80144a0 <prvCheckForValidListAndQueue+0x68>)
 8014460:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014462:	2300      	movs	r3, #0
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	4b11      	ldr	r3, [pc, #68]	; (80144ac <prvCheckForValidListAndQueue+0x74>)
 8014468:	4a11      	ldr	r2, [pc, #68]	; (80144b0 <prvCheckForValidListAndQueue+0x78>)
 801446a:	2110      	movs	r1, #16
 801446c:	200a      	movs	r0, #10
 801446e:	f7fd fad7 	bl	8011a20 <xQueueGenericCreateStatic>
 8014472:	4602      	mov	r2, r0
 8014474:	4b08      	ldr	r3, [pc, #32]	; (8014498 <prvCheckForValidListAndQueue+0x60>)
 8014476:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014478:	4b07      	ldr	r3, [pc, #28]	; (8014498 <prvCheckForValidListAndQueue+0x60>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d005      	beq.n	801448c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014480:	4b05      	ldr	r3, [pc, #20]	; (8014498 <prvCheckForValidListAndQueue+0x60>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	490b      	ldr	r1, [pc, #44]	; (80144b4 <prvCheckForValidListAndQueue+0x7c>)
 8014486:	4618      	mov	r0, r3
 8014488:	f7fe fb02 	bl	8012a90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801448c:	f000 f94e 	bl	801472c <vPortExitCritical>
}
 8014490:	bf00      	nop
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	20000e54 	.word	0x20000e54
 801449c:	20000e24 	.word	0x20000e24
 80144a0:	20000e38 	.word	0x20000e38
 80144a4:	20000e4c 	.word	0x20000e4c
 80144a8:	20000e50 	.word	0x20000e50
 80144ac:	20000f00 	.word	0x20000f00
 80144b0:	20000e60 	.word	0x20000e60
 80144b4:	08025750 	.word	0x08025750

080144b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80144b8:	b480      	push	{r7}
 80144ba:	b085      	sub	sp, #20
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	3b04      	subs	r3, #4
 80144c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80144d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	3b04      	subs	r3, #4
 80144d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	f023 0201 	bic.w	r2, r3, #1
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	3b04      	subs	r3, #4
 80144e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80144e8:	4a0c      	ldr	r2, [pc, #48]	; (801451c <pxPortInitialiseStack+0x64>)
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	3b14      	subs	r3, #20
 80144f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	3b04      	subs	r3, #4
 80144fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	f06f 0202 	mvn.w	r2, #2
 8014506:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	3b20      	subs	r3, #32
 801450c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801450e:	68fb      	ldr	r3, [r7, #12]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3714      	adds	r7, #20
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr
 801451c:	08014521 	.word	0x08014521

08014520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014520:	b480      	push	{r7}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801452a:	4b13      	ldr	r3, [pc, #76]	; (8014578 <prvTaskExitError+0x58>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014532:	d00b      	beq.n	801454c <prvTaskExitError+0x2c>
 8014534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014538:	b672      	cpsid	i
 801453a:	f383 8811 	msr	BASEPRI, r3
 801453e:	f3bf 8f6f 	isb	sy
 8014542:	f3bf 8f4f 	dsb	sy
 8014546:	b662      	cpsie	i
 8014548:	60fb      	str	r3, [r7, #12]
 801454a:	e7fe      	b.n	801454a <prvTaskExitError+0x2a>
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	b672      	cpsid	i
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	b662      	cpsie	i
 8014560:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014562:	bf00      	nop
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0fc      	beq.n	8014564 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801456a:	bf00      	nop
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	20000030 	.word	0x20000030
 801457c:	00000000 	.word	0x00000000

08014580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014580:	4b07      	ldr	r3, [pc, #28]	; (80145a0 <pxCurrentTCBConst2>)
 8014582:	6819      	ldr	r1, [r3, #0]
 8014584:	6808      	ldr	r0, [r1, #0]
 8014586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801458a:	f380 8809 	msr	PSP, r0
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f04f 0000 	mov.w	r0, #0
 8014596:	f380 8811 	msr	BASEPRI, r0
 801459a:	4770      	bx	lr
 801459c:	f3af 8000 	nop.w

080145a0 <pxCurrentTCBConst2>:
 80145a0:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80145a4:	bf00      	nop
 80145a6:	bf00      	nop

080145a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80145a8:	4808      	ldr	r0, [pc, #32]	; (80145cc <prvPortStartFirstTask+0x24>)
 80145aa:	6800      	ldr	r0, [r0, #0]
 80145ac:	6800      	ldr	r0, [r0, #0]
 80145ae:	f380 8808 	msr	MSP, r0
 80145b2:	f04f 0000 	mov.w	r0, #0
 80145b6:	f380 8814 	msr	CONTROL, r0
 80145ba:	b662      	cpsie	i
 80145bc:	b661      	cpsie	f
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	f3bf 8f6f 	isb	sy
 80145c6:	df00      	svc	0
 80145c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80145ca:	bf00      	nop
 80145cc:	e000ed08 	.word	0xe000ed08

080145d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80145d6:	4b36      	ldr	r3, [pc, #216]	; (80146b0 <xPortStartScheduler+0xe0>)
 80145d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	22ff      	movs	r2, #255	; 0xff
 80145e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80145f0:	78fb      	ldrb	r3, [r7, #3]
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	4b2e      	ldr	r3, [pc, #184]	; (80146b4 <xPortStartScheduler+0xe4>)
 80145fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80145fe:	4b2e      	ldr	r3, [pc, #184]	; (80146b8 <xPortStartScheduler+0xe8>)
 8014600:	2207      	movs	r2, #7
 8014602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014604:	e009      	b.n	801461a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014606:	4b2c      	ldr	r3, [pc, #176]	; (80146b8 <xPortStartScheduler+0xe8>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	3b01      	subs	r3, #1
 801460c:	4a2a      	ldr	r2, [pc, #168]	; (80146b8 <xPortStartScheduler+0xe8>)
 801460e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014610:	78fb      	ldrb	r3, [r7, #3]
 8014612:	b2db      	uxtb	r3, r3
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	b2db      	uxtb	r3, r3
 8014618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801461a:	78fb      	ldrb	r3, [r7, #3]
 801461c:	b2db      	uxtb	r3, r3
 801461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014622:	2b80      	cmp	r3, #128	; 0x80
 8014624:	d0ef      	beq.n	8014606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014626:	4b24      	ldr	r3, [pc, #144]	; (80146b8 <xPortStartScheduler+0xe8>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	f1c3 0307 	rsb	r3, r3, #7
 801462e:	2b04      	cmp	r3, #4
 8014630:	d00b      	beq.n	801464a <xPortStartScheduler+0x7a>
 8014632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014636:	b672      	cpsid	i
 8014638:	f383 8811 	msr	BASEPRI, r3
 801463c:	f3bf 8f6f 	isb	sy
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	b662      	cpsie	i
 8014646:	60bb      	str	r3, [r7, #8]
 8014648:	e7fe      	b.n	8014648 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801464a:	4b1b      	ldr	r3, [pc, #108]	; (80146b8 <xPortStartScheduler+0xe8>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	021b      	lsls	r3, r3, #8
 8014650:	4a19      	ldr	r2, [pc, #100]	; (80146b8 <xPortStartScheduler+0xe8>)
 8014652:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014654:	4b18      	ldr	r3, [pc, #96]	; (80146b8 <xPortStartScheduler+0xe8>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801465c:	4a16      	ldr	r2, [pc, #88]	; (80146b8 <xPortStartScheduler+0xe8>)
 801465e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	b2da      	uxtb	r2, r3
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014668:	4b14      	ldr	r3, [pc, #80]	; (80146bc <xPortStartScheduler+0xec>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	4a13      	ldr	r2, [pc, #76]	; (80146bc <xPortStartScheduler+0xec>)
 801466e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014672:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014674:	4b11      	ldr	r3, [pc, #68]	; (80146bc <xPortStartScheduler+0xec>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4a10      	ldr	r2, [pc, #64]	; (80146bc <xPortStartScheduler+0xec>)
 801467a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801467e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014680:	f000 f8d4 	bl	801482c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014684:	4b0e      	ldr	r3, [pc, #56]	; (80146c0 <xPortStartScheduler+0xf0>)
 8014686:	2200      	movs	r2, #0
 8014688:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801468a:	f000 f8f3 	bl	8014874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801468e:	4b0d      	ldr	r3, [pc, #52]	; (80146c4 <xPortStartScheduler+0xf4>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	4a0c      	ldr	r2, [pc, #48]	; (80146c4 <xPortStartScheduler+0xf4>)
 8014694:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014698:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801469a:	f7ff ff85 	bl	80145a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801469e:	f7fe ff2f 	bl	8013500 <vTaskSwitchContext>
	prvTaskExitError();
 80146a2:	f7ff ff3d 	bl	8014520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80146a6:	2300      	movs	r3, #0
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3710      	adds	r7, #16
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	e000e400 	.word	0xe000e400
 80146b4:	20000f50 	.word	0x20000f50
 80146b8:	20000f54 	.word	0x20000f54
 80146bc:	e000ed20 	.word	0xe000ed20
 80146c0:	20000030 	.word	0x20000030
 80146c4:	e000ef34 	.word	0xe000ef34

080146c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d2:	b672      	cpsid	i
 80146d4:	f383 8811 	msr	BASEPRI, r3
 80146d8:	f3bf 8f6f 	isb	sy
 80146dc:	f3bf 8f4f 	dsb	sy
 80146e0:	b662      	cpsie	i
 80146e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80146e4:	4b0f      	ldr	r3, [pc, #60]	; (8014724 <vPortEnterCritical+0x5c>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	3301      	adds	r3, #1
 80146ea:	4a0e      	ldr	r2, [pc, #56]	; (8014724 <vPortEnterCritical+0x5c>)
 80146ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80146ee:	4b0d      	ldr	r3, [pc, #52]	; (8014724 <vPortEnterCritical+0x5c>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	2b01      	cmp	r3, #1
 80146f4:	d110      	bne.n	8014718 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80146f6:	4b0c      	ldr	r3, [pc, #48]	; (8014728 <vPortEnterCritical+0x60>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d00b      	beq.n	8014718 <vPortEnterCritical+0x50>
 8014700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014704:	b672      	cpsid	i
 8014706:	f383 8811 	msr	BASEPRI, r3
 801470a:	f3bf 8f6f 	isb	sy
 801470e:	f3bf 8f4f 	dsb	sy
 8014712:	b662      	cpsie	i
 8014714:	603b      	str	r3, [r7, #0]
 8014716:	e7fe      	b.n	8014716 <vPortEnterCritical+0x4e>
	}
}
 8014718:	bf00      	nop
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr
 8014724:	20000030 	.word	0x20000030
 8014728:	e000ed04 	.word	0xe000ed04

0801472c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014732:	4b12      	ldr	r3, [pc, #72]	; (801477c <vPortExitCritical+0x50>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d10b      	bne.n	8014752 <vPortExitCritical+0x26>
 801473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801473e:	b672      	cpsid	i
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	b662      	cpsie	i
 801474e:	607b      	str	r3, [r7, #4]
 8014750:	e7fe      	b.n	8014750 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8014752:	4b0a      	ldr	r3, [pc, #40]	; (801477c <vPortExitCritical+0x50>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	3b01      	subs	r3, #1
 8014758:	4a08      	ldr	r2, [pc, #32]	; (801477c <vPortExitCritical+0x50>)
 801475a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801475c:	4b07      	ldr	r3, [pc, #28]	; (801477c <vPortExitCritical+0x50>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d104      	bne.n	801476e <vPortExitCritical+0x42>
 8014764:	2300      	movs	r3, #0
 8014766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801476e:	bf00      	nop
 8014770:	370c      	adds	r7, #12
 8014772:	46bd      	mov	sp, r7
 8014774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	20000030 	.word	0x20000030

08014780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014780:	f3ef 8009 	mrs	r0, PSP
 8014784:	f3bf 8f6f 	isb	sy
 8014788:	4b15      	ldr	r3, [pc, #84]	; (80147e0 <pxCurrentTCBConst>)
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	f01e 0f10 	tst.w	lr, #16
 8014790:	bf08      	it	eq
 8014792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801479a:	6010      	str	r0, [r2, #0]
 801479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80147a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80147a4:	b672      	cpsid	i
 80147a6:	f380 8811 	msr	BASEPRI, r0
 80147aa:	f3bf 8f4f 	dsb	sy
 80147ae:	f3bf 8f6f 	isb	sy
 80147b2:	b662      	cpsie	i
 80147b4:	f7fe fea4 	bl	8013500 <vTaskSwitchContext>
 80147b8:	f04f 0000 	mov.w	r0, #0
 80147bc:	f380 8811 	msr	BASEPRI, r0
 80147c0:	bc09      	pop	{r0, r3}
 80147c2:	6819      	ldr	r1, [r3, #0]
 80147c4:	6808      	ldr	r0, [r1, #0]
 80147c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ca:	f01e 0f10 	tst.w	lr, #16
 80147ce:	bf08      	it	eq
 80147d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80147d4:	f380 8809 	msr	PSP, r0
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop

080147e0 <pxCurrentTCBConst>:
 80147e0:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80147e4:	bf00      	nop
 80147e6:	bf00      	nop

080147e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
	__asm volatile
 80147ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f2:	b672      	cpsid	i
 80147f4:	f383 8811 	msr	BASEPRI, r3
 80147f8:	f3bf 8f6f 	isb	sy
 80147fc:	f3bf 8f4f 	dsb	sy
 8014800:	b662      	cpsie	i
 8014802:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014804:	f7fe fdba 	bl	801337c <xTaskIncrementTick>
 8014808:	4603      	mov	r3, r0
 801480a:	2b00      	cmp	r3, #0
 801480c:	d003      	beq.n	8014816 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801480e:	4b06      	ldr	r3, [pc, #24]	; (8014828 <SysTick_Handler+0x40>)
 8014810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	2300      	movs	r3, #0
 8014818:	603b      	str	r3, [r7, #0]
	__asm volatile
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	e000ed04 	.word	0xe000ed04

0801482c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801482c:	b480      	push	{r7}
 801482e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014830:	4b0b      	ldr	r3, [pc, #44]	; (8014860 <vPortSetupTimerInterrupt+0x34>)
 8014832:	2200      	movs	r2, #0
 8014834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014836:	4b0b      	ldr	r3, [pc, #44]	; (8014864 <vPortSetupTimerInterrupt+0x38>)
 8014838:	2200      	movs	r2, #0
 801483a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801483c:	4b0a      	ldr	r3, [pc, #40]	; (8014868 <vPortSetupTimerInterrupt+0x3c>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	4a0a      	ldr	r2, [pc, #40]	; (801486c <vPortSetupTimerInterrupt+0x40>)
 8014842:	fba2 2303 	umull	r2, r3, r2, r3
 8014846:	099b      	lsrs	r3, r3, #6
 8014848:	4a09      	ldr	r2, [pc, #36]	; (8014870 <vPortSetupTimerInterrupt+0x44>)
 801484a:	3b01      	subs	r3, #1
 801484c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801484e:	4b04      	ldr	r3, [pc, #16]	; (8014860 <vPortSetupTimerInterrupt+0x34>)
 8014850:	2207      	movs	r2, #7
 8014852:	601a      	str	r2, [r3, #0]
}
 8014854:	bf00      	nop
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr
 801485e:	bf00      	nop
 8014860:	e000e010 	.word	0xe000e010
 8014864:	e000e018 	.word	0xe000e018
 8014868:	20000000 	.word	0x20000000
 801486c:	10624dd3 	.word	0x10624dd3
 8014870:	e000e014 	.word	0xe000e014

08014874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014884 <vPortEnableVFP+0x10>
 8014878:	6801      	ldr	r1, [r0, #0]
 801487a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801487e:	6001      	str	r1, [r0, #0]
 8014880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014882:	bf00      	nop
 8014884:	e000ed88 	.word	0xe000ed88

08014888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014888:	b480      	push	{r7}
 801488a:	b085      	sub	sp, #20
 801488c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801488e:	f3ef 8305 	mrs	r3, IPSR
 8014892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2b0f      	cmp	r3, #15
 8014898:	d915      	bls.n	80148c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801489a:	4a18      	ldr	r2, [pc, #96]	; (80148fc <vPortValidateInterruptPriority+0x74>)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	4413      	add	r3, r2
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80148a4:	4b16      	ldr	r3, [pc, #88]	; (8014900 <vPortValidateInterruptPriority+0x78>)
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	7afa      	ldrb	r2, [r7, #11]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d20b      	bcs.n	80148c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80148ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148b2:	b672      	cpsid	i
 80148b4:	f383 8811 	msr	BASEPRI, r3
 80148b8:	f3bf 8f6f 	isb	sy
 80148bc:	f3bf 8f4f 	dsb	sy
 80148c0:	b662      	cpsie	i
 80148c2:	607b      	str	r3, [r7, #4]
 80148c4:	e7fe      	b.n	80148c4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80148c6:	4b0f      	ldr	r3, [pc, #60]	; (8014904 <vPortValidateInterruptPriority+0x7c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80148ce:	4b0e      	ldr	r3, [pc, #56]	; (8014908 <vPortValidateInterruptPriority+0x80>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d90b      	bls.n	80148ee <vPortValidateInterruptPriority+0x66>
 80148d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148da:	b672      	cpsid	i
 80148dc:	f383 8811 	msr	BASEPRI, r3
 80148e0:	f3bf 8f6f 	isb	sy
 80148e4:	f3bf 8f4f 	dsb	sy
 80148e8:	b662      	cpsie	i
 80148ea:	603b      	str	r3, [r7, #0]
 80148ec:	e7fe      	b.n	80148ec <vPortValidateInterruptPriority+0x64>
	}
 80148ee:	bf00      	nop
 80148f0:	3714      	adds	r7, #20
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	e000e3f0 	.word	0xe000e3f0
 8014900:	20000f50 	.word	0x20000f50
 8014904:	e000ed0c 	.word	0xe000ed0c
 8014908:	20000f54 	.word	0x20000f54

0801490c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b08a      	sub	sp, #40	; 0x28
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014914:	2300      	movs	r3, #0
 8014916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014918:	f7fe fc62 	bl	80131e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801491c:	4b5c      	ldr	r3, [pc, #368]	; (8014a90 <pvPortMalloc+0x184>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d101      	bne.n	8014928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014924:	f000 f91a 	bl	8014b5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014928:	4b5a      	ldr	r3, [pc, #360]	; (8014a94 <pvPortMalloc+0x188>)
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	4013      	ands	r3, r2
 8014930:	2b00      	cmp	r3, #0
 8014932:	f040 8090 	bne.w	8014a56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d01e      	beq.n	801497a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801493c:	2208      	movs	r2, #8
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4413      	add	r3, r2
 8014942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f003 0307 	and.w	r3, r3, #7
 801494a:	2b00      	cmp	r3, #0
 801494c:	d015      	beq.n	801497a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f023 0307 	bic.w	r3, r3, #7
 8014954:	3308      	adds	r3, #8
 8014956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f003 0307 	and.w	r3, r3, #7
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00b      	beq.n	801497a <pvPortMalloc+0x6e>
 8014962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014966:	b672      	cpsid	i
 8014968:	f383 8811 	msr	BASEPRI, r3
 801496c:	f3bf 8f6f 	isb	sy
 8014970:	f3bf 8f4f 	dsb	sy
 8014974:	b662      	cpsie	i
 8014976:	617b      	str	r3, [r7, #20]
 8014978:	e7fe      	b.n	8014978 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d06a      	beq.n	8014a56 <pvPortMalloc+0x14a>
 8014980:	4b45      	ldr	r3, [pc, #276]	; (8014a98 <pvPortMalloc+0x18c>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	429a      	cmp	r2, r3
 8014988:	d865      	bhi.n	8014a56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801498a:	4b44      	ldr	r3, [pc, #272]	; (8014a9c <pvPortMalloc+0x190>)
 801498c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801498e:	4b43      	ldr	r3, [pc, #268]	; (8014a9c <pvPortMalloc+0x190>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014994:	e004      	b.n	80149a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80149a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d903      	bls.n	80149b2 <pvPortMalloc+0xa6>
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1f1      	bne.n	8014996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80149b2:	4b37      	ldr	r3, [pc, #220]	; (8014a90 <pvPortMalloc+0x184>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d04c      	beq.n	8014a56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80149bc:	6a3b      	ldr	r3, [r7, #32]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2208      	movs	r2, #8
 80149c2:	4413      	add	r3, r2
 80149c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80149c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	6a3b      	ldr	r3, [r7, #32]
 80149cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80149ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d0:	685a      	ldr	r2, [r3, #4]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	1ad2      	subs	r2, r2, r3
 80149d6:	2308      	movs	r3, #8
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	429a      	cmp	r2, r3
 80149dc:	d920      	bls.n	8014a20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80149de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	4413      	add	r3, r2
 80149e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	f003 0307 	and.w	r3, r3, #7
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d00b      	beq.n	8014a08 <pvPortMalloc+0xfc>
 80149f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f4:	b672      	cpsid	i
 80149f6:	f383 8811 	msr	BASEPRI, r3
 80149fa:	f3bf 8f6f 	isb	sy
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	b662      	cpsie	i
 8014a04:	613b      	str	r3, [r7, #16]
 8014a06:	e7fe      	b.n	8014a06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	685a      	ldr	r2, [r3, #4]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	1ad2      	subs	r2, r2, r3
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014a1a:	69b8      	ldr	r0, [r7, #24]
 8014a1c:	f000 f900 	bl	8014c20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014a20:	4b1d      	ldr	r3, [pc, #116]	; (8014a98 <pvPortMalloc+0x18c>)
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	1ad3      	subs	r3, r2, r3
 8014a2a:	4a1b      	ldr	r2, [pc, #108]	; (8014a98 <pvPortMalloc+0x18c>)
 8014a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014a2e:	4b1a      	ldr	r3, [pc, #104]	; (8014a98 <pvPortMalloc+0x18c>)
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	4b1b      	ldr	r3, [pc, #108]	; (8014aa0 <pvPortMalloc+0x194>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d203      	bcs.n	8014a42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014a3a:	4b17      	ldr	r3, [pc, #92]	; (8014a98 <pvPortMalloc+0x18c>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	4a18      	ldr	r2, [pc, #96]	; (8014aa0 <pvPortMalloc+0x194>)
 8014a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a44:	685a      	ldr	r2, [r3, #4]
 8014a46:	4b13      	ldr	r3, [pc, #76]	; (8014a94 <pvPortMalloc+0x188>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	431a      	orrs	r2, r3
 8014a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a52:	2200      	movs	r2, #0
 8014a54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014a56:	f7fe fbd1 	bl	80131fc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014a5a:	69fb      	ldr	r3, [r7, #28]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d101      	bne.n	8014a64 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014a60:	f7eb fdb8 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a64:	69fb      	ldr	r3, [r7, #28]
 8014a66:	f003 0307 	and.w	r3, r3, #7
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00b      	beq.n	8014a86 <pvPortMalloc+0x17a>
 8014a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a72:	b672      	cpsid	i
 8014a74:	f383 8811 	msr	BASEPRI, r3
 8014a78:	f3bf 8f6f 	isb	sy
 8014a7c:	f3bf 8f4f 	dsb	sy
 8014a80:	b662      	cpsie	i
 8014a82:	60fb      	str	r3, [r7, #12]
 8014a84:	e7fe      	b.n	8014a84 <pvPortMalloc+0x178>
	return pvReturn;
 8014a86:	69fb      	ldr	r3, [r7, #28]
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3728      	adds	r7, #40	; 0x28
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	20008f60 	.word	0x20008f60
 8014a94:	20008f6c 	.word	0x20008f6c
 8014a98:	20008f64 	.word	0x20008f64
 8014a9c:	20008f58 	.word	0x20008f58
 8014aa0:	20008f68 	.word	0x20008f68

08014aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b086      	sub	sp, #24
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d04a      	beq.n	8014b4c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014ab6:	2308      	movs	r3, #8
 8014ab8:	425b      	negs	r3, r3
 8014aba:	697a      	ldr	r2, [r7, #20]
 8014abc:	4413      	add	r3, r2
 8014abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014ac0:	697b      	ldr	r3, [r7, #20]
 8014ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	685a      	ldr	r2, [r3, #4]
 8014ac8:	4b22      	ldr	r3, [pc, #136]	; (8014b54 <vPortFree+0xb0>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4013      	ands	r3, r2
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d10b      	bne.n	8014aea <vPortFree+0x46>
 8014ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad6:	b672      	cpsid	i
 8014ad8:	f383 8811 	msr	BASEPRI, r3
 8014adc:	f3bf 8f6f 	isb	sy
 8014ae0:	f3bf 8f4f 	dsb	sy
 8014ae4:	b662      	cpsie	i
 8014ae6:	60fb      	str	r3, [r7, #12]
 8014ae8:	e7fe      	b.n	8014ae8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00b      	beq.n	8014b0a <vPortFree+0x66>
 8014af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af6:	b672      	cpsid	i
 8014af8:	f383 8811 	msr	BASEPRI, r3
 8014afc:	f3bf 8f6f 	isb	sy
 8014b00:	f3bf 8f4f 	dsb	sy
 8014b04:	b662      	cpsie	i
 8014b06:	60bb      	str	r3, [r7, #8]
 8014b08:	e7fe      	b.n	8014b08 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	685a      	ldr	r2, [r3, #4]
 8014b0e:	4b11      	ldr	r3, [pc, #68]	; (8014b54 <vPortFree+0xb0>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4013      	ands	r3, r2
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d019      	beq.n	8014b4c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d115      	bne.n	8014b4c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014b20:	693b      	ldr	r3, [r7, #16]
 8014b22:	685a      	ldr	r2, [r3, #4]
 8014b24:	4b0b      	ldr	r3, [pc, #44]	; (8014b54 <vPortFree+0xb0>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	43db      	mvns	r3, r3
 8014b2a:	401a      	ands	r2, r3
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014b30:	f7fe fb56 	bl	80131e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	685a      	ldr	r2, [r3, #4]
 8014b38:	4b07      	ldr	r3, [pc, #28]	; (8014b58 <vPortFree+0xb4>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	4a06      	ldr	r2, [pc, #24]	; (8014b58 <vPortFree+0xb4>)
 8014b40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014b42:	6938      	ldr	r0, [r7, #16]
 8014b44:	f000 f86c 	bl	8014c20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014b48:	f7fe fb58 	bl	80131fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014b4c:	bf00      	nop
 8014b4e:	3718      	adds	r7, #24
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}
 8014b54:	20008f6c 	.word	0x20008f6c
 8014b58:	20008f64 	.word	0x20008f64

08014b5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b085      	sub	sp, #20
 8014b60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014b68:	4b27      	ldr	r3, [pc, #156]	; (8014c08 <prvHeapInit+0xac>)
 8014b6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f003 0307 	and.w	r3, r3, #7
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d00c      	beq.n	8014b90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	3307      	adds	r3, #7
 8014b7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	f023 0307 	bic.w	r3, r3, #7
 8014b82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014b84:	68ba      	ldr	r2, [r7, #8]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	1ad3      	subs	r3, r2, r3
 8014b8a:	4a1f      	ldr	r2, [pc, #124]	; (8014c08 <prvHeapInit+0xac>)
 8014b8c:	4413      	add	r3, r2
 8014b8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014b94:	4a1d      	ldr	r2, [pc, #116]	; (8014c0c <prvHeapInit+0xb0>)
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014b9a:	4b1c      	ldr	r3, [pc, #112]	; (8014c0c <prvHeapInit+0xb0>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	68ba      	ldr	r2, [r7, #8]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014ba8:	2208      	movs	r2, #8
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	1a9b      	subs	r3, r3, r2
 8014bae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f023 0307 	bic.w	r3, r3, #7
 8014bb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	4a15      	ldr	r2, [pc, #84]	; (8014c10 <prvHeapInit+0xb4>)
 8014bbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014bbe:	4b14      	ldr	r3, [pc, #80]	; (8014c10 <prvHeapInit+0xb4>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014bc6:	4b12      	ldr	r3, [pc, #72]	; (8014c10 <prvHeapInit+0xb4>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	68fa      	ldr	r2, [r7, #12]
 8014bd6:	1ad2      	subs	r2, r2, r3
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014bdc:	4b0c      	ldr	r3, [pc, #48]	; (8014c10 <prvHeapInit+0xb4>)
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	4a0a      	ldr	r2, [pc, #40]	; (8014c14 <prvHeapInit+0xb8>)
 8014bea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	4a09      	ldr	r2, [pc, #36]	; (8014c18 <prvHeapInit+0xbc>)
 8014bf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014bf4:	4b09      	ldr	r3, [pc, #36]	; (8014c1c <prvHeapInit+0xc0>)
 8014bf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014bfa:	601a      	str	r2, [r3, #0]
}
 8014bfc:	bf00      	nop
 8014bfe:	3714      	adds	r7, #20
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr
 8014c08:	20000f58 	.word	0x20000f58
 8014c0c:	20008f58 	.word	0x20008f58
 8014c10:	20008f60 	.word	0x20008f60
 8014c14:	20008f68 	.word	0x20008f68
 8014c18:	20008f64 	.word	0x20008f64
 8014c1c:	20008f6c 	.word	0x20008f6c

08014c20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014c20:	b480      	push	{r7}
 8014c22:	b085      	sub	sp, #20
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014c28:	4b28      	ldr	r3, [pc, #160]	; (8014ccc <prvInsertBlockIntoFreeList+0xac>)
 8014c2a:	60fb      	str	r3, [r7, #12]
 8014c2c:	e002      	b.n	8014c34 <prvInsertBlockIntoFreeList+0x14>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	60fb      	str	r3, [r7, #12]
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d8f7      	bhi.n	8014c2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	68ba      	ldr	r2, [r7, #8]
 8014c48:	4413      	add	r3, r2
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d108      	bne.n	8014c62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	685a      	ldr	r2, [r3, #4]
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	441a      	add	r2, r3
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	68ba      	ldr	r2, [r7, #8]
 8014c6c:	441a      	add	r2, r3
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d118      	bne.n	8014ca8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681a      	ldr	r2, [r3, #0]
 8014c7a:	4b15      	ldr	r3, [pc, #84]	; (8014cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d00d      	beq.n	8014c9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	685a      	ldr	r2, [r3, #4]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	441a      	add	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	681a      	ldr	r2, [r3, #0]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	e008      	b.n	8014cb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014c9e:	4b0c      	ldr	r3, [pc, #48]	; (8014cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	601a      	str	r2, [r3, #0]
 8014ca6:	e003      	b.n	8014cb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014cb0:	68fa      	ldr	r2, [r7, #12]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d002      	beq.n	8014cbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cbe:	bf00      	nop
 8014cc0:	3714      	adds	r7, #20
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc8:	4770      	bx	lr
 8014cca:	bf00      	nop
 8014ccc:	20008f58 	.word	0x20008f58
 8014cd0:	20008f60 	.word	0x20008f60

08014cd4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
 8014cdc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	330c      	adds	r3, #12
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f001 fdcd 	bl	8016888 <tcpip_send_msg_wait_sem>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d103      	bne.n	8014d02 <netconn_apimsg+0x2e>
    return apimsg->err;
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014d00:	e001      	b.n	8014d06 <netconn_apimsg+0x32>
  }
  return err;
 8014d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3710      	adds	r7, #16
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
	...

08014d10 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b08c      	sub	sp, #48	; 0x30
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	4603      	mov	r3, r0
 8014d18:	603a      	str	r2, [r7, #0]
 8014d1a:	71fb      	strb	r3, [r7, #7]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8014d20:	79fb      	ldrb	r3, [r7, #7]
 8014d22:	6839      	ldr	r1, [r7, #0]
 8014d24:	4618      	mov	r0, r3
 8014d26:	f000 fe1b 	bl	8015960 <netconn_alloc>
 8014d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8014d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d054      	beq.n	8014ddc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014d32:	79bb      	ldrb	r3, [r7, #6]
 8014d34:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8014d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d38:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014d3a:	f107 0308 	add.w	r3, r7, #8
 8014d3e:	4619      	mov	r1, r3
 8014d40:	4829      	ldr	r0, [pc, #164]	; (8014de8 <netconn_new_with_proto_and_callback+0xd8>)
 8014d42:	f7ff ffc7 	bl	8014cd4 <netconn_apimsg>
 8014d46:	4603      	mov	r3, r0
 8014d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8014d4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d043      	beq.n	8014ddc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d56:	685b      	ldr	r3, [r3, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d005      	beq.n	8014d68 <netconn_new_with_proto_and_callback+0x58>
 8014d5c:	4b23      	ldr	r3, [pc, #140]	; (8014dec <netconn_new_with_proto_and_callback+0xdc>)
 8014d5e:	22a3      	movs	r2, #163	; 0xa3
 8014d60:	4923      	ldr	r1, [pc, #140]	; (8014df0 <netconn_new_with_proto_and_callback+0xe0>)
 8014d62:	4824      	ldr	r0, [pc, #144]	; (8014df4 <netconn_new_with_proto_and_callback+0xe4>)
 8014d64:	f00f fd1c 	bl	80247a0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d6a:	3310      	adds	r3, #16
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f00e fdc9 	bl	8023904 <sys_mbox_valid>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d105      	bne.n	8014d84 <netconn_new_with_proto_and_callback+0x74>
 8014d78:	4b1c      	ldr	r3, [pc, #112]	; (8014dec <netconn_new_with_proto_and_callback+0xdc>)
 8014d7a:	22a4      	movs	r2, #164	; 0xa4
 8014d7c:	491e      	ldr	r1, [pc, #120]	; (8014df8 <netconn_new_with_proto_and_callback+0xe8>)
 8014d7e:	481d      	ldr	r0, [pc, #116]	; (8014df4 <netconn_new_with_proto_and_callback+0xe4>)
 8014d80:	f00f fd0e 	bl	80247a0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d86:	3314      	adds	r3, #20
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f00e fdbb 	bl	8023904 <sys_mbox_valid>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d005      	beq.n	8014da0 <netconn_new_with_proto_and_callback+0x90>
 8014d94:	4b15      	ldr	r3, [pc, #84]	; (8014dec <netconn_new_with_proto_and_callback+0xdc>)
 8014d96:	22a6      	movs	r2, #166	; 0xa6
 8014d98:	4918      	ldr	r1, [pc, #96]	; (8014dfc <netconn_new_with_proto_and_callback+0xec>)
 8014d9a:	4816      	ldr	r0, [pc, #88]	; (8014df4 <netconn_new_with_proto_and_callback+0xe4>)
 8014d9c:	f00f fd00 	bl	80247a0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da2:	330c      	adds	r3, #12
 8014da4:	4618      	mov	r0, r3
 8014da6:	f00e fe3b 	bl	8023a20 <sys_sem_valid>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d105      	bne.n	8014dbc <netconn_new_with_proto_and_callback+0xac>
 8014db0:	4b0e      	ldr	r3, [pc, #56]	; (8014dec <netconn_new_with_proto_and_callback+0xdc>)
 8014db2:	22a9      	movs	r2, #169	; 0xa9
 8014db4:	4912      	ldr	r1, [pc, #72]	; (8014e00 <netconn_new_with_proto_and_callback+0xf0>)
 8014db6:	480f      	ldr	r0, [pc, #60]	; (8014df4 <netconn_new_with_proto_and_callback+0xe4>)
 8014db8:	f00f fcf2 	bl	80247a0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8014dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dbe:	330c      	adds	r3, #12
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f00e fe20 	bl	8023a06 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8014dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc8:	3310      	adds	r3, #16
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f00e fd26 	bl	802381c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dd2:	2007      	movs	r0, #7
 8014dd4:	f002 fac0 	bl	8017358 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	e000      	b.n	8014dde <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8014ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3730      	adds	r7, #48	; 0x30
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	08015935 	.word	0x08015935
 8014dec:	08025758 	.word	0x08025758
 8014df0:	0802578c 	.word	0x0802578c
 8014df4:	080257b0 	.word	0x080257b0
 8014df8:	080257d8 	.word	0x080257d8
 8014dfc:	080257f0 	.word	0x080257f0
 8014e00:	08025814 	.word	0x08025814

08014e04 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08c      	sub	sp, #48	; 0x30
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8014e12:	2300      	movs	r3, #0
 8014e14:	e014      	b.n	8014e40 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014e1a:	2329      	movs	r3, #41	; 0x29
 8014e1c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014e1e:	f107 030c 	add.w	r3, r7, #12
 8014e22:	4619      	mov	r1, r3
 8014e24:	4808      	ldr	r0, [pc, #32]	; (8014e48 <netconn_prepare_delete+0x44>)
 8014e26:	f7ff ff55 	bl	8014cd4 <netconn_apimsg>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8014e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d002      	beq.n	8014e3e <netconn_prepare_delete+0x3a>
    return err;
 8014e38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014e3c:	e000      	b.n	8014e40 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8014e3e:	2300      	movs	r3, #0
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3730      	adds	r7, #48	; 0x30
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	08015e99 	.word	0x08015e99

08014e4c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <netconn_delete+0x12>
    return ERR_OK;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e00d      	b.n	8014e7a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7ff ffd0 	bl	8014e04 <netconn_prepare_delete>
 8014e64:	4603      	mov	r3, r0
 8014e66:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8014e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d102      	bne.n	8014e76 <netconn_delete+0x2a>
    netconn_free(conn);
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f000 fde3 	bl	8015a3c <netconn_free>
  }
  return err;
 8014e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
	...

08014e84 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b08e      	sub	sp, #56	; 0x38
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	60f8      	str	r0, [r7, #12]
 8014e8c:	60b9      	str	r1, [r7, #8]
 8014e8e:	4613      	mov	r3, r2
 8014e90:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d109      	bne.n	8014eac <netconn_bind+0x28>
 8014e98:	4b11      	ldr	r3, [pc, #68]	; (8014ee0 <netconn_bind+0x5c>)
 8014e9a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014e9e:	4911      	ldr	r1, [pc, #68]	; (8014ee4 <netconn_bind+0x60>)
 8014ea0:	4811      	ldr	r0, [pc, #68]	; (8014ee8 <netconn_bind+0x64>)
 8014ea2:	f00f fc7d 	bl	80247a0 <iprintf>
 8014ea6:	f06f 030f 	mvn.w	r3, #15
 8014eaa:	e015      	b.n	8014ed8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d101      	bne.n	8014eb6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8014eb2:	4b0e      	ldr	r3, [pc, #56]	; (8014eec <netconn_bind+0x68>)
 8014eb4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014ebe:	88fb      	ldrh	r3, [r7, #6]
 8014ec0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014ec2:	f107 0314 	add.w	r3, r7, #20
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	4809      	ldr	r0, [pc, #36]	; (8014ef0 <netconn_bind+0x6c>)
 8014eca:	f7ff ff03 	bl	8014cd4 <netconn_apimsg>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014ed4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3738      	adds	r7, #56	; 0x38
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	08025758 	.word	0x08025758
 8014ee4:	08025890 	.word	0x08025890
 8014ee8:	080257b0 	.word	0x080257b0
 8014eec:	08028fe0 	.word	0x08028fe0
 8014ef0:	08016061 	.word	0x08016061

08014ef4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b08c      	sub	sp, #48	; 0x30
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	460b      	mov	r3, r1
 8014efe:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d109      	bne.n	8014f1a <netconn_listen_with_backlog+0x26>
 8014f06:	4b0d      	ldr	r3, [pc, #52]	; (8014f3c <netconn_listen_with_backlog+0x48>)
 8014f08:	f240 12bb 	movw	r2, #443	; 0x1bb
 8014f0c:	490c      	ldr	r1, [pc, #48]	; (8014f40 <netconn_listen_with_backlog+0x4c>)
 8014f0e:	480d      	ldr	r0, [pc, #52]	; (8014f44 <netconn_listen_with_backlog+0x50>)
 8014f10:	f00f fc46 	bl	80247a0 <iprintf>
 8014f14:	f06f 030f 	mvn.w	r3, #15
 8014f18:	e00c      	b.n	8014f34 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014f1e:	f107 030c 	add.w	r3, r7, #12
 8014f22:	4619      	mov	r1, r3
 8014f24:	4808      	ldr	r0, [pc, #32]	; (8014f48 <netconn_listen_with_backlog+0x54>)
 8014f26:	f7ff fed5 	bl	8014cd4 <netconn_apimsg>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014f30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3730      	adds	r7, #48	; 0x30
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	08025758 	.word	0x08025758
 8014f40:	08025910 	.word	0x08025910
 8014f44:	080257b0 	.word	0x080257b0
 8014f48:	080160d9 	.word	0x080160d9

08014f4c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b086      	sub	sp, #24
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d109      	bne.n	8014f70 <netconn_accept+0x24>
 8014f5c:	4b3d      	ldr	r3, [pc, #244]	; (8015054 <netconn_accept+0x108>)
 8014f5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014f62:	493d      	ldr	r1, [pc, #244]	; (8015058 <netconn_accept+0x10c>)
 8014f64:	483d      	ldr	r0, [pc, #244]	; (801505c <netconn_accept+0x110>)
 8014f66:	f00f fc1b 	bl	80247a0 <iprintf>
 8014f6a:	f06f 030f 	mvn.w	r3, #15
 8014f6e:	e06c      	b.n	801504a <netconn_accept+0xfe>
  *new_conn = NULL;
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	2200      	movs	r2, #0
 8014f74:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d109      	bne.n	8014f90 <netconn_accept+0x44>
 8014f7c:	4b35      	ldr	r3, [pc, #212]	; (8015054 <netconn_accept+0x108>)
 8014f7e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014f82:	4937      	ldr	r1, [pc, #220]	; (8015060 <netconn_accept+0x114>)
 8014f84:	4835      	ldr	r0, [pc, #212]	; (801505c <netconn_accept+0x110>)
 8014f86:	f00f fc0b 	bl	80247a0 <iprintf>
 8014f8a:	f06f 030f 	mvn.w	r3, #15
 8014f8e:	e05c      	b.n	801504a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f000 f867 	bl	8015064 <netconn_err>
 8014f96:	4603      	mov	r3, r0
 8014f98:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014f9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d002      	beq.n	8014fa8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014fa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fa6:	e050      	b.n	801504a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	3314      	adds	r3, #20
 8014fac:	4618      	mov	r0, r3
 8014fae:	f00e fca9 	bl	8023904 <sys_mbox_valid>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d005      	beq.n	8014fc4 <netconn_accept+0x78>
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	7f1b      	ldrb	r3, [r3, #28]
 8014fbc:	f003 0301 	and.w	r3, r3, #1
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d002      	beq.n	8014fca <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014fc4:	f06f 030e 	mvn.w	r3, #14
 8014fc8:	e03f      	b.n	801504a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	7f1b      	ldrb	r3, [r3, #28]
 8014fce:	f003 0302 	and.w	r3, r3, #2
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d00e      	beq.n	8014ff4 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	3314      	adds	r3, #20
 8014fda:	f107 020c 	add.w	r2, r7, #12
 8014fde:	4611      	mov	r1, r2
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f00e fc78 	bl	80238d6 <sys_arch_mbox_tryfetch>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014fec:	d10a      	bne.n	8015004 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8014fee:	f06f 0306 	mvn.w	r3, #6
 8014ff2:	e02a      	b.n	801504a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	3314      	adds	r3, #20
 8014ff8:	f107 010c 	add.w	r1, r7, #12
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	4618      	mov	r0, r3
 8015000:	f00e fc38 	bl	8023874 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015008:	2b00      	cmp	r3, #0
 801500a:	d005      	beq.n	8015018 <netconn_accept+0xcc>
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015010:	2200      	movs	r2, #0
 8015012:	2101      	movs	r1, #1
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f107 0213 	add.w	r2, r7, #19
 801501e:	4611      	mov	r1, r2
 8015020:	4618      	mov	r0, r3
 8015022:	f000 f86d 	bl	8015100 <lwip_netconn_is_err_msg>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d002      	beq.n	8015032 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 801502c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015030:	e00b      	b.n	801504a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d102      	bne.n	801503e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8015038:	f06f 030e 	mvn.w	r3, #14
 801503c:	e005      	b.n	801504a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	697a      	ldr	r2, [r7, #20]
 8015046:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8015048:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 801504a:	4618      	mov	r0, r3
 801504c:	3718      	adds	r7, #24
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	08025758 	.word	0x08025758
 8015058:	08025930 	.word	0x08025930
 801505c:	080257b0 	.word	0x080257b0
 8015060:	08025950 	.word	0x08025950

08015064 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d101      	bne.n	8015076 <netconn_err+0x12>
    return ERR_OK;
 8015072:	2300      	movs	r3, #0
 8015074:	e00d      	b.n	8015092 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8015076:	f00e fd4f 	bl	8023b18 <sys_arch_protect>
 801507a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	7a1b      	ldrb	r3, [r3, #8]
 8015080:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2200      	movs	r2, #0
 8015086:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8015088:	68f8      	ldr	r0, [r7, #12]
 801508a:	f00e fd53 	bl	8023b34 <sys_arch_unprotect>
  return err;
 801508e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015092:	4618      	mov	r0, r3
 8015094:	3710      	adds	r7, #16
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
	...

0801509c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	4603      	mov	r3, r0
 80150a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80150a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150aa:	f113 0f0e 	cmn.w	r3, #14
 80150ae:	d008      	beq.n	80150c2 <lwip_netconn_err_to_msg+0x26>
 80150b0:	f113 0f0d 	cmn.w	r3, #13
 80150b4:	d003      	beq.n	80150be <lwip_netconn_err_to_msg+0x22>
 80150b6:	f113 0f0f 	cmn.w	r3, #15
 80150ba:	d004      	beq.n	80150c6 <lwip_netconn_err_to_msg+0x2a>
 80150bc:	e005      	b.n	80150ca <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80150be:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <lwip_netconn_err_to_msg+0x4c>)
 80150c0:	e00e      	b.n	80150e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80150c2:	4b0a      	ldr	r3, [pc, #40]	; (80150ec <lwip_netconn_err_to_msg+0x50>)
 80150c4:	e00c      	b.n	80150e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80150c6:	4b0a      	ldr	r3, [pc, #40]	; (80150f0 <lwip_netconn_err_to_msg+0x54>)
 80150c8:	e00a      	b.n	80150e0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80150ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d005      	beq.n	80150de <lwip_netconn_err_to_msg+0x42>
 80150d2:	4b08      	ldr	r3, [pc, #32]	; (80150f4 <lwip_netconn_err_to_msg+0x58>)
 80150d4:	227d      	movs	r2, #125	; 0x7d
 80150d6:	4908      	ldr	r1, [pc, #32]	; (80150f8 <lwip_netconn_err_to_msg+0x5c>)
 80150d8:	4808      	ldr	r0, [pc, #32]	; (80150fc <lwip_netconn_err_to_msg+0x60>)
 80150da:	f00f fb61 	bl	80247a0 <iprintf>
      return NULL;
 80150de:	2300      	movs	r3, #0
  }
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3708      	adds	r7, #8
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	08028ebc 	.word	0x08028ebc
 80150ec:	08028ebd 	.word	0x08028ebd
 80150f0:	08028ebe 	.word	0x08028ebe
 80150f4:	08025ab0 	.word	0x08025ab0
 80150f8:	08025ae4 	.word	0x08025ae4
 80150fc:	08025af4 	.word	0x08025af4

08015100 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d105      	bne.n	801511c <lwip_netconn_is_err_msg+0x1c>
 8015110:	4b12      	ldr	r3, [pc, #72]	; (801515c <lwip_netconn_is_err_msg+0x5c>)
 8015112:	2285      	movs	r2, #133	; 0x85
 8015114:	4912      	ldr	r1, [pc, #72]	; (8015160 <lwip_netconn_is_err_msg+0x60>)
 8015116:	4813      	ldr	r0, [pc, #76]	; (8015164 <lwip_netconn_is_err_msg+0x64>)
 8015118:	f00f fb42 	bl	80247a0 <iprintf>

  if (msg == &netconn_aborted) {
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	4a12      	ldr	r2, [pc, #72]	; (8015168 <lwip_netconn_is_err_msg+0x68>)
 8015120:	4293      	cmp	r3, r2
 8015122:	d104      	bne.n	801512e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	22f3      	movs	r2, #243	; 0xf3
 8015128:	701a      	strb	r2, [r3, #0]
    return 1;
 801512a:	2301      	movs	r3, #1
 801512c:	e012      	b.n	8015154 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	4a0e      	ldr	r2, [pc, #56]	; (801516c <lwip_netconn_is_err_msg+0x6c>)
 8015132:	4293      	cmp	r3, r2
 8015134:	d104      	bne.n	8015140 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	22f2      	movs	r2, #242	; 0xf2
 801513a:	701a      	strb	r2, [r3, #0]
    return 1;
 801513c:	2301      	movs	r3, #1
 801513e:	e009      	b.n	8015154 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	4a0b      	ldr	r2, [pc, #44]	; (8015170 <lwip_netconn_is_err_msg+0x70>)
 8015144:	4293      	cmp	r3, r2
 8015146:	d104      	bne.n	8015152 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	22f1      	movs	r2, #241	; 0xf1
 801514c:	701a      	strb	r2, [r3, #0]
    return 1;
 801514e:	2301      	movs	r3, #1
 8015150:	e000      	b.n	8015154 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8015152:	2300      	movs	r3, #0
}
 8015154:	4618      	mov	r0, r3
 8015156:	3708      	adds	r7, #8
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	08025ab0 	.word	0x08025ab0
 8015160:	08025b1c 	.word	0x08025b1c
 8015164:	08025af4 	.word	0x08025af4
 8015168:	08028ebc 	.word	0x08028ebc
 801516c:	08028ebd 	.word	0x08028ebd
 8015170:	08028ebe 	.word	0x08028ebe

08015174 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b088      	sub	sp, #32
 8015178:	af00      	add	r7, sp, #0
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d105      	bne.n	8015194 <recv_udp+0x20>
 8015188:	4b34      	ldr	r3, [pc, #208]	; (801525c <recv_udp+0xe8>)
 801518a:	22e5      	movs	r2, #229	; 0xe5
 801518c:	4934      	ldr	r1, [pc, #208]	; (8015260 <recv_udp+0xec>)
 801518e:	4835      	ldr	r0, [pc, #212]	; (8015264 <recv_udp+0xf0>)
 8015190:	f00f fb06 	bl	80247a0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d105      	bne.n	80151a6 <recv_udp+0x32>
 801519a:	4b30      	ldr	r3, [pc, #192]	; (801525c <recv_udp+0xe8>)
 801519c:	22e6      	movs	r2, #230	; 0xe6
 801519e:	4932      	ldr	r1, [pc, #200]	; (8015268 <recv_udp+0xf4>)
 80151a0:	4830      	ldr	r0, [pc, #192]	; (8015264 <recv_udp+0xf0>)
 80151a2:	f00f fafd 	bl	80247a0 <iprintf>
  conn = (struct netconn *)arg;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80151aa:	69fb      	ldr	r3, [r7, #28]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d103      	bne.n	80151b8 <recv_udp+0x44>
    pbuf_free(p);
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f002 ff97 	bl	80180e4 <pbuf_free>
    return;
 80151b6:	e04d      	b.n	8015254 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d005      	beq.n	80151ce <recv_udp+0x5a>
 80151c2:	4b26      	ldr	r3, [pc, #152]	; (801525c <recv_udp+0xe8>)
 80151c4:	22ee      	movs	r2, #238	; 0xee
 80151c6:	4929      	ldr	r1, [pc, #164]	; (801526c <recv_udp+0xf8>)
 80151c8:	4826      	ldr	r0, [pc, #152]	; (8015264 <recv_udp+0xf0>)
 80151ca:	f00f fae9 	bl	80247a0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	3310      	adds	r3, #16
 80151d2:	4618      	mov	r0, r3
 80151d4:	f00e fb96 	bl	8023904 <sys_mbox_valid>
 80151d8:	4603      	mov	r3, r0
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d103      	bne.n	80151e6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f002 ff80 	bl	80180e4 <pbuf_free>
    return;
 80151e4:	e036      	b.n	8015254 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80151e6:	2006      	movs	r0, #6
 80151e8:	f002 f864 	bl	80172b4 <memp_malloc>
 80151ec:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80151ee:	69bb      	ldr	r3, [r7, #24]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d103      	bne.n	80151fc <recv_udp+0x88>
    pbuf_free(p);
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f002 ff75 	bl	80180e4 <pbuf_free>
    return;
 80151fa:	e02b      	b.n	8015254 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80151fc:	69bb      	ldr	r3, [r7, #24]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d002      	beq.n	8015214 <recv_udp+0xa0>
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	e000      	b.n	8015216 <recv_udp+0xa2>
 8015214:	2300      	movs	r3, #0
 8015216:	69ba      	ldr	r2, [r7, #24]
 8015218:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801521e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	891b      	ldrh	r3, [r3, #8]
 8015224:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	3310      	adds	r3, #16
 801522a:	69b9      	ldr	r1, [r7, #24]
 801522c:	4618      	mov	r0, r3
 801522e:	f00e fb07 	bl	8023840 <sys_mbox_trypost>
 8015232:	4603      	mov	r3, r0
 8015234:	2b00      	cmp	r3, #0
 8015236:	d003      	beq.n	8015240 <recv_udp+0xcc>
    netbuf_delete(buf);
 8015238:	69b8      	ldr	r0, [r7, #24]
 801523a:	f001 f9b1 	bl	80165a0 <netbuf_delete>
    return;
 801523e:	e009      	b.n	8015254 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015240:	69fb      	ldr	r3, [r7, #28]
 8015242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015244:	2b00      	cmp	r3, #0
 8015246:	d005      	beq.n	8015254 <recv_udp+0xe0>
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801524c:	8afa      	ldrh	r2, [r7, #22]
 801524e:	2100      	movs	r1, #0
 8015250:	69f8      	ldr	r0, [r7, #28]
 8015252:	4798      	blx	r3
  }
}
 8015254:	3720      	adds	r7, #32
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	08025ab0 	.word	0x08025ab0
 8015260:	08025b28 	.word	0x08025b28
 8015264:	08025af4 	.word	0x08025af4
 8015268:	08025b4c 	.word	0x08025b4c
 801526c:	08025b6c 	.word	0x08025b6c

08015270 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b088      	sub	sp, #32
 8015274:	af00      	add	r7, sp, #0
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	607a      	str	r2, [r7, #4]
 801527c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d106      	bne.n	8015292 <recv_tcp+0x22>
 8015284:	4b36      	ldr	r3, [pc, #216]	; (8015360 <recv_tcp+0xf0>)
 8015286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801528a:	4936      	ldr	r1, [pc, #216]	; (8015364 <recv_tcp+0xf4>)
 801528c:	4836      	ldr	r0, [pc, #216]	; (8015368 <recv_tcp+0xf8>)
 801528e:	f00f fa87 	bl	80247a0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d106      	bne.n	80152a6 <recv_tcp+0x36>
 8015298:	4b31      	ldr	r3, [pc, #196]	; (8015360 <recv_tcp+0xf0>)
 801529a:	f240 122d 	movw	r2, #301	; 0x12d
 801529e:	4933      	ldr	r1, [pc, #204]	; (801536c <recv_tcp+0xfc>)
 80152a0:	4831      	ldr	r0, [pc, #196]	; (8015368 <recv_tcp+0xf8>)
 80152a2:	f00f fa7d 	bl	80247a0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80152a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d006      	beq.n	80152bc <recv_tcp+0x4c>
 80152ae:	4b2c      	ldr	r3, [pc, #176]	; (8015360 <recv_tcp+0xf0>)
 80152b0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80152b4:	492e      	ldr	r1, [pc, #184]	; (8015370 <recv_tcp+0x100>)
 80152b6:	482c      	ldr	r0, [pc, #176]	; (8015368 <recv_tcp+0xf8>)
 80152b8:	f00f fa72 	bl	80247a0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d102      	bne.n	80152cc <recv_tcp+0x5c>
    return ERR_VAL;
 80152c6:	f06f 0305 	mvn.w	r3, #5
 80152ca:	e045      	b.n	8015358 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	68ba      	ldr	r2, [r7, #8]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d006      	beq.n	80152e4 <recv_tcp+0x74>
 80152d6:	4b22      	ldr	r3, [pc, #136]	; (8015360 <recv_tcp+0xf0>)
 80152d8:	f240 1235 	movw	r2, #309	; 0x135
 80152dc:	4925      	ldr	r1, [pc, #148]	; (8015374 <recv_tcp+0x104>)
 80152de:	4822      	ldr	r0, [pc, #136]	; (8015368 <recv_tcp+0xf8>)
 80152e0:	f00f fa5e 	bl	80247a0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	3310      	adds	r3, #16
 80152e8:	4618      	mov	r0, r3
 80152ea:	f00e fb0b 	bl	8023904 <sys_mbox_valid>
 80152ee:	4603      	mov	r3, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d10d      	bne.n	8015310 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d008      	beq.n	801530c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	891b      	ldrh	r3, [r3, #8]
 80152fe:	4619      	mov	r1, r3
 8015300:	68b8      	ldr	r0, [r7, #8]
 8015302:	f003 fead 	bl	8019060 <tcp_recved>
      pbuf_free(p);
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f002 feec 	bl	80180e4 <pbuf_free>
    }
    return ERR_OK;
 801530c:	2300      	movs	r3, #0
 801530e:	e023      	b.n	8015358 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d005      	beq.n	8015322 <recv_tcp+0xb2>
    msg = p;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	891b      	ldrh	r3, [r3, #8]
 801531e:	83fb      	strh	r3, [r7, #30]
 8015320:	e003      	b.n	801532a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8015322:	4b15      	ldr	r3, [pc, #84]	; (8015378 <recv_tcp+0x108>)
 8015324:	61bb      	str	r3, [r7, #24]
    len = 0;
 8015326:	2300      	movs	r3, #0
 8015328:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	3310      	adds	r3, #16
 801532e:	69b9      	ldr	r1, [r7, #24]
 8015330:	4618      	mov	r0, r3
 8015332:	f00e fa85 	bl	8023840 <sys_mbox_trypost>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d002      	beq.n	8015342 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 801533c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015340:	e00a      	b.n	8015358 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015346:	2b00      	cmp	r3, #0
 8015348:	d005      	beq.n	8015356 <recv_tcp+0xe6>
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801534e:	8bfa      	ldrh	r2, [r7, #30]
 8015350:	2100      	movs	r1, #0
 8015352:	6978      	ldr	r0, [r7, #20]
 8015354:	4798      	blx	r3
  }

  return ERR_OK;
 8015356:	2300      	movs	r3, #0
}
 8015358:	4618      	mov	r0, r3
 801535a:	3720      	adds	r7, #32
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	08025ab0 	.word	0x08025ab0
 8015364:	08025b8c 	.word	0x08025b8c
 8015368:	08025af4 	.word	0x08025af4
 801536c:	08025bb0 	.word	0x08025bb0
 8015370:	08025bd0 	.word	0x08025bd0
 8015374:	08025be8 	.word	0x08025be8
 8015378:	08028ebe 	.word	0x08028ebe

0801537c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d106      	bne.n	801539e <poll_tcp+0x22>
 8015390:	4b29      	ldr	r3, [pc, #164]	; (8015438 <poll_tcp+0xbc>)
 8015392:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015396:	4929      	ldr	r1, [pc, #164]	; (801543c <poll_tcp+0xc0>)
 8015398:	4829      	ldr	r0, [pc, #164]	; (8015440 <poll_tcp+0xc4>)
 801539a:	f00f fa01 	bl	80247a0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	785b      	ldrb	r3, [r3, #1]
 80153a2:	2b01      	cmp	r3, #1
 80153a4:	d104      	bne.n	80153b0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80153a6:	2101      	movs	r1, #1
 80153a8:	68f8      	ldr	r0, [r7, #12]
 80153aa:	f000 ff2d 	bl	8016208 <lwip_netconn_do_writemore>
 80153ae:	e016      	b.n	80153de <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	785b      	ldrb	r3, [r3, #1]
 80153b4:	2b04      	cmp	r3, #4
 80153b6:	d112      	bne.n	80153de <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	6a1b      	ldr	r3, [r3, #32]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d00a      	beq.n	80153d6 <poll_tcp+0x5a>
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	6a1b      	ldr	r3, [r3, #32]
 80153c4:	7a5b      	ldrb	r3, [r3, #9]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d005      	beq.n	80153d6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	6a1b      	ldr	r3, [r3, #32]
 80153ce:	7a5a      	ldrb	r2, [r3, #9]
 80153d0:	3a01      	subs	r2, #1
 80153d2:	b2d2      	uxtb	r2, r2
 80153d4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80153d6:	2101      	movs	r1, #1
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f000 fbf7 	bl	8015bcc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	7f1b      	ldrb	r3, [r3, #28]
 80153e2:	f003 0310 	and.w	r3, r3, #16
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d021      	beq.n	801542e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d01d      	beq.n	801542e <poll_tcp+0xb2>
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80153fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80153fe:	d316      	bcc.n	801542e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	685b      	ldr	r3, [r3, #4]
 8015404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015408:	2b04      	cmp	r3, #4
 801540a:	d810      	bhi.n	801542e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	7f1b      	ldrb	r3, [r3, #28]
 8015410:	f023 0310 	bic.w	r3, r3, #16
 8015414:	b2da      	uxtb	r2, r3
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801541e:	2b00      	cmp	r3, #0
 8015420:	d005      	beq.n	801542e <poll_tcp+0xb2>
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015426:	2200      	movs	r2, #0
 8015428:	2102      	movs	r1, #2
 801542a:	68f8      	ldr	r0, [r7, #12]
 801542c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3710      	adds	r7, #16
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	08025ab0 	.word	0x08025ab0
 801543c:	08025c08 	.word	0x08025c08
 8015440:	08025af4 	.word	0x08025af4

08015444 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b086      	sub	sp, #24
 8015448:	af00      	add	r7, sp, #0
 801544a:	60f8      	str	r0, [r7, #12]
 801544c:	60b9      	str	r1, [r7, #8]
 801544e:	4613      	mov	r3, r2
 8015450:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d106      	bne.n	801546a <sent_tcp+0x26>
 801545c:	4b20      	ldr	r3, [pc, #128]	; (80154e0 <sent_tcp+0x9c>)
 801545e:	f240 1293 	movw	r2, #403	; 0x193
 8015462:	4920      	ldr	r1, [pc, #128]	; (80154e4 <sent_tcp+0xa0>)
 8015464:	4820      	ldr	r0, [pc, #128]	; (80154e8 <sent_tcp+0xa4>)
 8015466:	f00f f99b 	bl	80247a0 <iprintf>

  if (conn) {
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d032      	beq.n	80154d6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	785b      	ldrb	r3, [r3, #1]
 8015474:	2b01      	cmp	r3, #1
 8015476:	d104      	bne.n	8015482 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015478:	2101      	movs	r1, #1
 801547a:	6978      	ldr	r0, [r7, #20]
 801547c:	f000 fec4 	bl	8016208 <lwip_netconn_do_writemore>
 8015480:	e007      	b.n	8015492 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	785b      	ldrb	r3, [r3, #1]
 8015486:	2b04      	cmp	r3, #4
 8015488:	d103      	bne.n	8015492 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801548a:	2101      	movs	r1, #1
 801548c:	6978      	ldr	r0, [r7, #20]
 801548e:	f000 fb9d 	bl	8015bcc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d01d      	beq.n	80154d6 <sent_tcp+0x92>
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80154a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80154a6:	d316      	bcc.n	80154d6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80154b0:	2b04      	cmp	r3, #4
 80154b2:	d810      	bhi.n	80154d6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	7f1b      	ldrb	r3, [r3, #28]
 80154b8:	f023 0310 	bic.w	r3, r3, #16
 80154bc:	b2da      	uxtb	r2, r3
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80154c2:	697b      	ldr	r3, [r7, #20]
 80154c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d005      	beq.n	80154d6 <sent_tcp+0x92>
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154ce:	88fa      	ldrh	r2, [r7, #6]
 80154d0:	2102      	movs	r1, #2
 80154d2:	6978      	ldr	r0, [r7, #20]
 80154d4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80154d6:	2300      	movs	r3, #0
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3718      	adds	r7, #24
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	08025ab0 	.word	0x08025ab0
 80154e4:	08025c08 	.word	0x08025c08
 80154e8:	08025af4 	.word	0x08025af4

080154ec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b088      	sub	sp, #32
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	460b      	mov	r3, r1
 80154f6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d106      	bne.n	8015510 <err_tcp+0x24>
 8015502:	4b5f      	ldr	r3, [pc, #380]	; (8015680 <err_tcp+0x194>)
 8015504:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015508:	495e      	ldr	r1, [pc, #376]	; (8015684 <err_tcp+0x198>)
 801550a:	485f      	ldr	r0, [pc, #380]	; (8015688 <err_tcp+0x19c>)
 801550c:	f00f f948 	bl	80247a0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8015510:	f00e fb02 	bl	8023b18 <sys_arch_protect>
 8015514:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8015516:	69fb      	ldr	r3, [r7, #28]
 8015518:	2200      	movs	r2, #0
 801551a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	78fa      	ldrb	r2, [r7, #3]
 8015520:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	7f1b      	ldrb	r3, [r3, #28]
 8015526:	f043 0301 	orr.w	r3, r3, #1
 801552a:	b2da      	uxtb	r2, r3
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	785b      	ldrb	r3, [r3, #1]
 8015534:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	2200      	movs	r2, #0
 801553a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 801553c:	69b8      	ldr	r0, [r7, #24]
 801553e:	f00e faf9 	bl	8023b34 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015542:	69fb      	ldr	r3, [r7, #28]
 8015544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015546:	2b00      	cmp	r3, #0
 8015548:	d005      	beq.n	8015556 <err_tcp+0x6a>
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801554e:	2200      	movs	r2, #0
 8015550:	2104      	movs	r1, #4
 8015552:	69f8      	ldr	r0, [r7, #28]
 8015554:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015556:	69fb      	ldr	r3, [r7, #28]
 8015558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801555a:	2b00      	cmp	r3, #0
 801555c:	d005      	beq.n	801556a <err_tcp+0x7e>
 801555e:	69fb      	ldr	r3, [r7, #28]
 8015560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015562:	2200      	movs	r2, #0
 8015564:	2100      	movs	r1, #0
 8015566:	69f8      	ldr	r0, [r7, #28]
 8015568:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801556e:	2b00      	cmp	r3, #0
 8015570:	d005      	beq.n	801557e <err_tcp+0x92>
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015576:	2200      	movs	r2, #0
 8015578:	2102      	movs	r1, #2
 801557a:	69f8      	ldr	r0, [r7, #28]
 801557c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801557e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff fd8a 	bl	801509c <lwip_netconn_err_to_msg>
 8015588:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	3310      	adds	r3, #16
 801558e:	4618      	mov	r0, r3
 8015590:	f00e f9b8 	bl	8023904 <sys_mbox_valid>
 8015594:	4603      	mov	r3, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d005      	beq.n	80155a6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	3310      	adds	r3, #16
 801559e:	6939      	ldr	r1, [r7, #16]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f00e f94d 	bl	8023840 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	3314      	adds	r3, #20
 80155aa:	4618      	mov	r0, r3
 80155ac:	f00e f9aa 	bl	8023904 <sys_mbox_valid>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d005      	beq.n	80155c2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80155b6:	69fb      	ldr	r3, [r7, #28]
 80155b8:	3314      	adds	r3, #20
 80155ba:	6939      	ldr	r1, [r7, #16]
 80155bc:	4618      	mov	r0, r3
 80155be:	f00e f93f 	bl	8023840 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80155c2:	7dfb      	ldrb	r3, [r7, #23]
 80155c4:	2b01      	cmp	r3, #1
 80155c6:	d005      	beq.n	80155d4 <err_tcp+0xe8>
 80155c8:	7dfb      	ldrb	r3, [r7, #23]
 80155ca:	2b04      	cmp	r3, #4
 80155cc:	d002      	beq.n	80155d4 <err_tcp+0xe8>
 80155ce:	7dfb      	ldrb	r3, [r7, #23]
 80155d0:	2b03      	cmp	r3, #3
 80155d2:	d143      	bne.n	801565c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	7f1b      	ldrb	r3, [r3, #28]
 80155d8:	f003 0304 	and.w	r3, r3, #4
 80155dc:	2b00      	cmp	r3, #0
 80155de:	bf14      	ite	ne
 80155e0:	2301      	movne	r3, #1
 80155e2:	2300      	moveq	r3, #0
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	7f1b      	ldrb	r3, [r3, #28]
 80155ec:	f023 0304 	bic.w	r3, r3, #4
 80155f0:	b2da      	uxtb	r2, r3
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d13b      	bne.n	8015674 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	6a1b      	ldr	r3, [r3, #32]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d106      	bne.n	8015612 <err_tcp+0x126>
 8015604:	4b1e      	ldr	r3, [pc, #120]	; (8015680 <err_tcp+0x194>)
 8015606:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801560a:	4920      	ldr	r1, [pc, #128]	; (801568c <err_tcp+0x1a0>)
 801560c:	481e      	ldr	r0, [pc, #120]	; (8015688 <err_tcp+0x19c>)
 801560e:	f00f f8c7 	bl	80247a0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8015612:	7dfb      	ldrb	r3, [r7, #23]
 8015614:	2b04      	cmp	r3, #4
 8015616:	d104      	bne.n	8015622 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	6a1b      	ldr	r3, [r3, #32]
 801561c:	2200      	movs	r2, #0
 801561e:	711a      	strb	r2, [r3, #4]
 8015620:	e003      	b.n	801562a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	6a1b      	ldr	r3, [r3, #32]
 8015626:	78fa      	ldrb	r2, [r7, #3]
 8015628:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	6a1b      	ldr	r3, [r3, #32]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	330c      	adds	r3, #12
 8015632:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015634:	68b8      	ldr	r0, [r7, #8]
 8015636:	f00e f9f3 	bl	8023a20 <sys_sem_valid>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d106      	bne.n	801564e <err_tcp+0x162>
 8015640:	4b0f      	ldr	r3, [pc, #60]	; (8015680 <err_tcp+0x194>)
 8015642:	f240 12ef 	movw	r2, #495	; 0x1ef
 8015646:	4912      	ldr	r1, [pc, #72]	; (8015690 <err_tcp+0x1a4>)
 8015648:	480f      	ldr	r0, [pc, #60]	; (8015688 <err_tcp+0x19c>)
 801564a:	f00f f8a9 	bl	80247a0 <iprintf>
      conn->current_msg = NULL;
 801564e:	69fb      	ldr	r3, [r7, #28]
 8015650:	2200      	movs	r2, #0
 8015652:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8015654:	68b8      	ldr	r0, [r7, #8]
 8015656:	f00e f9c9 	bl	80239ec <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801565a:	e00b      	b.n	8015674 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	6a1b      	ldr	r3, [r3, #32]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d008      	beq.n	8015676 <err_tcp+0x18a>
 8015664:	4b06      	ldr	r3, [pc, #24]	; (8015680 <err_tcp+0x194>)
 8015666:	f240 12f7 	movw	r2, #503	; 0x1f7
 801566a:	490a      	ldr	r1, [pc, #40]	; (8015694 <err_tcp+0x1a8>)
 801566c:	4806      	ldr	r0, [pc, #24]	; (8015688 <err_tcp+0x19c>)
 801566e:	f00f f897 	bl	80247a0 <iprintf>
  }
}
 8015672:	e000      	b.n	8015676 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8015674:	bf00      	nop
}
 8015676:	bf00      	nop
 8015678:	3720      	adds	r7, #32
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	08025ab0 	.word	0x08025ab0
 8015684:	08025c08 	.word	0x08025c08
 8015688:	08025af4 	.word	0x08025af4
 801568c:	08025c18 	.word	0x08025c18
 8015690:	08025c34 	.word	0x08025c34
 8015694:	08025c50 	.word	0x08025c50

08015698 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80156a6:	6879      	ldr	r1, [r7, #4]
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f004 fb9b 	bl	8019de4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80156ae:	490a      	ldr	r1, [pc, #40]	; (80156d8 <setup_tcp+0x40>)
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f004 fba9 	bl	8019e08 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80156b6:	4909      	ldr	r1, [pc, #36]	; (80156dc <setup_tcp+0x44>)
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	f004 fbc7 	bl	8019e4c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80156be:	2202      	movs	r2, #2
 80156c0:	4907      	ldr	r1, [pc, #28]	; (80156e0 <setup_tcp+0x48>)
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f004 fc1e 	bl	8019f04 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80156c8:	4906      	ldr	r1, [pc, #24]	; (80156e4 <setup_tcp+0x4c>)
 80156ca:	68f8      	ldr	r0, [r7, #12]
 80156cc:	f004 fbe0 	bl	8019e90 <tcp_err>
}
 80156d0:	bf00      	nop
 80156d2:	3710      	adds	r7, #16
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	08015271 	.word	0x08015271
 80156dc:	08015445 	.word	0x08015445
 80156e0:	0801537d 	.word	0x0801537d
 80156e4:	080154ed 	.word	0x080154ed

080156e8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80156e8:	b590      	push	{r4, r7, lr}
 80156ea:	b089      	sub	sp, #36	; 0x24
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	60f8      	str	r0, [r7, #12]
 80156f0:	60b9      	str	r1, [r7, #8]
 80156f2:	4613      	mov	r3, r2
 80156f4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d102      	bne.n	8015706 <accept_function+0x1e>
    return ERR_VAL;
 8015700:	f06f 0305 	mvn.w	r3, #5
 8015704:	e0a1      	b.n	801584a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	3314      	adds	r3, #20
 801570a:	4618      	mov	r0, r3
 801570c:	f00e f8fa 	bl	8023904 <sys_mbox_valid>
 8015710:	4603      	mov	r3, r0
 8015712:	2b00      	cmp	r3, #0
 8015714:	d102      	bne.n	801571c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8015716:	f06f 0305 	mvn.w	r3, #5
 801571a:	e096      	b.n	801584a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d11b      	bne.n	801575a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	f103 0414 	add.w	r4, r3, #20
 8015728:	f06f 000c 	mvn.w	r0, #12
 801572c:	f7ff fcb6 	bl	801509c <lwip_netconn_err_to_msg>
 8015730:	4603      	mov	r3, r0
 8015732:	4619      	mov	r1, r3
 8015734:	4620      	mov	r0, r4
 8015736:	f00e f883 	bl	8023840 <sys_mbox_trypost>
 801573a:	4603      	mov	r3, r0
 801573c:	2b00      	cmp	r3, #0
 801573e:	d109      	bne.n	8015754 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015740:	69fb      	ldr	r3, [r7, #28]
 8015742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015744:	2b00      	cmp	r3, #0
 8015746:	d005      	beq.n	8015754 <accept_function+0x6c>
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801574c:	2200      	movs	r2, #0
 801574e:	2100      	movs	r1, #0
 8015750:	69f8      	ldr	r0, [r7, #28]
 8015752:	4798      	blx	r3
    }
    return ERR_VAL;
 8015754:	f06f 0305 	mvn.w	r3, #5
 8015758:	e077      	b.n	801584a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 801575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d006      	beq.n	8015770 <accept_function+0x88>
 8015762:	4b3c      	ldr	r3, [pc, #240]	; (8015854 <accept_function+0x16c>)
 8015764:	f240 222a 	movw	r2, #554	; 0x22a
 8015768:	493b      	ldr	r1, [pc, #236]	; (8015858 <accept_function+0x170>)
 801576a:	483c      	ldr	r0, [pc, #240]	; (801585c <accept_function+0x174>)
 801576c:	f00f f818 	bl	80247a0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8015770:	69fb      	ldr	r3, [r7, #28]
 8015772:	781a      	ldrb	r2, [r3, #0]
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015778:	4619      	mov	r1, r3
 801577a:	4610      	mov	r0, r2
 801577c:	f000 f8f0 	bl	8015960 <netconn_alloc>
 8015780:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d11b      	bne.n	80157c0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	f103 0414 	add.w	r4, r3, #20
 801578e:	f06f 000c 	mvn.w	r0, #12
 8015792:	f7ff fc83 	bl	801509c <lwip_netconn_err_to_msg>
 8015796:	4603      	mov	r3, r0
 8015798:	4619      	mov	r1, r3
 801579a:	4620      	mov	r0, r4
 801579c:	f00e f850 	bl	8023840 <sys_mbox_trypost>
 80157a0:	4603      	mov	r3, r0
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d109      	bne.n	80157ba <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d005      	beq.n	80157ba <accept_function+0xd2>
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b2:	2200      	movs	r2, #0
 80157b4:	2100      	movs	r1, #0
 80157b6:	69f8      	ldr	r0, [r7, #28]
 80157b8:	4798      	blx	r3
    }
    return ERR_MEM;
 80157ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157be:	e044      	b.n	801584a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80157c0:	69bb      	ldr	r3, [r7, #24]
 80157c2:	68ba      	ldr	r2, [r7, #8]
 80157c4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80157c6:	69b8      	ldr	r0, [r7, #24]
 80157c8:	f7ff ff66 	bl	8015698 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80157cc:	69fb      	ldr	r3, [r7, #28]
 80157ce:	3314      	adds	r3, #20
 80157d0:	69b9      	ldr	r1, [r7, #24]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f00e f834 	bl	8023840 <sys_mbox_trypost>
 80157d8:	4603      	mov	r3, r0
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d02a      	beq.n	8015834 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80157e4:	2100      	movs	r1, #0
 80157e6:	6978      	ldr	r0, [r7, #20]
 80157e8:	f004 fafc 	bl	8019de4 <tcp_arg>
    tcp_recv(pcb, NULL);
 80157ec:	2100      	movs	r1, #0
 80157ee:	6978      	ldr	r0, [r7, #20]
 80157f0:	f004 fb0a 	bl	8019e08 <tcp_recv>
    tcp_sent(pcb, NULL);
 80157f4:	2100      	movs	r1, #0
 80157f6:	6978      	ldr	r0, [r7, #20]
 80157f8:	f004 fb28 	bl	8019e4c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80157fc:	2200      	movs	r2, #0
 80157fe:	2100      	movs	r1, #0
 8015800:	6978      	ldr	r0, [r7, #20]
 8015802:	f004 fb7f 	bl	8019f04 <tcp_poll>
    tcp_err(pcb, NULL);
 8015806:	2100      	movs	r1, #0
 8015808:	6978      	ldr	r0, [r7, #20]
 801580a:	f004 fb41 	bl	8019e90 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801580e:	69bb      	ldr	r3, [r7, #24]
 8015810:	2200      	movs	r2, #0
 8015812:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8015814:	69bb      	ldr	r3, [r7, #24]
 8015816:	3310      	adds	r3, #16
 8015818:	4618      	mov	r0, r3
 801581a:	f00d ffff 	bl	802381c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	3310      	adds	r3, #16
 8015822:	4618      	mov	r0, r3
 8015824:	f00e f87f 	bl	8023926 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015828:	69b8      	ldr	r0, [r7, #24]
 801582a:	f000 f907 	bl	8015a3c <netconn_free>
    return ERR_MEM;
 801582e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015832:	e00a      	b.n	801584a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015834:	69fb      	ldr	r3, [r7, #28]
 8015836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015838:	2b00      	cmp	r3, #0
 801583a:	d005      	beq.n	8015848 <accept_function+0x160>
 801583c:	69fb      	ldr	r3, [r7, #28]
 801583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015840:	2200      	movs	r2, #0
 8015842:	2100      	movs	r1, #0
 8015844:	69f8      	ldr	r0, [r7, #28]
 8015846:	4798      	blx	r3
  }

  return ERR_OK;
 8015848:	2300      	movs	r3, #0
}
 801584a:	4618      	mov	r0, r3
 801584c:	3724      	adds	r7, #36	; 0x24
 801584e:	46bd      	mov	sp, r7
 8015850:	bd90      	pop	{r4, r7, pc}
 8015852:	bf00      	nop
 8015854:	08025ab0 	.word	0x08025ab0
 8015858:	08025c6c 	.word	0x08025c6c
 801585c:	08025af4 	.word	0x08025af4

08015860 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8015860:	b590      	push	{r4, r7, lr}
 8015862:	b085      	sub	sp, #20
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015868:	2300      	movs	r3, #0
 801586a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d006      	beq.n	8015884 <pcb_new+0x24>
 8015876:	4b2b      	ldr	r3, [pc, #172]	; (8015924 <pcb_new+0xc4>)
 8015878:	f240 2265 	movw	r2, #613	; 0x265
 801587c:	492a      	ldr	r1, [pc, #168]	; (8015928 <pcb_new+0xc8>)
 801587e:	482b      	ldr	r0, [pc, #172]	; (801592c <pcb_new+0xcc>)
 8015880:	f00e ff8e 	bl	80247a0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801588e:	2b10      	cmp	r3, #16
 8015890:	d022      	beq.n	80158d8 <pcb_new+0x78>
 8015892:	2b20      	cmp	r3, #32
 8015894:	d133      	bne.n	80158fe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681c      	ldr	r4, [r3, #0]
 801589a:	7bfb      	ldrb	r3, [r7, #15]
 801589c:	4618      	mov	r0, r3
 801589e:	f009 fd54 	bl	801f34a <udp_new_ip_type>
 80158a2:	4603      	mov	r3, r0
 80158a4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	685b      	ldr	r3, [r3, #4]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d02a      	beq.n	8015906 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	2b22      	cmp	r3, #34	; 0x22
 80158b8:	d104      	bne.n	80158c4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	2201      	movs	r2, #1
 80158c2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	6858      	ldr	r0, [r3, #4]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	461a      	mov	r2, r3
 80158d0:	4917      	ldr	r1, [pc, #92]	; (8015930 <pcb_new+0xd0>)
 80158d2:	f009 fcc1 	bl	801f258 <udp_recv>
      }
      break;
 80158d6:	e016      	b.n	8015906 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681c      	ldr	r4, [r3, #0]
 80158dc:	7bfb      	ldrb	r3, [r7, #15]
 80158de:	4618      	mov	r0, r3
 80158e0:	f004 fa72 	bl	8019dc8 <tcp_new_ip_type>
 80158e4:	4603      	mov	r3, r0
 80158e6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d00b      	beq.n	801590a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7ff fece 	bl	8015698 <setup_tcp>
      }
      break;
 80158fc:	e005      	b.n	801590a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	22fa      	movs	r2, #250	; 0xfa
 8015902:	711a      	strb	r2, [r3, #4]
      return;
 8015904:	e00a      	b.n	801591c <pcb_new+0xbc>
      break;
 8015906:	bf00      	nop
 8015908:	e000      	b.n	801590c <pcb_new+0xac>
      break;
 801590a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d102      	bne.n	801591c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	22ff      	movs	r2, #255	; 0xff
 801591a:	711a      	strb	r2, [r3, #4]
  }
}
 801591c:	3714      	adds	r7, #20
 801591e:	46bd      	mov	sp, r7
 8015920:	bd90      	pop	{r4, r7, pc}
 8015922:	bf00      	nop
 8015924:	08025ab0 	.word	0x08025ab0
 8015928:	08025c94 	.word	0x08025c94
 801592c:	08025af4 	.word	0x08025af4
 8015930:	08015175 	.word	0x08015175

08015934 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	2200      	movs	r2, #0
 8015944:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d102      	bne.n	8015956 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8015950:	68f8      	ldr	r0, [r7, #12]
 8015952:	f7ff ff85 	bl	8015860 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015956:	bf00      	nop
 8015958:	3710      	adds	r7, #16
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
	...

08015960 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b086      	sub	sp, #24
 8015964:	af00      	add	r7, sp, #0
 8015966:	4603      	mov	r3, r0
 8015968:	6039      	str	r1, [r7, #0]
 801596a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 801596c:	2300      	movs	r3, #0
 801596e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015970:	2007      	movs	r0, #7
 8015972:	f001 fc9f 	bl	80172b4 <memp_malloc>
 8015976:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d101      	bne.n	8015982 <netconn_alloc+0x22>
    return NULL;
 801597e:	2300      	movs	r3, #0
 8015980:	e052      	b.n	8015a28 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	2200      	movs	r2, #0
 8015986:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	79fa      	ldrb	r2, [r7, #7]
 801598c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2200      	movs	r2, #0
 8015992:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015994:	79fb      	ldrb	r3, [r7, #7]
 8015996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801599a:	2b10      	cmp	r3, #16
 801599c:	d004      	beq.n	80159a8 <netconn_alloc+0x48>
 801599e:	2b20      	cmp	r3, #32
 80159a0:	d105      	bne.n	80159ae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80159a2:	2306      	movs	r3, #6
 80159a4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80159a6:	e00a      	b.n	80159be <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80159a8:	2306      	movs	r3, #6
 80159aa:	617b      	str	r3, [r7, #20]
      break;
 80159ac:	e007      	b.n	80159be <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80159ae:	4b20      	ldr	r3, [pc, #128]	; (8015a30 <netconn_alloc+0xd0>)
 80159b0:	f240 22e5 	movw	r2, #741	; 0x2e5
 80159b4:	491f      	ldr	r1, [pc, #124]	; (8015a34 <netconn_alloc+0xd4>)
 80159b6:	4820      	ldr	r0, [pc, #128]	; (8015a38 <netconn_alloc+0xd8>)
 80159b8:	f00e fef2 	bl	80247a0 <iprintf>
      goto free_and_return;
 80159bc:	e02f      	b.n	8015a1e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	3310      	adds	r3, #16
 80159c2:	6979      	ldr	r1, [r7, #20]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f00d ff0f 	bl	80237e8 <sys_mbox_new>
 80159ca:	4603      	mov	r3, r0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d125      	bne.n	8015a1c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	330c      	adds	r3, #12
 80159d4:	2100      	movs	r1, #0
 80159d6:	4618      	mov	r0, r3
 80159d8:	f00d ffb2 	bl	8023940 <sys_sem_new>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d005      	beq.n	80159ee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	3310      	adds	r3, #16
 80159e6:	4618      	mov	r0, r3
 80159e8:	f00d ff18 	bl	802381c <sys_mbox_free>
    goto free_and_return;
 80159ec:	e017      	b.n	8015a1e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	3314      	adds	r3, #20
 80159f2:	4618      	mov	r0, r3
 80159f4:	f00d ff97 	bl	8023926 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2200      	movs	r2, #0
 80159fc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015a04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	683a      	ldr	r2, [r7, #0]
 8015a0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	7cfa      	ldrb	r2, [r7, #19]
 8015a16:	771a      	strb	r2, [r3, #28]
  return conn;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	e005      	b.n	8015a28 <netconn_alloc+0xc8>
    goto free_and_return;
 8015a1c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8015a1e:	68f9      	ldr	r1, [r7, #12]
 8015a20:	2007      	movs	r0, #7
 8015a22:	f001 fc99 	bl	8017358 <memp_free>
  return NULL;
 8015a26:	2300      	movs	r3, #0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3718      	adds	r7, #24
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	08025ab0 	.word	0x08025ab0
 8015a34:	08025cb4 	.word	0x08025cb4
 8015a38:	08025af4 	.word	0x08025af4

08015a3c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d006      	beq.n	8015a5a <netconn_free+0x1e>
 8015a4c:	4b1b      	ldr	r3, [pc, #108]	; (8015abc <netconn_free+0x80>)
 8015a4e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015a52:	491b      	ldr	r1, [pc, #108]	; (8015ac0 <netconn_free+0x84>)
 8015a54:	481b      	ldr	r0, [pc, #108]	; (8015ac4 <netconn_free+0x88>)
 8015a56:	f00e fea3 	bl	80247a0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	3310      	adds	r3, #16
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f00d ff50 	bl	8023904 <sys_mbox_valid>
 8015a64:	4603      	mov	r3, r0
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d006      	beq.n	8015a78 <netconn_free+0x3c>
 8015a6a:	4b14      	ldr	r3, [pc, #80]	; (8015abc <netconn_free+0x80>)
 8015a6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015a70:	4915      	ldr	r1, [pc, #84]	; (8015ac8 <netconn_free+0x8c>)
 8015a72:	4814      	ldr	r0, [pc, #80]	; (8015ac4 <netconn_free+0x88>)
 8015a74:	f00e fe94 	bl	80247a0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	3314      	adds	r3, #20
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f00d ff41 	bl	8023904 <sys_mbox_valid>
 8015a82:	4603      	mov	r3, r0
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d006      	beq.n	8015a96 <netconn_free+0x5a>
 8015a88:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <netconn_free+0x80>)
 8015a8a:	f240 3227 	movw	r2, #807	; 0x327
 8015a8e:	490f      	ldr	r1, [pc, #60]	; (8015acc <netconn_free+0x90>)
 8015a90:	480c      	ldr	r0, [pc, #48]	; (8015ac4 <netconn_free+0x88>)
 8015a92:	f00e fe85 	bl	80247a0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	330c      	adds	r3, #12
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f00d ffb3 	bl	8023a06 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	330c      	adds	r3, #12
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f00d ffcc 	bl	8023a42 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	2007      	movs	r0, #7
 8015aae:	f001 fc53 	bl	8017358 <memp_free>
}
 8015ab2:	bf00      	nop
 8015ab4:	3708      	adds	r7, #8
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	08025ab0 	.word	0x08025ab0
 8015ac0:	08025cdc 	.word	0x08025cdc
 8015ac4:	08025af4 	.word	0x08025af4
 8015ac8:	08025d0c 	.word	0x08025d0c
 8015acc:	08025d48 	.word	0x08025d48

08015ad0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b086      	sub	sp, #24
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	3310      	adds	r3, #16
 8015adc:	4618      	mov	r0, r3
 8015ade:	f00d ff11 	bl	8023904 <sys_mbox_valid>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d02f      	beq.n	8015b48 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015ae8:	e018      	b.n	8015b1c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015af2:	2b10      	cmp	r3, #16
 8015af4:	d10e      	bne.n	8015b14 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	f107 020f 	add.w	r2, r7, #15
 8015afc:	4611      	mov	r1, r2
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7ff fafe 	bl	8015100 <lwip_netconn_is_err_msg>
 8015b04:	4603      	mov	r3, r0
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d108      	bne.n	8015b1c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f002 fae9 	bl	80180e4 <pbuf_free>
 8015b12:	e003      	b.n	8015b1c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	4618      	mov	r0, r3
 8015b18:	f000 fd42 	bl	80165a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	3310      	adds	r3, #16
 8015b20:	f107 0210 	add.w	r2, r7, #16
 8015b24:	4611      	mov	r1, r2
 8015b26:	4618      	mov	r0, r3
 8015b28:	f00d fed5 	bl	80238d6 <sys_arch_mbox_tryfetch>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b32:	d1da      	bne.n	8015aea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	3310      	adds	r3, #16
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f00d fe6f 	bl	802381c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	3310      	adds	r3, #16
 8015b42:	4618      	mov	r0, r3
 8015b44:	f00d feef 	bl	8023926 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	3314      	adds	r3, #20
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f00d fed9 	bl	8023904 <sys_mbox_valid>
 8015b52:	4603      	mov	r3, r0
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d034      	beq.n	8015bc2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015b58:	e01d      	b.n	8015b96 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	f107 020e 	add.w	r2, r7, #14
 8015b60:	4611      	mov	r1, r2
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7ff facc 	bl	8015100 <lwip_netconn_is_err_msg>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d113      	bne.n	8015b96 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8015b72:	6978      	ldr	r0, [r7, #20]
 8015b74:	f7ff ffac 	bl	8015ad0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d007      	beq.n	8015b90 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	4618      	mov	r0, r3
 8015b86:	f003 f8a3 	bl	8018cd0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8015b90:	6978      	ldr	r0, [r7, #20]
 8015b92:	f7ff ff53 	bl	8015a3c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	3314      	adds	r3, #20
 8015b9a:	f107 0210 	add.w	r2, r7, #16
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f00d fe98 	bl	80238d6 <sys_arch_mbox_tryfetch>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015bac:	d1d5      	bne.n	8015b5a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	3314      	adds	r3, #20
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f00d fe32 	bl	802381c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	3314      	adds	r3, #20
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f00d feb2 	bl	8023926 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8015bc2:	bf00      	nop
 8015bc4:	3718      	adds	r7, #24
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}
	...

08015bcc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d106      	bne.n	8015bf0 <lwip_netconn_do_close_internal+0x24>
 8015be2:	4ba1      	ldr	r3, [pc, #644]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015be4:	f240 32a2 	movw	r2, #930	; 0x3a2
 8015be8:	49a0      	ldr	r1, [pc, #640]	; (8015e6c <lwip_netconn_do_close_internal+0x2a0>)
 8015bea:	48a1      	ldr	r0, [pc, #644]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015bec:	f00e fdd8 	bl	80247a0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015bf8:	2b10      	cmp	r3, #16
 8015bfa:	d006      	beq.n	8015c0a <lwip_netconn_do_close_internal+0x3e>
 8015bfc:	4b9a      	ldr	r3, [pc, #616]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015bfe:	f240 32a3 	movw	r2, #931	; 0x3a3
 8015c02:	499c      	ldr	r1, [pc, #624]	; (8015e74 <lwip_netconn_do_close_internal+0x2a8>)
 8015c04:	489a      	ldr	r0, [pc, #616]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015c06:	f00e fdcb 	bl	80247a0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	785b      	ldrb	r3, [r3, #1]
 8015c0e:	2b04      	cmp	r3, #4
 8015c10:	d006      	beq.n	8015c20 <lwip_netconn_do_close_internal+0x54>
 8015c12:	4b95      	ldr	r3, [pc, #596]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015c14:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8015c18:	4997      	ldr	r1, [pc, #604]	; (8015e78 <lwip_netconn_do_close_internal+0x2ac>)
 8015c1a:	4895      	ldr	r0, [pc, #596]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015c1c:	f00e fdc0 	bl	80247a0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d106      	bne.n	8015c36 <lwip_netconn_do_close_internal+0x6a>
 8015c28:	4b8f      	ldr	r3, [pc, #572]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015c2a:	f240 32a5 	movw	r2, #933	; 0x3a5
 8015c2e:	4993      	ldr	r1, [pc, #588]	; (8015e7c <lwip_netconn_do_close_internal+0x2b0>)
 8015c30:	488f      	ldr	r0, [pc, #572]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015c32:	f00e fdb5 	bl	80247a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6a1b      	ldr	r3, [r3, #32]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d106      	bne.n	8015c4c <lwip_netconn_do_close_internal+0x80>
 8015c3e:	4b8a      	ldr	r3, [pc, #552]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015c40:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015c44:	498e      	ldr	r1, [pc, #568]	; (8015e80 <lwip_netconn_do_close_internal+0x2b4>)
 8015c46:	488a      	ldr	r0, [pc, #552]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015c48:	f00e fdaa 	bl	80247a0 <iprintf>

  tpcb = conn->pcb.tcp;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	6a1b      	ldr	r3, [r3, #32]
 8015c56:	7a1b      	ldrb	r3, [r3, #8]
 8015c58:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
 8015c5c:	f003 0301 	and.w	r3, r3, #1
 8015c60:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8015c62:	7bfb      	ldrb	r3, [r7, #15]
 8015c64:	f003 0302 	and.w	r3, r3, #2
 8015c68:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8015c6a:	7bfb      	ldrb	r3, [r7, #15]
 8015c6c:	2b03      	cmp	r3, #3
 8015c6e:	d102      	bne.n	8015c76 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8015c70:	2301      	movs	r3, #1
 8015c72:	75bb      	strb	r3, [r7, #22]
 8015c74:	e01f      	b.n	8015cb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8015c76:	7bbb      	ldrb	r3, [r7, #14]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d00e      	beq.n	8015c9a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8015c80:	2b05      	cmp	r3, #5
 8015c82:	d007      	beq.n	8015c94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8015c88:	2b06      	cmp	r3, #6
 8015c8a:	d003      	beq.n	8015c94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8015c90:	2b08      	cmp	r3, #8
 8015c92:	d102      	bne.n	8015c9a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8015c94:	2301      	movs	r3, #1
 8015c96:	75bb      	strb	r3, [r7, #22]
 8015c98:	e00d      	b.n	8015cb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015c9a:	7b7b      	ldrb	r3, [r7, #13]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d008      	beq.n	8015cb2 <lwip_netconn_do_close_internal+0xe6>
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	8b5b      	ldrh	r3, [r3, #26]
 8015ca4:	f003 0310 	and.w	r3, r3, #16
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d002      	beq.n	8015cb2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8015cac:	2301      	movs	r3, #1
 8015cae:	75bb      	strb	r3, [r7, #22]
 8015cb0:	e001      	b.n	8015cb6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8015cb6:	7dbb      	ldrb	r3, [r7, #22]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d003      	beq.n	8015cc4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8015cbc:	2100      	movs	r1, #0
 8015cbe:	6938      	ldr	r0, [r7, #16]
 8015cc0:	f004 f890 	bl	8019de4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	7d1b      	ldrb	r3, [r3, #20]
 8015cc8:	2b01      	cmp	r3, #1
 8015cca:	d104      	bne.n	8015cd6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8015ccc:	2100      	movs	r1, #0
 8015cce:	6938      	ldr	r0, [r7, #16]
 8015cd0:	f004 f900 	bl	8019ed4 <tcp_accept>
 8015cd4:	e01d      	b.n	8015d12 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8015cd6:	7bbb      	ldrb	r3, [r7, #14]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d007      	beq.n	8015cec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8015cdc:	2100      	movs	r1, #0
 8015cde:	6938      	ldr	r0, [r7, #16]
 8015ce0:	f004 f892 	bl	8019e08 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	6938      	ldr	r0, [r7, #16]
 8015ce8:	f004 f8f4 	bl	8019ed4 <tcp_accept>
    }
    if (shut_tx) {
 8015cec:	7b7b      	ldrb	r3, [r7, #13]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d003      	beq.n	8015cfa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8015cf2:	2100      	movs	r1, #0
 8015cf4:	6938      	ldr	r0, [r7, #16]
 8015cf6:	f004 f8a9 	bl	8019e4c <tcp_sent>
    }
    if (shut_close) {
 8015cfa:	7dbb      	ldrb	r3, [r7, #22]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d008      	beq.n	8015d12 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8015d00:	2200      	movs	r2, #0
 8015d02:	2100      	movs	r1, #0
 8015d04:	6938      	ldr	r0, [r7, #16]
 8015d06:	f004 f8fd 	bl	8019f04 <tcp_poll>
      tcp_err(tpcb, NULL);
 8015d0a:	2100      	movs	r1, #0
 8015d0c:	6938      	ldr	r0, [r7, #16]
 8015d0e:	f004 f8bf 	bl	8019e90 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8015d12:	7dbb      	ldrb	r3, [r7, #22]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d005      	beq.n	8015d24 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8015d18:	6938      	ldr	r0, [r7, #16]
 8015d1a:	f002 fe95 	bl	8018a48 <tcp_close>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	75fb      	strb	r3, [r7, #23]
 8015d22:	e007      	b.n	8015d34 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8015d24:	7bbb      	ldrb	r3, [r7, #14]
 8015d26:	7b7a      	ldrb	r2, [r7, #13]
 8015d28:	4619      	mov	r1, r3
 8015d2a:	6938      	ldr	r0, [r7, #16]
 8015d2c:	f002 feb8 	bl	8018aa0 <tcp_shutdown>
 8015d30:	4603      	mov	r3, r0
 8015d32:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8015d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d102      	bne.n	8015d42 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	757b      	strb	r3, [r7, #21]
 8015d40:	e016      	b.n	8015d70 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8015d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d4a:	d10f      	bne.n	8015d6c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a1b      	ldr	r3, [r3, #32]
 8015d50:	7a5b      	ldrb	r3, [r3, #9]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d10c      	bne.n	8015d70 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8015d56:	2301      	movs	r3, #1
 8015d58:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8015d5a:	7dbb      	ldrb	r3, [r7, #22]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d007      	beq.n	8015d70 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8015d60:	6938      	ldr	r0, [r7, #16]
 8015d62:	f002 ffb5 	bl	8018cd0 <tcp_abort>
          err = ERR_OK;
 8015d66:	2300      	movs	r3, #0
 8015d68:	75fb      	strb	r3, [r7, #23]
 8015d6a:	e001      	b.n	8015d70 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8015d70:	7d7b      	ldrb	r3, [r7, #21]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d044      	beq.n	8015e00 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6a1b      	ldr	r3, [r3, #32]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	330c      	adds	r3, #12
 8015d7e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6a1b      	ldr	r3, [r3, #32]
 8015d84:	7dfa      	ldrb	r2, [r7, #23]
 8015d86:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2200      	movs	r2, #0
 8015d92:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8015d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d129      	bne.n	8015df0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8015d9c:	7dbb      	ldrb	r3, [r7, #22]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d00c      	beq.n	8015dbc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2200      	movs	r2, #0
 8015da6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d005      	beq.n	8015dbc <lwip_netconn_do_close_internal+0x1f0>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db4:	2200      	movs	r2, #0
 8015db6:	2104      	movs	r1, #4
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	4798      	blx	r3
      }
      if (shut_rx) {
 8015dbc:	7bbb      	ldrb	r3, [r7, #14]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d009      	beq.n	8015dd6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d005      	beq.n	8015dd6 <lwip_netconn_do_close_internal+0x20a>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dce:	2200      	movs	r2, #0
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	4798      	blx	r3
      }
      if (shut_tx) {
 8015dd6:	7b7b      	ldrb	r3, [r7, #13]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d009      	beq.n	8015df0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d005      	beq.n	8015df0 <lwip_netconn_do_close_internal+0x224>
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de8:	2200      	movs	r2, #0
 8015dea:	2102      	movs	r1, #2
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015df0:	78fb      	ldrb	r3, [r7, #3]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d002      	beq.n	8015dfc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8015df6:	68b8      	ldr	r0, [r7, #8]
 8015df8:	f00d fdf8 	bl	80239ec <sys_sem_signal>
    }
    return ERR_OK;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	e02e      	b.n	8015e5e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8015e00:	7d7b      	ldrb	r3, [r7, #21]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d11e      	bne.n	8015e44 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015e06:	693b      	ldr	r3, [r7, #16]
 8015e08:	7d1b      	ldrb	r3, [r3, #20]
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	d106      	bne.n	8015e1c <lwip_netconn_do_close_internal+0x250>
 8015e0e:	4b16      	ldr	r3, [pc, #88]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015e10:	f240 4241 	movw	r2, #1089	; 0x441
 8015e14:	491b      	ldr	r1, [pc, #108]	; (8015e84 <lwip_netconn_do_close_internal+0x2b8>)
 8015e16:	4816      	ldr	r0, [pc, #88]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015e18:	f00e fcc2 	bl	80247a0 <iprintf>
    if (shut_tx) {
 8015e1c:	7b7b      	ldrb	r3, [r7, #13]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d003      	beq.n	8015e2a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8015e22:	4919      	ldr	r1, [pc, #100]	; (8015e88 <lwip_netconn_do_close_internal+0x2bc>)
 8015e24:	6938      	ldr	r0, [r7, #16]
 8015e26:	f004 f811 	bl	8019e4c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	4917      	ldr	r1, [pc, #92]	; (8015e8c <lwip_netconn_do_close_internal+0x2c0>)
 8015e2e:	6938      	ldr	r0, [r7, #16]
 8015e30:	f004 f868 	bl	8019f04 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8015e34:	4916      	ldr	r1, [pc, #88]	; (8015e90 <lwip_netconn_do_close_internal+0x2c4>)
 8015e36:	6938      	ldr	r0, [r7, #16]
 8015e38:	f004 f82a 	bl	8019e90 <tcp_err>
    tcp_arg(tpcb, conn);
 8015e3c:	6879      	ldr	r1, [r7, #4]
 8015e3e:	6938      	ldr	r0, [r7, #16]
 8015e40:	f003 ffd0 	bl	8019de4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8015e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d106      	bne.n	8015e5a <lwip_netconn_do_close_internal+0x28e>
 8015e4c:	4b06      	ldr	r3, [pc, #24]	; (8015e68 <lwip_netconn_do_close_internal+0x29c>)
 8015e4e:	f240 424d 	movw	r2, #1101	; 0x44d
 8015e52:	4910      	ldr	r1, [pc, #64]	; (8015e94 <lwip_netconn_do_close_internal+0x2c8>)
 8015e54:	4806      	ldr	r0, [pc, #24]	; (8015e70 <lwip_netconn_do_close_internal+0x2a4>)
 8015e56:	f00e fca3 	bl	80247a0 <iprintf>
  return err;
 8015e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3718      	adds	r7, #24
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}
 8015e66:	bf00      	nop
 8015e68:	08025ab0 	.word	0x08025ab0
 8015e6c:	08025d84 	.word	0x08025d84
 8015e70:	08025af4 	.word	0x08025af4
 8015e74:	08025d94 	.word	0x08025d94
 8015e78:	08025db4 	.word	0x08025db4
 8015e7c:	08025dd8 	.word	0x08025dd8
 8015e80:	08025c18 	.word	0x08025c18
 8015e84:	08025dec 	.word	0x08025dec
 8015e88:	08015445 	.word	0x08015445
 8015e8c:	0801537d 	.word	0x0801537d
 8015e90:	080154ed 	.word	0x080154ed
 8015e94:	08025e10 	.word	0x08025e10

08015e98 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	785b      	ldrb	r3, [r3, #1]
 8015eaa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8015eac:	7afb      	ldrb	r3, [r7, #11]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d00d      	beq.n	8015ece <lwip_netconn_do_delconn+0x36>
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ebc:	2b10      	cmp	r3, #16
 8015ebe:	d006      	beq.n	8015ece <lwip_netconn_do_delconn+0x36>
 8015ec0:	4b60      	ldr	r3, [pc, #384]	; (8016044 <lwip_netconn_do_delconn+0x1ac>)
 8015ec2:	f240 425f 	movw	r2, #1119	; 0x45f
 8015ec6:	4960      	ldr	r1, [pc, #384]	; (8016048 <lwip_netconn_do_delconn+0x1b0>)
 8015ec8:	4860      	ldr	r0, [pc, #384]	; (801604c <lwip_netconn_do_delconn+0x1b4>)
 8015eca:	f00e fc69 	bl	80247a0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8015ece:	7afb      	ldrb	r3, [r7, #11]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d005      	beq.n	8015ee0 <lwip_netconn_do_delconn+0x48>
 8015ed4:	7afb      	ldrb	r3, [r7, #11]
 8015ed6:	2b02      	cmp	r3, #2
 8015ed8:	d002      	beq.n	8015ee0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8015eda:	7afb      	ldrb	r3, [r7, #11]
 8015edc:	2b03      	cmp	r3, #3
 8015ede:	d109      	bne.n	8015ef4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8015ee0:	7afb      	ldrb	r3, [r7, #11]
 8015ee2:	2b03      	cmp	r3, #3
 8015ee4:	d10a      	bne.n	8015efc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	7f1b      	ldrb	r3, [r3, #28]
 8015eec:	f003 0304 	and.w	r3, r3, #4
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d103      	bne.n	8015efc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	22fb      	movs	r2, #251	; 0xfb
 8015ef8:	711a      	strb	r2, [r3, #4]
 8015efa:	e097      	b.n	801602c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8015efc:	7afb      	ldrb	r3, [r7, #11]
 8015efe:	2b03      	cmp	r3, #3
 8015f00:	d10d      	bne.n	8015f1e <lwip_netconn_do_delconn+0x86>
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	7f1b      	ldrb	r3, [r3, #28]
 8015f08:	f003 0304 	and.w	r3, r3, #4
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d106      	bne.n	8015f1e <lwip_netconn_do_delconn+0x86>
 8015f10:	4b4c      	ldr	r3, [pc, #304]	; (8016044 <lwip_netconn_do_delconn+0x1ac>)
 8015f12:	f240 427b 	movw	r2, #1147	; 0x47b
 8015f16:	494e      	ldr	r1, [pc, #312]	; (8016050 <lwip_netconn_do_delconn+0x1b8>)
 8015f18:	484c      	ldr	r0, [pc, #304]	; (801604c <lwip_netconn_do_delconn+0x1b4>)
 8015f1a:	f00e fc41 	bl	80247a0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2200      	movs	r2, #0
 8015f22:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7ff fdd1 	bl	8015ad0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	685b      	ldr	r3, [r3, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d05f      	beq.n	8015ff8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f42:	2b10      	cmp	r3, #16
 8015f44:	d00e      	beq.n	8015f64 <lwip_netconn_do_delconn+0xcc>
 8015f46:	2b20      	cmp	r3, #32
 8015f48:	d000      	beq.n	8015f4c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8015f4a:	e051      	b.n	8015ff0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	2200      	movs	r2, #0
 8015f54:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f009 f99b 	bl	801f298 <udp_remove>
          break;
 8015f62:	e045      	b.n	8015ff0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	6a1b      	ldr	r3, [r3, #32]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d006      	beq.n	8015f7c <lwip_netconn_do_delconn+0xe4>
 8015f6e:	4b35      	ldr	r3, [pc, #212]	; (8016044 <lwip_netconn_do_delconn+0x1ac>)
 8015f70:	f240 4294 	movw	r2, #1172	; 0x494
 8015f74:	4937      	ldr	r1, [pc, #220]	; (8016054 <lwip_netconn_do_delconn+0x1bc>)
 8015f76:	4835      	ldr	r0, [pc, #212]	; (801604c <lwip_netconn_do_delconn+0x1b4>)
 8015f78:	f00e fc12 	bl	80247a0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2204      	movs	r2, #4
 8015f82:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2203      	movs	r2, #3
 8015f88:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	68fa      	ldr	r2, [r7, #12]
 8015f90:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	2100      	movs	r1, #0
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7ff fe17 	bl	8015bcc <lwip_netconn_do_close_internal>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d04a      	beq.n	801603a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	785b      	ldrb	r3, [r3, #1]
 8015faa:	2b04      	cmp	r3, #4
 8015fac:	d006      	beq.n	8015fbc <lwip_netconn_do_delconn+0x124>
 8015fae:	4b25      	ldr	r3, [pc, #148]	; (8016044 <lwip_netconn_do_delconn+0x1ac>)
 8015fb0:	f240 429a 	movw	r2, #1178	; 0x49a
 8015fb4:	4928      	ldr	r1, [pc, #160]	; (8016058 <lwip_netconn_do_delconn+0x1c0>)
 8015fb6:	4825      	ldr	r0, [pc, #148]	; (801604c <lwip_netconn_do_delconn+0x1b4>)
 8015fb8:	f00e fbf2 	bl	80247a0 <iprintf>
            UNLOCK_TCPIP_CORE();
 8015fbc:	4827      	ldr	r0, [pc, #156]	; (801605c <lwip_netconn_do_delconn+0x1c4>)
 8015fbe:	f00d fd7e 	bl	8023abe <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	330c      	adds	r3, #12
 8015fc8:	2100      	movs	r1, #0
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f00d fcdd 	bl	802398a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8015fd0:	4822      	ldr	r0, [pc, #136]	; (801605c <lwip_netconn_do_delconn+0x1c4>)
 8015fd2:	f00d fd65 	bl	8023aa0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	785b      	ldrb	r3, [r3, #1]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d02c      	beq.n	801603a <lwip_netconn_do_delconn+0x1a2>
 8015fe0:	4b18      	ldr	r3, [pc, #96]	; (8016044 <lwip_netconn_do_delconn+0x1ac>)
 8015fe2:	f240 429e 	movw	r2, #1182	; 0x49e
 8015fe6:	491c      	ldr	r1, [pc, #112]	; (8016058 <lwip_netconn_do_delconn+0x1c0>)
 8015fe8:	4818      	ldr	r0, [pc, #96]	; (801604c <lwip_netconn_do_delconn+0x1b4>)
 8015fea:	f00e fbd9 	bl	80247a0 <iprintf>
          return;
 8015fee:	e024      	b.n	801603a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d007      	beq.n	8016012 <lwip_netconn_do_delconn+0x17a>
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	6810      	ldr	r0, [r2, #0]
 801600c:	2200      	movs	r2, #0
 801600e:	2100      	movs	r1, #0
 8016010:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016018:	2b00      	cmp	r3, #0
 801601a:	d007      	beq.n	801602c <lwip_netconn_do_delconn+0x194>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016022:	68fa      	ldr	r2, [r7, #12]
 8016024:	6810      	ldr	r0, [r2, #0]
 8016026:	2200      	movs	r2, #0
 8016028:	2102      	movs	r1, #2
 801602a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	330c      	adds	r3, #12
 8016032:	4618      	mov	r0, r3
 8016034:	f00d fcf4 	bl	8023a20 <sys_sem_valid>
 8016038:	e000      	b.n	801603c <lwip_netconn_do_delconn+0x1a4>
          return;
 801603a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801603c:	3710      	adds	r7, #16
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	08025ab0 	.word	0x08025ab0
 8016048:	08025e20 	.word	0x08025e20
 801604c:	08025af4 	.word	0x08025af4
 8016050:	08025e34 	.word	0x08025e34
 8016054:	08025e54 	.word	0x08025e54
 8016058:	08025e70 	.word	0x08025e70
 801605c:	2000cc88 	.word	0x2000cc88

08016060 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d026      	beq.n	80160c4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	781b      	ldrb	r3, [r3, #0]
 801607c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016080:	2b10      	cmp	r3, #16
 8016082:	d00e      	beq.n	80160a2 <lwip_netconn_do_bind+0x42>
 8016084:	2b20      	cmp	r3, #32
 8016086:	d119      	bne.n	80160bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	6858      	ldr	r0, [r3, #4]
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	6899      	ldr	r1, [r3, #8]
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	899b      	ldrh	r3, [r3, #12]
 8016096:	461a      	mov	r2, r3
 8016098:	f008 ffe8 	bl	801f06c <udp_bind>
 801609c:	4603      	mov	r3, r0
 801609e:	73fb      	strb	r3, [r7, #15]
        break;
 80160a0:	e012      	b.n	80160c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	6858      	ldr	r0, [r3, #4]
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	6899      	ldr	r1, [r3, #8]
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	899b      	ldrh	r3, [r3, #12]
 80160b0:	461a      	mov	r2, r3
 80160b2:	f002 fe19 	bl	8018ce8 <tcp_bind>
 80160b6:	4603      	mov	r3, r0
 80160b8:	73fb      	strb	r3, [r7, #15]
        break;
 80160ba:	e005      	b.n	80160c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80160bc:	23fa      	movs	r3, #250	; 0xfa
 80160be:	73fb      	strb	r3, [r7, #15]
        break;
 80160c0:	bf00      	nop
 80160c2:	e001      	b.n	80160c8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80160c4:	23fa      	movs	r3, #250	; 0xfa
 80160c6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	7bfa      	ldrb	r2, [r7, #15]
 80160cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80160ce:	bf00      	nop
 80160d0:	3710      	adds	r7, #16
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}
	...

080160d8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b086      	sub	sp, #24
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d07f      	beq.n	80161ee <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80160ee:	697b      	ldr	r3, [r7, #20]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160f8:	2b10      	cmp	r3, #16
 80160fa:	d175      	bne.n	80161e8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	785b      	ldrb	r3, [r3, #1]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d165      	bne.n	80161d2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	7d1b      	ldrb	r3, [r3, #20]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d002      	beq.n	8016118 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8016112:	23fa      	movs	r3, #250	; 0xfa
 8016114:	72fb      	strb	r3, [r7, #11]
 8016116:	e06c      	b.n	80161f2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8016118:	23ff      	movs	r3, #255	; 0xff
 801611a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	f107 020b 	add.w	r2, r7, #11
 8016126:	7cf9      	ldrb	r1, [r7, #19]
 8016128:	4618      	mov	r0, r3
 801612a:	f002 fe95 	bl	8018e58 <tcp_listen_with_backlog_and_err>
 801612e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d05d      	beq.n	80161f2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	3310      	adds	r3, #16
 801613c:	4618      	mov	r0, r3
 801613e:	f00d fbe1 	bl	8023904 <sys_mbox_valid>
 8016142:	4603      	mov	r3, r0
 8016144:	2b00      	cmp	r3, #0
 8016146:	d00b      	beq.n	8016160 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	3310      	adds	r3, #16
 801614e:	4618      	mov	r0, r3
 8016150:	f00d fb64 	bl	802381c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	3310      	adds	r3, #16
 801615a:	4618      	mov	r0, r3
 801615c:	f00d fbe3 	bl	8023926 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8016160:	2300      	movs	r3, #0
 8016162:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	3314      	adds	r3, #20
 801616a:	4618      	mov	r0, r3
 801616c:	f00d fbca 	bl	8023904 <sys_mbox_valid>
 8016170:	4603      	mov	r3, r0
 8016172:	2b00      	cmp	r3, #0
 8016174:	d108      	bne.n	8016188 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	3314      	adds	r3, #20
 801617c:	2106      	movs	r1, #6
 801617e:	4618      	mov	r0, r3
 8016180:	f00d fb32 	bl	80237e8 <sys_mbox_new>
 8016184:	4603      	mov	r3, r0
 8016186:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8016188:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d118      	bne.n	80161c2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2202      	movs	r2, #2
 8016196:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	68fa      	ldr	r2, [r7, #12]
 801619e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	685a      	ldr	r2, [r3, #4]
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	4619      	mov	r1, r3
 80161ac:	4610      	mov	r0, r2
 80161ae:	f003 fe19 	bl	8019de4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	4912      	ldr	r1, [pc, #72]	; (8016204 <lwip_netconn_do_listen+0x12c>)
 80161ba:	4618      	mov	r0, r3
 80161bc:	f003 fe8a 	bl	8019ed4 <tcp_accept>
 80161c0:	e017      	b.n	80161f2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80161c2:	68f8      	ldr	r0, [r7, #12]
 80161c4:	f002 fc40 	bl	8018a48 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2200      	movs	r2, #0
 80161ce:	605a      	str	r2, [r3, #4]
 80161d0:	e00f      	b.n	80161f2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	785b      	ldrb	r3, [r3, #1]
 80161d8:	2b02      	cmp	r3, #2
 80161da:	d102      	bne.n	80161e2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80161dc:	2300      	movs	r3, #0
 80161de:	72fb      	strb	r3, [r7, #11]
 80161e0:	e007      	b.n	80161f2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80161e2:	23f5      	movs	r3, #245	; 0xf5
 80161e4:	72fb      	strb	r3, [r7, #11]
 80161e6:	e004      	b.n	80161f2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80161e8:	23f0      	movs	r3, #240	; 0xf0
 80161ea:	72fb      	strb	r3, [r7, #11]
 80161ec:	e001      	b.n	80161f2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80161ee:	23f5      	movs	r3, #245	; 0xf5
 80161f0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80161f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80161f6:	697b      	ldr	r3, [r7, #20]
 80161f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80161fa:	bf00      	nop
 80161fc:	3718      	adds	r7, #24
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop
 8016204:	080156e9 	.word	0x080156e9

08016208 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b088      	sub	sp, #32
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	460b      	mov	r3, r1
 8016212:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8016214:	2300      	movs	r3, #0
 8016216:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d106      	bne.n	801622c <lwip_netconn_do_writemore+0x24>
 801621e:	4b96      	ldr	r3, [pc, #600]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 8016220:	f240 6273 	movw	r2, #1651	; 0x673
 8016224:	4995      	ldr	r1, [pc, #596]	; (801647c <lwip_netconn_do_writemore+0x274>)
 8016226:	4896      	ldr	r0, [pc, #600]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 8016228:	f00e faba 	bl	80247a0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	785b      	ldrb	r3, [r3, #1]
 8016230:	2b01      	cmp	r3, #1
 8016232:	d006      	beq.n	8016242 <lwip_netconn_do_writemore+0x3a>
 8016234:	4b90      	ldr	r3, [pc, #576]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 8016236:	f240 6274 	movw	r2, #1652	; 0x674
 801623a:	4992      	ldr	r1, [pc, #584]	; (8016484 <lwip_netconn_do_writemore+0x27c>)
 801623c:	4890      	ldr	r0, [pc, #576]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 801623e:	f00e faaf 	bl	80247a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6a1b      	ldr	r3, [r3, #32]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d106      	bne.n	8016258 <lwip_netconn_do_writemore+0x50>
 801624a:	4b8b      	ldr	r3, [pc, #556]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 801624c:	f240 6275 	movw	r2, #1653	; 0x675
 8016250:	498d      	ldr	r1, [pc, #564]	; (8016488 <lwip_netconn_do_writemore+0x280>)
 8016252:	488b      	ldr	r0, [pc, #556]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 8016254:	f00e faa4 	bl	80247a0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	685b      	ldr	r3, [r3, #4]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d106      	bne.n	801626e <lwip_netconn_do_writemore+0x66>
 8016260:	4b85      	ldr	r3, [pc, #532]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 8016262:	f240 6276 	movw	r2, #1654	; 0x676
 8016266:	4989      	ldr	r1, [pc, #548]	; (801648c <lwip_netconn_do_writemore+0x284>)
 8016268:	4885      	ldr	r0, [pc, #532]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 801626a:	f00e fa99 	bl	80247a0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	6a1b      	ldr	r3, [r3, #32]
 8016272:	699a      	ldr	r2, [r3, #24]
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6a1b      	ldr	r3, [r3, #32]
 8016278:	695b      	ldr	r3, [r3, #20]
 801627a:	429a      	cmp	r2, r3
 801627c:	d306      	bcc.n	801628c <lwip_netconn_do_writemore+0x84>
 801627e:	4b7e      	ldr	r3, [pc, #504]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 8016280:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016284:	4982      	ldr	r1, [pc, #520]	; (8016490 <lwip_netconn_do_writemore+0x288>)
 8016286:	487e      	ldr	r0, [pc, #504]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 8016288:	f00e fa8a 	bl	80247a0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6a1b      	ldr	r3, [r3, #32]
 8016290:	899b      	ldrh	r3, [r3, #12]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d106      	bne.n	80162a4 <lwip_netconn_do_writemore+0x9c>
 8016296:	4b78      	ldr	r3, [pc, #480]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 8016298:	f240 6279 	movw	r2, #1657	; 0x679
 801629c:	497d      	ldr	r1, [pc, #500]	; (8016494 <lwip_netconn_do_writemore+0x28c>)
 801629e:	4878      	ldr	r0, [pc, #480]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 80162a0:	f00e fa7e 	bl	80247a0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6a1b      	ldr	r3, [r3, #32]
 80162a8:	7f1b      	ldrb	r3, [r3, #28]
 80162aa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	7f1b      	ldrb	r3, [r3, #28]
 80162b0:	f003 0302 	and.w	r3, r3, #2
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d104      	bne.n	80162c2 <lwip_netconn_do_writemore+0xba>
 80162b8:	7ebb      	ldrb	r3, [r7, #26]
 80162ba:	f003 0304 	and.w	r3, r3, #4
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d001      	beq.n	80162c6 <lwip_netconn_do_writemore+0xbe>
 80162c2:	2301      	movs	r3, #1
 80162c4:	e000      	b.n	80162c8 <lwip_netconn_do_writemore+0xc0>
 80162c6:	2300      	movs	r3, #0
 80162c8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	6a1b      	ldr	r3, [r3, #32]
 80162ce:	689b      	ldr	r3, [r3, #8]
 80162d0:	681a      	ldr	r2, [r3, #0]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	6a1b      	ldr	r3, [r3, #32]
 80162d6:	691b      	ldr	r3, [r3, #16]
 80162d8:	4413      	add	r3, r2
 80162da:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6a1b      	ldr	r3, [r3, #32]
 80162e0:	689b      	ldr	r3, [r3, #8]
 80162e2:	685a      	ldr	r2, [r3, #4]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	6a1b      	ldr	r3, [r3, #32]
 80162e8:	691b      	ldr	r3, [r3, #16]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162f4:	d307      	bcc.n	8016306 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80162f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162fa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80162fc:	7ebb      	ldrb	r3, [r7, #26]
 80162fe:	f043 0302 	orr.w	r3, r3, #2
 8016302:	76bb      	strb	r3, [r7, #26]
 8016304:	e001      	b.n	801630a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016312:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8016314:	89fa      	ldrh	r2, [r7, #14]
 8016316:	8bbb      	ldrh	r3, [r7, #28]
 8016318:	429a      	cmp	r2, r3
 801631a:	d216      	bcs.n	801634a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801631c:	89fb      	ldrh	r3, [r7, #14]
 801631e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8016320:	7e3b      	ldrb	r3, [r7, #24]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d00d      	beq.n	8016342 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8016326:	8bbb      	ldrh	r3, [r7, #28]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d10e      	bne.n	801634a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	6a1b      	ldr	r3, [r3, #32]
 8016330:	699b      	ldr	r3, [r3, #24]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d102      	bne.n	801633c <lwip_netconn_do_writemore+0x134>
 8016336:	f06f 0306 	mvn.w	r3, #6
 801633a:	e000      	b.n	801633e <lwip_netconn_do_writemore+0x136>
 801633c:	2300      	movs	r3, #0
 801633e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8016340:	e07d      	b.n	801643e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8016342:	7ebb      	ldrb	r3, [r7, #26]
 8016344:	f043 0302 	orr.w	r3, r3, #2
 8016348:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	6a1b      	ldr	r3, [r3, #32]
 801634e:	691a      	ldr	r2, [r3, #16]
 8016350:	8bbb      	ldrh	r3, [r7, #28]
 8016352:	441a      	add	r2, r3
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6a1b      	ldr	r3, [r3, #32]
 8016358:	689b      	ldr	r3, [r3, #8]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	429a      	cmp	r2, r3
 801635e:	d906      	bls.n	801636e <lwip_netconn_do_writemore+0x166>
 8016360:	4b45      	ldr	r3, [pc, #276]	; (8016478 <lwip_netconn_do_writemore+0x270>)
 8016362:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8016366:	494c      	ldr	r1, [pc, #304]	; (8016498 <lwip_netconn_do_writemore+0x290>)
 8016368:	4845      	ldr	r0, [pc, #276]	; (8016480 <lwip_netconn_do_writemore+0x278>)
 801636a:	f00e fa19 	bl	80247a0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801636e:	8bbb      	ldrh	r3, [r7, #28]
 8016370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016374:	4293      	cmp	r3, r2
 8016376:	d103      	bne.n	8016380 <lwip_netconn_do_writemore+0x178>
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801637e:	d209      	bcs.n	8016394 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016384:	8bba      	ldrh	r2, [r7, #28]
 8016386:	429a      	cmp	r2, r3
 8016388:	d10b      	bne.n	80163a2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	6a1b      	ldr	r3, [r3, #32]
 801638e:	899b      	ldrh	r3, [r3, #12]
 8016390:	2b01      	cmp	r3, #1
 8016392:	d906      	bls.n	80163a2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8016394:	2301      	movs	r3, #1
 8016396:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016398:	7ebb      	ldrb	r3, [r7, #26]
 801639a:	f043 0302 	orr.w	r3, r3, #2
 801639e:	76bb      	strb	r3, [r7, #26]
 80163a0:	e001      	b.n	80163a6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80163a2:	2300      	movs	r3, #0
 80163a4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	6858      	ldr	r0, [r3, #4]
 80163aa:	7ebb      	ldrb	r3, [r7, #26]
 80163ac:	8bba      	ldrh	r2, [r7, #28]
 80163ae:	6979      	ldr	r1, [r7, #20]
 80163b0:	f006 fc54 	bl	801cc5c <tcp_write>
 80163b4:	4603      	mov	r3, r0
 80163b6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80163b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d12c      	bne.n	801641a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	6a1b      	ldr	r3, [r3, #32]
 80163c4:	6999      	ldr	r1, [r3, #24]
 80163c6:	8bba      	ldrh	r2, [r7, #28]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	6a1b      	ldr	r3, [r3, #32]
 80163cc:	440a      	add	r2, r1
 80163ce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6a1b      	ldr	r3, [r3, #32]
 80163d4:	6919      	ldr	r1, [r3, #16]
 80163d6:	8bba      	ldrh	r2, [r7, #28]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a1b      	ldr	r3, [r3, #32]
 80163dc:	440a      	add	r2, r1
 80163de:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	6a1b      	ldr	r3, [r3, #32]
 80163e4:	691a      	ldr	r2, [r3, #16]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	6a1b      	ldr	r3, [r3, #32]
 80163ea:	689b      	ldr	r3, [r3, #8]
 80163ec:	685b      	ldr	r3, [r3, #4]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d113      	bne.n	801641a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6a1b      	ldr	r3, [r3, #32]
 80163f6:	899a      	ldrh	r2, [r3, #12]
 80163f8:	3a01      	subs	r2, #1
 80163fa:	b292      	uxth	r2, r2
 80163fc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6a1b      	ldr	r3, [r3, #32]
 8016402:	899b      	ldrh	r3, [r3, #12]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d008      	beq.n	801641a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6a1b      	ldr	r3, [r3, #32]
 801640c:	689a      	ldr	r2, [r3, #8]
 801640e:	3208      	adds	r2, #8
 8016410:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	6a1b      	ldr	r3, [r3, #32]
 8016416:	2200      	movs	r2, #0
 8016418:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801641a:	7e7b      	ldrb	r3, [r7, #25]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d004      	beq.n	801642a <lwip_netconn_do_writemore+0x222>
 8016420:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016424:	2b00      	cmp	r3, #0
 8016426:	f43f af50 	beq.w	80162ca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801642a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d004      	beq.n	801643c <lwip_netconn_do_writemore+0x234>
 8016432:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801643a:	d146      	bne.n	80164ca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 801643c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801643e:	7e3b      	ldrb	r3, [r7, #24]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d02b      	beq.n	801649c <lwip_netconn_do_writemore+0x294>
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6a1b      	ldr	r3, [r3, #32]
 8016448:	699a      	ldr	r2, [r3, #24]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6a1b      	ldr	r3, [r3, #32]
 801644e:	695b      	ldr	r3, [r3, #20]
 8016450:	429a      	cmp	r2, r3
 8016452:	d223      	bcs.n	801649c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016458:	2b00      	cmp	r3, #0
 801645a:	d005      	beq.n	8016468 <lwip_netconn_do_writemore+0x260>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016460:	2200      	movs	r2, #0
 8016462:	2103      	movs	r1, #3
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	7f1b      	ldrb	r3, [r3, #28]
 801646c:	f043 0310 	orr.w	r3, r3, #16
 8016470:	b2da      	uxtb	r2, r3
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	771a      	strb	r2, [r3, #28]
 8016476:	e028      	b.n	80164ca <lwip_netconn_do_writemore+0x2c2>
 8016478:	08025ab0 	.word	0x08025ab0
 801647c:	08025c08 	.word	0x08025c08
 8016480:	08025af4 	.word	0x08025af4
 8016484:	08025f10 	.word	0x08025f10
 8016488:	08025c18 	.word	0x08025c18
 801648c:	08025f30 	.word	0x08025f30
 8016490:	08025f48 	.word	0x08025f48
 8016494:	08025f88 	.word	0x08025f88
 8016498:	08025fb0 	.word	0x08025fb0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	685b      	ldr	r3, [r3, #4]
 80164a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80164a4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80164a8:	d305      	bcc.n	80164b6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80164b2:	2b04      	cmp	r3, #4
 80164b4:	d909      	bls.n	80164ca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d005      	beq.n	80164ca <lwip_netconn_do_writemore+0x2c2>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164c2:	2200      	movs	r2, #0
 80164c4:	2103      	movs	r1, #3
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80164ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d11d      	bne.n	801650e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6a1b      	ldr	r3, [r3, #32]
 80164d6:	699a      	ldr	r2, [r3, #24]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	6a1b      	ldr	r3, [r3, #32]
 80164dc:	695b      	ldr	r3, [r3, #20]
 80164de:	429a      	cmp	r2, r3
 80164e0:	d002      	beq.n	80164e8 <lwip_netconn_do_writemore+0x2e0>
 80164e2:	7e3b      	ldrb	r3, [r7, #24]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d001      	beq.n	80164ec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80164e8:	2301      	movs	r3, #1
 80164ea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	685b      	ldr	r3, [r3, #4]
 80164f0:	4618      	mov	r0, r3
 80164f2:	f007 f99f 	bl	801d834 <tcp_output>
 80164f6:	4603      	mov	r3, r0
 80164f8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80164fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80164fe:	f113 0f04 	cmn.w	r3, #4
 8016502:	d12c      	bne.n	801655e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016504:	7b3b      	ldrb	r3, [r7, #12]
 8016506:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016508:	2301      	movs	r3, #1
 801650a:	76fb      	strb	r3, [r7, #27]
 801650c:	e027      	b.n	801655e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801650e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016516:	d120      	bne.n	801655a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	4618      	mov	r0, r3
 801651e:	f007 f989 	bl	801d834 <tcp_output>
 8016522:	4603      	mov	r3, r0
 8016524:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016526:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801652a:	f113 0f04 	cmn.w	r3, #4
 801652e:	d104      	bne.n	801653a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016530:	7b7b      	ldrb	r3, [r7, #13]
 8016532:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016534:	2301      	movs	r3, #1
 8016536:	76fb      	strb	r3, [r7, #27]
 8016538:	e011      	b.n	801655e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801653a:	7e3b      	ldrb	r3, [r7, #24]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00e      	beq.n	801655e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6a1b      	ldr	r3, [r3, #32]
 8016544:	699b      	ldr	r3, [r3, #24]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d102      	bne.n	8016550 <lwip_netconn_do_writemore+0x348>
 801654a:	f06f 0306 	mvn.w	r3, #6
 801654e:	e000      	b.n	8016552 <lwip_netconn_do_writemore+0x34a>
 8016550:	2300      	movs	r3, #0
 8016552:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016554:	2301      	movs	r3, #1
 8016556:	76fb      	strb	r3, [r7, #27]
 8016558:	e001      	b.n	801655e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801655a:	2301      	movs	r3, #1
 801655c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801655e:	7efb      	ldrb	r3, [r7, #27]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d015      	beq.n	8016590 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6a1b      	ldr	r3, [r3, #32]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	330c      	adds	r3, #12
 801656c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	6a1b      	ldr	r3, [r3, #32]
 8016572:	7ffa      	ldrb	r2, [r7, #31]
 8016574:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2200      	movs	r2, #0
 801657a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2200      	movs	r2, #0
 8016580:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016582:	78fb      	ldrb	r3, [r7, #3]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d006      	beq.n	8016596 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8016588:	68b8      	ldr	r0, [r7, #8]
 801658a:	f00d fa2f 	bl	80239ec <sys_sem_signal>
 801658e:	e002      	b.n	8016596 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016594:	e000      	b.n	8016598 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8016596:	2300      	movs	r3, #0
}
 8016598:	4618      	mov	r0, r3
 801659a:	3720      	adds	r7, #32
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}

080165a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d013      	beq.n	80165d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00b      	beq.n	80165ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f001 fd92 	bl	80180e4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2200      	movs	r2, #0
 80165c4:	605a      	str	r2, [r3, #4]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	685a      	ldr	r2, [r3, #4]
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80165ce:	6879      	ldr	r1, [r7, #4]
 80165d0:	2006      	movs	r0, #6
 80165d2:	f000 fec1 	bl	8017358 <memp_free>
  }
}
 80165d6:	bf00      	nop
 80165d8:	3708      	adds	r7, #8
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
	...

080165e0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80165ea:	f008 f9eb 	bl	801e9c4 <sys_timeouts_sleeptime>
 80165ee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165f6:	d10b      	bne.n	8016610 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80165f8:	4813      	ldr	r0, [pc, #76]	; (8016648 <tcpip_timeouts_mbox_fetch+0x68>)
 80165fa:	f00d fa60 	bl	8023abe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80165fe:	2200      	movs	r2, #0
 8016600:	6839      	ldr	r1, [r7, #0]
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f00d f936 	bl	8023874 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016608:	480f      	ldr	r0, [pc, #60]	; (8016648 <tcpip_timeouts_mbox_fetch+0x68>)
 801660a:	f00d fa49 	bl	8023aa0 <sys_mutex_lock>
    return;
 801660e:	e018      	b.n	8016642 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d102      	bne.n	801661c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016616:	f008 f99b 	bl	801e950 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801661a:	e7e6      	b.n	80165ea <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801661c:	480a      	ldr	r0, [pc, #40]	; (8016648 <tcpip_timeouts_mbox_fetch+0x68>)
 801661e:	f00d fa4e 	bl	8023abe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016622:	68fa      	ldr	r2, [r7, #12]
 8016624:	6839      	ldr	r1, [r7, #0]
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f00d f924 	bl	8023874 <sys_arch_mbox_fetch>
 801662c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801662e:	4806      	ldr	r0, [pc, #24]	; (8016648 <tcpip_timeouts_mbox_fetch+0x68>)
 8016630:	f00d fa36 	bl	8023aa0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801663a:	d102      	bne.n	8016642 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801663c:	f008 f988 	bl	801e950 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016640:	e7d3      	b.n	80165ea <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016642:	3710      	adds	r7, #16
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}
 8016648:	2000cc88 	.word	0x2000cc88

0801664c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b084      	sub	sp, #16
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016654:	4810      	ldr	r0, [pc, #64]	; (8016698 <tcpip_thread+0x4c>)
 8016656:	f00d fa23 	bl	8023aa0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801665a:	4b10      	ldr	r3, [pc, #64]	; (801669c <tcpip_thread+0x50>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d005      	beq.n	801666e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016662:	4b0e      	ldr	r3, [pc, #56]	; (801669c <tcpip_thread+0x50>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	4a0e      	ldr	r2, [pc, #56]	; (80166a0 <tcpip_thread+0x54>)
 8016668:	6812      	ldr	r2, [r2, #0]
 801666a:	4610      	mov	r0, r2
 801666c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801666e:	f107 030c 	add.w	r3, r7, #12
 8016672:	4619      	mov	r1, r3
 8016674:	480b      	ldr	r0, [pc, #44]	; (80166a4 <tcpip_thread+0x58>)
 8016676:	f7ff ffb3 	bl	80165e0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d106      	bne.n	801668e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016680:	4b09      	ldr	r3, [pc, #36]	; (80166a8 <tcpip_thread+0x5c>)
 8016682:	2291      	movs	r2, #145	; 0x91
 8016684:	4909      	ldr	r1, [pc, #36]	; (80166ac <tcpip_thread+0x60>)
 8016686:	480a      	ldr	r0, [pc, #40]	; (80166b0 <tcpip_thread+0x64>)
 8016688:	f00e f88a 	bl	80247a0 <iprintf>
      continue;
 801668c:	e003      	b.n	8016696 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	4618      	mov	r0, r3
 8016692:	f000 f80f 	bl	80166b4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016696:	e7ea      	b.n	801666e <tcpip_thread+0x22>
 8016698:	2000cc88 	.word	0x2000cc88
 801669c:	20008f70 	.word	0x20008f70
 80166a0:	20008f74 	.word	0x20008f74
 80166a4:	20008f78 	.word	0x20008f78
 80166a8:	08026008 	.word	0x08026008
 80166ac:	08026038 	.word	0x08026038
 80166b0:	08026058 	.word	0x08026058

080166b4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d018      	beq.n	80166f6 <tcpip_thread_handle_msg+0x42>
 80166c4:	2b02      	cmp	r3, #2
 80166c6:	d021      	beq.n	801670c <tcpip_thread_handle_msg+0x58>
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d126      	bne.n	801671a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	68db      	ldr	r3, [r3, #12]
 80166d0:	687a      	ldr	r2, [r7, #4]
 80166d2:	6850      	ldr	r0, [r2, #4]
 80166d4:	687a      	ldr	r2, [r7, #4]
 80166d6:	6892      	ldr	r2, [r2, #8]
 80166d8:	4611      	mov	r1, r2
 80166da:	4798      	blx	r3
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d004      	beq.n	80166ec <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f001 fcfc 	bl	80180e4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80166ec:	6879      	ldr	r1, [r7, #4]
 80166ee:	2009      	movs	r0, #9
 80166f0:	f000 fe32 	bl	8017358 <memp_free>
      break;
 80166f4:	e018      	b.n	8016728 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	685b      	ldr	r3, [r3, #4]
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	6892      	ldr	r2, [r2, #8]
 80166fe:	4610      	mov	r0, r2
 8016700:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016702:	6879      	ldr	r1, [r7, #4]
 8016704:	2008      	movs	r0, #8
 8016706:	f000 fe27 	bl	8017358 <memp_free>
      break;
 801670a:	e00d      	b.n	8016728 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	685b      	ldr	r3, [r3, #4]
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	6892      	ldr	r2, [r2, #8]
 8016714:	4610      	mov	r0, r2
 8016716:	4798      	blx	r3
      break;
 8016718:	e006      	b.n	8016728 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801671a:	4b05      	ldr	r3, [pc, #20]	; (8016730 <tcpip_thread_handle_msg+0x7c>)
 801671c:	22cf      	movs	r2, #207	; 0xcf
 801671e:	4905      	ldr	r1, [pc, #20]	; (8016734 <tcpip_thread_handle_msg+0x80>)
 8016720:	4805      	ldr	r0, [pc, #20]	; (8016738 <tcpip_thread_handle_msg+0x84>)
 8016722:	f00e f83d 	bl	80247a0 <iprintf>
      break;
 8016726:	bf00      	nop
  }
}
 8016728:	bf00      	nop
 801672a:	3708      	adds	r7, #8
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	08026008 	.word	0x08026008
 8016734:	08026038 	.word	0x08026038
 8016738:	08026058 	.word	0x08026058

0801673c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b086      	sub	sp, #24
 8016740:	af00      	add	r7, sp, #0
 8016742:	60f8      	str	r0, [r7, #12]
 8016744:	60b9      	str	r1, [r7, #8]
 8016746:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016748:	481a      	ldr	r0, [pc, #104]	; (80167b4 <tcpip_inpkt+0x78>)
 801674a:	f00d f8db 	bl	8023904 <sys_mbox_valid>
 801674e:	4603      	mov	r3, r0
 8016750:	2b00      	cmp	r3, #0
 8016752:	d105      	bne.n	8016760 <tcpip_inpkt+0x24>
 8016754:	4b18      	ldr	r3, [pc, #96]	; (80167b8 <tcpip_inpkt+0x7c>)
 8016756:	22fc      	movs	r2, #252	; 0xfc
 8016758:	4918      	ldr	r1, [pc, #96]	; (80167bc <tcpip_inpkt+0x80>)
 801675a:	4819      	ldr	r0, [pc, #100]	; (80167c0 <tcpip_inpkt+0x84>)
 801675c:	f00e f820 	bl	80247a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016760:	2009      	movs	r0, #9
 8016762:	f000 fda7 	bl	80172b4 <memp_malloc>
 8016766:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d102      	bne.n	8016774 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801676e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016772:	e01a      	b.n	80167aa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8016774:	697b      	ldr	r3, [r7, #20]
 8016776:	2200      	movs	r2, #0
 8016778:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	68ba      	ldr	r2, [r7, #8]
 8016784:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	687a      	ldr	r2, [r7, #4]
 801678a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801678c:	6979      	ldr	r1, [r7, #20]
 801678e:	4809      	ldr	r0, [pc, #36]	; (80167b4 <tcpip_inpkt+0x78>)
 8016790:	f00d f856 	bl	8023840 <sys_mbox_trypost>
 8016794:	4603      	mov	r3, r0
 8016796:	2b00      	cmp	r3, #0
 8016798:	d006      	beq.n	80167a8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801679a:	6979      	ldr	r1, [r7, #20]
 801679c:	2009      	movs	r0, #9
 801679e:	f000 fddb 	bl	8017358 <memp_free>
    return ERR_MEM;
 80167a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167a6:	e000      	b.n	80167aa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80167a8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3718      	adds	r7, #24
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	20008f78 	.word	0x20008f78
 80167b8:	08026008 	.word	0x08026008
 80167bc:	08026080 	.word	0x08026080
 80167c0:	08026058 	.word	0x08026058

080167c4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80167d4:	f003 0318 	and.w	r3, r3, #24
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d006      	beq.n	80167ea <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80167dc:	4a08      	ldr	r2, [pc, #32]	; (8016800 <tcpip_input+0x3c>)
 80167de:	6839      	ldr	r1, [r7, #0]
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f7ff ffab 	bl	801673c <tcpip_inpkt>
 80167e6:	4603      	mov	r3, r0
 80167e8:	e005      	b.n	80167f6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80167ea:	4a06      	ldr	r2, [pc, #24]	; (8016804 <tcpip_input+0x40>)
 80167ec:	6839      	ldr	r1, [r7, #0]
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f7ff ffa4 	bl	801673c <tcpip_inpkt>
 80167f4:	4603      	mov	r3, r0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	0802363d 	.word	0x0802363d
 8016804:	080223fd 	.word	0x080223fd

08016808 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b084      	sub	sp, #16
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016812:	4819      	ldr	r0, [pc, #100]	; (8016878 <tcpip_try_callback+0x70>)
 8016814:	f00d f876 	bl	8023904 <sys_mbox_valid>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d106      	bne.n	801682c <tcpip_try_callback+0x24>
 801681e:	4b17      	ldr	r3, [pc, #92]	; (801687c <tcpip_try_callback+0x74>)
 8016820:	f240 125d 	movw	r2, #349	; 0x15d
 8016824:	4916      	ldr	r1, [pc, #88]	; (8016880 <tcpip_try_callback+0x78>)
 8016826:	4817      	ldr	r0, [pc, #92]	; (8016884 <tcpip_try_callback+0x7c>)
 8016828:	f00d ffba 	bl	80247a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801682c:	2008      	movs	r0, #8
 801682e:	f000 fd41 	bl	80172b4 <memp_malloc>
 8016832:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d102      	bne.n	8016840 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801683a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801683e:	e017      	b.n	8016870 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	2201      	movs	r2, #1
 8016844:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	687a      	ldr	r2, [r7, #4]
 801684a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	683a      	ldr	r2, [r7, #0]
 8016850:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016852:	68f9      	ldr	r1, [r7, #12]
 8016854:	4808      	ldr	r0, [pc, #32]	; (8016878 <tcpip_try_callback+0x70>)
 8016856:	f00c fff3 	bl	8023840 <sys_mbox_trypost>
 801685a:	4603      	mov	r3, r0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d006      	beq.n	801686e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016860:	68f9      	ldr	r1, [r7, #12]
 8016862:	2008      	movs	r0, #8
 8016864:	f000 fd78 	bl	8017358 <memp_free>
    return ERR_MEM;
 8016868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801686c:	e000      	b.n	8016870 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801686e:	2300      	movs	r3, #0
}
 8016870:	4618      	mov	r0, r3
 8016872:	3710      	adds	r7, #16
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}
 8016878:	20008f78 	.word	0x20008f78
 801687c:	08026008 	.word	0x08026008
 8016880:	08026080 	.word	0x08026080
 8016884:	08026058 	.word	0x08026058

08016888 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	60f8      	str	r0, [r7, #12]
 8016890:	60b9      	str	r1, [r7, #8]
 8016892:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016894:	4806      	ldr	r0, [pc, #24]	; (80168b0 <tcpip_send_msg_wait_sem+0x28>)
 8016896:	f00d f903 	bl	8023aa0 <sys_mutex_lock>
  fn(apimsg);
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	68b8      	ldr	r0, [r7, #8]
 801689e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80168a0:	4803      	ldr	r0, [pc, #12]	; (80168b0 <tcpip_send_msg_wait_sem+0x28>)
 80168a2:	f00d f90c 	bl	8023abe <sys_mutex_unlock>
  return ERR_OK;
 80168a6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3710      	adds	r7, #16
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}
 80168b0:	2000cc88 	.word	0x2000cc88

080168b4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af02      	add	r7, sp, #8
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80168be:	f000 f871 	bl	80169a4 <lwip_init>

  tcpip_init_done = initfunc;
 80168c2:	4a17      	ldr	r2, [pc, #92]	; (8016920 <tcpip_init+0x6c>)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80168c8:	4a16      	ldr	r2, [pc, #88]	; (8016924 <tcpip_init+0x70>)
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80168ce:	2106      	movs	r1, #6
 80168d0:	4815      	ldr	r0, [pc, #84]	; (8016928 <tcpip_init+0x74>)
 80168d2:	f00c ff89 	bl	80237e8 <sys_mbox_new>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d006      	beq.n	80168ea <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80168dc:	4b13      	ldr	r3, [pc, #76]	; (801692c <tcpip_init+0x78>)
 80168de:	f240 2261 	movw	r2, #609	; 0x261
 80168e2:	4913      	ldr	r1, [pc, #76]	; (8016930 <tcpip_init+0x7c>)
 80168e4:	4813      	ldr	r0, [pc, #76]	; (8016934 <tcpip_init+0x80>)
 80168e6:	f00d ff5b 	bl	80247a0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80168ea:	4813      	ldr	r0, [pc, #76]	; (8016938 <tcpip_init+0x84>)
 80168ec:	f00d f8c2 	bl	8023a74 <sys_mutex_new>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d006      	beq.n	8016904 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80168f6:	4b0d      	ldr	r3, [pc, #52]	; (801692c <tcpip_init+0x78>)
 80168f8:	f240 2265 	movw	r2, #613	; 0x265
 80168fc:	490f      	ldr	r1, [pc, #60]	; (801693c <tcpip_init+0x88>)
 80168fe:	480d      	ldr	r0, [pc, #52]	; (8016934 <tcpip_init+0x80>)
 8016900:	f00d ff4e 	bl	80247a0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016904:	2318      	movs	r3, #24
 8016906:	9300      	str	r3, [sp, #0]
 8016908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801690c:	2200      	movs	r2, #0
 801690e:	490c      	ldr	r1, [pc, #48]	; (8016940 <tcpip_init+0x8c>)
 8016910:	480c      	ldr	r0, [pc, #48]	; (8016944 <tcpip_init+0x90>)
 8016912:	f00d f8e1 	bl	8023ad8 <sys_thread_new>
}
 8016916:	bf00      	nop
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	20008f70 	.word	0x20008f70
 8016924:	20008f74 	.word	0x20008f74
 8016928:	20008f78 	.word	0x20008f78
 801692c:	08026008 	.word	0x08026008
 8016930:	08026090 	.word	0x08026090
 8016934:	08026058 	.word	0x08026058
 8016938:	2000cc88 	.word	0x2000cc88
 801693c:	080260b4 	.word	0x080260b4
 8016940:	0801664d 	.word	0x0801664d
 8016944:	080260d8 	.word	0x080260d8

08016948 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	4603      	mov	r3, r0
 8016950:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8016952:	88fb      	ldrh	r3, [r7, #6]
 8016954:	021b      	lsls	r3, r3, #8
 8016956:	b21a      	sxth	r2, r3
 8016958:	88fb      	ldrh	r3, [r7, #6]
 801695a:	0a1b      	lsrs	r3, r3, #8
 801695c:	b29b      	uxth	r3, r3
 801695e:	b21b      	sxth	r3, r3
 8016960:	4313      	orrs	r3, r2
 8016962:	b21b      	sxth	r3, r3
 8016964:	b29b      	uxth	r3, r3
}
 8016966:	4618      	mov	r0, r3
 8016968:	370c      	adds	r7, #12
 801696a:	46bd      	mov	sp, r7
 801696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016970:	4770      	bx	lr

08016972 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8016972:	b480      	push	{r7}
 8016974:	b083      	sub	sp, #12
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	061a      	lsls	r2, r3, #24
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	021b      	lsls	r3, r3, #8
 8016982:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016986:	431a      	orrs	r2, r3
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	0a1b      	lsrs	r3, r3, #8
 801698c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016990:	431a      	orrs	r2, r3
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	0e1b      	lsrs	r3, r3, #24
 8016996:	4313      	orrs	r3, r2
}
 8016998:	4618      	mov	r0, r3
 801699a:	370c      	adds	r7, #12
 801699c:	46bd      	mov	sp, r7
 801699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a2:	4770      	bx	lr

080169a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80169aa:	2300      	movs	r3, #0
 80169ac:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80169ae:	f00d f855 	bl	8023a5c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80169b2:	f000 f8d5 	bl	8016b60 <mem_init>
  memp_init();
 80169b6:	f000 fc31 	bl	801721c <memp_init>
  pbuf_init();
  netif_init();
 80169ba:	f000 fcf7 	bl	80173ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80169be:	f008 f839 	bl	801ea34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80169c2:	f001 fe39 	bl	8018638 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80169c6:	f007 ff7d 	bl	801e8c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80169ca:	bf00      	nop
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
	...

080169d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	4603      	mov	r3, r0
 80169dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80169de:	4b05      	ldr	r3, [pc, #20]	; (80169f4 <ptr_to_mem+0x20>)
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	88fb      	ldrh	r3, [r7, #6]
 80169e4:	4413      	add	r3, r2
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	370c      	adds	r7, #12
 80169ea:	46bd      	mov	sp, r7
 80169ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f0:	4770      	bx	lr
 80169f2:	bf00      	nop
 80169f4:	20008f7c 	.word	0x20008f7c

080169f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b083      	sub	sp, #12
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	4a05      	ldr	r2, [pc, #20]	; (8016a18 <mem_to_ptr+0x20>)
 8016a04:	6812      	ldr	r2, [r2, #0]
 8016a06:	1a9b      	subs	r3, r3, r2
 8016a08:	b29b      	uxth	r3, r3
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	370c      	adds	r7, #12
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a14:	4770      	bx	lr
 8016a16:	bf00      	nop
 8016a18:	20008f7c 	.word	0x20008f7c

08016a1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016a1c:	b590      	push	{r4, r7, lr}
 8016a1e:	b085      	sub	sp, #20
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016a24:	4b45      	ldr	r3, [pc, #276]	; (8016b3c <plug_holes+0x120>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	687a      	ldr	r2, [r7, #4]
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	d206      	bcs.n	8016a3c <plug_holes+0x20>
 8016a2e:	4b44      	ldr	r3, [pc, #272]	; (8016b40 <plug_holes+0x124>)
 8016a30:	f240 12df 	movw	r2, #479	; 0x1df
 8016a34:	4943      	ldr	r1, [pc, #268]	; (8016b44 <plug_holes+0x128>)
 8016a36:	4844      	ldr	r0, [pc, #272]	; (8016b48 <plug_holes+0x12c>)
 8016a38:	f00d feb2 	bl	80247a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016a3c:	4b43      	ldr	r3, [pc, #268]	; (8016b4c <plug_holes+0x130>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	687a      	ldr	r2, [r7, #4]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d306      	bcc.n	8016a54 <plug_holes+0x38>
 8016a46:	4b3e      	ldr	r3, [pc, #248]	; (8016b40 <plug_holes+0x124>)
 8016a48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016a4c:	4940      	ldr	r1, [pc, #256]	; (8016b50 <plug_holes+0x134>)
 8016a4e:	483e      	ldr	r0, [pc, #248]	; (8016b48 <plug_holes+0x12c>)
 8016a50:	f00d fea6 	bl	80247a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	791b      	ldrb	r3, [r3, #4]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d006      	beq.n	8016a6a <plug_holes+0x4e>
 8016a5c:	4b38      	ldr	r3, [pc, #224]	; (8016b40 <plug_holes+0x124>)
 8016a5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016a62:	493c      	ldr	r1, [pc, #240]	; (8016b54 <plug_holes+0x138>)
 8016a64:	4838      	ldr	r0, [pc, #224]	; (8016b48 <plug_holes+0x12c>)
 8016a66:	f00d fe9b 	bl	80247a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016a72:	d906      	bls.n	8016a82 <plug_holes+0x66>
 8016a74:	4b32      	ldr	r3, [pc, #200]	; (8016b40 <plug_holes+0x124>)
 8016a76:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016a7a:	4937      	ldr	r1, [pc, #220]	; (8016b58 <plug_holes+0x13c>)
 8016a7c:	4832      	ldr	r0, [pc, #200]	; (8016b48 <plug_holes+0x12c>)
 8016a7e:	f00d fe8f 	bl	80247a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	881b      	ldrh	r3, [r3, #0]
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7ff ffa4 	bl	80169d4 <ptr_to_mem>
 8016a8c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8016a8e:	687a      	ldr	r2, [r7, #4]
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d024      	beq.n	8016ae0 <plug_holes+0xc4>
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	791b      	ldrb	r3, [r3, #4]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d120      	bne.n	8016ae0 <plug_holes+0xc4>
 8016a9e:	4b2b      	ldr	r3, [pc, #172]	; (8016b4c <plug_holes+0x130>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	68fa      	ldr	r2, [r7, #12]
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d01b      	beq.n	8016ae0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016aa8:	4b2c      	ldr	r3, [pc, #176]	; (8016b5c <plug_holes+0x140>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	68fa      	ldr	r2, [r7, #12]
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d102      	bne.n	8016ab8 <plug_holes+0x9c>
      lfree = mem;
 8016ab2:	4a2a      	ldr	r2, [pc, #168]	; (8016b5c <plug_holes+0x140>)
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	881a      	ldrh	r2, [r3, #0]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	881b      	ldrh	r3, [r3, #0]
 8016ac4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016ac8:	d00a      	beq.n	8016ae0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	881b      	ldrh	r3, [r3, #0]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7ff ff80 	bl	80169d4 <ptr_to_mem>
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7ff ff8e 	bl	80169f8 <mem_to_ptr>
 8016adc:	4603      	mov	r3, r0
 8016ade:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	885b      	ldrh	r3, [r3, #2]
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7ff ff75 	bl	80169d4 <ptr_to_mem>
 8016aea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8016aec:	68ba      	ldr	r2, [r7, #8]
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d01f      	beq.n	8016b34 <plug_holes+0x118>
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	791b      	ldrb	r3, [r3, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d11b      	bne.n	8016b34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8016afc:	4b17      	ldr	r3, [pc, #92]	; (8016b5c <plug_holes+0x140>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	687a      	ldr	r2, [r7, #4]
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d102      	bne.n	8016b0c <plug_holes+0xf0>
      lfree = pmem;
 8016b06:	4a15      	ldr	r2, [pc, #84]	; (8016b5c <plug_holes+0x140>)
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	881a      	ldrh	r2, [r3, #0]
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	881b      	ldrh	r3, [r3, #0]
 8016b18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016b1c:	d00a      	beq.n	8016b34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	881b      	ldrh	r3, [r3, #0]
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7ff ff56 	bl	80169d4 <ptr_to_mem>
 8016b28:	4604      	mov	r4, r0
 8016b2a:	68b8      	ldr	r0, [r7, #8]
 8016b2c:	f7ff ff64 	bl	80169f8 <mem_to_ptr>
 8016b30:	4603      	mov	r3, r0
 8016b32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8016b34:	bf00      	nop
 8016b36:	3714      	adds	r7, #20
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd90      	pop	{r4, r7, pc}
 8016b3c:	20008f7c 	.word	0x20008f7c
 8016b40:	080260e8 	.word	0x080260e8
 8016b44:	08026118 	.word	0x08026118
 8016b48:	08026130 	.word	0x08026130
 8016b4c:	20008f80 	.word	0x20008f80
 8016b50:	08026158 	.word	0x08026158
 8016b54:	08026174 	.word	0x08026174
 8016b58:	08026190 	.word	0x08026190
 8016b5c:	20008f88 	.word	0x20008f88

08016b60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016b66:	4b1f      	ldr	r3, [pc, #124]	; (8016be4 <mem_init+0x84>)
 8016b68:	3303      	adds	r3, #3
 8016b6a:	f023 0303 	bic.w	r3, r3, #3
 8016b6e:	461a      	mov	r2, r3
 8016b70:	4b1d      	ldr	r3, [pc, #116]	; (8016be8 <mem_init+0x88>)
 8016b72:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8016b74:	4b1c      	ldr	r3, [pc, #112]	; (8016be8 <mem_init+0x88>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8016b80:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2200      	movs	r2, #0
 8016b86:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016b8e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8016b92:	f7ff ff1f 	bl	80169d4 <ptr_to_mem>
 8016b96:	4602      	mov	r2, r0
 8016b98:	4b14      	ldr	r3, [pc, #80]	; (8016bec <mem_init+0x8c>)
 8016b9a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8016b9c:	4b13      	ldr	r3, [pc, #76]	; (8016bec <mem_init+0x8c>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2201      	movs	r2, #1
 8016ba2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8016ba4:	4b11      	ldr	r3, [pc, #68]	; (8016bec <mem_init+0x8c>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8016bac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8016bae:	4b0f      	ldr	r3, [pc, #60]	; (8016bec <mem_init+0x8c>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8016bb6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8016bb8:	4b0b      	ldr	r3, [pc, #44]	; (8016be8 <mem_init+0x88>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	4a0c      	ldr	r2, [pc, #48]	; (8016bf0 <mem_init+0x90>)
 8016bbe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8016bc0:	480c      	ldr	r0, [pc, #48]	; (8016bf4 <mem_init+0x94>)
 8016bc2:	f00c ff57 	bl	8023a74 <sys_mutex_new>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d006      	beq.n	8016bda <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016bcc:	4b0a      	ldr	r3, [pc, #40]	; (8016bf8 <mem_init+0x98>)
 8016bce:	f240 221f 	movw	r2, #543	; 0x21f
 8016bd2:	490a      	ldr	r1, [pc, #40]	; (8016bfc <mem_init+0x9c>)
 8016bd4:	480a      	ldr	r0, [pc, #40]	; (8016c00 <mem_init+0xa0>)
 8016bd6:	f00d fde3 	bl	80247a0 <iprintf>
  }
}
 8016bda:	bf00      	nop
 8016bdc:	3708      	adds	r7, #8
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	2000cca4 	.word	0x2000cca4
 8016be8:	20008f7c 	.word	0x20008f7c
 8016bec:	20008f80 	.word	0x20008f80
 8016bf0:	20008f88 	.word	0x20008f88
 8016bf4:	20008f84 	.word	0x20008f84
 8016bf8:	080260e8 	.word	0x080260e8
 8016bfc:	080261bc 	.word	0x080261bc
 8016c00:	08026130 	.word	0x08026130

08016c04 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b086      	sub	sp, #24
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	f7ff fef3 	bl	80169f8 <mem_to_ptr>
 8016c12:	4603      	mov	r3, r0
 8016c14:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	881b      	ldrh	r3, [r3, #0]
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7ff feda 	bl	80169d4 <ptr_to_mem>
 8016c20:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	885b      	ldrh	r3, [r3, #2]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7ff fed4 	bl	80169d4 <ptr_to_mem>
 8016c2c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	881b      	ldrh	r3, [r3, #0]
 8016c32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016c36:	d818      	bhi.n	8016c6a <mem_link_valid+0x66>
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	885b      	ldrh	r3, [r3, #2]
 8016c3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016c40:	d813      	bhi.n	8016c6a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016c46:	8afa      	ldrh	r2, [r7, #22]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d004      	beq.n	8016c56 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	881b      	ldrh	r3, [r3, #0]
 8016c50:	8afa      	ldrh	r2, [r7, #22]
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d109      	bne.n	8016c6a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016c56:	4b08      	ldr	r3, [pc, #32]	; (8016c78 <mem_link_valid+0x74>)
 8016c58:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016c5a:	693a      	ldr	r2, [r7, #16]
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d006      	beq.n	8016c6e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	885b      	ldrh	r3, [r3, #2]
 8016c64:	8afa      	ldrh	r2, [r7, #22]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d001      	beq.n	8016c6e <mem_link_valid+0x6a>
    return 0;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	e000      	b.n	8016c70 <mem_link_valid+0x6c>
  }
  return 1;
 8016c6e:	2301      	movs	r3, #1
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3718      	adds	r7, #24
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}
 8016c78:	20008f80 	.word	0x20008f80

08016c7c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b088      	sub	sp, #32
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d070      	beq.n	8016d6c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	f003 0303 	and.w	r3, r3, #3
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d00d      	beq.n	8016cb0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8016c94:	4b37      	ldr	r3, [pc, #220]	; (8016d74 <mem_free+0xf8>)
 8016c96:	f240 2273 	movw	r2, #627	; 0x273
 8016c9a:	4937      	ldr	r1, [pc, #220]	; (8016d78 <mem_free+0xfc>)
 8016c9c:	4837      	ldr	r0, [pc, #220]	; (8016d7c <mem_free+0x100>)
 8016c9e:	f00d fd7f 	bl	80247a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016ca2:	f00c ff39 	bl	8023b18 <sys_arch_protect>
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	68f8      	ldr	r0, [r7, #12]
 8016caa:	f00c ff43 	bl	8023b34 <sys_arch_unprotect>
    return;
 8016cae:	e05e      	b.n	8016d6e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	3b08      	subs	r3, #8
 8016cb4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016cb6:	4b32      	ldr	r3, [pc, #200]	; (8016d80 <mem_free+0x104>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	69fa      	ldr	r2, [r7, #28]
 8016cbc:	429a      	cmp	r2, r3
 8016cbe:	d306      	bcc.n	8016cce <mem_free+0x52>
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f103 020c 	add.w	r2, r3, #12
 8016cc6:	4b2f      	ldr	r3, [pc, #188]	; (8016d84 <mem_free+0x108>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d90d      	bls.n	8016cea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8016cce:	4b29      	ldr	r3, [pc, #164]	; (8016d74 <mem_free+0xf8>)
 8016cd0:	f240 227f 	movw	r2, #639	; 0x27f
 8016cd4:	492c      	ldr	r1, [pc, #176]	; (8016d88 <mem_free+0x10c>)
 8016cd6:	4829      	ldr	r0, [pc, #164]	; (8016d7c <mem_free+0x100>)
 8016cd8:	f00d fd62 	bl	80247a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016cdc:	f00c ff1c 	bl	8023b18 <sys_arch_protect>
 8016ce0:	6138      	str	r0, [r7, #16]
 8016ce2:	6938      	ldr	r0, [r7, #16]
 8016ce4:	f00c ff26 	bl	8023b34 <sys_arch_unprotect>
    return;
 8016ce8:	e041      	b.n	8016d6e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016cea:	4828      	ldr	r0, [pc, #160]	; (8016d8c <mem_free+0x110>)
 8016cec:	f00c fed8 	bl	8023aa0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8016cf0:	69fb      	ldr	r3, [r7, #28]
 8016cf2:	791b      	ldrb	r3, [r3, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d110      	bne.n	8016d1a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8016cf8:	4b1e      	ldr	r3, [pc, #120]	; (8016d74 <mem_free+0xf8>)
 8016cfa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8016cfe:	4924      	ldr	r1, [pc, #144]	; (8016d90 <mem_free+0x114>)
 8016d00:	481e      	ldr	r0, [pc, #120]	; (8016d7c <mem_free+0x100>)
 8016d02:	f00d fd4d 	bl	80247a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016d06:	4821      	ldr	r0, [pc, #132]	; (8016d8c <mem_free+0x110>)
 8016d08:	f00c fed9 	bl	8023abe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016d0c:	f00c ff04 	bl	8023b18 <sys_arch_protect>
 8016d10:	6178      	str	r0, [r7, #20]
 8016d12:	6978      	ldr	r0, [r7, #20]
 8016d14:	f00c ff0e 	bl	8023b34 <sys_arch_unprotect>
    return;
 8016d18:	e029      	b.n	8016d6e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8016d1a:	69f8      	ldr	r0, [r7, #28]
 8016d1c:	f7ff ff72 	bl	8016c04 <mem_link_valid>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d110      	bne.n	8016d48 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8016d26:	4b13      	ldr	r3, [pc, #76]	; (8016d74 <mem_free+0xf8>)
 8016d28:	f240 2295 	movw	r2, #661	; 0x295
 8016d2c:	4919      	ldr	r1, [pc, #100]	; (8016d94 <mem_free+0x118>)
 8016d2e:	4813      	ldr	r0, [pc, #76]	; (8016d7c <mem_free+0x100>)
 8016d30:	f00d fd36 	bl	80247a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016d34:	4815      	ldr	r0, [pc, #84]	; (8016d8c <mem_free+0x110>)
 8016d36:	f00c fec2 	bl	8023abe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016d3a:	f00c feed 	bl	8023b18 <sys_arch_protect>
 8016d3e:	61b8      	str	r0, [r7, #24]
 8016d40:	69b8      	ldr	r0, [r7, #24]
 8016d42:	f00c fef7 	bl	8023b34 <sys_arch_unprotect>
    return;
 8016d46:	e012      	b.n	8016d6e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8016d4e:	4b12      	ldr	r3, [pc, #72]	; (8016d98 <mem_free+0x11c>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	69fa      	ldr	r2, [r7, #28]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d202      	bcs.n	8016d5e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016d58:	4a0f      	ldr	r2, [pc, #60]	; (8016d98 <mem_free+0x11c>)
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8016d5e:	69f8      	ldr	r0, [r7, #28]
 8016d60:	f7ff fe5c 	bl	8016a1c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016d64:	4809      	ldr	r0, [pc, #36]	; (8016d8c <mem_free+0x110>)
 8016d66:	f00c feaa 	bl	8023abe <sys_mutex_unlock>
 8016d6a:	e000      	b.n	8016d6e <mem_free+0xf2>
    return;
 8016d6c:	bf00      	nop
}
 8016d6e:	3720      	adds	r7, #32
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	080260e8 	.word	0x080260e8
 8016d78:	080261d8 	.word	0x080261d8
 8016d7c:	08026130 	.word	0x08026130
 8016d80:	20008f7c 	.word	0x20008f7c
 8016d84:	20008f80 	.word	0x20008f80
 8016d88:	080261fc 	.word	0x080261fc
 8016d8c:	20008f84 	.word	0x20008f84
 8016d90:	08026218 	.word	0x08026218
 8016d94:	08026240 	.word	0x08026240
 8016d98:	20008f88 	.word	0x20008f88

08016d9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b088      	sub	sp, #32
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	460b      	mov	r3, r1
 8016da6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8016da8:	887b      	ldrh	r3, [r7, #2]
 8016daa:	3303      	adds	r3, #3
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	f023 0303 	bic.w	r3, r3, #3
 8016db2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8016db4:	8bfb      	ldrh	r3, [r7, #30]
 8016db6:	2b0b      	cmp	r3, #11
 8016db8:	d801      	bhi.n	8016dbe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8016dba:	230c      	movs	r3, #12
 8016dbc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8016dbe:	8bfb      	ldrh	r3, [r7, #30]
 8016dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016dc4:	d803      	bhi.n	8016dce <mem_trim+0x32>
 8016dc6:	8bfa      	ldrh	r2, [r7, #30]
 8016dc8:	887b      	ldrh	r3, [r7, #2]
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d201      	bcs.n	8016dd2 <mem_trim+0x36>
    return NULL;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	e0d8      	b.n	8016f84 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8016dd2:	4b6e      	ldr	r3, [pc, #440]	; (8016f8c <mem_trim+0x1f0>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d304      	bcc.n	8016de6 <mem_trim+0x4a>
 8016ddc:	4b6c      	ldr	r3, [pc, #432]	; (8016f90 <mem_trim+0x1f4>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d306      	bcc.n	8016df4 <mem_trim+0x58>
 8016de6:	4b6b      	ldr	r3, [pc, #428]	; (8016f94 <mem_trim+0x1f8>)
 8016de8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016dec:	496a      	ldr	r1, [pc, #424]	; (8016f98 <mem_trim+0x1fc>)
 8016dee:	486b      	ldr	r0, [pc, #428]	; (8016f9c <mem_trim+0x200>)
 8016df0:	f00d fcd6 	bl	80247a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016df4:	4b65      	ldr	r3, [pc, #404]	; (8016f8c <mem_trim+0x1f0>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d304      	bcc.n	8016e08 <mem_trim+0x6c>
 8016dfe:	4b64      	ldr	r3, [pc, #400]	; (8016f90 <mem_trim+0x1f4>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	d307      	bcc.n	8016e18 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016e08:	f00c fe86 	bl	8023b18 <sys_arch_protect>
 8016e0c:	60b8      	str	r0, [r7, #8]
 8016e0e:	68b8      	ldr	r0, [r7, #8]
 8016e10:	f00c fe90 	bl	8023b34 <sys_arch_unprotect>
    return rmem;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	e0b5      	b.n	8016f84 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	3b08      	subs	r3, #8
 8016e1c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8016e1e:	69b8      	ldr	r0, [r7, #24]
 8016e20:	f7ff fdea 	bl	80169f8 <mem_to_ptr>
 8016e24:	4603      	mov	r3, r0
 8016e26:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8016e28:	69bb      	ldr	r3, [r7, #24]
 8016e2a:	881a      	ldrh	r2, [r3, #0]
 8016e2c:	8afb      	ldrh	r3, [r7, #22]
 8016e2e:	1ad3      	subs	r3, r2, r3
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	3b08      	subs	r3, #8
 8016e34:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016e36:	8bfa      	ldrh	r2, [r7, #30]
 8016e38:	8abb      	ldrh	r3, [r7, #20]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d906      	bls.n	8016e4c <mem_trim+0xb0>
 8016e3e:	4b55      	ldr	r3, [pc, #340]	; (8016f94 <mem_trim+0x1f8>)
 8016e40:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016e44:	4956      	ldr	r1, [pc, #344]	; (8016fa0 <mem_trim+0x204>)
 8016e46:	4855      	ldr	r0, [pc, #340]	; (8016f9c <mem_trim+0x200>)
 8016e48:	f00d fcaa 	bl	80247a0 <iprintf>
  if (newsize > size) {
 8016e4c:	8bfa      	ldrh	r2, [r7, #30]
 8016e4e:	8abb      	ldrh	r3, [r7, #20]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d901      	bls.n	8016e58 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8016e54:	2300      	movs	r3, #0
 8016e56:	e095      	b.n	8016f84 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8016e58:	8bfa      	ldrh	r2, [r7, #30]
 8016e5a:	8abb      	ldrh	r3, [r7, #20]
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d101      	bne.n	8016e64 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	e08f      	b.n	8016f84 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016e64:	484f      	ldr	r0, [pc, #316]	; (8016fa4 <mem_trim+0x208>)
 8016e66:	f00c fe1b 	bl	8023aa0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	881b      	ldrh	r3, [r3, #0]
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7ff fdb0 	bl	80169d4 <ptr_to_mem>
 8016e74:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	791b      	ldrb	r3, [r3, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d13f      	bne.n	8016efe <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016e7e:	69bb      	ldr	r3, [r7, #24]
 8016e80:	881b      	ldrh	r3, [r3, #0]
 8016e82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016e86:	d106      	bne.n	8016e96 <mem_trim+0xfa>
 8016e88:	4b42      	ldr	r3, [pc, #264]	; (8016f94 <mem_trim+0x1f8>)
 8016e8a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8016e8e:	4946      	ldr	r1, [pc, #280]	; (8016fa8 <mem_trim+0x20c>)
 8016e90:	4842      	ldr	r0, [pc, #264]	; (8016f9c <mem_trim+0x200>)
 8016e92:	f00d fc85 	bl	80247a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	881b      	ldrh	r3, [r3, #0]
 8016e9a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016e9c:	8afa      	ldrh	r2, [r7, #22]
 8016e9e:	8bfb      	ldrh	r3, [r7, #30]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	3308      	adds	r3, #8
 8016ea6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8016ea8:	4b40      	ldr	r3, [pc, #256]	; (8016fac <mem_trim+0x210>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	693a      	ldr	r2, [r7, #16]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d106      	bne.n	8016ec0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8016eb2:	89fb      	ldrh	r3, [r7, #14]
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7ff fd8d 	bl	80169d4 <ptr_to_mem>
 8016eba:	4602      	mov	r2, r0
 8016ebc:	4b3b      	ldr	r3, [pc, #236]	; (8016fac <mem_trim+0x210>)
 8016ebe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8016ec0:	89fb      	ldrh	r3, [r7, #14]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7ff fd86 	bl	80169d4 <ptr_to_mem>
 8016ec8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	89ba      	ldrh	r2, [r7, #12]
 8016ed4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	8afa      	ldrh	r2, [r7, #22]
 8016eda:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8016edc:	69bb      	ldr	r3, [r7, #24]
 8016ede:	89fa      	ldrh	r2, [r7, #14]
 8016ee0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	881b      	ldrh	r3, [r3, #0]
 8016ee6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016eea:	d047      	beq.n	8016f7c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	881b      	ldrh	r3, [r3, #0]
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7ff fd6f 	bl	80169d4 <ptr_to_mem>
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	89fb      	ldrh	r3, [r7, #14]
 8016efa:	8053      	strh	r3, [r2, #2]
 8016efc:	e03e      	b.n	8016f7c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8016efe:	8bfb      	ldrh	r3, [r7, #30]
 8016f00:	f103 0214 	add.w	r2, r3, #20
 8016f04:	8abb      	ldrh	r3, [r7, #20]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	d838      	bhi.n	8016f7c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016f0a:	8afa      	ldrh	r2, [r7, #22]
 8016f0c:	8bfb      	ldrh	r3, [r7, #30]
 8016f0e:	4413      	add	r3, r2
 8016f10:	b29b      	uxth	r3, r3
 8016f12:	3308      	adds	r3, #8
 8016f14:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016f16:	69bb      	ldr	r3, [r7, #24]
 8016f18:	881b      	ldrh	r3, [r3, #0]
 8016f1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016f1e:	d106      	bne.n	8016f2e <mem_trim+0x192>
 8016f20:	4b1c      	ldr	r3, [pc, #112]	; (8016f94 <mem_trim+0x1f8>)
 8016f22:	f240 3216 	movw	r2, #790	; 0x316
 8016f26:	4920      	ldr	r1, [pc, #128]	; (8016fa8 <mem_trim+0x20c>)
 8016f28:	481c      	ldr	r0, [pc, #112]	; (8016f9c <mem_trim+0x200>)
 8016f2a:	f00d fc39 	bl	80247a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8016f2e:	89fb      	ldrh	r3, [r7, #14]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7ff fd4f 	bl	80169d4 <ptr_to_mem>
 8016f36:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8016f38:	4b1c      	ldr	r3, [pc, #112]	; (8016fac <mem_trim+0x210>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	693a      	ldr	r2, [r7, #16]
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	d202      	bcs.n	8016f48 <mem_trim+0x1ac>
      lfree = mem2;
 8016f42:	4a1a      	ldr	r2, [pc, #104]	; (8016fac <mem_trim+0x210>)
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	881a      	ldrh	r2, [r3, #0]
 8016f52:	693b      	ldr	r3, [r7, #16]
 8016f54:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8016f56:	693b      	ldr	r3, [r7, #16]
 8016f58:	8afa      	ldrh	r2, [r7, #22]
 8016f5a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8016f5c:	69bb      	ldr	r3, [r7, #24]
 8016f5e:	89fa      	ldrh	r2, [r7, #14]
 8016f60:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	881b      	ldrh	r3, [r3, #0]
 8016f66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016f6a:	d007      	beq.n	8016f7c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	881b      	ldrh	r3, [r3, #0]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7ff fd2f 	bl	80169d4 <ptr_to_mem>
 8016f76:	4602      	mov	r2, r0
 8016f78:	89fb      	ldrh	r3, [r7, #14]
 8016f7a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016f7c:	4809      	ldr	r0, [pc, #36]	; (8016fa4 <mem_trim+0x208>)
 8016f7e:	f00c fd9e 	bl	8023abe <sys_mutex_unlock>
  return rmem;
 8016f82:	687b      	ldr	r3, [r7, #4]
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	3720      	adds	r7, #32
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	20008f7c 	.word	0x20008f7c
 8016f90:	20008f80 	.word	0x20008f80
 8016f94:	080260e8 	.word	0x080260e8
 8016f98:	08026274 	.word	0x08026274
 8016f9c:	08026130 	.word	0x08026130
 8016fa0:	0802628c 	.word	0x0802628c
 8016fa4:	20008f84 	.word	0x20008f84
 8016fa8:	080262ac 	.word	0x080262ac
 8016fac:	20008f88 	.word	0x20008f88

08016fb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b088      	sub	sp, #32
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8016fba:	88fb      	ldrh	r3, [r7, #6]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d101      	bne.n	8016fc4 <mem_malloc+0x14>
    return NULL;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	e0e2      	b.n	801718a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016fc4:	88fb      	ldrh	r3, [r7, #6]
 8016fc6:	3303      	adds	r3, #3
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	f023 0303 	bic.w	r3, r3, #3
 8016fce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8016fd0:	8bbb      	ldrh	r3, [r7, #28]
 8016fd2:	2b0b      	cmp	r3, #11
 8016fd4:	d801      	bhi.n	8016fda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8016fd6:	230c      	movs	r3, #12
 8016fd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016fda:	8bbb      	ldrh	r3, [r7, #28]
 8016fdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016fe0:	d803      	bhi.n	8016fea <mem_malloc+0x3a>
 8016fe2:	8bba      	ldrh	r2, [r7, #28]
 8016fe4:	88fb      	ldrh	r3, [r7, #6]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d201      	bcs.n	8016fee <mem_malloc+0x3e>
    return NULL;
 8016fea:	2300      	movs	r3, #0
 8016fec:	e0cd      	b.n	801718a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8016fee:	4869      	ldr	r0, [pc, #420]	; (8017194 <mem_malloc+0x1e4>)
 8016ff0:	f00c fd56 	bl	8023aa0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016ff4:	4b68      	ldr	r3, [pc, #416]	; (8017198 <mem_malloc+0x1e8>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7ff fcfd 	bl	80169f8 <mem_to_ptr>
 8016ffe:	4603      	mov	r3, r0
 8017000:	83fb      	strh	r3, [r7, #30]
 8017002:	e0b7      	b.n	8017174 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017004:	8bfb      	ldrh	r3, [r7, #30]
 8017006:	4618      	mov	r0, r3
 8017008:	f7ff fce4 	bl	80169d4 <ptr_to_mem>
 801700c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	791b      	ldrb	r3, [r3, #4]
 8017012:	2b00      	cmp	r3, #0
 8017014:	f040 80a7 	bne.w	8017166 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	881b      	ldrh	r3, [r3, #0]
 801701c:	461a      	mov	r2, r3
 801701e:	8bfb      	ldrh	r3, [r7, #30]
 8017020:	1ad3      	subs	r3, r2, r3
 8017022:	f1a3 0208 	sub.w	r2, r3, #8
 8017026:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017028:	429a      	cmp	r2, r3
 801702a:	f0c0 809c 	bcc.w	8017166 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	881b      	ldrh	r3, [r3, #0]
 8017032:	461a      	mov	r2, r3
 8017034:	8bfb      	ldrh	r3, [r7, #30]
 8017036:	1ad3      	subs	r3, r2, r3
 8017038:	f1a3 0208 	sub.w	r2, r3, #8
 801703c:	8bbb      	ldrh	r3, [r7, #28]
 801703e:	3314      	adds	r3, #20
 8017040:	429a      	cmp	r2, r3
 8017042:	d333      	bcc.n	80170ac <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017044:	8bfa      	ldrh	r2, [r7, #30]
 8017046:	8bbb      	ldrh	r3, [r7, #28]
 8017048:	4413      	add	r3, r2
 801704a:	b29b      	uxth	r3, r3
 801704c:	3308      	adds	r3, #8
 801704e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017050:	8a7b      	ldrh	r3, [r7, #18]
 8017052:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017056:	d106      	bne.n	8017066 <mem_malloc+0xb6>
 8017058:	4b50      	ldr	r3, [pc, #320]	; (801719c <mem_malloc+0x1ec>)
 801705a:	f240 3287 	movw	r2, #903	; 0x387
 801705e:	4950      	ldr	r1, [pc, #320]	; (80171a0 <mem_malloc+0x1f0>)
 8017060:	4850      	ldr	r0, [pc, #320]	; (80171a4 <mem_malloc+0x1f4>)
 8017062:	f00d fb9d 	bl	80247a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8017066:	8a7b      	ldrh	r3, [r7, #18]
 8017068:	4618      	mov	r0, r3
 801706a:	f7ff fcb3 	bl	80169d4 <ptr_to_mem>
 801706e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	2200      	movs	r2, #0
 8017074:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	881a      	ldrh	r2, [r3, #0]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	8bfa      	ldrh	r2, [r7, #30]
 8017082:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	8a7a      	ldrh	r2, [r7, #18]
 8017088:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	2201      	movs	r2, #1
 801708e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	881b      	ldrh	r3, [r3, #0]
 8017094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017098:	d00b      	beq.n	80170b2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	881b      	ldrh	r3, [r3, #0]
 801709e:	4618      	mov	r0, r3
 80170a0:	f7ff fc98 	bl	80169d4 <ptr_to_mem>
 80170a4:	4602      	mov	r2, r0
 80170a6:	8a7b      	ldrh	r3, [r7, #18]
 80170a8:	8053      	strh	r3, [r2, #2]
 80170aa:	e002      	b.n	80170b2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	2201      	movs	r2, #1
 80170b0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80170b2:	4b39      	ldr	r3, [pc, #228]	; (8017198 <mem_malloc+0x1e8>)
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	697a      	ldr	r2, [r7, #20]
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d127      	bne.n	801710c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80170bc:	4b36      	ldr	r3, [pc, #216]	; (8017198 <mem_malloc+0x1e8>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80170c2:	e005      	b.n	80170d0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80170c4:	69bb      	ldr	r3, [r7, #24]
 80170c6:	881b      	ldrh	r3, [r3, #0]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f7ff fc83 	bl	80169d4 <ptr_to_mem>
 80170ce:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	791b      	ldrb	r3, [r3, #4]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d004      	beq.n	80170e2 <mem_malloc+0x132>
 80170d8:	4b33      	ldr	r3, [pc, #204]	; (80171a8 <mem_malloc+0x1f8>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	69ba      	ldr	r2, [r7, #24]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d1f0      	bne.n	80170c4 <mem_malloc+0x114>
          }
          lfree = cur;
 80170e2:	4a2d      	ldr	r2, [pc, #180]	; (8017198 <mem_malloc+0x1e8>)
 80170e4:	69bb      	ldr	r3, [r7, #24]
 80170e6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80170e8:	4b2b      	ldr	r3, [pc, #172]	; (8017198 <mem_malloc+0x1e8>)
 80170ea:	681a      	ldr	r2, [r3, #0]
 80170ec:	4b2e      	ldr	r3, [pc, #184]	; (80171a8 <mem_malloc+0x1f8>)
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d00b      	beq.n	801710c <mem_malloc+0x15c>
 80170f4:	4b28      	ldr	r3, [pc, #160]	; (8017198 <mem_malloc+0x1e8>)
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	791b      	ldrb	r3, [r3, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d006      	beq.n	801710c <mem_malloc+0x15c>
 80170fe:	4b27      	ldr	r3, [pc, #156]	; (801719c <mem_malloc+0x1ec>)
 8017100:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017104:	4929      	ldr	r1, [pc, #164]	; (80171ac <mem_malloc+0x1fc>)
 8017106:	4827      	ldr	r0, [pc, #156]	; (80171a4 <mem_malloc+0x1f4>)
 8017108:	f00d fb4a 	bl	80247a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801710c:	4821      	ldr	r0, [pc, #132]	; (8017194 <mem_malloc+0x1e4>)
 801710e:	f00c fcd6 	bl	8023abe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017112:	8bba      	ldrh	r2, [r7, #28]
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	4413      	add	r3, r2
 8017118:	3308      	adds	r3, #8
 801711a:	4a23      	ldr	r2, [pc, #140]	; (80171a8 <mem_malloc+0x1f8>)
 801711c:	6812      	ldr	r2, [r2, #0]
 801711e:	4293      	cmp	r3, r2
 8017120:	d906      	bls.n	8017130 <mem_malloc+0x180>
 8017122:	4b1e      	ldr	r3, [pc, #120]	; (801719c <mem_malloc+0x1ec>)
 8017124:	f240 32ba 	movw	r2, #954	; 0x3ba
 8017128:	4921      	ldr	r1, [pc, #132]	; (80171b0 <mem_malloc+0x200>)
 801712a:	481e      	ldr	r0, [pc, #120]	; (80171a4 <mem_malloc+0x1f4>)
 801712c:	f00d fb38 	bl	80247a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	f003 0303 	and.w	r3, r3, #3
 8017136:	2b00      	cmp	r3, #0
 8017138:	d006      	beq.n	8017148 <mem_malloc+0x198>
 801713a:	4b18      	ldr	r3, [pc, #96]	; (801719c <mem_malloc+0x1ec>)
 801713c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8017140:	491c      	ldr	r1, [pc, #112]	; (80171b4 <mem_malloc+0x204>)
 8017142:	4818      	ldr	r0, [pc, #96]	; (80171a4 <mem_malloc+0x1f4>)
 8017144:	f00d fb2c 	bl	80247a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	f003 0303 	and.w	r3, r3, #3
 801714e:	2b00      	cmp	r3, #0
 8017150:	d006      	beq.n	8017160 <mem_malloc+0x1b0>
 8017152:	4b12      	ldr	r3, [pc, #72]	; (801719c <mem_malloc+0x1ec>)
 8017154:	f240 32be 	movw	r2, #958	; 0x3be
 8017158:	4917      	ldr	r1, [pc, #92]	; (80171b8 <mem_malloc+0x208>)
 801715a:	4812      	ldr	r0, [pc, #72]	; (80171a4 <mem_malloc+0x1f4>)
 801715c:	f00d fb20 	bl	80247a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	3308      	adds	r3, #8
 8017164:	e011      	b.n	801718a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8017166:	8bfb      	ldrh	r3, [r7, #30]
 8017168:	4618      	mov	r0, r3
 801716a:	f7ff fc33 	bl	80169d4 <ptr_to_mem>
 801716e:	4603      	mov	r3, r0
 8017170:	881b      	ldrh	r3, [r3, #0]
 8017172:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017174:	8bfa      	ldrh	r2, [r7, #30]
 8017176:	8bbb      	ldrh	r3, [r7, #28]
 8017178:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801717c:	429a      	cmp	r2, r3
 801717e:	f4ff af41 	bcc.w	8017004 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017182:	4804      	ldr	r0, [pc, #16]	; (8017194 <mem_malloc+0x1e4>)
 8017184:	f00c fc9b 	bl	8023abe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017188:	2300      	movs	r3, #0
}
 801718a:	4618      	mov	r0, r3
 801718c:	3720      	adds	r7, #32
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	20008f84 	.word	0x20008f84
 8017198:	20008f88 	.word	0x20008f88
 801719c:	080260e8 	.word	0x080260e8
 80171a0:	080262ac 	.word	0x080262ac
 80171a4:	08026130 	.word	0x08026130
 80171a8:	20008f80 	.word	0x20008f80
 80171ac:	080262c0 	.word	0x080262c0
 80171b0:	080262dc 	.word	0x080262dc
 80171b4:	0802630c 	.word	0x0802630c
 80171b8:	0802633c 	.word	0x0802633c

080171bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80171bc:	b480      	push	{r7}
 80171be:	b085      	sub	sp, #20
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	689b      	ldr	r3, [r3, #8]
 80171c8:	2200      	movs	r2, #0
 80171ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	685b      	ldr	r3, [r3, #4]
 80171d0:	3303      	adds	r3, #3
 80171d2:	f023 0303 	bic.w	r3, r3, #3
 80171d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80171d8:	2300      	movs	r3, #0
 80171da:	60fb      	str	r3, [r7, #12]
 80171dc:	e011      	b.n	8017202 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	689b      	ldr	r3, [r3, #8]
 80171e2:	681a      	ldr	r2, [r3, #0]
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	689b      	ldr	r3, [r3, #8]
 80171ec:	68ba      	ldr	r2, [r7, #8]
 80171ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	881b      	ldrh	r3, [r3, #0]
 80171f4:	461a      	mov	r2, r3
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	4413      	add	r3, r2
 80171fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	3301      	adds	r3, #1
 8017200:	60fb      	str	r3, [r7, #12]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	885b      	ldrh	r3, [r3, #2]
 8017206:	461a      	mov	r2, r3
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	4293      	cmp	r3, r2
 801720c:	dbe7      	blt.n	80171de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801720e:	bf00      	nop
 8017210:	3714      	adds	r7, #20
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr
	...

0801721c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017222:	2300      	movs	r3, #0
 8017224:	80fb      	strh	r3, [r7, #6]
 8017226:	e009      	b.n	801723c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017228:	88fb      	ldrh	r3, [r7, #6]
 801722a:	4a08      	ldr	r2, [pc, #32]	; (801724c <memp_init+0x30>)
 801722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017230:	4618      	mov	r0, r3
 8017232:	f7ff ffc3 	bl	80171bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017236:	88fb      	ldrh	r3, [r7, #6]
 8017238:	3301      	adds	r3, #1
 801723a:	80fb      	strh	r3, [r7, #6]
 801723c:	88fb      	ldrh	r3, [r7, #6]
 801723e:	2b0c      	cmp	r3, #12
 8017240:	d9f2      	bls.n	8017228 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8017242:	bf00      	nop
 8017244:	3708      	adds	r7, #8
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	08028f5c 	.word	0x08028f5c

08017250 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b084      	sub	sp, #16
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017258:	f00c fc5e 	bl	8023b18 <sys_arch_protect>
 801725c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	689b      	ldr	r3, [r3, #8]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d015      	beq.n	8017298 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	689b      	ldr	r3, [r3, #8]
 8017270:	68ba      	ldr	r2, [r7, #8]
 8017272:	6812      	ldr	r2, [r2, #0]
 8017274:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	f003 0303 	and.w	r3, r3, #3
 801727c:	2b00      	cmp	r3, #0
 801727e:	d006      	beq.n	801728e <do_memp_malloc_pool+0x3e>
 8017280:	4b09      	ldr	r3, [pc, #36]	; (80172a8 <do_memp_malloc_pool+0x58>)
 8017282:	f240 1219 	movw	r2, #281	; 0x119
 8017286:	4909      	ldr	r1, [pc, #36]	; (80172ac <do_memp_malloc_pool+0x5c>)
 8017288:	4809      	ldr	r0, [pc, #36]	; (80172b0 <do_memp_malloc_pool+0x60>)
 801728a:	f00d fa89 	bl	80247a0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801728e:	68f8      	ldr	r0, [r7, #12]
 8017290:	f00c fc50 	bl	8023b34 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	e003      	b.n	80172a0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017298:	68f8      	ldr	r0, [r7, #12]
 801729a:	f00c fc4b 	bl	8023b34 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801729e:	2300      	movs	r3, #0
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3710      	adds	r7, #16
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	08026360 	.word	0x08026360
 80172ac:	08026390 	.word	0x08026390
 80172b0:	080263b4 	.word	0x080263b4

080172b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b084      	sub	sp, #16
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	4603      	mov	r3, r0
 80172bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80172be:	79fb      	ldrb	r3, [r7, #7]
 80172c0:	2b0c      	cmp	r3, #12
 80172c2:	d908      	bls.n	80172d6 <memp_malloc+0x22>
 80172c4:	4b0a      	ldr	r3, [pc, #40]	; (80172f0 <memp_malloc+0x3c>)
 80172c6:	f240 1257 	movw	r2, #343	; 0x157
 80172ca:	490a      	ldr	r1, [pc, #40]	; (80172f4 <memp_malloc+0x40>)
 80172cc:	480a      	ldr	r0, [pc, #40]	; (80172f8 <memp_malloc+0x44>)
 80172ce:	f00d fa67 	bl	80247a0 <iprintf>
 80172d2:	2300      	movs	r3, #0
 80172d4:	e008      	b.n	80172e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80172d6:	79fb      	ldrb	r3, [r7, #7]
 80172d8:	4a08      	ldr	r2, [pc, #32]	; (80172fc <memp_malloc+0x48>)
 80172da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ff ffb6 	bl	8017250 <do_memp_malloc_pool>
 80172e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80172e6:	68fb      	ldr	r3, [r7, #12]
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3710      	adds	r7, #16
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}
 80172f0:	08026360 	.word	0x08026360
 80172f4:	080263f0 	.word	0x080263f0
 80172f8:	080263b4 	.word	0x080263b4
 80172fc:	08028f5c 	.word	0x08028f5c

08017300 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b084      	sub	sp, #16
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	f003 0303 	and.w	r3, r3, #3
 8017310:	2b00      	cmp	r3, #0
 8017312:	d006      	beq.n	8017322 <do_memp_free_pool+0x22>
 8017314:	4b0d      	ldr	r3, [pc, #52]	; (801734c <do_memp_free_pool+0x4c>)
 8017316:	f240 126d 	movw	r2, #365	; 0x16d
 801731a:	490d      	ldr	r1, [pc, #52]	; (8017350 <do_memp_free_pool+0x50>)
 801731c:	480d      	ldr	r0, [pc, #52]	; (8017354 <do_memp_free_pool+0x54>)
 801731e:	f00d fa3f 	bl	80247a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8017326:	f00c fbf7 	bl	8023b18 <sys_arch_protect>
 801732a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	689b      	ldr	r3, [r3, #8]
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	689b      	ldr	r3, [r3, #8]
 801733a:	68fa      	ldr	r2, [r7, #12]
 801733c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801733e:	68b8      	ldr	r0, [r7, #8]
 8017340:	f00c fbf8 	bl	8023b34 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017344:	bf00      	nop
 8017346:	3710      	adds	r7, #16
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}
 801734c:	08026360 	.word	0x08026360
 8017350:	08026410 	.word	0x08026410
 8017354:	080263b4 	.word	0x080263b4

08017358 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	4603      	mov	r3, r0
 8017360:	6039      	str	r1, [r7, #0]
 8017362:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017364:	79fb      	ldrb	r3, [r7, #7]
 8017366:	2b0c      	cmp	r3, #12
 8017368:	d907      	bls.n	801737a <memp_free+0x22>
 801736a:	4b0c      	ldr	r3, [pc, #48]	; (801739c <memp_free+0x44>)
 801736c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017370:	490b      	ldr	r1, [pc, #44]	; (80173a0 <memp_free+0x48>)
 8017372:	480c      	ldr	r0, [pc, #48]	; (80173a4 <memp_free+0x4c>)
 8017374:	f00d fa14 	bl	80247a0 <iprintf>
 8017378:	e00c      	b.n	8017394 <memp_free+0x3c>

  if (mem == NULL) {
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d008      	beq.n	8017392 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017380:	79fb      	ldrb	r3, [r7, #7]
 8017382:	4a09      	ldr	r2, [pc, #36]	; (80173a8 <memp_free+0x50>)
 8017384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017388:	6839      	ldr	r1, [r7, #0]
 801738a:	4618      	mov	r0, r3
 801738c:	f7ff ffb8 	bl	8017300 <do_memp_free_pool>
 8017390:	e000      	b.n	8017394 <memp_free+0x3c>
    return;
 8017392:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017394:	3708      	adds	r7, #8
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
 801739a:	bf00      	nop
 801739c:	08026360 	.word	0x08026360
 80173a0:	08026430 	.word	0x08026430
 80173a4:	080263b4 	.word	0x080263b4
 80173a8:	08028f5c 	.word	0x08028f5c

080173ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80173ac:	b480      	push	{r7}
 80173ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80173b0:	bf00      	nop
 80173b2:	46bd      	mov	sp, r7
 80173b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b8:	4770      	bx	lr
	...

080173bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b086      	sub	sp, #24
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
 80173c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d108      	bne.n	80173e2 <netif_add+0x26>
 80173d0:	4b5c      	ldr	r3, [pc, #368]	; (8017544 <netif_add+0x188>)
 80173d2:	f240 1227 	movw	r2, #295	; 0x127
 80173d6:	495c      	ldr	r1, [pc, #368]	; (8017548 <netif_add+0x18c>)
 80173d8:	485c      	ldr	r0, [pc, #368]	; (801754c <netif_add+0x190>)
 80173da:	f00d f9e1 	bl	80247a0 <iprintf>
 80173de:	2300      	movs	r3, #0
 80173e0:	e0ac      	b.n	801753c <netif_add+0x180>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80173e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d108      	bne.n	80173fa <netif_add+0x3e>
 80173e8:	4b56      	ldr	r3, [pc, #344]	; (8017544 <netif_add+0x188>)
 80173ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 80173ee:	4958      	ldr	r1, [pc, #352]	; (8017550 <netif_add+0x194>)
 80173f0:	4856      	ldr	r0, [pc, #344]	; (801754c <netif_add+0x190>)
 80173f2:	f00d f9d5 	bl	80247a0 <iprintf>
 80173f6:	2300      	movs	r3, #0
 80173f8:	e0a0      	b.n	801753c <netif_add+0x180>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d101      	bne.n	8017404 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017400:	4b54      	ldr	r3, [pc, #336]	; (8017554 <netif_add+0x198>)
 8017402:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d101      	bne.n	801740e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801740a:	4b52      	ldr	r3, [pc, #328]	; (8017554 <netif_add+0x198>)
 801740c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d101      	bne.n	8017418 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017414:	4b4f      	ldr	r3, [pc, #316]	; (8017554 <netif_add+0x198>)
 8017416:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	2200      	movs	r2, #0
 801741c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	2200      	movs	r2, #0
 8017422:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	2200      	movs	r2, #0
 8017428:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	4a4a      	ldr	r2, [pc, #296]	; (8017558 <netif_add+0x19c>)
 801742e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	2200      	movs	r2, #0
 8017434:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	2200      	movs	r2, #0
 801743a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	3328      	adds	r3, #40	; 0x28
 8017442:	2204      	movs	r2, #4
 8017444:	2100      	movs	r1, #0
 8017446:	4618      	mov	r0, r3
 8017448:	f00d f8fa 	bl	8024640 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	2200      	movs	r2, #0
 8017450:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2200      	movs	r2, #0
 8017456:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	6a3a      	ldr	r2, [r7, #32]
 801745c:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801745e:	4b3f      	ldr	r3, [pc, #252]	; (801755c <netif_add+0x1a0>)
 8017460:	781a      	ldrb	r2, [r3, #0]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801746c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	687a      	ldr	r2, [r7, #4]
 8017472:	68b9      	ldr	r1, [r7, #8]
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f000 f91b 	bl	80176b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747c:	68f8      	ldr	r0, [r7, #12]
 801747e:	4798      	blx	r3
 8017480:	4603      	mov	r3, r0
 8017482:	2b00      	cmp	r3, #0
 8017484:	d001      	beq.n	801748a <netif_add+0xce>
    return NULL;
 8017486:	2300      	movs	r3, #0
 8017488:	e058      	b.n	801753c <netif_add+0x180>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017490:	2bff      	cmp	r3, #255	; 0xff
 8017492:	d103      	bne.n	801749c <netif_add+0xe0>
        netif->num = 0;
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	2200      	movs	r2, #0
 8017498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 801749c:	2300      	movs	r3, #0
 801749e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80174a0:	4b2f      	ldr	r3, [pc, #188]	; (8017560 <netif_add+0x1a4>)
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	617b      	str	r3, [r7, #20]
 80174a6:	e02b      	b.n	8017500 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80174a8:	697a      	ldr	r2, [r7, #20]
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d106      	bne.n	80174be <netif_add+0x102>
 80174b0:	4b24      	ldr	r3, [pc, #144]	; (8017544 <netif_add+0x188>)
 80174b2:	f240 128b 	movw	r2, #395	; 0x18b
 80174b6:	492b      	ldr	r1, [pc, #172]	; (8017564 <netif_add+0x1a8>)
 80174b8:	4824      	ldr	r0, [pc, #144]	; (801754c <netif_add+0x190>)
 80174ba:	f00d f971 	bl	80247a0 <iprintf>
        num_netifs++;
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	3301      	adds	r3, #1
 80174c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	2bff      	cmp	r3, #255	; 0xff
 80174c8:	dd06      	ble.n	80174d8 <netif_add+0x11c>
 80174ca:	4b1e      	ldr	r3, [pc, #120]	; (8017544 <netif_add+0x188>)
 80174cc:	f240 128d 	movw	r2, #397	; 0x18d
 80174d0:	4925      	ldr	r1, [pc, #148]	; (8017568 <netif_add+0x1ac>)
 80174d2:	481e      	ldr	r0, [pc, #120]	; (801754c <netif_add+0x190>)
 80174d4:	f00d f964 	bl	80247a0 <iprintf>
        if (netif2->num == netif->num) {
 80174d8:	697b      	ldr	r3, [r7, #20]
 80174da:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d108      	bne.n	80174fa <netif_add+0x13e>
          netif->num++;
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80174ee:	3301      	adds	r3, #1
 80174f0:	b2da      	uxtb	r2, r3
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 80174f8:	e005      	b.n	8017506 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	617b      	str	r3, [r7, #20]
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d1d0      	bne.n	80174a8 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d1be      	bne.n	801748a <netif_add+0xce>
  }
  if (netif->num == 254) {
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017512:	2bfe      	cmp	r3, #254	; 0xfe
 8017514:	d103      	bne.n	801751e <netif_add+0x162>
    netif_num = 0;
 8017516:	4b11      	ldr	r3, [pc, #68]	; (801755c <netif_add+0x1a0>)
 8017518:	2200      	movs	r2, #0
 801751a:	701a      	strb	r2, [r3, #0]
 801751c:	e006      	b.n	801752c <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017524:	3301      	adds	r3, #1
 8017526:	b2da      	uxtb	r2, r3
 8017528:	4b0c      	ldr	r3, [pc, #48]	; (801755c <netif_add+0x1a0>)
 801752a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801752c:	4b0c      	ldr	r3, [pc, #48]	; (8017560 <netif_add+0x1a4>)
 801752e:	681a      	ldr	r2, [r3, #0]
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017534:	4a0a      	ldr	r2, [pc, #40]	; (8017560 <netif_add+0x1a4>)
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801753a:	68fb      	ldr	r3, [r7, #12]
}
 801753c:	4618      	mov	r0, r3
 801753e:	3718      	adds	r7, #24
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	0802644c 	.word	0x0802644c
 8017548:	080264e0 	.word	0x080264e0
 801754c:	0802649c 	.word	0x0802649c
 8017550:	080264fc 	.word	0x080264fc
 8017554:	08028fe0 	.word	0x08028fe0
 8017558:	080179b3 	.word	0x080179b3
 801755c:	20008fc0 	.word	0x20008fc0
 8017560:	200103b0 	.word	0x200103b0
 8017564:	08026520 	.word	0x08026520
 8017568:	08026534 	.word	0x08026534

0801756c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017576:	6839      	ldr	r1, [r7, #0]
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f002 fe69 	bl	801a250 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801757e:	6839      	ldr	r1, [r7, #0]
 8017580:	6878      	ldr	r0, [r7, #4]
 8017582:	f007 feef 	bl	801f364 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8017586:	bf00      	nop
 8017588:	3708      	adds	r7, #8
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}
	...

08017590 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b086      	sub	sp, #24
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	60b9      	str	r1, [r7, #8]
 801759a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801759c:	68bb      	ldr	r3, [r7, #8]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d106      	bne.n	80175b0 <netif_do_set_ipaddr+0x20>
 80175a2:	4b21      	ldr	r3, [pc, #132]	; (8017628 <netif_do_set_ipaddr+0x98>)
 80175a4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80175a8:	4920      	ldr	r1, [pc, #128]	; (801762c <netif_do_set_ipaddr+0x9c>)
 80175aa:	4821      	ldr	r0, [pc, #132]	; (8017630 <netif_do_set_ipaddr+0xa0>)
 80175ac:	f00d f8f8 	bl	80247a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d106      	bne.n	80175c4 <netif_do_set_ipaddr+0x34>
 80175b6:	4b1c      	ldr	r3, [pc, #112]	; (8017628 <netif_do_set_ipaddr+0x98>)
 80175b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80175bc:	491b      	ldr	r1, [pc, #108]	; (801762c <netif_do_set_ipaddr+0x9c>)
 80175be:	481c      	ldr	r0, [pc, #112]	; (8017630 <netif_do_set_ipaddr+0xa0>)
 80175c0:	f00d f8ee 	bl	80247a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	681a      	ldr	r2, [r3, #0]
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	3304      	adds	r3, #4
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d024      	beq.n	801761c <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	3304      	adds	r3, #4
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80175e2:	f107 0314 	add.w	r3, r7, #20
 80175e6:	4619      	mov	r1, r3
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f7ff ffbf 	bl	801756c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d002      	beq.n	80175fa <netif_do_set_ipaddr+0x6a>
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	e000      	b.n	80175fc <netif_do_set_ipaddr+0x6c>
 80175fa:	2300      	movs	r3, #0
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017600:	2101      	movs	r1, #1
 8017602:	68f8      	ldr	r0, [r7, #12]
 8017604:	f000 f8e2 	bl	80177cc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	69db      	ldr	r3, [r3, #28]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d003      	beq.n	8017618 <netif_do_set_ipaddr+0x88>
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	69db      	ldr	r3, [r3, #28]
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	4798      	blx	r3
    return 1; /* address changed */
 8017618:	2301      	movs	r3, #1
 801761a:	e000      	b.n	801761e <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 801761c:	2300      	movs	r3, #0
}
 801761e:	4618      	mov	r0, r3
 8017620:	3718      	adds	r7, #24
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	0802644c 	.word	0x0802644c
 801762c:	08026564 	.word	0x08026564
 8017630:	0802649c 	.word	0x0802649c

08017634 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8017634:	b480      	push	{r7}
 8017636:	b085      	sub	sp, #20
 8017638:	af00      	add	r7, sp, #0
 801763a:	60f8      	str	r0, [r7, #12]
 801763c:	60b9      	str	r1, [r7, #8]
 801763e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	3308      	adds	r3, #8
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	429a      	cmp	r2, r3
 801764c:	d00a      	beq.n	8017664 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d002      	beq.n	801765a <netif_do_set_netmask+0x26>
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	e000      	b.n	801765c <netif_do_set_netmask+0x28>
 801765a:	2300      	movs	r3, #0
 801765c:	68fa      	ldr	r2, [r7, #12]
 801765e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8017660:	2301      	movs	r3, #1
 8017662:	e000      	b.n	8017666 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8017664:	2300      	movs	r3, #0
}
 8017666:	4618      	mov	r0, r3
 8017668:	3714      	adds	r7, #20
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr

08017672 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8017672:	b480      	push	{r7}
 8017674:	b085      	sub	sp, #20
 8017676:	af00      	add	r7, sp, #0
 8017678:	60f8      	str	r0, [r7, #12]
 801767a:	60b9      	str	r1, [r7, #8]
 801767c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801767e:	68bb      	ldr	r3, [r7, #8]
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	330c      	adds	r3, #12
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	429a      	cmp	r2, r3
 801768a:	d00a      	beq.n	80176a2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d002      	beq.n	8017698 <netif_do_set_gw+0x26>
 8017692:	68bb      	ldr	r3, [r7, #8]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	e000      	b.n	801769a <netif_do_set_gw+0x28>
 8017698:	2300      	movs	r3, #0
 801769a:	68fa      	ldr	r2, [r7, #12]
 801769c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801769e:	2301      	movs	r3, #1
 80176a0:	e000      	b.n	80176a4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3714      	adds	r7, #20
 80176a8:	46bd      	mov	sp, r7
 80176aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ae:	4770      	bx	lr

080176b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b088      	sub	sp, #32
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80176be:	2300      	movs	r3, #0
 80176c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80176c2:	2300      	movs	r3, #0
 80176c4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d101      	bne.n	80176d0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80176cc:	4b1c      	ldr	r3, [pc, #112]	; (8017740 <netif_set_addr+0x90>)
 80176ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d101      	bne.n	80176da <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80176d6:	4b1a      	ldr	r3, [pc, #104]	; (8017740 <netif_set_addr+0x90>)
 80176d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d101      	bne.n	80176e4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80176e0:	4b17      	ldr	r3, [pc, #92]	; (8017740 <netif_set_addr+0x90>)
 80176e2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d003      	beq.n	80176f2 <netif_set_addr+0x42>
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d101      	bne.n	80176f6 <netif_set_addr+0x46>
 80176f2:	2301      	movs	r3, #1
 80176f4:	e000      	b.n	80176f8 <netif_set_addr+0x48>
 80176f6:	2300      	movs	r3, #0
 80176f8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80176fa:	697b      	ldr	r3, [r7, #20]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d006      	beq.n	801770e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017700:	f107 0310 	add.w	r3, r7, #16
 8017704:	461a      	mov	r2, r3
 8017706:	68b9      	ldr	r1, [r7, #8]
 8017708:	68f8      	ldr	r0, [r7, #12]
 801770a:	f7ff ff41 	bl	8017590 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801770e:	69fa      	ldr	r2, [r7, #28]
 8017710:	6879      	ldr	r1, [r7, #4]
 8017712:	68f8      	ldr	r0, [r7, #12]
 8017714:	f7ff ff8e 	bl	8017634 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017718:	69ba      	ldr	r2, [r7, #24]
 801771a:	6839      	ldr	r1, [r7, #0]
 801771c:	68f8      	ldr	r0, [r7, #12]
 801771e:	f7ff ffa8 	bl	8017672 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d106      	bne.n	8017736 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017728:	f107 0310 	add.w	r3, r7, #16
 801772c:	461a      	mov	r2, r3
 801772e:	68b9      	ldr	r1, [r7, #8]
 8017730:	68f8      	ldr	r0, [r7, #12]
 8017732:	f7ff ff2d 	bl	8017590 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017736:	bf00      	nop
 8017738:	3720      	adds	r7, #32
 801773a:	46bd      	mov	sp, r7
 801773c:	bd80      	pop	{r7, pc}
 801773e:	bf00      	nop
 8017740:	08028fe0 	.word	0x08028fe0

08017744 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017744:	b480      	push	{r7}
 8017746:	b083      	sub	sp, #12
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801774c:	4a04      	ldr	r2, [pc, #16]	; (8017760 <netif_set_default+0x1c>)
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017752:	bf00      	nop
 8017754:	370c      	adds	r7, #12
 8017756:	46bd      	mov	sp, r7
 8017758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775c:	4770      	bx	lr
 801775e:	bf00      	nop
 8017760:	200103b4 	.word	0x200103b4

08017764 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d107      	bne.n	8017782 <netif_set_up+0x1e>
 8017772:	4b13      	ldr	r3, [pc, #76]	; (80177c0 <netif_set_up+0x5c>)
 8017774:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017778:	4912      	ldr	r1, [pc, #72]	; (80177c4 <netif_set_up+0x60>)
 801777a:	4813      	ldr	r0, [pc, #76]	; (80177c8 <netif_set_up+0x64>)
 801777c:	f00d f810 	bl	80247a0 <iprintf>
 8017780:	e01b      	b.n	80177ba <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017788:	f003 0301 	and.w	r3, r3, #1
 801778c:	2b00      	cmp	r3, #0
 801778e:	d114      	bne.n	80177ba <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017796:	f043 0301 	orr.w	r3, r3, #1
 801779a:	b2da      	uxtb	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	69db      	ldr	r3, [r3, #28]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d003      	beq.n	80177b2 <netif_set_up+0x4e>
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	69db      	ldr	r3, [r3, #28]
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80177b2:	2103      	movs	r1, #3
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f000 f809 	bl	80177cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80177ba:	3708      	adds	r7, #8
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	0802644c 	.word	0x0802644c
 80177c4:	080265d4 	.word	0x080265d4
 80177c8:	0802649c 	.word	0x0802649c

080177cc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b082      	sub	sp, #8
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	460b      	mov	r3, r1
 80177d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d106      	bne.n	80177ec <netif_issue_reports+0x20>
 80177de:	4b18      	ldr	r3, [pc, #96]	; (8017840 <netif_issue_reports+0x74>)
 80177e0:	f240 326d 	movw	r2, #877	; 0x36d
 80177e4:	4917      	ldr	r1, [pc, #92]	; (8017844 <netif_issue_reports+0x78>)
 80177e6:	4818      	ldr	r0, [pc, #96]	; (8017848 <netif_issue_reports+0x7c>)
 80177e8:	f00c ffda 	bl	80247a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80177f2:	f003 0304 	and.w	r3, r3, #4
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d01e      	beq.n	8017838 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017800:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017804:	2b00      	cmp	r3, #0
 8017806:	d017      	beq.n	8017838 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017808:	78fb      	ldrb	r3, [r7, #3]
 801780a:	f003 0301 	and.w	r3, r3, #1
 801780e:	2b00      	cmp	r3, #0
 8017810:	d013      	beq.n	801783a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	3304      	adds	r3, #4
 8017816:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017818:	2b00      	cmp	r3, #0
 801781a:	d00e      	beq.n	801783a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017822:	f003 0308 	and.w	r3, r3, #8
 8017826:	2b00      	cmp	r3, #0
 8017828:	d007      	beq.n	801783a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3304      	adds	r3, #4
 801782e:	4619      	mov	r1, r3
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f00a fba9 	bl	8021f88 <etharp_request>
 8017836:	e000      	b.n	801783a <netif_issue_reports+0x6e>
    return;
 8017838:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	0802644c 	.word	0x0802644c
 8017844:	080265f0 	.word	0x080265f0
 8017848:	0802649c 	.word	0x0802649c

0801784c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b082      	sub	sp, #8
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d107      	bne.n	801786a <netif_set_down+0x1e>
 801785a:	4b16      	ldr	r3, [pc, #88]	; (80178b4 <netif_set_down+0x68>)
 801785c:	f240 329b 	movw	r2, #923	; 0x39b
 8017860:	4915      	ldr	r1, [pc, #84]	; (80178b8 <netif_set_down+0x6c>)
 8017862:	4816      	ldr	r0, [pc, #88]	; (80178bc <netif_set_down+0x70>)
 8017864:	f00c ff9c 	bl	80247a0 <iprintf>
 8017868:	e021      	b.n	80178ae <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017870:	f003 0301 	and.w	r3, r3, #1
 8017874:	2b00      	cmp	r3, #0
 8017876:	d01a      	beq.n	80178ae <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801787e:	f023 0301 	bic.w	r3, r3, #1
 8017882:	b2da      	uxtb	r2, r3
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017890:	f003 0308 	and.w	r3, r3, #8
 8017894:	2b00      	cmp	r3, #0
 8017896:	d002      	beq.n	801789e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f009 ff2f 	bl	80216fc <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	69db      	ldr	r3, [r3, #28]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d003      	beq.n	80178ae <netif_set_down+0x62>
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	69db      	ldr	r3, [r3, #28]
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	4798      	blx	r3
  }
}
 80178ae:	3708      	adds	r7, #8
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	0802644c 	.word	0x0802644c
 80178b8:	08026614 	.word	0x08026614
 80178bc:	0802649c 	.word	0x0802649c

080178c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d107      	bne.n	80178de <netif_set_link_up+0x1e>
 80178ce:	4b15      	ldr	r3, [pc, #84]	; (8017924 <netif_set_link_up+0x64>)
 80178d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80178d4:	4914      	ldr	r1, [pc, #80]	; (8017928 <netif_set_link_up+0x68>)
 80178d6:	4815      	ldr	r0, [pc, #84]	; (801792c <netif_set_link_up+0x6c>)
 80178d8:	f00c ff62 	bl	80247a0 <iprintf>
 80178dc:	e01e      	b.n	801791c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80178e4:	f003 0304 	and.w	r3, r3, #4
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d117      	bne.n	801791c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80178f2:	f043 0304 	orr.w	r3, r3, #4
 80178f6:	b2da      	uxtb	r2, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f008 f95c 	bl	801fbbc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017904:	2103      	movs	r1, #3
 8017906:	6878      	ldr	r0, [r7, #4]
 8017908:	f7ff ff60 	bl	80177cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6a1b      	ldr	r3, [r3, #32]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d003      	beq.n	801791c <netif_set_link_up+0x5c>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6a1b      	ldr	r3, [r3, #32]
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801791c:	3708      	adds	r7, #8
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
 8017922:	bf00      	nop
 8017924:	0802644c 	.word	0x0802644c
 8017928:	08026634 	.word	0x08026634
 801792c:	0802649c 	.word	0x0802649c

08017930 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b082      	sub	sp, #8
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d107      	bne.n	801794e <netif_set_link_down+0x1e>
 801793e:	4b11      	ldr	r3, [pc, #68]	; (8017984 <netif_set_link_down+0x54>)
 8017940:	f240 4206 	movw	r2, #1030	; 0x406
 8017944:	4910      	ldr	r1, [pc, #64]	; (8017988 <netif_set_link_down+0x58>)
 8017946:	4811      	ldr	r0, [pc, #68]	; (801798c <netif_set_link_down+0x5c>)
 8017948:	f00c ff2a 	bl	80247a0 <iprintf>
 801794c:	e017      	b.n	801797e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017954:	f003 0304 	and.w	r3, r3, #4
 8017958:	2b00      	cmp	r3, #0
 801795a:	d010      	beq.n	801797e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017962:	f023 0304 	bic.w	r3, r3, #4
 8017966:	b2da      	uxtb	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6a1b      	ldr	r3, [r3, #32]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d003      	beq.n	801797e <netif_set_link_down+0x4e>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	6a1b      	ldr	r3, [r3, #32]
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801797e:	3708      	adds	r7, #8
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	0802644c 	.word	0x0802644c
 8017988:	08026658 	.word	0x08026658
 801798c:	0802649c 	.word	0x0802649c

08017990 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017990:	b480      	push	{r7}
 8017992:	b083      	sub	sp, #12
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
 8017998:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d002      	beq.n	80179a6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	683a      	ldr	r2, [r7, #0]
 80179a4:	621a      	str	r2, [r3, #32]
  }
}
 80179a6:	bf00      	nop
 80179a8:	370c      	adds	r7, #12
 80179aa:	46bd      	mov	sp, r7
 80179ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b0:	4770      	bx	lr

080179b2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80179b2:	b480      	push	{r7}
 80179b4:	b085      	sub	sp, #20
 80179b6:	af00      	add	r7, sp, #0
 80179b8:	60f8      	str	r0, [r7, #12]
 80179ba:	60b9      	str	r1, [r7, #8]
 80179bc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80179be:	f06f 030b 	mvn.w	r3, #11
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3714      	adds	r7, #20
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr
	...

080179d0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80179d0:	b480      	push	{r7}
 80179d2:	b085      	sub	sp, #20
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	4603      	mov	r3, r0
 80179d8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80179da:	79fb      	ldrb	r3, [r7, #7]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d013      	beq.n	8017a08 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80179e0:	4b0d      	ldr	r3, [pc, #52]	; (8017a18 <netif_get_by_index+0x48>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	60fb      	str	r3, [r7, #12]
 80179e6:	e00c      	b.n	8017a02 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80179ee:	3301      	adds	r3, #1
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	79fa      	ldrb	r2, [r7, #7]
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d101      	bne.n	80179fc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	e006      	b.n	8017a0a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	60fb      	str	r3, [r7, #12]
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d1ef      	bne.n	80179e8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8017a08:	2300      	movs	r3, #0
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3714      	adds	r7, #20
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a14:	4770      	bx	lr
 8017a16:	bf00      	nop
 8017a18:	200103b0 	.word	0x200103b0

08017a1c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8017a22:	f00c f879 	bl	8023b18 <sys_arch_protect>
 8017a26:	6038      	str	r0, [r7, #0]
 8017a28:	4b0d      	ldr	r3, [pc, #52]	; (8017a60 <pbuf_free_ooseq+0x44>)
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	701a      	strb	r2, [r3, #0]
 8017a2e:	6838      	ldr	r0, [r7, #0]
 8017a30:	f00c f880 	bl	8023b34 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017a34:	4b0b      	ldr	r3, [pc, #44]	; (8017a64 <pbuf_free_ooseq+0x48>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	607b      	str	r3, [r7, #4]
 8017a3a:	e00a      	b.n	8017a52 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d003      	beq.n	8017a4c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f002 fc41 	bl	801a2cc <tcp_free_ooseq>
      return;
 8017a4a:	e005      	b.n	8017a58 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	68db      	ldr	r3, [r3, #12]
 8017a50:	607b      	str	r3, [r7, #4]
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d1f1      	bne.n	8017a3c <pbuf_free_ooseq+0x20>
    }
  }
}
 8017a58:	3708      	adds	r7, #8
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	bf00      	nop
 8017a60:	200103b8 	.word	0x200103b8
 8017a64:	200103c0 	.word	0x200103c0

08017a68 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017a70:	f7ff ffd4 	bl	8017a1c <pbuf_free_ooseq>
}
 8017a74:	bf00      	nop
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8017a82:	f00c f849 	bl	8023b18 <sys_arch_protect>
 8017a86:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017a88:	4b0f      	ldr	r3, [pc, #60]	; (8017ac8 <pbuf_pool_is_empty+0x4c>)
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017a8e:	4b0e      	ldr	r3, [pc, #56]	; (8017ac8 <pbuf_pool_is_empty+0x4c>)
 8017a90:	2201      	movs	r2, #1
 8017a92:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f00c f84d 	bl	8023b34 <sys_arch_unprotect>

  if (!queued) {
 8017a9a:	78fb      	ldrb	r3, [r7, #3]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d10f      	bne.n	8017ac0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	480a      	ldr	r0, [pc, #40]	; (8017acc <pbuf_pool_is_empty+0x50>)
 8017aa4:	f7fe feb0 	bl	8016808 <tcpip_try_callback>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d008      	beq.n	8017ac0 <pbuf_pool_is_empty+0x44>
 8017aae:	f00c f833 	bl	8023b18 <sys_arch_protect>
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	4b04      	ldr	r3, [pc, #16]	; (8017ac8 <pbuf_pool_is_empty+0x4c>)
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	701a      	strb	r2, [r3, #0]
 8017aba:	6878      	ldr	r0, [r7, #4]
 8017abc:	f00c f83a 	bl	8023b34 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017ac0:	bf00      	nop
 8017ac2:	3708      	adds	r7, #8
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	200103b8 	.word	0x200103b8
 8017acc:	08017a69 	.word	0x08017a69

08017ad0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b085      	sub	sp, #20
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	60f8      	str	r0, [r7, #12]
 8017ad8:	60b9      	str	r1, [r7, #8]
 8017ada:	4611      	mov	r1, r2
 8017adc:	461a      	mov	r2, r3
 8017ade:	460b      	mov	r3, r1
 8017ae0:	80fb      	strh	r3, [r7, #6]
 8017ae2:	4613      	mov	r3, r2
 8017ae4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2200      	movs	r2, #0
 8017aea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	68ba      	ldr	r2, [r7, #8]
 8017af0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	88fa      	ldrh	r2, [r7, #6]
 8017af6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	88ba      	ldrh	r2, [r7, #4]
 8017afc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8017afe:	8b3b      	ldrh	r3, [r7, #24]
 8017b00:	b2da      	uxtb	r2, r3
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	7f3a      	ldrb	r2, [r7, #28]
 8017b0a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	2201      	movs	r2, #1
 8017b10:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2200      	movs	r2, #0
 8017b16:	73da      	strb	r2, [r3, #15]
}
 8017b18:	bf00      	nop
 8017b1a:	3714      	adds	r7, #20
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b22:	4770      	bx	lr

08017b24 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b08c      	sub	sp, #48	; 0x30
 8017b28:	af02      	add	r7, sp, #8
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	71fb      	strb	r3, [r7, #7]
 8017b2e:	460b      	mov	r3, r1
 8017b30:	80bb      	strh	r3, [r7, #4]
 8017b32:	4613      	mov	r3, r2
 8017b34:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8017b36:	79fb      	ldrb	r3, [r7, #7]
 8017b38:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8017b3a:	887b      	ldrh	r3, [r7, #2]
 8017b3c:	2b41      	cmp	r3, #65	; 0x41
 8017b3e:	d00b      	beq.n	8017b58 <pbuf_alloc+0x34>
 8017b40:	2b41      	cmp	r3, #65	; 0x41
 8017b42:	dc02      	bgt.n	8017b4a <pbuf_alloc+0x26>
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	d007      	beq.n	8017b58 <pbuf_alloc+0x34>
 8017b48:	e0c2      	b.n	8017cd0 <pbuf_alloc+0x1ac>
 8017b4a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017b4e:	d00b      	beq.n	8017b68 <pbuf_alloc+0x44>
 8017b50:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017b54:	d070      	beq.n	8017c38 <pbuf_alloc+0x114>
 8017b56:	e0bb      	b.n	8017cd0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8017b58:	887a      	ldrh	r2, [r7, #2]
 8017b5a:	88bb      	ldrh	r3, [r7, #4]
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	2000      	movs	r0, #0
 8017b60:	f000 f8d2 	bl	8017d08 <pbuf_alloc_reference>
 8017b64:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8017b66:	e0bd      	b.n	8017ce4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8017b68:	2300      	movs	r3, #0
 8017b6a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017b70:	88bb      	ldrh	r3, [r7, #4]
 8017b72:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8017b74:	200c      	movs	r0, #12
 8017b76:	f7ff fb9d 	bl	80172b4 <memp_malloc>
 8017b7a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d109      	bne.n	8017b96 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8017b82:	f7ff ff7b 	bl	8017a7c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8017b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d002      	beq.n	8017b92 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8017b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b8e:	f000 faa9 	bl	80180e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017b92:	2300      	movs	r3, #0
 8017b94:	e0a7      	b.n	8017ce6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017b96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b98:	3303      	adds	r3, #3
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	f023 0303 	bic.w	r3, r3, #3
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8017ba6:	b29b      	uxth	r3, r3
 8017ba8:	8b7a      	ldrh	r2, [r7, #26]
 8017baa:	4293      	cmp	r3, r2
 8017bac:	bf28      	it	cs
 8017bae:	4613      	movcs	r3, r2
 8017bb0:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bb4:	3310      	adds	r3, #16
 8017bb6:	693a      	ldr	r2, [r7, #16]
 8017bb8:	4413      	add	r3, r2
 8017bba:	3303      	adds	r3, #3
 8017bbc:	f023 0303 	bic.w	r3, r3, #3
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	89f9      	ldrh	r1, [r7, #14]
 8017bc4:	8b7a      	ldrh	r2, [r7, #26]
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	9301      	str	r3, [sp, #4]
 8017bca:	887b      	ldrh	r3, [r7, #2]
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	460b      	mov	r3, r1
 8017bd0:	4601      	mov	r1, r0
 8017bd2:	6938      	ldr	r0, [r7, #16]
 8017bd4:	f7ff ff7c 	bl	8017ad0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	f003 0303 	and.w	r3, r3, #3
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d006      	beq.n	8017bf2 <pbuf_alloc+0xce>
 8017be4:	4b42      	ldr	r3, [pc, #264]	; (8017cf0 <pbuf_alloc+0x1cc>)
 8017be6:	f240 1201 	movw	r2, #257	; 0x101
 8017bea:	4942      	ldr	r1, [pc, #264]	; (8017cf4 <pbuf_alloc+0x1d0>)
 8017bec:	4842      	ldr	r0, [pc, #264]	; (8017cf8 <pbuf_alloc+0x1d4>)
 8017bee:	f00c fdd7 	bl	80247a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8017bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bf4:	3303      	adds	r3, #3
 8017bf6:	f023 0303 	bic.w	r3, r3, #3
 8017bfa:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8017bfe:	d106      	bne.n	8017c0e <pbuf_alloc+0xea>
 8017c00:	4b3b      	ldr	r3, [pc, #236]	; (8017cf0 <pbuf_alloc+0x1cc>)
 8017c02:	f240 1203 	movw	r2, #259	; 0x103
 8017c06:	493d      	ldr	r1, [pc, #244]	; (8017cfc <pbuf_alloc+0x1d8>)
 8017c08:	483b      	ldr	r0, [pc, #236]	; (8017cf8 <pbuf_alloc+0x1d4>)
 8017c0a:	f00c fdc9 	bl	80247a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d102      	bne.n	8017c1a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	627b      	str	r3, [r7, #36]	; 0x24
 8017c18:	e002      	b.n	8017c20 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8017c1a:	69fb      	ldr	r3, [r7, #28]
 8017c1c:	693a      	ldr	r2, [r7, #16]
 8017c1e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8017c24:	8b7a      	ldrh	r2, [r7, #26]
 8017c26:	89fb      	ldrh	r3, [r7, #14]
 8017c28:	1ad3      	subs	r3, r2, r3
 8017c2a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8017c30:	8b7b      	ldrh	r3, [r7, #26]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d19e      	bne.n	8017b74 <pbuf_alloc+0x50>
      break;
 8017c36:	e055      	b.n	8017ce4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8017c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c3a:	3303      	adds	r3, #3
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	f023 0303 	bic.w	r3, r3, #3
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	88bb      	ldrh	r3, [r7, #4]
 8017c46:	3303      	adds	r3, #3
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	f023 0303 	bic.w	r3, r3, #3
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	4413      	add	r3, r2
 8017c52:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8017c54:	8b3b      	ldrh	r3, [r7, #24]
 8017c56:	3310      	adds	r3, #16
 8017c58:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017c5a:	8b3a      	ldrh	r2, [r7, #24]
 8017c5c:	88bb      	ldrh	r3, [r7, #4]
 8017c5e:	3303      	adds	r3, #3
 8017c60:	f023 0303 	bic.w	r3, r3, #3
 8017c64:	429a      	cmp	r2, r3
 8017c66:	d306      	bcc.n	8017c76 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8017c68:	8afa      	ldrh	r2, [r7, #22]
 8017c6a:	88bb      	ldrh	r3, [r7, #4]
 8017c6c:	3303      	adds	r3, #3
 8017c6e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d201      	bcs.n	8017c7a <pbuf_alloc+0x156>
        return NULL;
 8017c76:	2300      	movs	r3, #0
 8017c78:	e035      	b.n	8017ce6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017c7a:	8afb      	ldrh	r3, [r7, #22]
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f7ff f997 	bl	8016fb0 <mem_malloc>
 8017c82:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8017c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d101      	bne.n	8017c8e <pbuf_alloc+0x16a>
        return NULL;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	e02b      	b.n	8017ce6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017c8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c90:	3310      	adds	r3, #16
 8017c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c94:	4413      	add	r3, r2
 8017c96:	3303      	adds	r3, #3
 8017c98:	f023 0303 	bic.w	r3, r3, #3
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	88b9      	ldrh	r1, [r7, #4]
 8017ca0:	88ba      	ldrh	r2, [r7, #4]
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	887b      	ldrh	r3, [r7, #2]
 8017ca8:	9300      	str	r3, [sp, #0]
 8017caa:	460b      	mov	r3, r1
 8017cac:	4601      	mov	r1, r0
 8017cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cb0:	f7ff ff0e 	bl	8017ad0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8017cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb6:	685b      	ldr	r3, [r3, #4]
 8017cb8:	f003 0303 	and.w	r3, r3, #3
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d010      	beq.n	8017ce2 <pbuf_alloc+0x1be>
 8017cc0:	4b0b      	ldr	r3, [pc, #44]	; (8017cf0 <pbuf_alloc+0x1cc>)
 8017cc2:	f240 1223 	movw	r2, #291	; 0x123
 8017cc6:	490e      	ldr	r1, [pc, #56]	; (8017d00 <pbuf_alloc+0x1dc>)
 8017cc8:	480b      	ldr	r0, [pc, #44]	; (8017cf8 <pbuf_alloc+0x1d4>)
 8017cca:	f00c fd69 	bl	80247a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8017cce:	e008      	b.n	8017ce2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8017cd0:	4b07      	ldr	r3, [pc, #28]	; (8017cf0 <pbuf_alloc+0x1cc>)
 8017cd2:	f240 1227 	movw	r2, #295	; 0x127
 8017cd6:	490b      	ldr	r1, [pc, #44]	; (8017d04 <pbuf_alloc+0x1e0>)
 8017cd8:	4807      	ldr	r0, [pc, #28]	; (8017cf8 <pbuf_alloc+0x1d4>)
 8017cda:	f00c fd61 	bl	80247a0 <iprintf>
      return NULL;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	e001      	b.n	8017ce6 <pbuf_alloc+0x1c2>
      break;
 8017ce2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8017ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3728      	adds	r7, #40	; 0x28
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	0802667c 	.word	0x0802667c
 8017cf4:	080266ac 	.word	0x080266ac
 8017cf8:	080266dc 	.word	0x080266dc
 8017cfc:	08026704 	.word	0x08026704
 8017d00:	08026738 	.word	0x08026738
 8017d04:	08026764 	.word	0x08026764

08017d08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b086      	sub	sp, #24
 8017d0c:	af02      	add	r7, sp, #8
 8017d0e:	6078      	str	r0, [r7, #4]
 8017d10:	460b      	mov	r3, r1
 8017d12:	807b      	strh	r3, [r7, #2]
 8017d14:	4613      	mov	r3, r2
 8017d16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8017d18:	883b      	ldrh	r3, [r7, #0]
 8017d1a:	2b41      	cmp	r3, #65	; 0x41
 8017d1c:	d009      	beq.n	8017d32 <pbuf_alloc_reference+0x2a>
 8017d1e:	883b      	ldrh	r3, [r7, #0]
 8017d20:	2b01      	cmp	r3, #1
 8017d22:	d006      	beq.n	8017d32 <pbuf_alloc_reference+0x2a>
 8017d24:	4b0f      	ldr	r3, [pc, #60]	; (8017d64 <pbuf_alloc_reference+0x5c>)
 8017d26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8017d2a:	490f      	ldr	r1, [pc, #60]	; (8017d68 <pbuf_alloc_reference+0x60>)
 8017d2c:	480f      	ldr	r0, [pc, #60]	; (8017d6c <pbuf_alloc_reference+0x64>)
 8017d2e:	f00c fd37 	bl	80247a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8017d32:	200b      	movs	r0, #11
 8017d34:	f7ff fabe 	bl	80172b4 <memp_malloc>
 8017d38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d101      	bne.n	8017d44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8017d40:	2300      	movs	r3, #0
 8017d42:	e00b      	b.n	8017d5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8017d44:	8879      	ldrh	r1, [r7, #2]
 8017d46:	887a      	ldrh	r2, [r7, #2]
 8017d48:	2300      	movs	r3, #0
 8017d4a:	9301      	str	r3, [sp, #4]
 8017d4c:	883b      	ldrh	r3, [r7, #0]
 8017d4e:	9300      	str	r3, [sp, #0]
 8017d50:	460b      	mov	r3, r1
 8017d52:	6879      	ldr	r1, [r7, #4]
 8017d54:	68f8      	ldr	r0, [r7, #12]
 8017d56:	f7ff febb 	bl	8017ad0 <pbuf_init_alloced_pbuf>
  return p;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3710      	adds	r7, #16
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	0802667c 	.word	0x0802667c
 8017d68:	08026780 	.word	0x08026780
 8017d6c:	080266dc 	.word	0x080266dc

08017d70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b088      	sub	sp, #32
 8017d74:	af02      	add	r7, sp, #8
 8017d76:	607b      	str	r3, [r7, #4]
 8017d78:	4603      	mov	r3, r0
 8017d7a:	73fb      	strb	r3, [r7, #15]
 8017d7c:	460b      	mov	r3, r1
 8017d7e:	81bb      	strh	r3, [r7, #12]
 8017d80:	4613      	mov	r3, r2
 8017d82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8017d84:	7bfb      	ldrb	r3, [r7, #15]
 8017d86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8017d88:	8a7b      	ldrh	r3, [r7, #18]
 8017d8a:	3303      	adds	r3, #3
 8017d8c:	f023 0203 	bic.w	r2, r3, #3
 8017d90:	89bb      	ldrh	r3, [r7, #12]
 8017d92:	441a      	add	r2, r3
 8017d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d901      	bls.n	8017d9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	e018      	b.n	8017dd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8017d9e:	6a3b      	ldr	r3, [r7, #32]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d007      	beq.n	8017db4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017da4:	8a7b      	ldrh	r3, [r7, #18]
 8017da6:	3303      	adds	r3, #3
 8017da8:	f023 0303 	bic.w	r3, r3, #3
 8017dac:	6a3a      	ldr	r2, [r7, #32]
 8017dae:	4413      	add	r3, r2
 8017db0:	617b      	str	r3, [r7, #20]
 8017db2:	e001      	b.n	8017db8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8017db4:	2300      	movs	r3, #0
 8017db6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8017db8:	6878      	ldr	r0, [r7, #4]
 8017dba:	89b9      	ldrh	r1, [r7, #12]
 8017dbc:	89ba      	ldrh	r2, [r7, #12]
 8017dbe:	2302      	movs	r3, #2
 8017dc0:	9301      	str	r3, [sp, #4]
 8017dc2:	897b      	ldrh	r3, [r7, #10]
 8017dc4:	9300      	str	r3, [sp, #0]
 8017dc6:	460b      	mov	r3, r1
 8017dc8:	6979      	ldr	r1, [r7, #20]
 8017dca:	f7ff fe81 	bl	8017ad0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8017dce:	687b      	ldr	r3, [r7, #4]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3718      	adds	r7, #24
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b084      	sub	sp, #16
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	460b      	mov	r3, r1
 8017de2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d106      	bne.n	8017df8 <pbuf_realloc+0x20>
 8017dea:	4b3a      	ldr	r3, [pc, #232]	; (8017ed4 <pbuf_realloc+0xfc>)
 8017dec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017df0:	4939      	ldr	r1, [pc, #228]	; (8017ed8 <pbuf_realloc+0x100>)
 8017df2:	483a      	ldr	r0, [pc, #232]	; (8017edc <pbuf_realloc+0x104>)
 8017df4:	f00c fcd4 	bl	80247a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	891b      	ldrh	r3, [r3, #8]
 8017dfc:	887a      	ldrh	r2, [r7, #2]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d264      	bcs.n	8017ecc <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	891a      	ldrh	r2, [r3, #8]
 8017e06:	887b      	ldrh	r3, [r7, #2]
 8017e08:	1ad3      	subs	r3, r2, r3
 8017e0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8017e0c:	887b      	ldrh	r3, [r7, #2]
 8017e0e:	817b      	strh	r3, [r7, #10]
  q = p;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8017e14:	e018      	b.n	8017e48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	895b      	ldrh	r3, [r3, #10]
 8017e1a:	897a      	ldrh	r2, [r7, #10]
 8017e1c:	1ad3      	subs	r3, r2, r3
 8017e1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	891a      	ldrh	r2, [r3, #8]
 8017e24:	893b      	ldrh	r3, [r7, #8]
 8017e26:	1ad3      	subs	r3, r2, r3
 8017e28:	b29a      	uxth	r2, r3
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d106      	bne.n	8017e48 <pbuf_realloc+0x70>
 8017e3a:	4b26      	ldr	r3, [pc, #152]	; (8017ed4 <pbuf_realloc+0xfc>)
 8017e3c:	f240 12af 	movw	r2, #431	; 0x1af
 8017e40:	4927      	ldr	r1, [pc, #156]	; (8017ee0 <pbuf_realloc+0x108>)
 8017e42:	4826      	ldr	r0, [pc, #152]	; (8017edc <pbuf_realloc+0x104>)
 8017e44:	f00c fcac 	bl	80247a0 <iprintf>
  while (rem_len > q->len) {
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	895b      	ldrh	r3, [r3, #10]
 8017e4c:	897a      	ldrh	r2, [r7, #10]
 8017e4e:	429a      	cmp	r2, r3
 8017e50:	d8e1      	bhi.n	8017e16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	7b1b      	ldrb	r3, [r3, #12]
 8017e56:	f003 030f 	and.w	r3, r3, #15
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d122      	bne.n	8017ea4 <pbuf_realloc+0xcc>
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	895b      	ldrh	r3, [r3, #10]
 8017e62:	897a      	ldrh	r2, [r7, #10]
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d01d      	beq.n	8017ea4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	7b5b      	ldrb	r3, [r3, #13]
 8017e6c:	f003 0302 	and.w	r3, r3, #2
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d117      	bne.n	8017ea4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	685b      	ldr	r3, [r3, #4]
 8017e78:	461a      	mov	r2, r3
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	1ad3      	subs	r3, r2, r3
 8017e7e:	b29a      	uxth	r2, r3
 8017e80:	897b      	ldrh	r3, [r7, #10]
 8017e82:	4413      	add	r3, r2
 8017e84:	b29b      	uxth	r3, r3
 8017e86:	4619      	mov	r1, r3
 8017e88:	68f8      	ldr	r0, [r7, #12]
 8017e8a:	f7fe ff87 	bl	8016d9c <mem_trim>
 8017e8e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d106      	bne.n	8017ea4 <pbuf_realloc+0xcc>
 8017e96:	4b0f      	ldr	r3, [pc, #60]	; (8017ed4 <pbuf_realloc+0xfc>)
 8017e98:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017e9c:	4911      	ldr	r1, [pc, #68]	; (8017ee4 <pbuf_realloc+0x10c>)
 8017e9e:	480f      	ldr	r0, [pc, #60]	; (8017edc <pbuf_realloc+0x104>)
 8017ea0:	f00c fc7e 	bl	80247a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	897a      	ldrh	r2, [r7, #10]
 8017ea8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	895a      	ldrh	r2, [r3, #10]
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d004      	beq.n	8017ec4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f000 f910 	bl	80180e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	601a      	str	r2, [r3, #0]
 8017eca:	e000      	b.n	8017ece <pbuf_realloc+0xf6>
    return;
 8017ecc:	bf00      	nop

}
 8017ece:	3710      	adds	r7, #16
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}
 8017ed4:	0802667c 	.word	0x0802667c
 8017ed8:	08026794 	.word	0x08026794
 8017edc:	080266dc 	.word	0x080266dc
 8017ee0:	080267ac 	.word	0x080267ac
 8017ee4:	080267c4 	.word	0x080267c4

08017ee8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	4613      	mov	r3, r2
 8017ef4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d106      	bne.n	8017f0a <pbuf_add_header_impl+0x22>
 8017efc:	4b2b      	ldr	r3, [pc, #172]	; (8017fac <pbuf_add_header_impl+0xc4>)
 8017efe:	f240 12df 	movw	r2, #479	; 0x1df
 8017f02:	492b      	ldr	r1, [pc, #172]	; (8017fb0 <pbuf_add_header_impl+0xc8>)
 8017f04:	482b      	ldr	r0, [pc, #172]	; (8017fb4 <pbuf_add_header_impl+0xcc>)
 8017f06:	f00c fc4b 	bl	80247a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d003      	beq.n	8017f18 <pbuf_add_header_impl+0x30>
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f16:	d301      	bcc.n	8017f1c <pbuf_add_header_impl+0x34>
    return 1;
 8017f18:	2301      	movs	r3, #1
 8017f1a:	e043      	b.n	8017fa4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d101      	bne.n	8017f26 <pbuf_add_header_impl+0x3e>
    return 0;
 8017f22:	2300      	movs	r3, #0
 8017f24:	e03e      	b.n	8017fa4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	891a      	ldrh	r2, [r3, #8]
 8017f2e:	8a7b      	ldrh	r3, [r7, #18]
 8017f30:	4413      	add	r3, r2
 8017f32:	b29b      	uxth	r3, r3
 8017f34:	8a7a      	ldrh	r2, [r7, #18]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d901      	bls.n	8017f3e <pbuf_add_header_impl+0x56>
    return 1;
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	e032      	b.n	8017fa4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	7b1b      	ldrb	r3, [r3, #12]
 8017f42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8017f44:	8a3b      	ldrh	r3, [r7, #16]
 8017f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d00c      	beq.n	8017f68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	685a      	ldr	r2, [r3, #4]
 8017f52:	68bb      	ldr	r3, [r7, #8]
 8017f54:	425b      	negs	r3, r3
 8017f56:	4413      	add	r3, r2
 8017f58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	3310      	adds	r3, #16
 8017f5e:	697a      	ldr	r2, [r7, #20]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d20d      	bcs.n	8017f80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8017f64:	2301      	movs	r3, #1
 8017f66:	e01d      	b.n	8017fa4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8017f68:	79fb      	ldrb	r3, [r7, #7]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d006      	beq.n	8017f7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	685a      	ldr	r2, [r3, #4]
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	425b      	negs	r3, r3
 8017f76:	4413      	add	r3, r2
 8017f78:	617b      	str	r3, [r7, #20]
 8017f7a:	e001      	b.n	8017f80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	e011      	b.n	8017fa4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	697a      	ldr	r2, [r7, #20]
 8017f84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	895a      	ldrh	r2, [r3, #10]
 8017f8a:	8a7b      	ldrh	r3, [r7, #18]
 8017f8c:	4413      	add	r3, r2
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	891a      	ldrh	r2, [r3, #8]
 8017f98:	8a7b      	ldrh	r3, [r7, #18]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	b29a      	uxth	r2, r3
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	811a      	strh	r2, [r3, #8]


  return 0;
 8017fa2:	2300      	movs	r3, #0
}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3718      	adds	r7, #24
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}
 8017fac:	0802667c 	.word	0x0802667c
 8017fb0:	080267e0 	.word	0x080267e0
 8017fb4:	080266dc 	.word	0x080266dc

08017fb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b082      	sub	sp, #8
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
 8017fc0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	6839      	ldr	r1, [r7, #0]
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f7ff ff8e 	bl	8017ee8 <pbuf_add_header_impl>
 8017fcc:	4603      	mov	r3, r0
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
	...

08017fd8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b084      	sub	sp, #16
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
 8017fe0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d106      	bne.n	8017ff6 <pbuf_remove_header+0x1e>
 8017fe8:	4b20      	ldr	r3, [pc, #128]	; (801806c <pbuf_remove_header+0x94>)
 8017fea:	f240 224b 	movw	r2, #587	; 0x24b
 8017fee:	4920      	ldr	r1, [pc, #128]	; (8018070 <pbuf_remove_header+0x98>)
 8017ff0:	4820      	ldr	r0, [pc, #128]	; (8018074 <pbuf_remove_header+0x9c>)
 8017ff2:	f00c fbd5 	bl	80247a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d003      	beq.n	8018004 <pbuf_remove_header+0x2c>
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018002:	d301      	bcc.n	8018008 <pbuf_remove_header+0x30>
    return 1;
 8018004:	2301      	movs	r3, #1
 8018006:	e02c      	b.n	8018062 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018008:	683b      	ldr	r3, [r7, #0]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d101      	bne.n	8018012 <pbuf_remove_header+0x3a>
    return 0;
 801800e:	2300      	movs	r3, #0
 8018010:	e027      	b.n	8018062 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018012:	683b      	ldr	r3, [r7, #0]
 8018014:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	895b      	ldrh	r3, [r3, #10]
 801801a:	89fa      	ldrh	r2, [r7, #14]
 801801c:	429a      	cmp	r2, r3
 801801e:	d908      	bls.n	8018032 <pbuf_remove_header+0x5a>
 8018020:	4b12      	ldr	r3, [pc, #72]	; (801806c <pbuf_remove_header+0x94>)
 8018022:	f240 2255 	movw	r2, #597	; 0x255
 8018026:	4914      	ldr	r1, [pc, #80]	; (8018078 <pbuf_remove_header+0xa0>)
 8018028:	4812      	ldr	r0, [pc, #72]	; (8018074 <pbuf_remove_header+0x9c>)
 801802a:	f00c fbb9 	bl	80247a0 <iprintf>
 801802e:	2301      	movs	r3, #1
 8018030:	e017      	b.n	8018062 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	685a      	ldr	r2, [r3, #4]
 801803c:	683b      	ldr	r3, [r7, #0]
 801803e:	441a      	add	r2, r3
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	895a      	ldrh	r2, [r3, #10]
 8018048:	89fb      	ldrh	r3, [r7, #14]
 801804a:	1ad3      	subs	r3, r2, r3
 801804c:	b29a      	uxth	r2, r3
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	891a      	ldrh	r2, [r3, #8]
 8018056:	89fb      	ldrh	r3, [r7, #14]
 8018058:	1ad3      	subs	r3, r2, r3
 801805a:	b29a      	uxth	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018060:	2300      	movs	r3, #0
}
 8018062:	4618      	mov	r0, r3
 8018064:	3710      	adds	r7, #16
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	0802667c 	.word	0x0802667c
 8018070:	080267e0 	.word	0x080267e0
 8018074:	080266dc 	.word	0x080266dc
 8018078:	080267ec 	.word	0x080267ec

0801807c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
 8018084:	460b      	mov	r3, r1
 8018086:	807b      	strh	r3, [r7, #2]
 8018088:	4613      	mov	r3, r2
 801808a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801808c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018090:	2b00      	cmp	r3, #0
 8018092:	da08      	bge.n	80180a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018094:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018098:	425b      	negs	r3, r3
 801809a:	4619      	mov	r1, r3
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f7ff ff9b 	bl	8017fd8 <pbuf_remove_header>
 80180a2:	4603      	mov	r3, r0
 80180a4:	e007      	b.n	80180b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80180a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80180aa:	787a      	ldrb	r2, [r7, #1]
 80180ac:	4619      	mov	r1, r3
 80180ae:	6878      	ldr	r0, [r7, #4]
 80180b0:	f7ff ff1a 	bl	8017ee8 <pbuf_add_header_impl>
 80180b4:	4603      	mov	r3, r0
  }
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	3708      	adds	r7, #8
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}

080180be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80180be:	b580      	push	{r7, lr}
 80180c0:	b082      	sub	sp, #8
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
 80180c6:	460b      	mov	r3, r1
 80180c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80180ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80180ce:	2201      	movs	r2, #1
 80180d0:	4619      	mov	r1, r3
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7ff ffd2 	bl	801807c <pbuf_header_impl>
 80180d8:	4603      	mov	r3, r0
}
 80180da:	4618      	mov	r0, r3
 80180dc:	3708      	adds	r7, #8
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}
	...

080180e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b088      	sub	sp, #32
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d10b      	bne.n	801810a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d106      	bne.n	8018106 <pbuf_free+0x22>
 80180f8:	4b3b      	ldr	r3, [pc, #236]	; (80181e8 <pbuf_free+0x104>)
 80180fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80180fe:	493b      	ldr	r1, [pc, #236]	; (80181ec <pbuf_free+0x108>)
 8018100:	483b      	ldr	r0, [pc, #236]	; (80181f0 <pbuf_free+0x10c>)
 8018102:	f00c fb4d 	bl	80247a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018106:	2300      	movs	r3, #0
 8018108:	e069      	b.n	80181de <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801810a:	2300      	movs	r3, #0
 801810c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801810e:	e062      	b.n	80181d6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018110:	f00b fd02 	bl	8023b18 <sys_arch_protect>
 8018114:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	7b9b      	ldrb	r3, [r3, #14]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d106      	bne.n	801812c <pbuf_free+0x48>
 801811e:	4b32      	ldr	r3, [pc, #200]	; (80181e8 <pbuf_free+0x104>)
 8018120:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018124:	4933      	ldr	r1, [pc, #204]	; (80181f4 <pbuf_free+0x110>)
 8018126:	4832      	ldr	r0, [pc, #200]	; (80181f0 <pbuf_free+0x10c>)
 8018128:	f00c fb3a 	bl	80247a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	7b9b      	ldrb	r3, [r3, #14]
 8018130:	3b01      	subs	r3, #1
 8018132:	b2da      	uxtb	r2, r3
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	739a      	strb	r2, [r3, #14]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	7b9b      	ldrb	r3, [r3, #14]
 801813c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801813e:	69b8      	ldr	r0, [r7, #24]
 8018140:	f00b fcf8 	bl	8023b34 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018144:	7dfb      	ldrb	r3, [r7, #23]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d143      	bne.n	80181d2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	7b1b      	ldrb	r3, [r3, #12]
 8018154:	f003 030f 	and.w	r3, r3, #15
 8018158:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	7b5b      	ldrb	r3, [r3, #13]
 801815e:	f003 0302 	and.w	r3, r3, #2
 8018162:	2b00      	cmp	r3, #0
 8018164:	d011      	beq.n	801818a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	691b      	ldr	r3, [r3, #16]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d106      	bne.n	8018180 <pbuf_free+0x9c>
 8018172:	4b1d      	ldr	r3, [pc, #116]	; (80181e8 <pbuf_free+0x104>)
 8018174:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018178:	491f      	ldr	r1, [pc, #124]	; (80181f8 <pbuf_free+0x114>)
 801817a:	481d      	ldr	r0, [pc, #116]	; (80181f0 <pbuf_free+0x10c>)
 801817c:	f00c fb10 	bl	80247a0 <iprintf>
        pc->custom_free_function(p);
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	691b      	ldr	r3, [r3, #16]
 8018184:	6878      	ldr	r0, [r7, #4]
 8018186:	4798      	blx	r3
 8018188:	e01d      	b.n	80181c6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801818a:	7bfb      	ldrb	r3, [r7, #15]
 801818c:	2b02      	cmp	r3, #2
 801818e:	d104      	bne.n	801819a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8018190:	6879      	ldr	r1, [r7, #4]
 8018192:	200c      	movs	r0, #12
 8018194:	f7ff f8e0 	bl	8017358 <memp_free>
 8018198:	e015      	b.n	80181c6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801819a:	7bfb      	ldrb	r3, [r7, #15]
 801819c:	2b01      	cmp	r3, #1
 801819e:	d104      	bne.n	80181aa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80181a0:	6879      	ldr	r1, [r7, #4]
 80181a2:	200b      	movs	r0, #11
 80181a4:	f7ff f8d8 	bl	8017358 <memp_free>
 80181a8:	e00d      	b.n	80181c6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80181aa:	7bfb      	ldrb	r3, [r7, #15]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d103      	bne.n	80181b8 <pbuf_free+0xd4>
          mem_free(p);
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f7fe fd63 	bl	8016c7c <mem_free>
 80181b6:	e006      	b.n	80181c6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80181b8:	4b0b      	ldr	r3, [pc, #44]	; (80181e8 <pbuf_free+0x104>)
 80181ba:	f240 320f 	movw	r2, #783	; 0x30f
 80181be:	490f      	ldr	r1, [pc, #60]	; (80181fc <pbuf_free+0x118>)
 80181c0:	480b      	ldr	r0, [pc, #44]	; (80181f0 <pbuf_free+0x10c>)
 80181c2:	f00c faed 	bl	80247a0 <iprintf>
        }
      }
      count++;
 80181c6:	7ffb      	ldrb	r3, [r7, #31]
 80181c8:	3301      	adds	r3, #1
 80181ca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	607b      	str	r3, [r7, #4]
 80181d0:	e001      	b.n	80181d6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80181d2:	2300      	movs	r3, #0
 80181d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d199      	bne.n	8018110 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80181dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80181de:	4618      	mov	r0, r3
 80181e0:	3720      	adds	r7, #32
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	0802667c 	.word	0x0802667c
 80181ec:	080267e0 	.word	0x080267e0
 80181f0:	080266dc 	.word	0x080266dc
 80181f4:	0802680c 	.word	0x0802680c
 80181f8:	08026824 	.word	0x08026824
 80181fc:	08026848 	.word	0x08026848

08018200 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018200:	b480      	push	{r7}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018208:	2300      	movs	r3, #0
 801820a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801820c:	e005      	b.n	801821a <pbuf_clen+0x1a>
    ++len;
 801820e:	89fb      	ldrh	r3, [r7, #14]
 8018210:	3301      	adds	r3, #1
 8018212:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1f6      	bne.n	801820e <pbuf_clen+0xe>
  }
  return len;
 8018220:	89fb      	ldrh	r3, [r7, #14]
}
 8018222:	4618      	mov	r0, r3
 8018224:	3714      	adds	r7, #20
 8018226:	46bd      	mov	sp, r7
 8018228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822c:	4770      	bx	lr
	...

08018230 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d016      	beq.n	801826c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801823e:	f00b fc6b 	bl	8023b18 <sys_arch_protect>
 8018242:	60f8      	str	r0, [r7, #12]
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	7b9b      	ldrb	r3, [r3, #14]
 8018248:	3301      	adds	r3, #1
 801824a:	b2da      	uxtb	r2, r3
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	739a      	strb	r2, [r3, #14]
 8018250:	68f8      	ldr	r0, [r7, #12]
 8018252:	f00b fc6f 	bl	8023b34 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	7b9b      	ldrb	r3, [r3, #14]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d106      	bne.n	801826c <pbuf_ref+0x3c>
 801825e:	4b05      	ldr	r3, [pc, #20]	; (8018274 <pbuf_ref+0x44>)
 8018260:	f240 3242 	movw	r2, #834	; 0x342
 8018264:	4904      	ldr	r1, [pc, #16]	; (8018278 <pbuf_ref+0x48>)
 8018266:	4805      	ldr	r0, [pc, #20]	; (801827c <pbuf_ref+0x4c>)
 8018268:	f00c fa9a 	bl	80247a0 <iprintf>
  }
}
 801826c:	bf00      	nop
 801826e:	3710      	adds	r7, #16
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	0802667c 	.word	0x0802667c
 8018278:	0802685c 	.word	0x0802685c
 801827c:	080266dc 	.word	0x080266dc

08018280 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b084      	sub	sp, #16
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d002      	beq.n	8018296 <pbuf_cat+0x16>
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d107      	bne.n	80182a6 <pbuf_cat+0x26>
 8018296:	4b20      	ldr	r3, [pc, #128]	; (8018318 <pbuf_cat+0x98>)
 8018298:	f240 325a 	movw	r2, #858	; 0x35a
 801829c:	491f      	ldr	r1, [pc, #124]	; (801831c <pbuf_cat+0x9c>)
 801829e:	4820      	ldr	r0, [pc, #128]	; (8018320 <pbuf_cat+0xa0>)
 80182a0:	f00c fa7e 	bl	80247a0 <iprintf>
 80182a4:	e034      	b.n	8018310 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	60fb      	str	r3, [r7, #12]
 80182aa:	e00a      	b.n	80182c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	891a      	ldrh	r2, [r3, #8]
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	891b      	ldrh	r3, [r3, #8]
 80182b4:	4413      	add	r3, r2
 80182b6:	b29a      	uxth	r2, r3
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	60fb      	str	r3, [r7, #12]
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d1f0      	bne.n	80182ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	891a      	ldrh	r2, [r3, #8]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	895b      	ldrh	r3, [r3, #10]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	d006      	beq.n	80182e4 <pbuf_cat+0x64>
 80182d6:	4b10      	ldr	r3, [pc, #64]	; (8018318 <pbuf_cat+0x98>)
 80182d8:	f240 3262 	movw	r2, #866	; 0x362
 80182dc:	4911      	ldr	r1, [pc, #68]	; (8018324 <pbuf_cat+0xa4>)
 80182de:	4810      	ldr	r0, [pc, #64]	; (8018320 <pbuf_cat+0xa0>)
 80182e0:	f00c fa5e 	bl	80247a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d006      	beq.n	80182fa <pbuf_cat+0x7a>
 80182ec:	4b0a      	ldr	r3, [pc, #40]	; (8018318 <pbuf_cat+0x98>)
 80182ee:	f240 3263 	movw	r2, #867	; 0x363
 80182f2:	490d      	ldr	r1, [pc, #52]	; (8018328 <pbuf_cat+0xa8>)
 80182f4:	480a      	ldr	r0, [pc, #40]	; (8018320 <pbuf_cat+0xa0>)
 80182f6:	f00c fa53 	bl	80247a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	891a      	ldrh	r2, [r3, #8]
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	891b      	ldrh	r3, [r3, #8]
 8018302:	4413      	add	r3, r2
 8018304:	b29a      	uxth	r2, r3
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	683a      	ldr	r2, [r7, #0]
 801830e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8018310:	3710      	adds	r7, #16
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}
 8018316:	bf00      	nop
 8018318:	0802667c 	.word	0x0802667c
 801831c:	08026870 	.word	0x08026870
 8018320:	080266dc 	.word	0x080266dc
 8018324:	080268a8 	.word	0x080268a8
 8018328:	080268d8 	.word	0x080268d8

0801832c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8018336:	6839      	ldr	r1, [r7, #0]
 8018338:	6878      	ldr	r0, [r7, #4]
 801833a:	f7ff ffa1 	bl	8018280 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801833e:	6838      	ldr	r0, [r7, #0]
 8018340:	f7ff ff76 	bl	8018230 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8018344:	bf00      	nop
 8018346:	3708      	adds	r7, #8
 8018348:	46bd      	mov	sp, r7
 801834a:	bd80      	pop	{r7, pc}

0801834c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b086      	sub	sp, #24
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018356:	2300      	movs	r3, #0
 8018358:	617b      	str	r3, [r7, #20]
 801835a:	2300      	movs	r3, #0
 801835c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d008      	beq.n	8018376 <pbuf_copy+0x2a>
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d005      	beq.n	8018376 <pbuf_copy+0x2a>
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	891a      	ldrh	r2, [r3, #8]
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	891b      	ldrh	r3, [r3, #8]
 8018372:	429a      	cmp	r2, r3
 8018374:	d209      	bcs.n	801838a <pbuf_copy+0x3e>
 8018376:	4b57      	ldr	r3, [pc, #348]	; (80184d4 <pbuf_copy+0x188>)
 8018378:	f240 32ca 	movw	r2, #970	; 0x3ca
 801837c:	4956      	ldr	r1, [pc, #344]	; (80184d8 <pbuf_copy+0x18c>)
 801837e:	4857      	ldr	r0, [pc, #348]	; (80184dc <pbuf_copy+0x190>)
 8018380:	f00c fa0e 	bl	80247a0 <iprintf>
 8018384:	f06f 030f 	mvn.w	r3, #15
 8018388:	e09f      	b.n	80184ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	895b      	ldrh	r3, [r3, #10]
 801838e:	461a      	mov	r2, r3
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	1ad2      	subs	r2, r2, r3
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	895b      	ldrh	r3, [r3, #10]
 8018398:	4619      	mov	r1, r3
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	1acb      	subs	r3, r1, r3
 801839e:	429a      	cmp	r2, r3
 80183a0:	d306      	bcc.n	80183b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	895b      	ldrh	r3, [r3, #10]
 80183a6:	461a      	mov	r2, r3
 80183a8:	693b      	ldr	r3, [r7, #16]
 80183aa:	1ad3      	subs	r3, r2, r3
 80183ac:	60fb      	str	r3, [r7, #12]
 80183ae:	e005      	b.n	80183bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	895b      	ldrh	r3, [r3, #10]
 80183b4:	461a      	mov	r2, r3
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	1ad3      	subs	r3, r2, r3
 80183ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	685a      	ldr	r2, [r3, #4]
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	18d0      	adds	r0, r2, r3
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	685a      	ldr	r2, [r3, #4]
 80183c8:	693b      	ldr	r3, [r7, #16]
 80183ca:	4413      	add	r3, r2
 80183cc:	68fa      	ldr	r2, [r7, #12]
 80183ce:	4619      	mov	r1, r3
 80183d0:	f00c f92b 	bl	802462a <memcpy>
    offset_to += len;
 80183d4:	697a      	ldr	r2, [r7, #20]
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	4413      	add	r3, r2
 80183da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80183dc:	693a      	ldr	r2, [r7, #16]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	4413      	add	r3, r2
 80183e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	895b      	ldrh	r3, [r3, #10]
 80183e8:	461a      	mov	r2, r3
 80183ea:	697b      	ldr	r3, [r7, #20]
 80183ec:	4293      	cmp	r3, r2
 80183ee:	d906      	bls.n	80183fe <pbuf_copy+0xb2>
 80183f0:	4b38      	ldr	r3, [pc, #224]	; (80184d4 <pbuf_copy+0x188>)
 80183f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80183f6:	493a      	ldr	r1, [pc, #232]	; (80184e0 <pbuf_copy+0x194>)
 80183f8:	4838      	ldr	r0, [pc, #224]	; (80184dc <pbuf_copy+0x190>)
 80183fa:	f00c f9d1 	bl	80247a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	895b      	ldrh	r3, [r3, #10]
 8018402:	461a      	mov	r2, r3
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	4293      	cmp	r3, r2
 8018408:	d906      	bls.n	8018418 <pbuf_copy+0xcc>
 801840a:	4b32      	ldr	r3, [pc, #200]	; (80184d4 <pbuf_copy+0x188>)
 801840c:	f240 32da 	movw	r2, #986	; 0x3da
 8018410:	4934      	ldr	r1, [pc, #208]	; (80184e4 <pbuf_copy+0x198>)
 8018412:	4832      	ldr	r0, [pc, #200]	; (80184dc <pbuf_copy+0x190>)
 8018414:	f00c f9c4 	bl	80247a0 <iprintf>
    if (offset_from >= p_from->len) {
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	895b      	ldrh	r3, [r3, #10]
 801841c:	461a      	mov	r2, r3
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	4293      	cmp	r3, r2
 8018422:	d304      	bcc.n	801842e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	895b      	ldrh	r3, [r3, #10]
 8018432:	461a      	mov	r2, r3
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	4293      	cmp	r3, r2
 8018438:	d114      	bne.n	8018464 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801843a:	2300      	movs	r3, #0
 801843c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d10c      	bne.n	8018464 <pbuf_copy+0x118>
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d009      	beq.n	8018464 <pbuf_copy+0x118>
 8018450:	4b20      	ldr	r3, [pc, #128]	; (80184d4 <pbuf_copy+0x188>)
 8018452:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018456:	4924      	ldr	r1, [pc, #144]	; (80184e8 <pbuf_copy+0x19c>)
 8018458:	4820      	ldr	r0, [pc, #128]	; (80184dc <pbuf_copy+0x190>)
 801845a:	f00c f9a1 	bl	80247a0 <iprintf>
 801845e:	f06f 030f 	mvn.w	r3, #15
 8018462:	e032      	b.n	80184ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d013      	beq.n	8018492 <pbuf_copy+0x146>
 801846a:	683b      	ldr	r3, [r7, #0]
 801846c:	895a      	ldrh	r2, [r3, #10]
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	891b      	ldrh	r3, [r3, #8]
 8018472:	429a      	cmp	r2, r3
 8018474:	d10d      	bne.n	8018492 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d009      	beq.n	8018492 <pbuf_copy+0x146>
 801847e:	4b15      	ldr	r3, [pc, #84]	; (80184d4 <pbuf_copy+0x188>)
 8018480:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8018484:	4919      	ldr	r1, [pc, #100]	; (80184ec <pbuf_copy+0x1a0>)
 8018486:	4815      	ldr	r0, [pc, #84]	; (80184dc <pbuf_copy+0x190>)
 8018488:	f00c f98a 	bl	80247a0 <iprintf>
 801848c:	f06f 0305 	mvn.w	r3, #5
 8018490:	e01b      	b.n	80184ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d013      	beq.n	80184c0 <pbuf_copy+0x174>
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	895a      	ldrh	r2, [r3, #10]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	891b      	ldrh	r3, [r3, #8]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d10d      	bne.n	80184c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d009      	beq.n	80184c0 <pbuf_copy+0x174>
 80184ac:	4b09      	ldr	r3, [pc, #36]	; (80184d4 <pbuf_copy+0x188>)
 80184ae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80184b2:	490e      	ldr	r1, [pc, #56]	; (80184ec <pbuf_copy+0x1a0>)
 80184b4:	4809      	ldr	r0, [pc, #36]	; (80184dc <pbuf_copy+0x190>)
 80184b6:	f00c f973 	bl	80247a0 <iprintf>
 80184ba:	f06f 0305 	mvn.w	r3, #5
 80184be:	e004      	b.n	80184ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	f47f af61 	bne.w	801838a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80184c8:	2300      	movs	r3, #0
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3718      	adds	r7, #24
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}
 80184d2:	bf00      	nop
 80184d4:	0802667c 	.word	0x0802667c
 80184d8:	08026924 	.word	0x08026924
 80184dc:	080266dc 	.word	0x080266dc
 80184e0:	08026954 	.word	0x08026954
 80184e4:	0802696c 	.word	0x0802696c
 80184e8:	08026988 	.word	0x08026988
 80184ec:	08026998 	.word	0x08026998

080184f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b088      	sub	sp, #32
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	60f8      	str	r0, [r7, #12]
 80184f8:	60b9      	str	r1, [r7, #8]
 80184fa:	4611      	mov	r1, r2
 80184fc:	461a      	mov	r2, r3
 80184fe:	460b      	mov	r3, r1
 8018500:	80fb      	strh	r3, [r7, #6]
 8018502:	4613      	mov	r3, r2
 8018504:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018506:	2300      	movs	r3, #0
 8018508:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801850a:	2300      	movs	r3, #0
 801850c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d108      	bne.n	8018526 <pbuf_copy_partial+0x36>
 8018514:	4b2b      	ldr	r3, [pc, #172]	; (80185c4 <pbuf_copy_partial+0xd4>)
 8018516:	f240 420a 	movw	r2, #1034	; 0x40a
 801851a:	492b      	ldr	r1, [pc, #172]	; (80185c8 <pbuf_copy_partial+0xd8>)
 801851c:	482b      	ldr	r0, [pc, #172]	; (80185cc <pbuf_copy_partial+0xdc>)
 801851e:	f00c f93f 	bl	80247a0 <iprintf>
 8018522:	2300      	movs	r3, #0
 8018524:	e04a      	b.n	80185bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018526:	68bb      	ldr	r3, [r7, #8]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d108      	bne.n	801853e <pbuf_copy_partial+0x4e>
 801852c:	4b25      	ldr	r3, [pc, #148]	; (80185c4 <pbuf_copy_partial+0xd4>)
 801852e:	f240 420b 	movw	r2, #1035	; 0x40b
 8018532:	4927      	ldr	r1, [pc, #156]	; (80185d0 <pbuf_copy_partial+0xe0>)
 8018534:	4825      	ldr	r0, [pc, #148]	; (80185cc <pbuf_copy_partial+0xdc>)
 8018536:	f00c f933 	bl	80247a0 <iprintf>
 801853a:	2300      	movs	r3, #0
 801853c:	e03e      	b.n	80185bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	61fb      	str	r3, [r7, #28]
 8018542:	e034      	b.n	80185ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018544:	88bb      	ldrh	r3, [r7, #4]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d00a      	beq.n	8018560 <pbuf_copy_partial+0x70>
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	895b      	ldrh	r3, [r3, #10]
 801854e:	88ba      	ldrh	r2, [r7, #4]
 8018550:	429a      	cmp	r2, r3
 8018552:	d305      	bcc.n	8018560 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018554:	69fb      	ldr	r3, [r7, #28]
 8018556:	895b      	ldrh	r3, [r3, #10]
 8018558:	88ba      	ldrh	r2, [r7, #4]
 801855a:	1ad3      	subs	r3, r2, r3
 801855c:	80bb      	strh	r3, [r7, #4]
 801855e:	e023      	b.n	80185a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	895a      	ldrh	r2, [r3, #10]
 8018564:	88bb      	ldrh	r3, [r7, #4]
 8018566:	1ad3      	subs	r3, r2, r3
 8018568:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801856a:	8b3a      	ldrh	r2, [r7, #24]
 801856c:	88fb      	ldrh	r3, [r7, #6]
 801856e:	429a      	cmp	r2, r3
 8018570:	d901      	bls.n	8018576 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8018572:	88fb      	ldrh	r3, [r7, #6]
 8018574:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018576:	8b7b      	ldrh	r3, [r7, #26]
 8018578:	68ba      	ldr	r2, [r7, #8]
 801857a:	18d0      	adds	r0, r2, r3
 801857c:	69fb      	ldr	r3, [r7, #28]
 801857e:	685a      	ldr	r2, [r3, #4]
 8018580:	88bb      	ldrh	r3, [r7, #4]
 8018582:	4413      	add	r3, r2
 8018584:	8b3a      	ldrh	r2, [r7, #24]
 8018586:	4619      	mov	r1, r3
 8018588:	f00c f84f 	bl	802462a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801858c:	8afa      	ldrh	r2, [r7, #22]
 801858e:	8b3b      	ldrh	r3, [r7, #24]
 8018590:	4413      	add	r3, r2
 8018592:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8018594:	8b7a      	ldrh	r2, [r7, #26]
 8018596:	8b3b      	ldrh	r3, [r7, #24]
 8018598:	4413      	add	r3, r2
 801859a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801859c:	88fa      	ldrh	r2, [r7, #6]
 801859e:	8b3b      	ldrh	r3, [r7, #24]
 80185a0:	1ad3      	subs	r3, r2, r3
 80185a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80185a4:	2300      	movs	r3, #0
 80185a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80185a8:	69fb      	ldr	r3, [r7, #28]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	61fb      	str	r3, [r7, #28]
 80185ae:	88fb      	ldrh	r3, [r7, #6]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d002      	beq.n	80185ba <pbuf_copy_partial+0xca>
 80185b4:	69fb      	ldr	r3, [r7, #28]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d1c4      	bne.n	8018544 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80185ba:	8afb      	ldrh	r3, [r7, #22]
}
 80185bc:	4618      	mov	r0, r3
 80185be:	3720      	adds	r7, #32
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	0802667c 	.word	0x0802667c
 80185c8:	080269c4 	.word	0x080269c4
 80185cc:	080266dc 	.word	0x080266dc
 80185d0:	080269e4 	.word	0x080269e4

080185d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b084      	sub	sp, #16
 80185d8:	af00      	add	r7, sp, #0
 80185da:	4603      	mov	r3, r0
 80185dc:	603a      	str	r2, [r7, #0]
 80185de:	71fb      	strb	r3, [r7, #7]
 80185e0:	460b      	mov	r3, r1
 80185e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	8919      	ldrh	r1, [r3, #8]
 80185e8:	88ba      	ldrh	r2, [r7, #4]
 80185ea:	79fb      	ldrb	r3, [r7, #7]
 80185ec:	4618      	mov	r0, r3
 80185ee:	f7ff fa99 	bl	8017b24 <pbuf_alloc>
 80185f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d101      	bne.n	80185fe <pbuf_clone+0x2a>
    return NULL;
 80185fa:	2300      	movs	r3, #0
 80185fc:	e011      	b.n	8018622 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80185fe:	6839      	ldr	r1, [r7, #0]
 8018600:	68f8      	ldr	r0, [r7, #12]
 8018602:	f7ff fea3 	bl	801834c <pbuf_copy>
 8018606:	4603      	mov	r3, r0
 8018608:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801860a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d006      	beq.n	8018620 <pbuf_clone+0x4c>
 8018612:	4b06      	ldr	r3, [pc, #24]	; (801862c <pbuf_clone+0x58>)
 8018614:	f240 5224 	movw	r2, #1316	; 0x524
 8018618:	4905      	ldr	r1, [pc, #20]	; (8018630 <pbuf_clone+0x5c>)
 801861a:	4806      	ldr	r0, [pc, #24]	; (8018634 <pbuf_clone+0x60>)
 801861c:	f00c f8c0 	bl	80247a0 <iprintf>
  return q;
 8018620:	68fb      	ldr	r3, [r7, #12]
}
 8018622:	4618      	mov	r0, r3
 8018624:	3710      	adds	r7, #16
 8018626:	46bd      	mov	sp, r7
 8018628:	bd80      	pop	{r7, pc}
 801862a:	bf00      	nop
 801862c:	0802667c 	.word	0x0802667c
 8018630:	08026af0 	.word	0x08026af0
 8018634:	080266dc 	.word	0x080266dc

08018638 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801863c:	f00c f92c 	bl	8024898 <rand>
 8018640:	4603      	mov	r3, r0
 8018642:	b29b      	uxth	r3, r3
 8018644:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018648:	b29b      	uxth	r3, r3
 801864a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801864e:	b29a      	uxth	r2, r3
 8018650:	4b01      	ldr	r3, [pc, #4]	; (8018658 <tcp_init+0x20>)
 8018652:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018654:	bf00      	nop
 8018656:	bd80      	pop	{r7, pc}
 8018658:	20000034 	.word	0x20000034

0801865c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b082      	sub	sp, #8
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	7d1b      	ldrb	r3, [r3, #20]
 8018668:	2b01      	cmp	r3, #1
 801866a:	d105      	bne.n	8018678 <tcp_free+0x1c>
 801866c:	4b06      	ldr	r3, [pc, #24]	; (8018688 <tcp_free+0x2c>)
 801866e:	22d4      	movs	r2, #212	; 0xd4
 8018670:	4906      	ldr	r1, [pc, #24]	; (801868c <tcp_free+0x30>)
 8018672:	4807      	ldr	r0, [pc, #28]	; (8018690 <tcp_free+0x34>)
 8018674:	f00c f894 	bl	80247a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018678:	6879      	ldr	r1, [r7, #4]
 801867a:	2001      	movs	r0, #1
 801867c:	f7fe fe6c 	bl	8017358 <memp_free>
}
 8018680:	bf00      	nop
 8018682:	3708      	adds	r7, #8
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}
 8018688:	08026b7c 	.word	0x08026b7c
 801868c:	08026bac 	.word	0x08026bac
 8018690:	08026bc0 	.word	0x08026bc0

08018694 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b082      	sub	sp, #8
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	7d1b      	ldrb	r3, [r3, #20]
 80186a0:	2b01      	cmp	r3, #1
 80186a2:	d105      	bne.n	80186b0 <tcp_free_listen+0x1c>
 80186a4:	4b06      	ldr	r3, [pc, #24]	; (80186c0 <tcp_free_listen+0x2c>)
 80186a6:	22df      	movs	r2, #223	; 0xdf
 80186a8:	4906      	ldr	r1, [pc, #24]	; (80186c4 <tcp_free_listen+0x30>)
 80186aa:	4807      	ldr	r0, [pc, #28]	; (80186c8 <tcp_free_listen+0x34>)
 80186ac:	f00c f878 	bl	80247a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80186b0:	6879      	ldr	r1, [r7, #4]
 80186b2:	2002      	movs	r0, #2
 80186b4:	f7fe fe50 	bl	8017358 <memp_free>
}
 80186b8:	bf00      	nop
 80186ba:	3708      	adds	r7, #8
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}
 80186c0:	08026b7c 	.word	0x08026b7c
 80186c4:	08026be8 	.word	0x08026be8
 80186c8:	08026bc0 	.word	0x08026bc0

080186cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80186d0:	f001 f89a 	bl	8019808 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80186d4:	4b07      	ldr	r3, [pc, #28]	; (80186f4 <tcp_tmr+0x28>)
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	3301      	adds	r3, #1
 80186da:	b2da      	uxtb	r2, r3
 80186dc:	4b05      	ldr	r3, [pc, #20]	; (80186f4 <tcp_tmr+0x28>)
 80186de:	701a      	strb	r2, [r3, #0]
 80186e0:	4b04      	ldr	r3, [pc, #16]	; (80186f4 <tcp_tmr+0x28>)
 80186e2:	781b      	ldrb	r3, [r3, #0]
 80186e4:	f003 0301 	and.w	r3, r3, #1
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d001      	beq.n	80186f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80186ec:	f000 fd4e 	bl	801918c <tcp_slowtmr>
  }
}
 80186f0:	bf00      	nop
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	20008fc1 	.word	0x20008fc1

080186f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
 8018700:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018702:	683b      	ldr	r3, [r7, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d105      	bne.n	8018714 <tcp_remove_listener+0x1c>
 8018708:	4b0d      	ldr	r3, [pc, #52]	; (8018740 <tcp_remove_listener+0x48>)
 801870a:	22ff      	movs	r2, #255	; 0xff
 801870c:	490d      	ldr	r1, [pc, #52]	; (8018744 <tcp_remove_listener+0x4c>)
 801870e:	480e      	ldr	r0, [pc, #56]	; (8018748 <tcp_remove_listener+0x50>)
 8018710:	f00c f846 	bl	80247a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	60fb      	str	r3, [r7, #12]
 8018718:	e00a      	b.n	8018730 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801871e:	683a      	ldr	r2, [r7, #0]
 8018720:	429a      	cmp	r2, r3
 8018722:	d102      	bne.n	801872a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2200      	movs	r2, #0
 8018728:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	68db      	ldr	r3, [r3, #12]
 801872e:	60fb      	str	r3, [r7, #12]
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d1f1      	bne.n	801871a <tcp_remove_listener+0x22>
    }
  }
}
 8018736:	bf00      	nop
 8018738:	3710      	adds	r7, #16
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}
 801873e:	bf00      	nop
 8018740:	08026b7c 	.word	0x08026b7c
 8018744:	08026c04 	.word	0x08026c04
 8018748:	08026bc0 	.word	0x08026bc0

0801874c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b084      	sub	sp, #16
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d106      	bne.n	8018768 <tcp_listen_closed+0x1c>
 801875a:	4b14      	ldr	r3, [pc, #80]	; (80187ac <tcp_listen_closed+0x60>)
 801875c:	f240 1211 	movw	r2, #273	; 0x111
 8018760:	4913      	ldr	r1, [pc, #76]	; (80187b0 <tcp_listen_closed+0x64>)
 8018762:	4814      	ldr	r0, [pc, #80]	; (80187b4 <tcp_listen_closed+0x68>)
 8018764:	f00c f81c 	bl	80247a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	7d1b      	ldrb	r3, [r3, #20]
 801876c:	2b01      	cmp	r3, #1
 801876e:	d006      	beq.n	801877e <tcp_listen_closed+0x32>
 8018770:	4b0e      	ldr	r3, [pc, #56]	; (80187ac <tcp_listen_closed+0x60>)
 8018772:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018776:	4910      	ldr	r1, [pc, #64]	; (80187b8 <tcp_listen_closed+0x6c>)
 8018778:	480e      	ldr	r0, [pc, #56]	; (80187b4 <tcp_listen_closed+0x68>)
 801877a:	f00c f811 	bl	80247a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801877e:	2301      	movs	r3, #1
 8018780:	60fb      	str	r3, [r7, #12]
 8018782:	e00b      	b.n	801879c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018784:	4a0d      	ldr	r2, [pc, #52]	; (80187bc <tcp_listen_closed+0x70>)
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	6879      	ldr	r1, [r7, #4]
 8018790:	4618      	mov	r0, r3
 8018792:	f7ff ffb1 	bl	80186f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	3301      	adds	r3, #1
 801879a:	60fb      	str	r3, [r7, #12]
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	2b03      	cmp	r3, #3
 80187a0:	d9f0      	bls.n	8018784 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80187a2:	bf00      	nop
 80187a4:	3710      	adds	r7, #16
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bd80      	pop	{r7, pc}
 80187aa:	bf00      	nop
 80187ac:	08026b7c 	.word	0x08026b7c
 80187b0:	08026c2c 	.word	0x08026c2c
 80187b4:	08026bc0 	.word	0x08026bc0
 80187b8:	08026c38 	.word	0x08026c38
 80187bc:	08028fa8 	.word	0x08028fa8

080187c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80187c0:	b5b0      	push	{r4, r5, r7, lr}
 80187c2:	b088      	sub	sp, #32
 80187c4:	af04      	add	r7, sp, #16
 80187c6:	6078      	str	r0, [r7, #4]
 80187c8:	460b      	mov	r3, r1
 80187ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d106      	bne.n	80187e0 <tcp_close_shutdown+0x20>
 80187d2:	4b61      	ldr	r3, [pc, #388]	; (8018958 <tcp_close_shutdown+0x198>)
 80187d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80187d8:	4960      	ldr	r1, [pc, #384]	; (801895c <tcp_close_shutdown+0x19c>)
 80187da:	4861      	ldr	r0, [pc, #388]	; (8018960 <tcp_close_shutdown+0x1a0>)
 80187dc:	f00b ffe0 	bl	80247a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80187e0:	78fb      	ldrb	r3, [r7, #3]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d066      	beq.n	80188b4 <tcp_close_shutdown+0xf4>
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	7d1b      	ldrb	r3, [r3, #20]
 80187ea:	2b04      	cmp	r3, #4
 80187ec:	d003      	beq.n	80187f6 <tcp_close_shutdown+0x36>
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	7d1b      	ldrb	r3, [r3, #20]
 80187f2:	2b07      	cmp	r3, #7
 80187f4:	d15e      	bne.n	80188b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d104      	bne.n	8018808 <tcp_close_shutdown+0x48>
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018802:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018806:	d055      	beq.n	80188b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	8b5b      	ldrh	r3, [r3, #26]
 801880c:	f003 0310 	and.w	r3, r3, #16
 8018810:	2b00      	cmp	r3, #0
 8018812:	d106      	bne.n	8018822 <tcp_close_shutdown+0x62>
 8018814:	4b50      	ldr	r3, [pc, #320]	; (8018958 <tcp_close_shutdown+0x198>)
 8018816:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801881a:	4952      	ldr	r1, [pc, #328]	; (8018964 <tcp_close_shutdown+0x1a4>)
 801881c:	4850      	ldr	r0, [pc, #320]	; (8018960 <tcp_close_shutdown+0x1a0>)
 801881e:	f00b ffbf 	bl	80247a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801882a:	687d      	ldr	r5, [r7, #4]
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	3304      	adds	r3, #4
 8018830:	687a      	ldr	r2, [r7, #4]
 8018832:	8ad2      	ldrh	r2, [r2, #22]
 8018834:	6879      	ldr	r1, [r7, #4]
 8018836:	8b09      	ldrh	r1, [r1, #24]
 8018838:	9102      	str	r1, [sp, #8]
 801883a:	9201      	str	r2, [sp, #4]
 801883c:	9300      	str	r3, [sp, #0]
 801883e:	462b      	mov	r3, r5
 8018840:	4622      	mov	r2, r4
 8018842:	4601      	mov	r1, r0
 8018844:	6878      	ldr	r0, [r7, #4]
 8018846:	f005 fdbb 	bl	801e3c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	f001 fb8a 	bl	8019f64 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018850:	4b45      	ldr	r3, [pc, #276]	; (8018968 <tcp_close_shutdown+0x1a8>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	687a      	ldr	r2, [r7, #4]
 8018856:	429a      	cmp	r2, r3
 8018858:	d105      	bne.n	8018866 <tcp_close_shutdown+0xa6>
 801885a:	4b43      	ldr	r3, [pc, #268]	; (8018968 <tcp_close_shutdown+0x1a8>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	68db      	ldr	r3, [r3, #12]
 8018860:	4a41      	ldr	r2, [pc, #260]	; (8018968 <tcp_close_shutdown+0x1a8>)
 8018862:	6013      	str	r3, [r2, #0]
 8018864:	e013      	b.n	801888e <tcp_close_shutdown+0xce>
 8018866:	4b40      	ldr	r3, [pc, #256]	; (8018968 <tcp_close_shutdown+0x1a8>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	60fb      	str	r3, [r7, #12]
 801886c:	e00c      	b.n	8018888 <tcp_close_shutdown+0xc8>
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	68db      	ldr	r3, [r3, #12]
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	429a      	cmp	r2, r3
 8018876:	d104      	bne.n	8018882 <tcp_close_shutdown+0xc2>
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	68da      	ldr	r2, [r3, #12]
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	60da      	str	r2, [r3, #12]
 8018880:	e005      	b.n	801888e <tcp_close_shutdown+0xce>
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	68db      	ldr	r3, [r3, #12]
 8018886:	60fb      	str	r3, [r7, #12]
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d1ef      	bne.n	801886e <tcp_close_shutdown+0xae>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2200      	movs	r2, #0
 8018892:	60da      	str	r2, [r3, #12]
 8018894:	4b35      	ldr	r3, [pc, #212]	; (801896c <tcp_close_shutdown+0x1ac>)
 8018896:	2201      	movs	r2, #1
 8018898:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801889a:	4b35      	ldr	r3, [pc, #212]	; (8018970 <tcp_close_shutdown+0x1b0>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d102      	bne.n	80188aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80188a4:	f004 f81c 	bl	801c8e0 <tcp_trigger_input_pcb_close>
 80188a8:	e002      	b.n	80188b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80188aa:	6878      	ldr	r0, [r7, #4]
 80188ac:	f7ff fed6 	bl	801865c <tcp_free>
      }
      return ERR_OK;
 80188b0:	2300      	movs	r3, #0
 80188b2:	e04d      	b.n	8018950 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	7d1b      	ldrb	r3, [r3, #20]
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d02d      	beq.n	8018918 <tcp_close_shutdown+0x158>
 80188bc:	2b02      	cmp	r3, #2
 80188be:	d036      	beq.n	801892e <tcp_close_shutdown+0x16e>
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d13f      	bne.n	8018944 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	8adb      	ldrh	r3, [r3, #22]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d021      	beq.n	8018910 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80188cc:	4b29      	ldr	r3, [pc, #164]	; (8018974 <tcp_close_shutdown+0x1b4>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	687a      	ldr	r2, [r7, #4]
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d105      	bne.n	80188e2 <tcp_close_shutdown+0x122>
 80188d6:	4b27      	ldr	r3, [pc, #156]	; (8018974 <tcp_close_shutdown+0x1b4>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	4a25      	ldr	r2, [pc, #148]	; (8018974 <tcp_close_shutdown+0x1b4>)
 80188de:	6013      	str	r3, [r2, #0]
 80188e0:	e013      	b.n	801890a <tcp_close_shutdown+0x14a>
 80188e2:	4b24      	ldr	r3, [pc, #144]	; (8018974 <tcp_close_shutdown+0x1b4>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	60bb      	str	r3, [r7, #8]
 80188e8:	e00c      	b.n	8018904 <tcp_close_shutdown+0x144>
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	68db      	ldr	r3, [r3, #12]
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d104      	bne.n	80188fe <tcp_close_shutdown+0x13e>
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	68da      	ldr	r2, [r3, #12]
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	60da      	str	r2, [r3, #12]
 80188fc:	e005      	b.n	801890a <tcp_close_shutdown+0x14a>
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	68db      	ldr	r3, [r3, #12]
 8018902:	60bb      	str	r3, [r7, #8]
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d1ef      	bne.n	80188ea <tcp_close_shutdown+0x12a>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2200      	movs	r2, #0
 801890e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f7ff fea3 	bl	801865c <tcp_free>
      break;
 8018916:	e01a      	b.n	801894e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f7ff ff17 	bl	801874c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801891e:	6879      	ldr	r1, [r7, #4]
 8018920:	4815      	ldr	r0, [pc, #84]	; (8018978 <tcp_close_shutdown+0x1b8>)
 8018922:	f001 fb6f 	bl	801a004 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f7ff feb4 	bl	8018694 <tcp_free_listen>
      break;
 801892c:	e00f      	b.n	801894e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801892e:	6879      	ldr	r1, [r7, #4]
 8018930:	480d      	ldr	r0, [pc, #52]	; (8018968 <tcp_close_shutdown+0x1a8>)
 8018932:	f001 fb67 	bl	801a004 <tcp_pcb_remove>
 8018936:	4b0d      	ldr	r3, [pc, #52]	; (801896c <tcp_close_shutdown+0x1ac>)
 8018938:	2201      	movs	r2, #1
 801893a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7ff fe8d 	bl	801865c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8018942:	e004      	b.n	801894e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	f000 f819 	bl	801897c <tcp_close_shutdown_fin>
 801894a:	4603      	mov	r3, r0
 801894c:	e000      	b.n	8018950 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 801894e:	2300      	movs	r3, #0
}
 8018950:	4618      	mov	r0, r3
 8018952:	3710      	adds	r7, #16
 8018954:	46bd      	mov	sp, r7
 8018956:	bdb0      	pop	{r4, r5, r7, pc}
 8018958:	08026b7c 	.word	0x08026b7c
 801895c:	08026c50 	.word	0x08026c50
 8018960:	08026bc0 	.word	0x08026bc0
 8018964:	08026c70 	.word	0x08026c70
 8018968:	200103c0 	.word	0x200103c0
 801896c:	200103bc 	.word	0x200103bc
 8018970:	200103d4 	.word	0x200103d4
 8018974:	200103cc 	.word	0x200103cc
 8018978:	200103c8 	.word	0x200103c8

0801897c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d106      	bne.n	8018998 <tcp_close_shutdown_fin+0x1c>
 801898a:	4b2c      	ldr	r3, [pc, #176]	; (8018a3c <tcp_close_shutdown_fin+0xc0>)
 801898c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8018990:	492b      	ldr	r1, [pc, #172]	; (8018a40 <tcp_close_shutdown_fin+0xc4>)
 8018992:	482c      	ldr	r0, [pc, #176]	; (8018a44 <tcp_close_shutdown_fin+0xc8>)
 8018994:	f00b ff04 	bl	80247a0 <iprintf>

  switch (pcb->state) {
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	7d1b      	ldrb	r3, [r3, #20]
 801899c:	2b04      	cmp	r3, #4
 801899e:	d010      	beq.n	80189c2 <tcp_close_shutdown_fin+0x46>
 80189a0:	2b07      	cmp	r3, #7
 80189a2:	d01b      	beq.n	80189dc <tcp_close_shutdown_fin+0x60>
 80189a4:	2b03      	cmp	r3, #3
 80189a6:	d126      	bne.n	80189f6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f004 fe05 	bl	801d5b8 <tcp_send_fin>
 80189ae:	4603      	mov	r3, r0
 80189b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80189b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d11f      	bne.n	80189fa <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2205      	movs	r2, #5
 80189be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80189c0:	e01b      	b.n	80189fa <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	f004 fdf8 	bl	801d5b8 <tcp_send_fin>
 80189c8:	4603      	mov	r3, r0
 80189ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80189cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d114      	bne.n	80189fe <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2205      	movs	r2, #5
 80189d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80189da:	e010      	b.n	80189fe <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f004 fdeb 	bl	801d5b8 <tcp_send_fin>
 80189e2:	4603      	mov	r3, r0
 80189e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80189e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d109      	bne.n	8018a02 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2209      	movs	r2, #9
 80189f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80189f4:	e005      	b.n	8018a02 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80189f6:	2300      	movs	r3, #0
 80189f8:	e01c      	b.n	8018a34 <tcp_close_shutdown_fin+0xb8>
      break;
 80189fa:	bf00      	nop
 80189fc:	e002      	b.n	8018a04 <tcp_close_shutdown_fin+0x88>
      break;
 80189fe:	bf00      	nop
 8018a00:	e000      	b.n	8018a04 <tcp_close_shutdown_fin+0x88>
      break;
 8018a02:	bf00      	nop
  }

  if (err == ERR_OK) {
 8018a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d103      	bne.n	8018a14 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f004 ff11 	bl	801d834 <tcp_output>
 8018a12:	e00d      	b.n	8018a30 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8018a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a1c:	d108      	bne.n	8018a30 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	8b5b      	ldrh	r3, [r3, #26]
 8018a22:	f043 0308 	orr.w	r3, r3, #8
 8018a26:	b29a      	uxth	r2, r3
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	e001      	b.n	8018a34 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8018a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3710      	adds	r7, #16
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	08026b7c 	.word	0x08026b7c
 8018a40:	08026c2c 	.word	0x08026c2c
 8018a44:	08026bc0 	.word	0x08026bc0

08018a48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b082      	sub	sp, #8
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d109      	bne.n	8018a6a <tcp_close+0x22>
 8018a56:	4b0f      	ldr	r3, [pc, #60]	; (8018a94 <tcp_close+0x4c>)
 8018a58:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8018a5c:	490e      	ldr	r1, [pc, #56]	; (8018a98 <tcp_close+0x50>)
 8018a5e:	480f      	ldr	r0, [pc, #60]	; (8018a9c <tcp_close+0x54>)
 8018a60:	f00b fe9e 	bl	80247a0 <iprintf>
 8018a64:	f06f 030f 	mvn.w	r3, #15
 8018a68:	e00f      	b.n	8018a8a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	7d1b      	ldrb	r3, [r3, #20]
 8018a6e:	2b01      	cmp	r3, #1
 8018a70:	d006      	beq.n	8018a80 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	8b5b      	ldrh	r3, [r3, #26]
 8018a76:	f043 0310 	orr.w	r3, r3, #16
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8018a80:	2101      	movs	r1, #1
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f7ff fe9c 	bl	80187c0 <tcp_close_shutdown>
 8018a88:	4603      	mov	r3, r0
}
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	3708      	adds	r7, #8
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	08026b7c 	.word	0x08026b7c
 8018a98:	08026c8c 	.word	0x08026c8c
 8018a9c:	08026bc0 	.word	0x08026bc0

08018aa0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b084      	sub	sp, #16
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d109      	bne.n	8018ac6 <tcp_shutdown+0x26>
 8018ab2:	4b25      	ldr	r3, [pc, #148]	; (8018b48 <tcp_shutdown+0xa8>)
 8018ab4:	f240 2207 	movw	r2, #519	; 0x207
 8018ab8:	4924      	ldr	r1, [pc, #144]	; (8018b4c <tcp_shutdown+0xac>)
 8018aba:	4825      	ldr	r0, [pc, #148]	; (8018b50 <tcp_shutdown+0xb0>)
 8018abc:	f00b fe70 	bl	80247a0 <iprintf>
 8018ac0:	f06f 030f 	mvn.w	r3, #15
 8018ac4:	e03c      	b.n	8018b40 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	7d1b      	ldrb	r3, [r3, #20]
 8018aca:	2b01      	cmp	r3, #1
 8018acc:	d102      	bne.n	8018ad4 <tcp_shutdown+0x34>
    return ERR_CONN;
 8018ace:	f06f 030a 	mvn.w	r3, #10
 8018ad2:	e035      	b.n	8018b40 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 8018ad4:	68bb      	ldr	r3, [r7, #8]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d01b      	beq.n	8018b12 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	8b5b      	ldrh	r3, [r3, #26]
 8018ade:	f043 0310 	orr.w	r3, r3, #16
 8018ae2:	b29a      	uxth	r2, r3
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d005      	beq.n	8018afa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8018aee:	2101      	movs	r1, #1
 8018af0:	68f8      	ldr	r0, [r7, #12]
 8018af2:	f7ff fe65 	bl	80187c0 <tcp_close_shutdown>
 8018af6:	4603      	mov	r3, r0
 8018af8:	e022      	b.n	8018b40 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d007      	beq.n	8018b12 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7ff faec 	bl	80180e4 <pbuf_free>
      pcb->refused_data = NULL;
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d012      	beq.n	8018b3e <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	7d1b      	ldrb	r3, [r3, #20]
 8018b1c:	2b03      	cmp	r3, #3
 8018b1e:	db0b      	blt.n	8018b38 <tcp_shutdown+0x98>
 8018b20:	2b04      	cmp	r3, #4
 8018b22:	dd01      	ble.n	8018b28 <tcp_shutdown+0x88>
 8018b24:	2b07      	cmp	r3, #7
 8018b26:	d107      	bne.n	8018b38 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8018b28:	68bb      	ldr	r3, [r7, #8]
 8018b2a:	b2db      	uxtb	r3, r3
 8018b2c:	4619      	mov	r1, r3
 8018b2e:	68f8      	ldr	r0, [r7, #12]
 8018b30:	f7ff fe46 	bl	80187c0 <tcp_close_shutdown>
 8018b34:	4603      	mov	r3, r0
 8018b36:	e003      	b.n	8018b40 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8018b38:	f06f 030a 	mvn.w	r3, #10
 8018b3c:	e000      	b.n	8018b40 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 8018b3e:	2300      	movs	r3, #0
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	3710      	adds	r7, #16
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}
 8018b48:	08026b7c 	.word	0x08026b7c
 8018b4c:	08026ca4 	.word	0x08026ca4
 8018b50:	08026bc0 	.word	0x08026bc0

08018b54 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b08e      	sub	sp, #56	; 0x38
 8018b58:	af04      	add	r7, sp, #16
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d107      	bne.n	8018b74 <tcp_abandon+0x20>
 8018b64:	4b52      	ldr	r3, [pc, #328]	; (8018cb0 <tcp_abandon+0x15c>)
 8018b66:	f240 223d 	movw	r2, #573	; 0x23d
 8018b6a:	4952      	ldr	r1, [pc, #328]	; (8018cb4 <tcp_abandon+0x160>)
 8018b6c:	4852      	ldr	r0, [pc, #328]	; (8018cb8 <tcp_abandon+0x164>)
 8018b6e:	f00b fe17 	bl	80247a0 <iprintf>
 8018b72:	e099      	b.n	8018ca8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	7d1b      	ldrb	r3, [r3, #20]
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d106      	bne.n	8018b8a <tcp_abandon+0x36>
 8018b7c:	4b4c      	ldr	r3, [pc, #304]	; (8018cb0 <tcp_abandon+0x15c>)
 8018b7e:	f240 2241 	movw	r2, #577	; 0x241
 8018b82:	494e      	ldr	r1, [pc, #312]	; (8018cbc <tcp_abandon+0x168>)
 8018b84:	484c      	ldr	r0, [pc, #304]	; (8018cb8 <tcp_abandon+0x164>)
 8018b86:	f00b fe0b 	bl	80247a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	7d1b      	ldrb	r3, [r3, #20]
 8018b8e:	2b0a      	cmp	r3, #10
 8018b90:	d107      	bne.n	8018ba2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8018b92:	6879      	ldr	r1, [r7, #4]
 8018b94:	484a      	ldr	r0, [pc, #296]	; (8018cc0 <tcp_abandon+0x16c>)
 8018b96:	f001 fa35 	bl	801a004 <tcp_pcb_remove>
    tcp_free(pcb);
 8018b9a:	6878      	ldr	r0, [r7, #4]
 8018b9c:	f7ff fd5e 	bl	801865c <tcp_free>
 8018ba0:	e082      	b.n	8018ca8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018bbc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	691b      	ldr	r3, [r3, #16]
 8018bc2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	7d1b      	ldrb	r3, [r3, #20]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d126      	bne.n	8018c1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	8adb      	ldrh	r3, [r3, #22]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d02e      	beq.n	8018c32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018bd4:	4b3b      	ldr	r3, [pc, #236]	; (8018cc4 <tcp_abandon+0x170>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	687a      	ldr	r2, [r7, #4]
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d105      	bne.n	8018bea <tcp_abandon+0x96>
 8018bde:	4b39      	ldr	r3, [pc, #228]	; (8018cc4 <tcp_abandon+0x170>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	4a37      	ldr	r2, [pc, #220]	; (8018cc4 <tcp_abandon+0x170>)
 8018be6:	6013      	str	r3, [r2, #0]
 8018be8:	e013      	b.n	8018c12 <tcp_abandon+0xbe>
 8018bea:	4b36      	ldr	r3, [pc, #216]	; (8018cc4 <tcp_abandon+0x170>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	61fb      	str	r3, [r7, #28]
 8018bf0:	e00c      	b.n	8018c0c <tcp_abandon+0xb8>
 8018bf2:	69fb      	ldr	r3, [r7, #28]
 8018bf4:	68db      	ldr	r3, [r3, #12]
 8018bf6:	687a      	ldr	r2, [r7, #4]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d104      	bne.n	8018c06 <tcp_abandon+0xb2>
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	68da      	ldr	r2, [r3, #12]
 8018c00:	69fb      	ldr	r3, [r7, #28]
 8018c02:	60da      	str	r2, [r3, #12]
 8018c04:	e005      	b.n	8018c12 <tcp_abandon+0xbe>
 8018c06:	69fb      	ldr	r3, [r7, #28]
 8018c08:	68db      	ldr	r3, [r3, #12]
 8018c0a:	61fb      	str	r3, [r7, #28]
 8018c0c:	69fb      	ldr	r3, [r7, #28]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d1ef      	bne.n	8018bf2 <tcp_abandon+0x9e>
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	2200      	movs	r2, #0
 8018c16:	60da      	str	r2, [r3, #12]
 8018c18:	e00b      	b.n	8018c32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8018c1a:	683b      	ldr	r3, [r7, #0]
 8018c1c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	8adb      	ldrh	r3, [r3, #22]
 8018c22:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018c24:	6879      	ldr	r1, [r7, #4]
 8018c26:	4828      	ldr	r0, [pc, #160]	; (8018cc8 <tcp_abandon+0x174>)
 8018c28:	f001 f9ec 	bl	801a004 <tcp_pcb_remove>
 8018c2c:	4b27      	ldr	r3, [pc, #156]	; (8018ccc <tcp_abandon+0x178>)
 8018c2e:	2201      	movs	r2, #1
 8018c30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d004      	beq.n	8018c44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f000 fec2 	bl	80199c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d004      	beq.n	8018c56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c50:	4618      	mov	r0, r3
 8018c52:	f000 feb9 	bl	80199c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d004      	beq.n	8018c68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c62:	4618      	mov	r0, r3
 8018c64:	f000 feb0 	bl	80199c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8018c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d00e      	beq.n	8018c8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8018c6e:	6879      	ldr	r1, [r7, #4]
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	3304      	adds	r3, #4
 8018c74:	687a      	ldr	r2, [r7, #4]
 8018c76:	8b12      	ldrh	r2, [r2, #24]
 8018c78:	9202      	str	r2, [sp, #8]
 8018c7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018c7c:	9201      	str	r2, [sp, #4]
 8018c7e:	9300      	str	r3, [sp, #0]
 8018c80:	460b      	mov	r3, r1
 8018c82:	697a      	ldr	r2, [r7, #20]
 8018c84:	69b9      	ldr	r1, [r7, #24]
 8018c86:	6878      	ldr	r0, [r7, #4]
 8018c88:	f005 fb9a 	bl	801e3c0 <tcp_rst>
    }
    last_state = pcb->state;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	7d1b      	ldrb	r3, [r3, #20]
 8018c90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f7ff fce2 	bl	801865c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018c98:	693b      	ldr	r3, [r7, #16]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d004      	beq.n	8018ca8 <tcp_abandon+0x154>
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	f06f 010c 	mvn.w	r1, #12
 8018ca4:	68f8      	ldr	r0, [r7, #12]
 8018ca6:	4798      	blx	r3
  }
}
 8018ca8:	3728      	adds	r7, #40	; 0x28
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	08026b7c 	.word	0x08026b7c
 8018cb4:	08026cc0 	.word	0x08026cc0
 8018cb8:	08026bc0 	.word	0x08026bc0
 8018cbc:	08026cdc 	.word	0x08026cdc
 8018cc0:	200103d0 	.word	0x200103d0
 8018cc4:	200103cc 	.word	0x200103cc
 8018cc8:	200103c0 	.word	0x200103c0
 8018ccc:	200103bc 	.word	0x200103bc

08018cd0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8018cd8:	2101      	movs	r1, #1
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f7ff ff3a 	bl	8018b54 <tcp_abandon>
}
 8018ce0:	bf00      	nop
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b088      	sub	sp, #32
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	60f8      	str	r0, [r7, #12]
 8018cf0:	60b9      	str	r1, [r7, #8]
 8018cf2:	4613      	mov	r3, r2
 8018cf4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8018cf6:	2304      	movs	r3, #4
 8018cf8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018cfa:	68bb      	ldr	r3, [r7, #8]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d101      	bne.n	8018d04 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8018d00:	4b3e      	ldr	r3, [pc, #248]	; (8018dfc <tcp_bind+0x114>)
 8018d02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d109      	bne.n	8018d1e <tcp_bind+0x36>
 8018d0a:	4b3d      	ldr	r3, [pc, #244]	; (8018e00 <tcp_bind+0x118>)
 8018d0c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8018d10:	493c      	ldr	r1, [pc, #240]	; (8018e04 <tcp_bind+0x11c>)
 8018d12:	483d      	ldr	r0, [pc, #244]	; (8018e08 <tcp_bind+0x120>)
 8018d14:	f00b fd44 	bl	80247a0 <iprintf>
 8018d18:	f06f 030f 	mvn.w	r3, #15
 8018d1c:	e06a      	b.n	8018df4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	7d1b      	ldrb	r3, [r3, #20]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d009      	beq.n	8018d3a <tcp_bind+0x52>
 8018d26:	4b36      	ldr	r3, [pc, #216]	; (8018e00 <tcp_bind+0x118>)
 8018d28:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018d2c:	4937      	ldr	r1, [pc, #220]	; (8018e0c <tcp_bind+0x124>)
 8018d2e:	4836      	ldr	r0, [pc, #216]	; (8018e08 <tcp_bind+0x120>)
 8018d30:	f00b fd36 	bl	80247a0 <iprintf>
 8018d34:	f06f 0305 	mvn.w	r3, #5
 8018d38:	e05c      	b.n	8018df4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8018d3a:	88fb      	ldrh	r3, [r7, #6]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d109      	bne.n	8018d54 <tcp_bind+0x6c>
    port = tcp_new_port();
 8018d40:	f000 f9de 	bl	8019100 <tcp_new_port>
 8018d44:	4603      	mov	r3, r0
 8018d46:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018d48:	88fb      	ldrh	r3, [r7, #6]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d135      	bne.n	8018dba <tcp_bind+0xd2>
      return ERR_BUF;
 8018d4e:	f06f 0301 	mvn.w	r3, #1
 8018d52:	e04f      	b.n	8018df4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8018d54:	2300      	movs	r3, #0
 8018d56:	61fb      	str	r3, [r7, #28]
 8018d58:	e02b      	b.n	8018db2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018d5a:	4a2d      	ldr	r2, [pc, #180]	; (8018e10 <tcp_bind+0x128>)
 8018d5c:	69fb      	ldr	r3, [r7, #28]
 8018d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	61bb      	str	r3, [r7, #24]
 8018d66:	e01e      	b.n	8018da6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8018d68:	69bb      	ldr	r3, [r7, #24]
 8018d6a:	8adb      	ldrh	r3, [r3, #22]
 8018d6c:	88fa      	ldrh	r2, [r7, #6]
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	d116      	bne.n	8018da0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8018d72:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d010      	beq.n	8018d9a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d00c      	beq.n	8018d9a <tcp_bind+0xb2>
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d009      	beq.n	8018d9a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8018d86:	68bb      	ldr	r3, [r7, #8]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d005      	beq.n	8018d9a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8018d8e:	69bb      	ldr	r3, [r7, #24]
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018d96:	429a      	cmp	r2, r3
 8018d98:	d102      	bne.n	8018da0 <tcp_bind+0xb8>
              return ERR_USE;
 8018d9a:	f06f 0307 	mvn.w	r3, #7
 8018d9e:	e029      	b.n	8018df4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018da0:	69bb      	ldr	r3, [r7, #24]
 8018da2:	68db      	ldr	r3, [r3, #12]
 8018da4:	61bb      	str	r3, [r7, #24]
 8018da6:	69bb      	ldr	r3, [r7, #24]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d1dd      	bne.n	8018d68 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	3301      	adds	r3, #1
 8018db0:	61fb      	str	r3, [r7, #28]
 8018db2:	69fa      	ldr	r2, [r7, #28]
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	429a      	cmp	r2, r3
 8018db8:	dbcf      	blt.n	8018d5a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8018dba:	68bb      	ldr	r3, [r7, #8]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d00c      	beq.n	8018dda <tcp_bind+0xf2>
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d008      	beq.n	8018dda <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d002      	beq.n	8018dd4 <tcp_bind+0xec>
 8018dce:	68bb      	ldr	r3, [r7, #8]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	e000      	b.n	8018dd6 <tcp_bind+0xee>
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	68fa      	ldr	r2, [r7, #12]
 8018dd8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	88fa      	ldrh	r2, [r7, #6]
 8018dde:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018de0:	4b0c      	ldr	r3, [pc, #48]	; (8018e14 <tcp_bind+0x12c>)
 8018de2:	681a      	ldr	r2, [r3, #0]
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	60da      	str	r2, [r3, #12]
 8018de8:	4a0a      	ldr	r2, [pc, #40]	; (8018e14 <tcp_bind+0x12c>)
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	6013      	str	r3, [r2, #0]
 8018dee:	f005 fca9 	bl	801e744 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8018df2:	2300      	movs	r3, #0
}
 8018df4:	4618      	mov	r0, r3
 8018df6:	3720      	adds	r7, #32
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	bd80      	pop	{r7, pc}
 8018dfc:	08028fe0 	.word	0x08028fe0
 8018e00:	08026b7c 	.word	0x08026b7c
 8018e04:	08026d10 	.word	0x08026d10
 8018e08:	08026bc0 	.word	0x08026bc0
 8018e0c:	08026d28 	.word	0x08026d28
 8018e10:	08028fa8 	.word	0x08028fa8
 8018e14:	200103cc 	.word	0x200103cc

08018e18 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b084      	sub	sp, #16
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	60f8      	str	r0, [r7, #12]
 8018e20:	60b9      	str	r1, [r7, #8]
 8018e22:	4613      	mov	r3, r2
 8018e24:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d106      	bne.n	8018e3a <tcp_accept_null+0x22>
 8018e2c:	4b07      	ldr	r3, [pc, #28]	; (8018e4c <tcp_accept_null+0x34>)
 8018e2e:	f240 320f 	movw	r2, #783	; 0x30f
 8018e32:	4907      	ldr	r1, [pc, #28]	; (8018e50 <tcp_accept_null+0x38>)
 8018e34:	4807      	ldr	r0, [pc, #28]	; (8018e54 <tcp_accept_null+0x3c>)
 8018e36:	f00b fcb3 	bl	80247a0 <iprintf>

  tcp_abort(pcb);
 8018e3a:	68b8      	ldr	r0, [r7, #8]
 8018e3c:	f7ff ff48 	bl	8018cd0 <tcp_abort>

  return ERR_ABRT;
 8018e40:	f06f 030c 	mvn.w	r3, #12
}
 8018e44:	4618      	mov	r0, r3
 8018e46:	3710      	adds	r7, #16
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	08026b7c 	.word	0x08026b7c
 8018e50:	08026d50 	.word	0x08026d50
 8018e54:	08026bc0 	.word	0x08026bc0

08018e58 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b088      	sub	sp, #32
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	60f8      	str	r0, [r7, #12]
 8018e60:	460b      	mov	r3, r1
 8018e62:	607a      	str	r2, [r7, #4]
 8018e64:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8018e66:	2300      	movs	r3, #0
 8018e68:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d109      	bne.n	8018e84 <tcp_listen_with_backlog_and_err+0x2c>
 8018e70:	4b47      	ldr	r3, [pc, #284]	; (8018f90 <tcp_listen_with_backlog_and_err+0x138>)
 8018e72:	f240 3259 	movw	r2, #857	; 0x359
 8018e76:	4947      	ldr	r1, [pc, #284]	; (8018f94 <tcp_listen_with_backlog_and_err+0x13c>)
 8018e78:	4847      	ldr	r0, [pc, #284]	; (8018f98 <tcp_listen_with_backlog_and_err+0x140>)
 8018e7a:	f00b fc91 	bl	80247a0 <iprintf>
 8018e7e:	23f0      	movs	r3, #240	; 0xf0
 8018e80:	76fb      	strb	r3, [r7, #27]
 8018e82:	e079      	b.n	8018f78 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	7d1b      	ldrb	r3, [r3, #20]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d009      	beq.n	8018ea0 <tcp_listen_with_backlog_and_err+0x48>
 8018e8c:	4b40      	ldr	r3, [pc, #256]	; (8018f90 <tcp_listen_with_backlog_and_err+0x138>)
 8018e8e:	f240 325a 	movw	r2, #858	; 0x35a
 8018e92:	4942      	ldr	r1, [pc, #264]	; (8018f9c <tcp_listen_with_backlog_and_err+0x144>)
 8018e94:	4840      	ldr	r0, [pc, #256]	; (8018f98 <tcp_listen_with_backlog_and_err+0x140>)
 8018e96:	f00b fc83 	bl	80247a0 <iprintf>
 8018e9a:	23f1      	movs	r3, #241	; 0xf1
 8018e9c:	76fb      	strb	r3, [r7, #27]
 8018e9e:	e06b      	b.n	8018f78 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	7d1b      	ldrb	r3, [r3, #20]
 8018ea4:	2b01      	cmp	r3, #1
 8018ea6:	d104      	bne.n	8018eb2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8018eac:	23f7      	movs	r3, #247	; 0xf7
 8018eae:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018eb0:	e062      	b.n	8018f78 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018eb2:	2002      	movs	r0, #2
 8018eb4:	f7fe f9fe 	bl	80172b4 <memp_malloc>
 8018eb8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8018eba:	69fb      	ldr	r3, [r7, #28]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d102      	bne.n	8018ec6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8018ec0:	23ff      	movs	r3, #255	; 0xff
 8018ec2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018ec4:	e058      	b.n	8018f78 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	691a      	ldr	r2, [r3, #16]
 8018eca:	69fb      	ldr	r3, [r7, #28]
 8018ecc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	8ada      	ldrh	r2, [r3, #22]
 8018ed2:	69fb      	ldr	r3, [r7, #28]
 8018ed4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8018ed6:	69fb      	ldr	r3, [r7, #28]
 8018ed8:	2201      	movs	r2, #1
 8018eda:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	7d5a      	ldrb	r2, [r3, #21]
 8018ee0:	69fb      	ldr	r3, [r7, #28]
 8018ee2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	7a5a      	ldrb	r2, [r3, #9]
 8018ee8:	69fb      	ldr	r3, [r7, #28]
 8018eea:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018eec:	69fb      	ldr	r3, [r7, #28]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	7ada      	ldrb	r2, [r3, #11]
 8018ef6:	69fb      	ldr	r3, [r7, #28]
 8018ef8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	7a9a      	ldrb	r2, [r3, #10]
 8018efe:	69fb      	ldr	r3, [r7, #28]
 8018f00:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	681a      	ldr	r2, [r3, #0]
 8018f06:	69fb      	ldr	r3, [r7, #28]
 8018f08:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	8adb      	ldrh	r3, [r3, #22]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d021      	beq.n	8018f56 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018f12:	4b23      	ldr	r3, [pc, #140]	; (8018fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	68fa      	ldr	r2, [r7, #12]
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d105      	bne.n	8018f28 <tcp_listen_with_backlog_and_err+0xd0>
 8018f1c:	4b20      	ldr	r3, [pc, #128]	; (8018fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	68db      	ldr	r3, [r3, #12]
 8018f22:	4a1f      	ldr	r2, [pc, #124]	; (8018fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8018f24:	6013      	str	r3, [r2, #0]
 8018f26:	e013      	b.n	8018f50 <tcp_listen_with_backlog_and_err+0xf8>
 8018f28:	4b1d      	ldr	r3, [pc, #116]	; (8018fa0 <tcp_listen_with_backlog_and_err+0x148>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	617b      	str	r3, [r7, #20]
 8018f2e:	e00c      	b.n	8018f4a <tcp_listen_with_backlog_and_err+0xf2>
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	68db      	ldr	r3, [r3, #12]
 8018f34:	68fa      	ldr	r2, [r7, #12]
 8018f36:	429a      	cmp	r2, r3
 8018f38:	d104      	bne.n	8018f44 <tcp_listen_with_backlog_and_err+0xec>
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	68da      	ldr	r2, [r3, #12]
 8018f3e:	697b      	ldr	r3, [r7, #20]
 8018f40:	60da      	str	r2, [r3, #12]
 8018f42:	e005      	b.n	8018f50 <tcp_listen_with_backlog_and_err+0xf8>
 8018f44:	697b      	ldr	r3, [r7, #20]
 8018f46:	68db      	ldr	r3, [r3, #12]
 8018f48:	617b      	str	r3, [r7, #20]
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d1ef      	bne.n	8018f30 <tcp_listen_with_backlog_and_err+0xd8>
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	2200      	movs	r2, #0
 8018f54:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8018f56:	68f8      	ldr	r0, [r7, #12]
 8018f58:	f7ff fb80 	bl	801865c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	4a11      	ldr	r2, [pc, #68]	; (8018fa4 <tcp_listen_with_backlog_and_err+0x14c>)
 8018f60:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018f62:	4b11      	ldr	r3, [pc, #68]	; (8018fa8 <tcp_listen_with_backlog_and_err+0x150>)
 8018f64:	681a      	ldr	r2, [r3, #0]
 8018f66:	69fb      	ldr	r3, [r7, #28]
 8018f68:	60da      	str	r2, [r3, #12]
 8018f6a:	4a0f      	ldr	r2, [pc, #60]	; (8018fa8 <tcp_listen_with_backlog_and_err+0x150>)
 8018f6c:	69fb      	ldr	r3, [r7, #28]
 8018f6e:	6013      	str	r3, [r2, #0]
 8018f70:	f005 fbe8 	bl	801e744 <tcp_timer_needed>
  res = ERR_OK;
 8018f74:	2300      	movs	r3, #0
 8018f76:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d002      	beq.n	8018f84 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	7efa      	ldrb	r2, [r7, #27]
 8018f82:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8018f84:	69fb      	ldr	r3, [r7, #28]
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	3720      	adds	r7, #32
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	08026b7c 	.word	0x08026b7c
 8018f94:	08026d70 	.word	0x08026d70
 8018f98:	08026bc0 	.word	0x08026bc0
 8018f9c:	08026da0 	.word	0x08026da0
 8018fa0:	200103cc 	.word	0x200103cc
 8018fa4:	08018e19 	.word	0x08018e19
 8018fa8:	200103c8 	.word	0x200103c8

08018fac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b084      	sub	sp, #16
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d106      	bne.n	8018fc8 <tcp_update_rcv_ann_wnd+0x1c>
 8018fba:	4b25      	ldr	r3, [pc, #148]	; (8019050 <tcp_update_rcv_ann_wnd+0xa4>)
 8018fbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018fc0:	4924      	ldr	r1, [pc, #144]	; (8019054 <tcp_update_rcv_ann_wnd+0xa8>)
 8018fc2:	4825      	ldr	r0, [pc, #148]	; (8019058 <tcp_update_rcv_ann_wnd+0xac>)
 8018fc4:	f00b fbec 	bl	80247a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8018fd0:	4413      	add	r3, r2
 8018fd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd8:	687a      	ldr	r2, [r7, #4]
 8018fda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8018fdc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8018fe0:	bf28      	it	cs
 8018fe2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8018fe6:	b292      	uxth	r2, r2
 8018fe8:	4413      	add	r3, r2
 8018fea:	68fa      	ldr	r2, [r7, #12]
 8018fec:	1ad3      	subs	r3, r2, r3
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	db08      	blt.n	8019004 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ffe:	68fa      	ldr	r2, [r7, #12]
 8019000:	1ad3      	subs	r3, r2, r3
 8019002:	e020      	b.n	8019046 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801900c:	1ad3      	subs	r3, r2, r3
 801900e:	2b00      	cmp	r3, #0
 8019010:	dd03      	ble.n	801901a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	2200      	movs	r2, #0
 8019016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019018:	e014      	b.n	8019044 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019022:	1ad3      	subs	r3, r2, r3
 8019024:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801902c:	d306      	bcc.n	801903c <tcp_update_rcv_ann_wnd+0x90>
 801902e:	4b08      	ldr	r3, [pc, #32]	; (8019050 <tcp_update_rcv_ann_wnd+0xa4>)
 8019030:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019034:	4909      	ldr	r1, [pc, #36]	; (801905c <tcp_update_rcv_ann_wnd+0xb0>)
 8019036:	4808      	ldr	r0, [pc, #32]	; (8019058 <tcp_update_rcv_ann_wnd+0xac>)
 8019038:	f00b fbb2 	bl	80247a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	b29a      	uxth	r2, r3
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019044:	2300      	movs	r3, #0
  }
}
 8019046:	4618      	mov	r0, r3
 8019048:	3710      	adds	r7, #16
 801904a:	46bd      	mov	sp, r7
 801904c:	bd80      	pop	{r7, pc}
 801904e:	bf00      	nop
 8019050:	08026b7c 	.word	0x08026b7c
 8019054:	08026dd8 	.word	0x08026dd8
 8019058:	08026bc0 	.word	0x08026bc0
 801905c:	08026dfc 	.word	0x08026dfc

08019060 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b084      	sub	sp, #16
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
 8019068:	460b      	mov	r3, r1
 801906a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d107      	bne.n	8019082 <tcp_recved+0x22>
 8019072:	4b1f      	ldr	r3, [pc, #124]	; (80190f0 <tcp_recved+0x90>)
 8019074:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019078:	491e      	ldr	r1, [pc, #120]	; (80190f4 <tcp_recved+0x94>)
 801907a:	481f      	ldr	r0, [pc, #124]	; (80190f8 <tcp_recved+0x98>)
 801907c:	f00b fb90 	bl	80247a0 <iprintf>
 8019080:	e032      	b.n	80190e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	7d1b      	ldrb	r3, [r3, #20]
 8019086:	2b01      	cmp	r3, #1
 8019088:	d106      	bne.n	8019098 <tcp_recved+0x38>
 801908a:	4b19      	ldr	r3, [pc, #100]	; (80190f0 <tcp_recved+0x90>)
 801908c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8019090:	491a      	ldr	r1, [pc, #104]	; (80190fc <tcp_recved+0x9c>)
 8019092:	4819      	ldr	r0, [pc, #100]	; (80190f8 <tcp_recved+0x98>)
 8019094:	f00b fb84 	bl	80247a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801909c:	887b      	ldrh	r3, [r7, #2]
 801909e:	4413      	add	r3, r2
 80190a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80190a2:	89fb      	ldrh	r3, [r7, #14]
 80190a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80190a8:	d804      	bhi.n	80190b4 <tcp_recved+0x54>
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190ae:	89fa      	ldrh	r2, [r7, #14]
 80190b0:	429a      	cmp	r2, r3
 80190b2:	d204      	bcs.n	80190be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80190ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80190bc:	e002      	b.n	80190c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	89fa      	ldrh	r2, [r7, #14]
 80190c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	f7ff ff71 	bl	8018fac <tcp_update_rcv_ann_wnd>
 80190ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80190cc:	68bb      	ldr	r3, [r7, #8]
 80190ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80190d2:	d309      	bcc.n	80190e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	8b5b      	ldrh	r3, [r3, #26]
 80190d8:	f043 0302 	orr.w	r3, r3, #2
 80190dc:	b29a      	uxth	r2, r3
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f004 fba6 	bl	801d834 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80190e8:	3710      	adds	r7, #16
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd80      	pop	{r7, pc}
 80190ee:	bf00      	nop
 80190f0:	08026b7c 	.word	0x08026b7c
 80190f4:	08026e18 	.word	0x08026e18
 80190f8:	08026bc0 	.word	0x08026bc0
 80190fc:	08026e30 	.word	0x08026e30

08019100 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019100:	b480      	push	{r7}
 8019102:	b083      	sub	sp, #12
 8019104:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019106:	2300      	movs	r3, #0
 8019108:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801910a:	4b1e      	ldr	r3, [pc, #120]	; (8019184 <tcp_new_port+0x84>)
 801910c:	881b      	ldrh	r3, [r3, #0]
 801910e:	3301      	adds	r3, #1
 8019110:	b29a      	uxth	r2, r3
 8019112:	4b1c      	ldr	r3, [pc, #112]	; (8019184 <tcp_new_port+0x84>)
 8019114:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019116:	4b1b      	ldr	r3, [pc, #108]	; (8019184 <tcp_new_port+0x84>)
 8019118:	881b      	ldrh	r3, [r3, #0]
 801911a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801911e:	4293      	cmp	r3, r2
 8019120:	d103      	bne.n	801912a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019122:	4b18      	ldr	r3, [pc, #96]	; (8019184 <tcp_new_port+0x84>)
 8019124:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019128:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801912a:	2300      	movs	r3, #0
 801912c:	71fb      	strb	r3, [r7, #7]
 801912e:	e01e      	b.n	801916e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019130:	79fb      	ldrb	r3, [r7, #7]
 8019132:	4a15      	ldr	r2, [pc, #84]	; (8019188 <tcp_new_port+0x88>)
 8019134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	603b      	str	r3, [r7, #0]
 801913c:	e011      	b.n	8019162 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	8ada      	ldrh	r2, [r3, #22]
 8019142:	4b10      	ldr	r3, [pc, #64]	; (8019184 <tcp_new_port+0x84>)
 8019144:	881b      	ldrh	r3, [r3, #0]
 8019146:	429a      	cmp	r2, r3
 8019148:	d108      	bne.n	801915c <tcp_new_port+0x5c>
        n++;
 801914a:	88bb      	ldrh	r3, [r7, #4]
 801914c:	3301      	adds	r3, #1
 801914e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019150:	88bb      	ldrh	r3, [r7, #4]
 8019152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019156:	d3d8      	bcc.n	801910a <tcp_new_port+0xa>
          return 0;
 8019158:	2300      	movs	r3, #0
 801915a:	e00d      	b.n	8019178 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	68db      	ldr	r3, [r3, #12]
 8019160:	603b      	str	r3, [r7, #0]
 8019162:	683b      	ldr	r3, [r7, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d1ea      	bne.n	801913e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019168:	79fb      	ldrb	r3, [r7, #7]
 801916a:	3301      	adds	r3, #1
 801916c:	71fb      	strb	r3, [r7, #7]
 801916e:	79fb      	ldrb	r3, [r7, #7]
 8019170:	2b03      	cmp	r3, #3
 8019172:	d9dd      	bls.n	8019130 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8019174:	4b03      	ldr	r3, [pc, #12]	; (8019184 <tcp_new_port+0x84>)
 8019176:	881b      	ldrh	r3, [r3, #0]
}
 8019178:	4618      	mov	r0, r3
 801917a:	370c      	adds	r7, #12
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr
 8019184:	20000034 	.word	0x20000034
 8019188:	08028fa8 	.word	0x08028fa8

0801918c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801918c:	b5b0      	push	{r4, r5, r7, lr}
 801918e:	b090      	sub	sp, #64	; 0x40
 8019190:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019192:	2300      	movs	r3, #0
 8019194:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019198:	4b94      	ldr	r3, [pc, #592]	; (80193ec <tcp_slowtmr+0x260>)
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	3301      	adds	r3, #1
 801919e:	4a93      	ldr	r2, [pc, #588]	; (80193ec <tcp_slowtmr+0x260>)
 80191a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80191a2:	4b93      	ldr	r3, [pc, #588]	; (80193f0 <tcp_slowtmr+0x264>)
 80191a4:	781b      	ldrb	r3, [r3, #0]
 80191a6:	3301      	adds	r3, #1
 80191a8:	b2da      	uxtb	r2, r3
 80191aa:	4b91      	ldr	r3, [pc, #580]	; (80193f0 <tcp_slowtmr+0x264>)
 80191ac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80191ae:	2300      	movs	r3, #0
 80191b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80191b2:	4b90      	ldr	r3, [pc, #576]	; (80193f4 <tcp_slowtmr+0x268>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80191b8:	e29d      	b.n	80196f6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80191ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191bc:	7d1b      	ldrb	r3, [r3, #20]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d106      	bne.n	80191d0 <tcp_slowtmr+0x44>
 80191c2:	4b8d      	ldr	r3, [pc, #564]	; (80193f8 <tcp_slowtmr+0x26c>)
 80191c4:	f240 42be 	movw	r2, #1214	; 0x4be
 80191c8:	498c      	ldr	r1, [pc, #560]	; (80193fc <tcp_slowtmr+0x270>)
 80191ca:	488d      	ldr	r0, [pc, #564]	; (8019400 <tcp_slowtmr+0x274>)
 80191cc:	f00b fae8 	bl	80247a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80191d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d2:	7d1b      	ldrb	r3, [r3, #20]
 80191d4:	2b01      	cmp	r3, #1
 80191d6:	d106      	bne.n	80191e6 <tcp_slowtmr+0x5a>
 80191d8:	4b87      	ldr	r3, [pc, #540]	; (80193f8 <tcp_slowtmr+0x26c>)
 80191da:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80191de:	4989      	ldr	r1, [pc, #548]	; (8019404 <tcp_slowtmr+0x278>)
 80191e0:	4887      	ldr	r0, [pc, #540]	; (8019400 <tcp_slowtmr+0x274>)
 80191e2:	f00b fadd 	bl	80247a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80191e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191e8:	7d1b      	ldrb	r3, [r3, #20]
 80191ea:	2b0a      	cmp	r3, #10
 80191ec:	d106      	bne.n	80191fc <tcp_slowtmr+0x70>
 80191ee:	4b82      	ldr	r3, [pc, #520]	; (80193f8 <tcp_slowtmr+0x26c>)
 80191f0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80191f4:	4984      	ldr	r1, [pc, #528]	; (8019408 <tcp_slowtmr+0x27c>)
 80191f6:	4882      	ldr	r0, [pc, #520]	; (8019400 <tcp_slowtmr+0x274>)
 80191f8:	f00b fad2 	bl	80247a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80191fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fe:	7f9a      	ldrb	r2, [r3, #30]
 8019200:	4b7b      	ldr	r3, [pc, #492]	; (80193f0 <tcp_slowtmr+0x264>)
 8019202:	781b      	ldrb	r3, [r3, #0]
 8019204:	429a      	cmp	r2, r3
 8019206:	d105      	bne.n	8019214 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801920a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801920e:	68db      	ldr	r3, [r3, #12]
 8019210:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019212:	e270      	b.n	80196f6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019214:	4b76      	ldr	r3, [pc, #472]	; (80193f0 <tcp_slowtmr+0x264>)
 8019216:	781a      	ldrb	r2, [r3, #0]
 8019218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801921a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801921c:	2300      	movs	r3, #0
 801921e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019222:	2300      	movs	r3, #0
 8019224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801922a:	7d1b      	ldrb	r3, [r3, #20]
 801922c:	2b02      	cmp	r3, #2
 801922e:	d10a      	bne.n	8019246 <tcp_slowtmr+0xba>
 8019230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019236:	2b05      	cmp	r3, #5
 8019238:	d905      	bls.n	8019246 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801923a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801923e:	3301      	adds	r3, #1
 8019240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019244:	e11e      	b.n	8019484 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019248:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801924c:	2b0b      	cmp	r3, #11
 801924e:	d905      	bls.n	801925c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019254:	3301      	adds	r3, #1
 8019256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801925a:	e113      	b.n	8019484 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801925e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019262:	2b00      	cmp	r3, #0
 8019264:	d075      	beq.n	8019352 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801926a:	2b00      	cmp	r3, #0
 801926c:	d006      	beq.n	801927c <tcp_slowtmr+0xf0>
 801926e:	4b62      	ldr	r3, [pc, #392]	; (80193f8 <tcp_slowtmr+0x26c>)
 8019270:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019274:	4965      	ldr	r1, [pc, #404]	; (801940c <tcp_slowtmr+0x280>)
 8019276:	4862      	ldr	r0, [pc, #392]	; (8019400 <tcp_slowtmr+0x274>)
 8019278:	f00b fa92 	bl	80247a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801927e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019280:	2b00      	cmp	r3, #0
 8019282:	d106      	bne.n	8019292 <tcp_slowtmr+0x106>
 8019284:	4b5c      	ldr	r3, [pc, #368]	; (80193f8 <tcp_slowtmr+0x26c>)
 8019286:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801928a:	4961      	ldr	r1, [pc, #388]	; (8019410 <tcp_slowtmr+0x284>)
 801928c:	485c      	ldr	r0, [pc, #368]	; (8019400 <tcp_slowtmr+0x274>)
 801928e:	f00b fa87 	bl	80247a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019294:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019298:	2b0b      	cmp	r3, #11
 801929a:	d905      	bls.n	80192a8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801929c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192a0:	3301      	adds	r3, #1
 80192a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80192a6:	e0ed      	b.n	8019484 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80192a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80192ae:	3b01      	subs	r3, #1
 80192b0:	4a58      	ldr	r2, [pc, #352]	; (8019414 <tcp_slowtmr+0x288>)
 80192b2:	5cd3      	ldrb	r3, [r2, r3]
 80192b4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80192b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80192bc:	7c7a      	ldrb	r2, [r7, #17]
 80192be:	429a      	cmp	r2, r3
 80192c0:	d907      	bls.n	80192d2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80192c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80192c8:	3301      	adds	r3, #1
 80192ca:	b2da      	uxtb	r2, r3
 80192cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80192d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80192d8:	7c7a      	ldrb	r2, [r7, #17]
 80192da:	429a      	cmp	r2, r3
 80192dc:	f200 80d2 	bhi.w	8019484 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80192e0:	2301      	movs	r3, #1
 80192e2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80192e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d108      	bne.n	8019300 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80192ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80192f0:	f005 f95a 	bl	801e5a8 <tcp_zero_window_probe>
 80192f4:	4603      	mov	r3, r0
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d014      	beq.n	8019324 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80192fa:	2300      	movs	r3, #0
 80192fc:	623b      	str	r3, [r7, #32]
 80192fe:	e011      	b.n	8019324 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019306:	4619      	mov	r1, r3
 8019308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801930a:	f004 f80d 	bl	801d328 <tcp_split_unsent_seg>
 801930e:	4603      	mov	r3, r0
 8019310:	2b00      	cmp	r3, #0
 8019312:	d107      	bne.n	8019324 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019316:	f004 fa8d 	bl	801d834 <tcp_output>
 801931a:	4603      	mov	r3, r0
 801931c:	2b00      	cmp	r3, #0
 801931e:	d101      	bne.n	8019324 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019320:	2300      	movs	r3, #0
 8019322:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019324:	6a3b      	ldr	r3, [r7, #32]
 8019326:	2b00      	cmp	r3, #0
 8019328:	f000 80ac 	beq.w	8019484 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801932e:	2200      	movs	r2, #0
 8019330:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019336:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801933a:	2b06      	cmp	r3, #6
 801933c:	f200 80a2 	bhi.w	8019484 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019342:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019346:	3301      	adds	r3, #1
 8019348:	b2da      	uxtb	r2, r3
 801934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801934c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8019350:	e098      	b.n	8019484 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019354:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019358:	2b00      	cmp	r3, #0
 801935a:	db0f      	blt.n	801937c <tcp_slowtmr+0x1f0>
 801935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801935e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019362:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019366:	4293      	cmp	r3, r2
 8019368:	d008      	beq.n	801937c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801936c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019370:	b29b      	uxth	r3, r3
 8019372:	3301      	adds	r3, #1
 8019374:	b29b      	uxth	r3, r3
 8019376:	b21a      	sxth	r2, r3
 8019378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8019382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019384:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019388:	429a      	cmp	r2, r3
 801938a:	db7b      	blt.n	8019484 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801938c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801938e:	f004 fd49 	bl	801de24 <tcp_rexmit_rto_prepare>
 8019392:	4603      	mov	r3, r0
 8019394:	2b00      	cmp	r3, #0
 8019396:	d007      	beq.n	80193a8 <tcp_slowtmr+0x21c>
 8019398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801939a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801939c:	2b00      	cmp	r3, #0
 801939e:	d171      	bne.n	8019484 <tcp_slowtmr+0x2f8>
 80193a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d06d      	beq.n	8019484 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80193a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193aa:	7d1b      	ldrb	r3, [r3, #20]
 80193ac:	2b02      	cmp	r3, #2
 80193ae:	d03a      	beq.n	8019426 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80193b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80193b6:	2b0c      	cmp	r3, #12
 80193b8:	bf28      	it	cs
 80193ba:	230c      	movcs	r3, #12
 80193bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80193be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80193c4:	10db      	asrs	r3, r3, #3
 80193c6:	b21b      	sxth	r3, r3
 80193c8:	461a      	mov	r2, r3
 80193ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80193d0:	4413      	add	r3, r2
 80193d2:	7efa      	ldrb	r2, [r7, #27]
 80193d4:	4910      	ldr	r1, [pc, #64]	; (8019418 <tcp_slowtmr+0x28c>)
 80193d6:	5c8a      	ldrb	r2, [r1, r2]
 80193d8:	4093      	lsls	r3, r2
 80193da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80193dc:	697b      	ldr	r3, [r7, #20]
 80193de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80193e2:	4293      	cmp	r3, r2
 80193e4:	dc1a      	bgt.n	801941c <tcp_slowtmr+0x290>
 80193e6:	697b      	ldr	r3, [r7, #20]
 80193e8:	b21a      	sxth	r2, r3
 80193ea:	e019      	b.n	8019420 <tcp_slowtmr+0x294>
 80193ec:	200103c4 	.word	0x200103c4
 80193f0:	20008fc2 	.word	0x20008fc2
 80193f4:	200103c0 	.word	0x200103c0
 80193f8:	08026b7c 	.word	0x08026b7c
 80193fc:	08026ec0 	.word	0x08026ec0
 8019400:	08026bc0 	.word	0x08026bc0
 8019404:	08026eec 	.word	0x08026eec
 8019408:	08026f18 	.word	0x08026f18
 801940c:	08026f48 	.word	0x08026f48
 8019410:	08026f7c 	.word	0x08026f7c
 8019414:	08028fa0 	.word	0x08028fa0
 8019418:	08028f90 	.word	0x08028f90
 801941c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019422:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8019426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019428:	2200      	movs	r2, #0
 801942a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801942e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019434:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019438:	4293      	cmp	r3, r2
 801943a:	bf28      	it	cs
 801943c:	4613      	movcs	r3, r2
 801943e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019440:	8a7b      	ldrh	r3, [r7, #18]
 8019442:	085b      	lsrs	r3, r3, #1
 8019444:	b29a      	uxth	r2, r3
 8019446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019448:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801944e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019456:	005b      	lsls	r3, r3, #1
 8019458:	b29b      	uxth	r3, r3
 801945a:	429a      	cmp	r2, r3
 801945c:	d206      	bcs.n	801946c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019462:	005b      	lsls	r3, r3, #1
 8019464:	b29a      	uxth	r2, r3
 8019466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801946e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019478:	2200      	movs	r2, #0
 801947a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801947e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019480:	f004 fd40 	bl	801df04 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019486:	7d1b      	ldrb	r3, [r3, #20]
 8019488:	2b06      	cmp	r3, #6
 801948a:	d111      	bne.n	80194b0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801948e:	8b5b      	ldrh	r3, [r3, #26]
 8019490:	f003 0310 	and.w	r3, r3, #16
 8019494:	2b00      	cmp	r3, #0
 8019496:	d00b      	beq.n	80194b0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019498:	4b9c      	ldr	r3, [pc, #624]	; (801970c <tcp_slowtmr+0x580>)
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949e:	6a1b      	ldr	r3, [r3, #32]
 80194a0:	1ad3      	subs	r3, r2, r3
 80194a2:	2b28      	cmp	r3, #40	; 0x28
 80194a4:	d904      	bls.n	80194b0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80194a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194aa:	3301      	adds	r3, #1
 80194ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80194b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b2:	7a5b      	ldrb	r3, [r3, #9]
 80194b4:	f003 0308 	and.w	r3, r3, #8
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d04a      	beq.n	8019552 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80194bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80194c0:	2b04      	cmp	r3, #4
 80194c2:	d003      	beq.n	80194cc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80194c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80194c8:	2b07      	cmp	r3, #7
 80194ca:	d142      	bne.n	8019552 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80194cc:	4b8f      	ldr	r3, [pc, #572]	; (801970c <tcp_slowtmr+0x580>)
 80194ce:	681a      	ldr	r2, [r3, #0]
 80194d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d2:	6a1b      	ldr	r3, [r3, #32]
 80194d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80194d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80194dc:	4b8c      	ldr	r3, [pc, #560]	; (8019710 <tcp_slowtmr+0x584>)
 80194de:	440b      	add	r3, r1
 80194e0:	498c      	ldr	r1, [pc, #560]	; (8019714 <tcp_slowtmr+0x588>)
 80194e2:	fba1 1303 	umull	r1, r3, r1, r3
 80194e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80194e8:	429a      	cmp	r2, r3
 80194ea:	d90a      	bls.n	8019502 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80194ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194f0:	3301      	adds	r3, #1
 80194f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80194f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194fa:	3301      	adds	r3, #1
 80194fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019500:	e027      	b.n	8019552 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019502:	4b82      	ldr	r3, [pc, #520]	; (801970c <tcp_slowtmr+0x580>)
 8019504:	681a      	ldr	r2, [r3, #0]
 8019506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019508:	6a1b      	ldr	r3, [r3, #32]
 801950a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801950e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019514:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019518:	4618      	mov	r0, r3
 801951a:	4b7f      	ldr	r3, [pc, #508]	; (8019718 <tcp_slowtmr+0x58c>)
 801951c:	fb03 f300 	mul.w	r3, r3, r0
 8019520:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8019522:	497c      	ldr	r1, [pc, #496]	; (8019714 <tcp_slowtmr+0x588>)
 8019524:	fba1 1303 	umull	r1, r3, r1, r3
 8019528:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801952a:	429a      	cmp	r2, r3
 801952c:	d911      	bls.n	8019552 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801952e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019530:	f004 fffa 	bl	801e528 <tcp_keepalive>
 8019534:	4603      	mov	r3, r0
 8019536:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801953a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801953e:	2b00      	cmp	r3, #0
 8019540:	d107      	bne.n	8019552 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8019542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019544:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019548:	3301      	adds	r3, #1
 801954a:	b2da      	uxtb	r2, r3
 801954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8019552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019556:	2b00      	cmp	r3, #0
 8019558:	d011      	beq.n	801957e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801955a:	4b6c      	ldr	r3, [pc, #432]	; (801970c <tcp_slowtmr+0x580>)
 801955c:	681a      	ldr	r2, [r3, #0]
 801955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019560:	6a1b      	ldr	r3, [r3, #32]
 8019562:	1ad2      	subs	r2, r2, r3
 8019564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019566:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801956a:	4619      	mov	r1, r3
 801956c:	460b      	mov	r3, r1
 801956e:	005b      	lsls	r3, r3, #1
 8019570:	440b      	add	r3, r1
 8019572:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8019574:	429a      	cmp	r2, r3
 8019576:	d302      	bcc.n	801957e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801957a:	f000 fea7 	bl	801a2cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019580:	7d1b      	ldrb	r3, [r3, #20]
 8019582:	2b03      	cmp	r3, #3
 8019584:	d10b      	bne.n	801959e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019586:	4b61      	ldr	r3, [pc, #388]	; (801970c <tcp_slowtmr+0x580>)
 8019588:	681a      	ldr	r2, [r3, #0]
 801958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801958c:	6a1b      	ldr	r3, [r3, #32]
 801958e:	1ad3      	subs	r3, r2, r3
 8019590:	2b28      	cmp	r3, #40	; 0x28
 8019592:	d904      	bls.n	801959e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8019594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019598:	3301      	adds	r3, #1
 801959a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a0:	7d1b      	ldrb	r3, [r3, #20]
 80195a2:	2b09      	cmp	r3, #9
 80195a4:	d10b      	bne.n	80195be <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80195a6:	4b59      	ldr	r3, [pc, #356]	; (801970c <tcp_slowtmr+0x580>)
 80195a8:	681a      	ldr	r2, [r3, #0]
 80195aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ac:	6a1b      	ldr	r3, [r3, #32]
 80195ae:	1ad3      	subs	r3, r2, r3
 80195b0:	2bf0      	cmp	r3, #240	; 0xf0
 80195b2:	d904      	bls.n	80195be <tcp_slowtmr+0x432>
        ++pcb_remove;
 80195b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195b8:	3301      	adds	r3, #1
 80195ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80195be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d060      	beq.n	8019688 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80195c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80195ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80195d0:	f000 fcc8 	bl	8019f64 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80195d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d010      	beq.n	80195fc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80195da:	4b50      	ldr	r3, [pc, #320]	; (801971c <tcp_slowtmr+0x590>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d106      	bne.n	80195f2 <tcp_slowtmr+0x466>
 80195e4:	4b4e      	ldr	r3, [pc, #312]	; (8019720 <tcp_slowtmr+0x594>)
 80195e6:	f240 526d 	movw	r2, #1389	; 0x56d
 80195ea:	494e      	ldr	r1, [pc, #312]	; (8019724 <tcp_slowtmr+0x598>)
 80195ec:	484e      	ldr	r0, [pc, #312]	; (8019728 <tcp_slowtmr+0x59c>)
 80195ee:	f00b f8d7 	bl	80247a0 <iprintf>
        prev->next = pcb->next;
 80195f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f4:	68da      	ldr	r2, [r3, #12]
 80195f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195f8:	60da      	str	r2, [r3, #12]
 80195fa:	e00f      	b.n	801961c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80195fc:	4b47      	ldr	r3, [pc, #284]	; (801971c <tcp_slowtmr+0x590>)
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019602:	429a      	cmp	r2, r3
 8019604:	d006      	beq.n	8019614 <tcp_slowtmr+0x488>
 8019606:	4b46      	ldr	r3, [pc, #280]	; (8019720 <tcp_slowtmr+0x594>)
 8019608:	f240 5271 	movw	r2, #1393	; 0x571
 801960c:	4947      	ldr	r1, [pc, #284]	; (801972c <tcp_slowtmr+0x5a0>)
 801960e:	4846      	ldr	r0, [pc, #280]	; (8019728 <tcp_slowtmr+0x59c>)
 8019610:	f00b f8c6 	bl	80247a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8019614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019616:	68db      	ldr	r3, [r3, #12]
 8019618:	4a40      	ldr	r2, [pc, #256]	; (801971c <tcp_slowtmr+0x590>)
 801961a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801961c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019620:	2b00      	cmp	r3, #0
 8019622:	d013      	beq.n	801964c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019626:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801962a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801962c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019630:	3304      	adds	r3, #4
 8019632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019634:	8ad2      	ldrh	r2, [r2, #22]
 8019636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019638:	8b09      	ldrh	r1, [r1, #24]
 801963a:	9102      	str	r1, [sp, #8]
 801963c:	9201      	str	r2, [sp, #4]
 801963e:	9300      	str	r3, [sp, #0]
 8019640:	462b      	mov	r3, r5
 8019642:	4622      	mov	r2, r4
 8019644:	4601      	mov	r1, r0
 8019646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019648:	f004 feba 	bl	801e3c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964e:	691b      	ldr	r3, [r3, #16]
 8019650:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8019652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019654:	7d1b      	ldrb	r3, [r3, #20]
 8019656:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8019658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965e:	68db      	ldr	r3, [r3, #12]
 8019660:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019662:	6838      	ldr	r0, [r7, #0]
 8019664:	f7fe fffa 	bl	801865c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8019668:	4b31      	ldr	r3, [pc, #196]	; (8019730 <tcp_slowtmr+0x5a4>)
 801966a:	2200      	movs	r2, #0
 801966c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d004      	beq.n	801967e <tcp_slowtmr+0x4f2>
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	f06f 010c 	mvn.w	r1, #12
 801967a:	68b8      	ldr	r0, [r7, #8]
 801967c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801967e:	4b2c      	ldr	r3, [pc, #176]	; (8019730 <tcp_slowtmr+0x5a4>)
 8019680:	781b      	ldrb	r3, [r3, #0]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d037      	beq.n	80196f6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8019686:	e592      	b.n	80191ae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8019688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801968a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801968e:	68db      	ldr	r3, [r3, #12]
 8019690:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8019692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019694:	7f1b      	ldrb	r3, [r3, #28]
 8019696:	3301      	adds	r3, #1
 8019698:	b2da      	uxtb	r2, r3
 801969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801969c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a0:	7f1a      	ldrb	r2, [r3, #28]
 80196a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a4:	7f5b      	ldrb	r3, [r3, #29]
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d325      	bcc.n	80196f6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80196aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ac:	2200      	movs	r2, #0
 80196ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80196b0:	4b1f      	ldr	r3, [pc, #124]	; (8019730 <tcp_slowtmr+0x5a4>)
 80196b2:	2200      	movs	r2, #0
 80196b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80196b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d00b      	beq.n	80196d8 <tcp_slowtmr+0x54c>
 80196c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80196c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80196c8:	6912      	ldr	r2, [r2, #16]
 80196ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80196cc:	4610      	mov	r0, r2
 80196ce:	4798      	blx	r3
 80196d0:	4603      	mov	r3, r0
 80196d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80196d6:	e002      	b.n	80196de <tcp_slowtmr+0x552>
 80196d8:	2300      	movs	r3, #0
 80196da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80196de:	4b14      	ldr	r3, [pc, #80]	; (8019730 <tcp_slowtmr+0x5a4>)
 80196e0:	781b      	ldrb	r3, [r3, #0]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d000      	beq.n	80196e8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80196e6:	e562      	b.n	80191ae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80196e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d102      	bne.n	80196f6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80196f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80196f2:	f004 f89f 	bl	801d834 <tcp_output>
  while (pcb != NULL) {
 80196f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	f47f ad5e 	bne.w	80191ba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80196fe:	2300      	movs	r3, #0
 8019700:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8019702:	4b0c      	ldr	r3, [pc, #48]	; (8019734 <tcp_slowtmr+0x5a8>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019708:	e069      	b.n	80197de <tcp_slowtmr+0x652>
 801970a:	bf00      	nop
 801970c:	200103c4 	.word	0x200103c4
 8019710:	000a4cb8 	.word	0x000a4cb8
 8019714:	10624dd3 	.word	0x10624dd3
 8019718:	000124f8 	.word	0x000124f8
 801971c:	200103c0 	.word	0x200103c0
 8019720:	08026b7c 	.word	0x08026b7c
 8019724:	08026fb4 	.word	0x08026fb4
 8019728:	08026bc0 	.word	0x08026bc0
 801972c:	08026fe0 	.word	0x08026fe0
 8019730:	200103bc 	.word	0x200103bc
 8019734:	200103d0 	.word	0x200103d0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973a:	7d1b      	ldrb	r3, [r3, #20]
 801973c:	2b0a      	cmp	r3, #10
 801973e:	d006      	beq.n	801974e <tcp_slowtmr+0x5c2>
 8019740:	4b2a      	ldr	r3, [pc, #168]	; (80197ec <tcp_slowtmr+0x660>)
 8019742:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8019746:	492a      	ldr	r1, [pc, #168]	; (80197f0 <tcp_slowtmr+0x664>)
 8019748:	482a      	ldr	r0, [pc, #168]	; (80197f4 <tcp_slowtmr+0x668>)
 801974a:	f00b f829 	bl	80247a0 <iprintf>
    pcb_remove = 0;
 801974e:	2300      	movs	r3, #0
 8019750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019754:	4b28      	ldr	r3, [pc, #160]	; (80197f8 <tcp_slowtmr+0x66c>)
 8019756:	681a      	ldr	r2, [r3, #0]
 8019758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975a:	6a1b      	ldr	r3, [r3, #32]
 801975c:	1ad3      	subs	r3, r2, r3
 801975e:	2bf0      	cmp	r3, #240	; 0xf0
 8019760:	d904      	bls.n	801976c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8019762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019766:	3301      	adds	r3, #1
 8019768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019770:	2b00      	cmp	r3, #0
 8019772:	d02f      	beq.n	80197d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8019774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019776:	f000 fbf5 	bl	8019f64 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801977c:	2b00      	cmp	r3, #0
 801977e:	d010      	beq.n	80197a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019780:	4b1e      	ldr	r3, [pc, #120]	; (80197fc <tcp_slowtmr+0x670>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019786:	429a      	cmp	r2, r3
 8019788:	d106      	bne.n	8019798 <tcp_slowtmr+0x60c>
 801978a:	4b18      	ldr	r3, [pc, #96]	; (80197ec <tcp_slowtmr+0x660>)
 801978c:	f240 52af 	movw	r2, #1455	; 0x5af
 8019790:	491b      	ldr	r1, [pc, #108]	; (8019800 <tcp_slowtmr+0x674>)
 8019792:	4818      	ldr	r0, [pc, #96]	; (80197f4 <tcp_slowtmr+0x668>)
 8019794:	f00b f804 	bl	80247a0 <iprintf>
        prev->next = pcb->next;
 8019798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801979a:	68da      	ldr	r2, [r3, #12]
 801979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801979e:	60da      	str	r2, [r3, #12]
 80197a0:	e00f      	b.n	80197c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80197a2:	4b16      	ldr	r3, [pc, #88]	; (80197fc <tcp_slowtmr+0x670>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197a8:	429a      	cmp	r2, r3
 80197aa:	d006      	beq.n	80197ba <tcp_slowtmr+0x62e>
 80197ac:	4b0f      	ldr	r3, [pc, #60]	; (80197ec <tcp_slowtmr+0x660>)
 80197ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80197b2:	4914      	ldr	r1, [pc, #80]	; (8019804 <tcp_slowtmr+0x678>)
 80197b4:	480f      	ldr	r0, [pc, #60]	; (80197f4 <tcp_slowtmr+0x668>)
 80197b6:	f00a fff3 	bl	80247a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80197ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197bc:	68db      	ldr	r3, [r3, #12]
 80197be:	4a0f      	ldr	r2, [pc, #60]	; (80197fc <tcp_slowtmr+0x670>)
 80197c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80197c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80197c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c8:	68db      	ldr	r3, [r3, #12]
 80197ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80197cc:	69f8      	ldr	r0, [r7, #28]
 80197ce:	f7fe ff45 	bl	801865c <tcp_free>
 80197d2:	e004      	b.n	80197de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80197d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80197d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197da:	68db      	ldr	r3, [r3, #12]
 80197dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80197de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d1a9      	bne.n	8019738 <tcp_slowtmr+0x5ac>
    }
  }
}
 80197e4:	bf00      	nop
 80197e6:	3730      	adds	r7, #48	; 0x30
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bdb0      	pop	{r4, r5, r7, pc}
 80197ec:	08026b7c 	.word	0x08026b7c
 80197f0:	0802700c 	.word	0x0802700c
 80197f4:	08026bc0 	.word	0x08026bc0
 80197f8:	200103c4 	.word	0x200103c4
 80197fc:	200103d0 	.word	0x200103d0
 8019800:	0802703c 	.word	0x0802703c
 8019804:	08027064 	.word	0x08027064

08019808 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b082      	sub	sp, #8
 801980c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801980e:	4b2d      	ldr	r3, [pc, #180]	; (80198c4 <tcp_fasttmr+0xbc>)
 8019810:	781b      	ldrb	r3, [r3, #0]
 8019812:	3301      	adds	r3, #1
 8019814:	b2da      	uxtb	r2, r3
 8019816:	4b2b      	ldr	r3, [pc, #172]	; (80198c4 <tcp_fasttmr+0xbc>)
 8019818:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801981a:	4b2b      	ldr	r3, [pc, #172]	; (80198c8 <tcp_fasttmr+0xc0>)
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019820:	e048      	b.n	80198b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	7f9a      	ldrb	r2, [r3, #30]
 8019826:	4b27      	ldr	r3, [pc, #156]	; (80198c4 <tcp_fasttmr+0xbc>)
 8019828:	781b      	ldrb	r3, [r3, #0]
 801982a:	429a      	cmp	r2, r3
 801982c:	d03f      	beq.n	80198ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801982e:	4b25      	ldr	r3, [pc, #148]	; (80198c4 <tcp_fasttmr+0xbc>)
 8019830:	781a      	ldrb	r2, [r3, #0]
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	8b5b      	ldrh	r3, [r3, #26]
 801983a:	f003 0301 	and.w	r3, r3, #1
 801983e:	2b00      	cmp	r3, #0
 8019840:	d010      	beq.n	8019864 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	8b5b      	ldrh	r3, [r3, #26]
 8019846:	f043 0302 	orr.w	r3, r3, #2
 801984a:	b29a      	uxth	r2, r3
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8019850:	6878      	ldr	r0, [r7, #4]
 8019852:	f003 ffef 	bl	801d834 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	8b5b      	ldrh	r3, [r3, #26]
 801985a:	f023 0303 	bic.w	r3, r3, #3
 801985e:	b29a      	uxth	r2, r3
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	8b5b      	ldrh	r3, [r3, #26]
 8019868:	f003 0308 	and.w	r3, r3, #8
 801986c:	2b00      	cmp	r3, #0
 801986e:	d009      	beq.n	8019884 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	8b5b      	ldrh	r3, [r3, #26]
 8019874:	f023 0308 	bic.w	r3, r3, #8
 8019878:	b29a      	uxth	r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	f7ff f87c 	bl	801897c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	68db      	ldr	r3, [r3, #12]
 8019888:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801988e:	2b00      	cmp	r3, #0
 8019890:	d00a      	beq.n	80198a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8019892:	4b0e      	ldr	r3, [pc, #56]	; (80198cc <tcp_fasttmr+0xc4>)
 8019894:	2200      	movs	r2, #0
 8019896:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f000 f819 	bl	80198d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801989e:	4b0b      	ldr	r3, [pc, #44]	; (80198cc <tcp_fasttmr+0xc4>)
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d000      	beq.n	80198a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80198a6:	e7b8      	b.n	801981a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	607b      	str	r3, [r7, #4]
 80198ac:	e002      	b.n	80198b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	68db      	ldr	r3, [r3, #12]
 80198b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d1b3      	bne.n	8019822 <tcp_fasttmr+0x1a>
    }
  }
}
 80198ba:	bf00      	nop
 80198bc:	3708      	adds	r7, #8
 80198be:	46bd      	mov	sp, r7
 80198c0:	bd80      	pop	{r7, pc}
 80198c2:	bf00      	nop
 80198c4:	20008fc2 	.word	0x20008fc2
 80198c8:	200103c0 	.word	0x200103c0
 80198cc:	200103bc 	.word	0x200103bc

080198d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80198d0:	b590      	push	{r4, r7, lr}
 80198d2:	b085      	sub	sp, #20
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d109      	bne.n	80198f2 <tcp_process_refused_data+0x22>
 80198de:	4b37      	ldr	r3, [pc, #220]	; (80199bc <tcp_process_refused_data+0xec>)
 80198e0:	f240 6209 	movw	r2, #1545	; 0x609
 80198e4:	4936      	ldr	r1, [pc, #216]	; (80199c0 <tcp_process_refused_data+0xf0>)
 80198e6:	4837      	ldr	r0, [pc, #220]	; (80199c4 <tcp_process_refused_data+0xf4>)
 80198e8:	f00a ff5a 	bl	80247a0 <iprintf>
 80198ec:	f06f 030f 	mvn.w	r3, #15
 80198f0:	e060      	b.n	80199b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198f6:	7b5b      	ldrb	r3, [r3, #13]
 80198f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2200      	movs	r2, #0
 8019904:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801990c:	2b00      	cmp	r3, #0
 801990e:	d00b      	beq.n	8019928 <tcp_process_refused_data+0x58>
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6918      	ldr	r0, [r3, #16]
 801991a:	2300      	movs	r3, #0
 801991c:	68ba      	ldr	r2, [r7, #8]
 801991e:	6879      	ldr	r1, [r7, #4]
 8019920:	47a0      	blx	r4
 8019922:	4603      	mov	r3, r0
 8019924:	73fb      	strb	r3, [r7, #15]
 8019926:	e007      	b.n	8019938 <tcp_process_refused_data+0x68>
 8019928:	2300      	movs	r3, #0
 801992a:	68ba      	ldr	r2, [r7, #8]
 801992c:	6879      	ldr	r1, [r7, #4]
 801992e:	2000      	movs	r0, #0
 8019930:	f000 f8a2 	bl	8019a78 <tcp_recv_null>
 8019934:	4603      	mov	r3, r0
 8019936:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8019938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d12a      	bne.n	8019996 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8019940:	7bbb      	ldrb	r3, [r7, #14]
 8019942:	f003 0320 	and.w	r3, r3, #32
 8019946:	2b00      	cmp	r3, #0
 8019948:	d033      	beq.n	80199b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801994e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019952:	d005      	beq.n	8019960 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019958:	3301      	adds	r3, #1
 801995a:	b29a      	uxth	r2, r3
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019966:	2b00      	cmp	r3, #0
 8019968:	d00b      	beq.n	8019982 <tcp_process_refused_data+0xb2>
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	6918      	ldr	r0, [r3, #16]
 8019974:	2300      	movs	r3, #0
 8019976:	2200      	movs	r2, #0
 8019978:	6879      	ldr	r1, [r7, #4]
 801997a:	47a0      	blx	r4
 801997c:	4603      	mov	r3, r0
 801997e:	73fb      	strb	r3, [r7, #15]
 8019980:	e001      	b.n	8019986 <tcp_process_refused_data+0xb6>
 8019982:	2300      	movs	r3, #0
 8019984:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8019986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801998a:	f113 0f0d 	cmn.w	r3, #13
 801998e:	d110      	bne.n	80199b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8019990:	f06f 030c 	mvn.w	r3, #12
 8019994:	e00e      	b.n	80199b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8019996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801999a:	f113 0f0d 	cmn.w	r3, #13
 801999e:	d102      	bne.n	80199a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80199a0:	f06f 030c 	mvn.w	r3, #12
 80199a4:	e006      	b.n	80199b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	68ba      	ldr	r2, [r7, #8]
 80199aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80199ac:	f06f 0304 	mvn.w	r3, #4
 80199b0:	e000      	b.n	80199b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80199b2:	2300      	movs	r3, #0
}
 80199b4:	4618      	mov	r0, r3
 80199b6:	3714      	adds	r7, #20
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd90      	pop	{r4, r7, pc}
 80199bc:	08026b7c 	.word	0x08026b7c
 80199c0:	0802708c 	.word	0x0802708c
 80199c4:	08026bc0 	.word	0x08026bc0

080199c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b084      	sub	sp, #16
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80199d0:	e007      	b.n	80199e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80199d8:	6878      	ldr	r0, [r7, #4]
 80199da:	f000 f809 	bl	80199f0 <tcp_seg_free>
    seg = next;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1f4      	bne.n	80199d2 <tcp_segs_free+0xa>
  }
}
 80199e8:	bf00      	nop
 80199ea:	3710      	adds	r7, #16
 80199ec:	46bd      	mov	sp, r7
 80199ee:	bd80      	pop	{r7, pc}

080199f0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b082      	sub	sp, #8
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d00c      	beq.n	8019a18 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	685b      	ldr	r3, [r3, #4]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d004      	beq.n	8019a10 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7fe fb6a 	bl	80180e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8019a10:	6879      	ldr	r1, [r7, #4]
 8019a12:	2003      	movs	r0, #3
 8019a14:	f7fd fca0 	bl	8017358 <memp_free>
  }
}
 8019a18:	bf00      	nop
 8019a1a:	3708      	adds	r7, #8
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}

08019a20 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b084      	sub	sp, #16
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d106      	bne.n	8019a3c <tcp_seg_copy+0x1c>
 8019a2e:	4b0f      	ldr	r3, [pc, #60]	; (8019a6c <tcp_seg_copy+0x4c>)
 8019a30:	f240 6282 	movw	r2, #1666	; 0x682
 8019a34:	490e      	ldr	r1, [pc, #56]	; (8019a70 <tcp_seg_copy+0x50>)
 8019a36:	480f      	ldr	r0, [pc, #60]	; (8019a74 <tcp_seg_copy+0x54>)
 8019a38:	f00a feb2 	bl	80247a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8019a3c:	2003      	movs	r0, #3
 8019a3e:	f7fd fc39 	bl	80172b4 <memp_malloc>
 8019a42:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d101      	bne.n	8019a4e <tcp_seg_copy+0x2e>
    return NULL;
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	e00a      	b.n	8019a64 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8019a4e:	2210      	movs	r2, #16
 8019a50:	6879      	ldr	r1, [r7, #4]
 8019a52:	68f8      	ldr	r0, [r7, #12]
 8019a54:	f00a fde9 	bl	802462a <memcpy>
  pbuf_ref(cseg->p);
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f7fe fbe7 	bl	8018230 <pbuf_ref>
  return cseg;
 8019a62:	68fb      	ldr	r3, [r7, #12]
}
 8019a64:	4618      	mov	r0, r3
 8019a66:	3710      	adds	r7, #16
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	08026b7c 	.word	0x08026b7c
 8019a70:	080270d0 	.word	0x080270d0
 8019a74:	08026bc0 	.word	0x08026bc0

08019a78 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b084      	sub	sp, #16
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	60f8      	str	r0, [r7, #12]
 8019a80:	60b9      	str	r1, [r7, #8]
 8019a82:	607a      	str	r2, [r7, #4]
 8019a84:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8019a86:	68bb      	ldr	r3, [r7, #8]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d109      	bne.n	8019aa0 <tcp_recv_null+0x28>
 8019a8c:	4b12      	ldr	r3, [pc, #72]	; (8019ad8 <tcp_recv_null+0x60>)
 8019a8e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019a92:	4912      	ldr	r1, [pc, #72]	; (8019adc <tcp_recv_null+0x64>)
 8019a94:	4812      	ldr	r0, [pc, #72]	; (8019ae0 <tcp_recv_null+0x68>)
 8019a96:	f00a fe83 	bl	80247a0 <iprintf>
 8019a9a:	f06f 030f 	mvn.w	r3, #15
 8019a9e:	e016      	b.n	8019ace <tcp_recv_null+0x56>

  if (p != NULL) {
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d009      	beq.n	8019aba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	891b      	ldrh	r3, [r3, #8]
 8019aaa:	4619      	mov	r1, r3
 8019aac:	68b8      	ldr	r0, [r7, #8]
 8019aae:	f7ff fad7 	bl	8019060 <tcp_recved>
    pbuf_free(p);
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	f7fe fb16 	bl	80180e4 <pbuf_free>
 8019ab8:	e008      	b.n	8019acc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8019aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d104      	bne.n	8019acc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8019ac2:	68b8      	ldr	r0, [r7, #8]
 8019ac4:	f7fe ffc0 	bl	8018a48 <tcp_close>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	e000      	b.n	8019ace <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8019acc:	2300      	movs	r3, #0
}
 8019ace:	4618      	mov	r0, r3
 8019ad0:	3710      	adds	r7, #16
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bd80      	pop	{r7, pc}
 8019ad6:	bf00      	nop
 8019ad8:	08026b7c 	.word	0x08026b7c
 8019adc:	080270ec 	.word	0x080270ec
 8019ae0:	08026bc0 	.word	0x08026bc0

08019ae4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b086      	sub	sp, #24
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	4603      	mov	r3, r0
 8019aec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	db01      	blt.n	8019afa <tcp_kill_prio+0x16>
 8019af6:	79fb      	ldrb	r3, [r7, #7]
 8019af8:	e000      	b.n	8019afc <tcp_kill_prio+0x18>
 8019afa:	237f      	movs	r3, #127	; 0x7f
 8019afc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8019afe:	7afb      	ldrb	r3, [r7, #11]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d034      	beq.n	8019b6e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8019b04:	7afb      	ldrb	r3, [r7, #11]
 8019b06:	3b01      	subs	r3, #1
 8019b08:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019b0e:	2300      	movs	r3, #0
 8019b10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b12:	4b19      	ldr	r3, [pc, #100]	; (8019b78 <tcp_kill_prio+0x94>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	617b      	str	r3, [r7, #20]
 8019b18:	e01f      	b.n	8019b5a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8019b1a:	697b      	ldr	r3, [r7, #20]
 8019b1c:	7d5b      	ldrb	r3, [r3, #21]
 8019b1e:	7afa      	ldrb	r2, [r7, #11]
 8019b20:	429a      	cmp	r2, r3
 8019b22:	d80c      	bhi.n	8019b3e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019b24:	697b      	ldr	r3, [r7, #20]
 8019b26:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8019b28:	7afa      	ldrb	r2, [r7, #11]
 8019b2a:	429a      	cmp	r2, r3
 8019b2c:	d112      	bne.n	8019b54 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019b2e:	4b13      	ldr	r3, [pc, #76]	; (8019b7c <tcp_kill_prio+0x98>)
 8019b30:	681a      	ldr	r2, [r3, #0]
 8019b32:	697b      	ldr	r3, [r7, #20]
 8019b34:	6a1b      	ldr	r3, [r3, #32]
 8019b36:	1ad3      	subs	r3, r2, r3
 8019b38:	68fa      	ldr	r2, [r7, #12]
 8019b3a:	429a      	cmp	r2, r3
 8019b3c:	d80a      	bhi.n	8019b54 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8019b3e:	4b0f      	ldr	r3, [pc, #60]	; (8019b7c <tcp_kill_prio+0x98>)
 8019b40:	681a      	ldr	r2, [r3, #0]
 8019b42:	697b      	ldr	r3, [r7, #20]
 8019b44:	6a1b      	ldr	r3, [r3, #32]
 8019b46:	1ad3      	subs	r3, r2, r3
 8019b48:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8019b4e:	697b      	ldr	r3, [r7, #20]
 8019b50:	7d5b      	ldrb	r3, [r3, #21]
 8019b52:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b54:	697b      	ldr	r3, [r7, #20]
 8019b56:	68db      	ldr	r3, [r3, #12]
 8019b58:	617b      	str	r3, [r7, #20]
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d1dc      	bne.n	8019b1a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8019b60:	693b      	ldr	r3, [r7, #16]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d004      	beq.n	8019b70 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019b66:	6938      	ldr	r0, [r7, #16]
 8019b68:	f7ff f8b2 	bl	8018cd0 <tcp_abort>
 8019b6c:	e000      	b.n	8019b70 <tcp_kill_prio+0x8c>
    return;
 8019b6e:	bf00      	nop
  }
}
 8019b70:	3718      	adds	r7, #24
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	200103c0 	.word	0x200103c0
 8019b7c:	200103c4 	.word	0x200103c4

08019b80 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b086      	sub	sp, #24
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	4603      	mov	r3, r0
 8019b88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8019b8a:	79fb      	ldrb	r3, [r7, #7]
 8019b8c:	2b08      	cmp	r3, #8
 8019b8e:	d009      	beq.n	8019ba4 <tcp_kill_state+0x24>
 8019b90:	79fb      	ldrb	r3, [r7, #7]
 8019b92:	2b09      	cmp	r3, #9
 8019b94:	d006      	beq.n	8019ba4 <tcp_kill_state+0x24>
 8019b96:	4b1a      	ldr	r3, [pc, #104]	; (8019c00 <tcp_kill_state+0x80>)
 8019b98:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8019b9c:	4919      	ldr	r1, [pc, #100]	; (8019c04 <tcp_kill_state+0x84>)
 8019b9e:	481a      	ldr	r0, [pc, #104]	; (8019c08 <tcp_kill_state+0x88>)
 8019ba0:	f00a fdfe 	bl	80247a0 <iprintf>

  inactivity = 0;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019bac:	4b17      	ldr	r3, [pc, #92]	; (8019c0c <tcp_kill_state+0x8c>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	617b      	str	r3, [r7, #20]
 8019bb2:	e017      	b.n	8019be4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8019bb4:	697b      	ldr	r3, [r7, #20]
 8019bb6:	7d1b      	ldrb	r3, [r3, #20]
 8019bb8:	79fa      	ldrb	r2, [r7, #7]
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d10f      	bne.n	8019bde <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019bbe:	4b14      	ldr	r3, [pc, #80]	; (8019c10 <tcp_kill_state+0x90>)
 8019bc0:	681a      	ldr	r2, [r3, #0]
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	6a1b      	ldr	r3, [r3, #32]
 8019bc6:	1ad3      	subs	r3, r2, r3
 8019bc8:	68fa      	ldr	r2, [r7, #12]
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	d807      	bhi.n	8019bde <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8019bce:	4b10      	ldr	r3, [pc, #64]	; (8019c10 <tcp_kill_state+0x90>)
 8019bd0:	681a      	ldr	r2, [r3, #0]
 8019bd2:	697b      	ldr	r3, [r7, #20]
 8019bd4:	6a1b      	ldr	r3, [r3, #32]
 8019bd6:	1ad3      	subs	r3, r2, r3
 8019bd8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8019bda:	697b      	ldr	r3, [r7, #20]
 8019bdc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019bde:	697b      	ldr	r3, [r7, #20]
 8019be0:	68db      	ldr	r3, [r3, #12]
 8019be2:	617b      	str	r3, [r7, #20]
 8019be4:	697b      	ldr	r3, [r7, #20]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d1e4      	bne.n	8019bb4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019bea:	693b      	ldr	r3, [r7, #16]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d003      	beq.n	8019bf8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019bf0:	2100      	movs	r1, #0
 8019bf2:	6938      	ldr	r0, [r7, #16]
 8019bf4:	f7fe ffae 	bl	8018b54 <tcp_abandon>
  }
}
 8019bf8:	bf00      	nop
 8019bfa:	3718      	adds	r7, #24
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd80      	pop	{r7, pc}
 8019c00:	08026b7c 	.word	0x08026b7c
 8019c04:	08027108 	.word	0x08027108
 8019c08:	08026bc0 	.word	0x08026bc0
 8019c0c:	200103c0 	.word	0x200103c0
 8019c10:	200103c4 	.word	0x200103c4

08019c14 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b084      	sub	sp, #16
 8019c18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c22:	4b12      	ldr	r3, [pc, #72]	; (8019c6c <tcp_kill_timewait+0x58>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	60fb      	str	r3, [r7, #12]
 8019c28:	e012      	b.n	8019c50 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019c2a:	4b11      	ldr	r3, [pc, #68]	; (8019c70 <tcp_kill_timewait+0x5c>)
 8019c2c:	681a      	ldr	r2, [r3, #0]
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	6a1b      	ldr	r3, [r3, #32]
 8019c32:	1ad3      	subs	r3, r2, r3
 8019c34:	687a      	ldr	r2, [r7, #4]
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d807      	bhi.n	8019c4a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8019c3a:	4b0d      	ldr	r3, [pc, #52]	; (8019c70 <tcp_kill_timewait+0x5c>)
 8019c3c:	681a      	ldr	r2, [r3, #0]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	6a1b      	ldr	r3, [r3, #32]
 8019c42:	1ad3      	subs	r3, r2, r3
 8019c44:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	68db      	ldr	r3, [r3, #12]
 8019c4e:	60fb      	str	r3, [r7, #12]
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d1e9      	bne.n	8019c2a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8019c56:	68bb      	ldr	r3, [r7, #8]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d002      	beq.n	8019c62 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019c5c:	68b8      	ldr	r0, [r7, #8]
 8019c5e:	f7ff f837 	bl	8018cd0 <tcp_abort>
  }
}
 8019c62:	bf00      	nop
 8019c64:	3710      	adds	r7, #16
 8019c66:	46bd      	mov	sp, r7
 8019c68:	bd80      	pop	{r7, pc}
 8019c6a:	bf00      	nop
 8019c6c:	200103d0 	.word	0x200103d0
 8019c70:	200103c4 	.word	0x200103c4

08019c74 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b082      	sub	sp, #8
 8019c78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019c7a:	4b10      	ldr	r3, [pc, #64]	; (8019cbc <tcp_handle_closepend+0x48>)
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019c80:	e014      	b.n	8019cac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	68db      	ldr	r3, [r3, #12]
 8019c86:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	8b5b      	ldrh	r3, [r3, #26]
 8019c8c:	f003 0308 	and.w	r3, r3, #8
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d009      	beq.n	8019ca8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	8b5b      	ldrh	r3, [r3, #26]
 8019c98:	f023 0308 	bic.w	r3, r3, #8
 8019c9c:	b29a      	uxth	r2, r3
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7fe fe6a 	bl	801897c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d1e7      	bne.n	8019c82 <tcp_handle_closepend+0xe>
  }
}
 8019cb2:	bf00      	nop
 8019cb4:	3708      	adds	r7, #8
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
 8019cba:	bf00      	nop
 8019cbc:	200103c0 	.word	0x200103c0

08019cc0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b084      	sub	sp, #16
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019cca:	2001      	movs	r0, #1
 8019ccc:	f7fd faf2 	bl	80172b4 <memp_malloc>
 8019cd0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d126      	bne.n	8019d26 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019cd8:	f7ff ffcc 	bl	8019c74 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8019cdc:	f7ff ff9a 	bl	8019c14 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019ce0:	2001      	movs	r0, #1
 8019ce2:	f7fd fae7 	bl	80172b4 <memp_malloc>
 8019ce6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d11b      	bne.n	8019d26 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8019cee:	2009      	movs	r0, #9
 8019cf0:	f7ff ff46 	bl	8019b80 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019cf4:	2001      	movs	r0, #1
 8019cf6:	f7fd fadd 	bl	80172b4 <memp_malloc>
 8019cfa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d111      	bne.n	8019d26 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8019d02:	2008      	movs	r0, #8
 8019d04:	f7ff ff3c 	bl	8019b80 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019d08:	2001      	movs	r0, #1
 8019d0a:	f7fd fad3 	bl	80172b4 <memp_malloc>
 8019d0e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d107      	bne.n	8019d26 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8019d16:	79fb      	ldrb	r3, [r7, #7]
 8019d18:	4618      	mov	r0, r3
 8019d1a:	f7ff fee3 	bl	8019ae4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019d1e:	2001      	movs	r0, #1
 8019d20:	f7fd fac8 	bl	80172b4 <memp_malloc>
 8019d24:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d03f      	beq.n	8019dac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019d2c:	229c      	movs	r2, #156	; 0x9c
 8019d2e:	2100      	movs	r1, #0
 8019d30:	68f8      	ldr	r0, [r7, #12]
 8019d32:	f00a fc85 	bl	8024640 <memset>
    pcb->prio = prio;
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	79fa      	ldrb	r2, [r7, #7]
 8019d3a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8019d42:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	22ff      	movs	r2, #255	; 0xff
 8019d5a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019d62:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	2206      	movs	r2, #6
 8019d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	2206      	movs	r2, #6
 8019d70:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d78:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	2201      	movs	r2, #1
 8019d7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8019d82:	4b0d      	ldr	r3, [pc, #52]	; (8019db8 <tcp_alloc+0xf8>)
 8019d84:	681a      	ldr	r2, [r3, #0]
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019d8a:	4b0c      	ldr	r3, [pc, #48]	; (8019dbc <tcp_alloc+0xfc>)
 8019d8c:	781a      	ldrb	r2, [r3, #0]
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8019d98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	4a08      	ldr	r2, [pc, #32]	; (8019dc0 <tcp_alloc+0x100>)
 8019da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	4a07      	ldr	r2, [pc, #28]	; (8019dc4 <tcp_alloc+0x104>)
 8019da8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8019dac:	68fb      	ldr	r3, [r7, #12]
}
 8019dae:	4618      	mov	r0, r3
 8019db0:	3710      	adds	r7, #16
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}
 8019db6:	bf00      	nop
 8019db8:	200103c4 	.word	0x200103c4
 8019dbc:	20008fc2 	.word	0x20008fc2
 8019dc0:	08019a79 	.word	0x08019a79
 8019dc4:	006ddd00 	.word	0x006ddd00

08019dc8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b084      	sub	sp, #16
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	4603      	mov	r3, r0
 8019dd0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8019dd2:	2040      	movs	r0, #64	; 0x40
 8019dd4:	f7ff ff74 	bl	8019cc0 <tcp_alloc>
 8019dd8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019dda:	68fb      	ldr	r3, [r7, #12]
}
 8019ddc:	4618      	mov	r0, r3
 8019dde:	3710      	adds	r7, #16
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bd80      	pop	{r7, pc}

08019de4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8019de4:	b480      	push	{r7}
 8019de6:	b083      	sub	sp, #12
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d002      	beq.n	8019dfa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	683a      	ldr	r2, [r7, #0]
 8019df8:	611a      	str	r2, [r3, #16]
  }
}
 8019dfa:	bf00      	nop
 8019dfc:	370c      	adds	r7, #12
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e04:	4770      	bx	lr
	...

08019e08 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b082      	sub	sp, #8
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
 8019e10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d00e      	beq.n	8019e36 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	7d1b      	ldrb	r3, [r3, #20]
 8019e1c:	2b01      	cmp	r3, #1
 8019e1e:	d106      	bne.n	8019e2e <tcp_recv+0x26>
 8019e20:	4b07      	ldr	r3, [pc, #28]	; (8019e40 <tcp_recv+0x38>)
 8019e22:	f240 72df 	movw	r2, #2015	; 0x7df
 8019e26:	4907      	ldr	r1, [pc, #28]	; (8019e44 <tcp_recv+0x3c>)
 8019e28:	4807      	ldr	r0, [pc, #28]	; (8019e48 <tcp_recv+0x40>)
 8019e2a:	f00a fcb9 	bl	80247a0 <iprintf>
    pcb->recv = recv;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	683a      	ldr	r2, [r7, #0]
 8019e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8019e36:	bf00      	nop
 8019e38:	3708      	adds	r7, #8
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}
 8019e3e:	bf00      	nop
 8019e40:	08026b7c 	.word	0x08026b7c
 8019e44:	08027118 	.word	0x08027118
 8019e48:	08026bc0 	.word	0x08026bc0

08019e4c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b082      	sub	sp, #8
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
 8019e54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d00e      	beq.n	8019e7a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	7d1b      	ldrb	r3, [r3, #20]
 8019e60:	2b01      	cmp	r3, #1
 8019e62:	d106      	bne.n	8019e72 <tcp_sent+0x26>
 8019e64:	4b07      	ldr	r3, [pc, #28]	; (8019e84 <tcp_sent+0x38>)
 8019e66:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8019e6a:	4907      	ldr	r1, [pc, #28]	; (8019e88 <tcp_sent+0x3c>)
 8019e6c:	4807      	ldr	r0, [pc, #28]	; (8019e8c <tcp_sent+0x40>)
 8019e6e:	f00a fc97 	bl	80247a0 <iprintf>
    pcb->sent = sent;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	683a      	ldr	r2, [r7, #0]
 8019e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8019e7a:	bf00      	nop
 8019e7c:	3708      	adds	r7, #8
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
 8019e82:	bf00      	nop
 8019e84:	08026b7c 	.word	0x08026b7c
 8019e88:	08027140 	.word	0x08027140
 8019e8c:	08026bc0 	.word	0x08026bc0

08019e90 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b082      	sub	sp, #8
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d00e      	beq.n	8019ebe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	7d1b      	ldrb	r3, [r3, #20]
 8019ea4:	2b01      	cmp	r3, #1
 8019ea6:	d106      	bne.n	8019eb6 <tcp_err+0x26>
 8019ea8:	4b07      	ldr	r3, [pc, #28]	; (8019ec8 <tcp_err+0x38>)
 8019eaa:	f640 020d 	movw	r2, #2061	; 0x80d
 8019eae:	4907      	ldr	r1, [pc, #28]	; (8019ecc <tcp_err+0x3c>)
 8019eb0:	4807      	ldr	r0, [pc, #28]	; (8019ed0 <tcp_err+0x40>)
 8019eb2:	f00a fc75 	bl	80247a0 <iprintf>
    pcb->errf = err;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	683a      	ldr	r2, [r7, #0]
 8019eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8019ebe:	bf00      	nop
 8019ec0:	3708      	adds	r7, #8
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	08026b7c 	.word	0x08026b7c
 8019ecc:	08027168 	.word	0x08027168
 8019ed0:	08026bc0 	.word	0x08026bc0

08019ed4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8019ed4:	b480      	push	{r7}
 8019ed6:	b085      	sub	sp, #20
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
 8019edc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d008      	beq.n	8019ef6 <tcp_accept+0x22>
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	7d1b      	ldrb	r3, [r3, #20]
 8019ee8:	2b01      	cmp	r3, #1
 8019eea:	d104      	bne.n	8019ef6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	683a      	ldr	r2, [r7, #0]
 8019ef4:	619a      	str	r2, [r3, #24]
  }
}
 8019ef6:	bf00      	nop
 8019ef8:	3714      	adds	r7, #20
 8019efa:	46bd      	mov	sp, r7
 8019efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f00:	4770      	bx	lr
	...

08019f04 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b084      	sub	sp, #16
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	60f8      	str	r0, [r7, #12]
 8019f0c:	60b9      	str	r1, [r7, #8]
 8019f0e:	4613      	mov	r3, r2
 8019f10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d107      	bne.n	8019f28 <tcp_poll+0x24>
 8019f18:	4b0e      	ldr	r3, [pc, #56]	; (8019f54 <tcp_poll+0x50>)
 8019f1a:	f640 023d 	movw	r2, #2109	; 0x83d
 8019f1e:	490e      	ldr	r1, [pc, #56]	; (8019f58 <tcp_poll+0x54>)
 8019f20:	480e      	ldr	r0, [pc, #56]	; (8019f5c <tcp_poll+0x58>)
 8019f22:	f00a fc3d 	bl	80247a0 <iprintf>
 8019f26:	e011      	b.n	8019f4c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	7d1b      	ldrb	r3, [r3, #20]
 8019f2c:	2b01      	cmp	r3, #1
 8019f2e:	d106      	bne.n	8019f3e <tcp_poll+0x3a>
 8019f30:	4b08      	ldr	r3, [pc, #32]	; (8019f54 <tcp_poll+0x50>)
 8019f32:	f640 023e 	movw	r2, #2110	; 0x83e
 8019f36:	490a      	ldr	r1, [pc, #40]	; (8019f60 <tcp_poll+0x5c>)
 8019f38:	4808      	ldr	r0, [pc, #32]	; (8019f5c <tcp_poll+0x58>)
 8019f3a:	f00a fc31 	bl	80247a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	68ba      	ldr	r2, [r7, #8]
 8019f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	79fa      	ldrb	r2, [r7, #7]
 8019f4a:	775a      	strb	r2, [r3, #29]
}
 8019f4c:	3710      	adds	r7, #16
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd80      	pop	{r7, pc}
 8019f52:	bf00      	nop
 8019f54:	08026b7c 	.word	0x08026b7c
 8019f58:	08027190 	.word	0x08027190
 8019f5c:	08026bc0 	.word	0x08026bc0
 8019f60:	080271a8 	.word	0x080271a8

08019f64 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b082      	sub	sp, #8
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d107      	bne.n	8019f82 <tcp_pcb_purge+0x1e>
 8019f72:	4b21      	ldr	r3, [pc, #132]	; (8019ff8 <tcp_pcb_purge+0x94>)
 8019f74:	f640 0251 	movw	r2, #2129	; 0x851
 8019f78:	4920      	ldr	r1, [pc, #128]	; (8019ffc <tcp_pcb_purge+0x98>)
 8019f7a:	4821      	ldr	r0, [pc, #132]	; (801a000 <tcp_pcb_purge+0x9c>)
 8019f7c:	f00a fc10 	bl	80247a0 <iprintf>
 8019f80:	e037      	b.n	8019ff2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	7d1b      	ldrb	r3, [r3, #20]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d033      	beq.n	8019ff2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8019f8e:	2b0a      	cmp	r3, #10
 8019f90:	d02f      	beq.n	8019ff2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8019f96:	2b01      	cmp	r3, #1
 8019f98:	d02b      	beq.n	8019ff2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d007      	beq.n	8019fb2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7fe f89c 	bl	80180e4 <pbuf_free>
      pcb->refused_data = NULL;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d002      	beq.n	8019fc0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8019fba:	6878      	ldr	r0, [r7, #4]
 8019fbc:	f000 f986 	bl	801a2cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fc6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f7ff fcfb 	bl	80199c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7ff fcf6 	bl	80199c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	2200      	movs	r2, #0
 8019fe0:	66da      	str	r2, [r3, #108]	; 0x6c
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2200      	movs	r2, #0
 8019fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8019ff2:	3708      	adds	r7, #8
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}
 8019ff8:	08026b7c 	.word	0x08026b7c
 8019ffc:	080271c8 	.word	0x080271c8
 801a000:	08026bc0 	.word	0x08026bc0

0801a004 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b084      	sub	sp, #16
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
 801a00c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a00e:	683b      	ldr	r3, [r7, #0]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d106      	bne.n	801a022 <tcp_pcb_remove+0x1e>
 801a014:	4b3e      	ldr	r3, [pc, #248]	; (801a110 <tcp_pcb_remove+0x10c>)
 801a016:	f640 0283 	movw	r2, #2179	; 0x883
 801a01a:	493e      	ldr	r1, [pc, #248]	; (801a114 <tcp_pcb_remove+0x110>)
 801a01c:	483e      	ldr	r0, [pc, #248]	; (801a118 <tcp_pcb_remove+0x114>)
 801a01e:	f00a fbbf 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d106      	bne.n	801a036 <tcp_pcb_remove+0x32>
 801a028:	4b39      	ldr	r3, [pc, #228]	; (801a110 <tcp_pcb_remove+0x10c>)
 801a02a:	f640 0284 	movw	r2, #2180	; 0x884
 801a02e:	493b      	ldr	r1, [pc, #236]	; (801a11c <tcp_pcb_remove+0x118>)
 801a030:	4839      	ldr	r0, [pc, #228]	; (801a118 <tcp_pcb_remove+0x114>)
 801a032:	f00a fbb5 	bl	80247a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	683a      	ldr	r2, [r7, #0]
 801a03c:	429a      	cmp	r2, r3
 801a03e:	d105      	bne.n	801a04c <tcp_pcb_remove+0x48>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	68da      	ldr	r2, [r3, #12]
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	601a      	str	r2, [r3, #0]
 801a04a:	e013      	b.n	801a074 <tcp_pcb_remove+0x70>
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	60fb      	str	r3, [r7, #12]
 801a052:	e00c      	b.n	801a06e <tcp_pcb_remove+0x6a>
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	68db      	ldr	r3, [r3, #12]
 801a058:	683a      	ldr	r2, [r7, #0]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d104      	bne.n	801a068 <tcp_pcb_remove+0x64>
 801a05e:	683b      	ldr	r3, [r7, #0]
 801a060:	68da      	ldr	r2, [r3, #12]
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	60da      	str	r2, [r3, #12]
 801a066:	e005      	b.n	801a074 <tcp_pcb_remove+0x70>
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	68db      	ldr	r3, [r3, #12]
 801a06c:	60fb      	str	r3, [r7, #12]
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d1ef      	bne.n	801a054 <tcp_pcb_remove+0x50>
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	2200      	movs	r2, #0
 801a078:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801a07a:	6838      	ldr	r0, [r7, #0]
 801a07c:	f7ff ff72 	bl	8019f64 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	7d1b      	ldrb	r3, [r3, #20]
 801a084:	2b0a      	cmp	r3, #10
 801a086:	d013      	beq.n	801a0b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801a088:	683b      	ldr	r3, [r7, #0]
 801a08a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801a08c:	2b01      	cmp	r3, #1
 801a08e:	d00f      	beq.n	801a0b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	8b5b      	ldrh	r3, [r3, #26]
 801a094:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d009      	beq.n	801a0b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801a09c:	683b      	ldr	r3, [r7, #0]
 801a09e:	8b5b      	ldrh	r3, [r3, #26]
 801a0a0:	f043 0302 	orr.w	r3, r3, #2
 801a0a4:	b29a      	uxth	r2, r3
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a0aa:	6838      	ldr	r0, [r7, #0]
 801a0ac:	f003 fbc2 	bl	801d834 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	7d1b      	ldrb	r3, [r3, #20]
 801a0b4:	2b01      	cmp	r3, #1
 801a0b6:	d020      	beq.n	801a0fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d006      	beq.n	801a0ce <tcp_pcb_remove+0xca>
 801a0c0:	4b13      	ldr	r3, [pc, #76]	; (801a110 <tcp_pcb_remove+0x10c>)
 801a0c2:	f640 0293 	movw	r2, #2195	; 0x893
 801a0c6:	4916      	ldr	r1, [pc, #88]	; (801a120 <tcp_pcb_remove+0x11c>)
 801a0c8:	4813      	ldr	r0, [pc, #76]	; (801a118 <tcp_pcb_remove+0x114>)
 801a0ca:	f00a fb69 	bl	80247a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d006      	beq.n	801a0e4 <tcp_pcb_remove+0xe0>
 801a0d6:	4b0e      	ldr	r3, [pc, #56]	; (801a110 <tcp_pcb_remove+0x10c>)
 801a0d8:	f640 0294 	movw	r2, #2196	; 0x894
 801a0dc:	4911      	ldr	r1, [pc, #68]	; (801a124 <tcp_pcb_remove+0x120>)
 801a0de:	480e      	ldr	r0, [pc, #56]	; (801a118 <tcp_pcb_remove+0x114>)
 801a0e0:	f00a fb5e 	bl	80247a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d006      	beq.n	801a0fa <tcp_pcb_remove+0xf6>
 801a0ec:	4b08      	ldr	r3, [pc, #32]	; (801a110 <tcp_pcb_remove+0x10c>)
 801a0ee:	f640 0296 	movw	r2, #2198	; 0x896
 801a0f2:	490d      	ldr	r1, [pc, #52]	; (801a128 <tcp_pcb_remove+0x124>)
 801a0f4:	4808      	ldr	r0, [pc, #32]	; (801a118 <tcp_pcb_remove+0x114>)
 801a0f6:	f00a fb53 	bl	80247a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801a0fa:	683b      	ldr	r3, [r7, #0]
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	2200      	movs	r2, #0
 801a104:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801a106:	bf00      	nop
 801a108:	3710      	adds	r7, #16
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}
 801a10e:	bf00      	nop
 801a110:	08026b7c 	.word	0x08026b7c
 801a114:	080271e4 	.word	0x080271e4
 801a118:	08026bc0 	.word	0x08026bc0
 801a11c:	08027200 	.word	0x08027200
 801a120:	08027220 	.word	0x08027220
 801a124:	08027238 	.word	0x08027238
 801a128:	08027254 	.word	0x08027254

0801a12c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d106      	bne.n	801a148 <tcp_next_iss+0x1c>
 801a13a:	4b0a      	ldr	r3, [pc, #40]	; (801a164 <tcp_next_iss+0x38>)
 801a13c:	f640 02af 	movw	r2, #2223	; 0x8af
 801a140:	4909      	ldr	r1, [pc, #36]	; (801a168 <tcp_next_iss+0x3c>)
 801a142:	480a      	ldr	r0, [pc, #40]	; (801a16c <tcp_next_iss+0x40>)
 801a144:	f00a fb2c 	bl	80247a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801a148:	4b09      	ldr	r3, [pc, #36]	; (801a170 <tcp_next_iss+0x44>)
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	4b09      	ldr	r3, [pc, #36]	; (801a174 <tcp_next_iss+0x48>)
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	4413      	add	r3, r2
 801a152:	4a07      	ldr	r2, [pc, #28]	; (801a170 <tcp_next_iss+0x44>)
 801a154:	6013      	str	r3, [r2, #0]
  return iss;
 801a156:	4b06      	ldr	r3, [pc, #24]	; (801a170 <tcp_next_iss+0x44>)
 801a158:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801a15a:	4618      	mov	r0, r3
 801a15c:	3708      	adds	r7, #8
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}
 801a162:	bf00      	nop
 801a164:	08026b7c 	.word	0x08026b7c
 801a168:	0802726c 	.word	0x0802726c
 801a16c:	08026bc0 	.word	0x08026bc0
 801a170:	20000038 	.word	0x20000038
 801a174:	200103c4 	.word	0x200103c4

0801a178 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b086      	sub	sp, #24
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	4603      	mov	r3, r0
 801a180:	60b9      	str	r1, [r7, #8]
 801a182:	607a      	str	r2, [r7, #4]
 801a184:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d106      	bne.n	801a19a <tcp_eff_send_mss_netif+0x22>
 801a18c:	4b14      	ldr	r3, [pc, #80]	; (801a1e0 <tcp_eff_send_mss_netif+0x68>)
 801a18e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801a192:	4914      	ldr	r1, [pc, #80]	; (801a1e4 <tcp_eff_send_mss_netif+0x6c>)
 801a194:	4814      	ldr	r0, [pc, #80]	; (801a1e8 <tcp_eff_send_mss_netif+0x70>)
 801a196:	f00a fb03 	bl	80247a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d101      	bne.n	801a1a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801a1a0:	89fb      	ldrh	r3, [r7, #14]
 801a1a2:	e019      	b.n	801a1d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801a1a4:	68bb      	ldr	r3, [r7, #8]
 801a1a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801a1a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801a1aa:	8afb      	ldrh	r3, [r7, #22]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d012      	beq.n	801a1d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801a1b0:	2328      	movs	r3, #40	; 0x28
 801a1b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801a1b4:	8afa      	ldrh	r2, [r7, #22]
 801a1b6:	8abb      	ldrh	r3, [r7, #20]
 801a1b8:	429a      	cmp	r2, r3
 801a1ba:	d904      	bls.n	801a1c6 <tcp_eff_send_mss_netif+0x4e>
 801a1bc:	8afa      	ldrh	r2, [r7, #22]
 801a1be:	8abb      	ldrh	r3, [r7, #20]
 801a1c0:	1ad3      	subs	r3, r2, r3
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	e000      	b.n	801a1c8 <tcp_eff_send_mss_netif+0x50>
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801a1ca:	8a7a      	ldrh	r2, [r7, #18]
 801a1cc:	89fb      	ldrh	r3, [r7, #14]
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	bf28      	it	cs
 801a1d2:	4613      	movcs	r3, r2
 801a1d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801a1d6:	89fb      	ldrh	r3, [r7, #14]
}
 801a1d8:	4618      	mov	r0, r3
 801a1da:	3718      	adds	r7, #24
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}
 801a1e0:	08026b7c 	.word	0x08026b7c
 801a1e4:	08027288 	.word	0x08027288
 801a1e8:	08026bc0 	.word	0x08026bc0

0801a1ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b084      	sub	sp, #16
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d119      	bne.n	801a234 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801a200:	4b10      	ldr	r3, [pc, #64]	; (801a244 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801a202:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801a206:	4910      	ldr	r1, [pc, #64]	; (801a248 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801a208:	4810      	ldr	r0, [pc, #64]	; (801a24c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801a20a:	f00a fac9 	bl	80247a0 <iprintf>

  while (pcb != NULL) {
 801a20e:	e011      	b.n	801a234 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	681a      	ldr	r2, [r3, #0]
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	429a      	cmp	r2, r3
 801a21a:	d108      	bne.n	801a22e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	68db      	ldr	r3, [r3, #12]
 801a220:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801a222:	68f8      	ldr	r0, [r7, #12]
 801a224:	f7fe fd54 	bl	8018cd0 <tcp_abort>
      pcb = next;
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	60fb      	str	r3, [r7, #12]
 801a22c:	e002      	b.n	801a234 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	68db      	ldr	r3, [r3, #12]
 801a232:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d1ea      	bne.n	801a210 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801a23a:	bf00      	nop
 801a23c:	3710      	adds	r7, #16
 801a23e:	46bd      	mov	sp, r7
 801a240:	bd80      	pop	{r7, pc}
 801a242:	bf00      	nop
 801a244:	08026b7c 	.word	0x08026b7c
 801a248:	080272b0 	.word	0x080272b0
 801a24c:	08026bc0 	.word	0x08026bc0

0801a250 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b084      	sub	sp, #16
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
 801a258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d02a      	beq.n	801a2b6 <tcp_netif_ip_addr_changed+0x66>
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d026      	beq.n	801a2b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801a268:	4b15      	ldr	r3, [pc, #84]	; (801a2c0 <tcp_netif_ip_addr_changed+0x70>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	4619      	mov	r1, r3
 801a26e:	6878      	ldr	r0, [r7, #4]
 801a270:	f7ff ffbc 	bl	801a1ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801a274:	4b13      	ldr	r3, [pc, #76]	; (801a2c4 <tcp_netif_ip_addr_changed+0x74>)
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	4619      	mov	r1, r3
 801a27a:	6878      	ldr	r0, [r7, #4]
 801a27c:	f7ff ffb6 	bl	801a1ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801a280:	683b      	ldr	r3, [r7, #0]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d017      	beq.n	801a2b6 <tcp_netif_ip_addr_changed+0x66>
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d013      	beq.n	801a2b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a28e:	4b0e      	ldr	r3, [pc, #56]	; (801a2c8 <tcp_netif_ip_addr_changed+0x78>)
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	60fb      	str	r3, [r7, #12]
 801a294:	e00c      	b.n	801a2b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	681a      	ldr	r2, [r3, #0]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d103      	bne.n	801a2aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801a2a2:	683b      	ldr	r3, [r7, #0]
 801a2a4:	681a      	ldr	r2, [r3, #0]
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	68db      	ldr	r3, [r3, #12]
 801a2ae:	60fb      	str	r3, [r7, #12]
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d1ef      	bne.n	801a296 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801a2b6:	bf00      	nop
 801a2b8:	3710      	adds	r7, #16
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	200103c0 	.word	0x200103c0
 801a2c4:	200103cc 	.word	0x200103cc
 801a2c8:	200103c8 	.word	0x200103c8

0801a2cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b082      	sub	sp, #8
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d007      	beq.n	801a2ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7ff fb71 	bl	80199c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801a2ec:	bf00      	nop
 801a2ee:	3708      	adds	r7, #8
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd80      	pop	{r7, pc}

0801a2f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801a2f4:	b590      	push	{r4, r7, lr}
 801a2f6:	b08d      	sub	sp, #52	; 0x34
 801a2f8:	af04      	add	r7, sp, #16
 801a2fa:	6078      	str	r0, [r7, #4]
 801a2fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d105      	bne.n	801a310 <tcp_input+0x1c>
 801a304:	4b9b      	ldr	r3, [pc, #620]	; (801a574 <tcp_input+0x280>)
 801a306:	2283      	movs	r2, #131	; 0x83
 801a308:	499b      	ldr	r1, [pc, #620]	; (801a578 <tcp_input+0x284>)
 801a30a:	489c      	ldr	r0, [pc, #624]	; (801a57c <tcp_input+0x288>)
 801a30c:	f00a fa48 	bl	80247a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	685b      	ldr	r3, [r3, #4]
 801a314:	4a9a      	ldr	r2, [pc, #616]	; (801a580 <tcp_input+0x28c>)
 801a316:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	895b      	ldrh	r3, [r3, #10]
 801a31c:	2b13      	cmp	r3, #19
 801a31e:	f240 83c4 	bls.w	801aaaa <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a322:	4b98      	ldr	r3, [pc, #608]	; (801a584 <tcp_input+0x290>)
 801a324:	695a      	ldr	r2, [r3, #20]
 801a326:	4b97      	ldr	r3, [pc, #604]	; (801a584 <tcp_input+0x290>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	4619      	mov	r1, r3
 801a32c:	4610      	mov	r0, r2
 801a32e:	f008 fa7d 	bl	802282c <ip4_addr_isbroadcast_u32>
 801a332:	4603      	mov	r3, r0
 801a334:	2b00      	cmp	r3, #0
 801a336:	f040 83ba 	bne.w	801aaae <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801a33a:	4b92      	ldr	r3, [pc, #584]	; (801a584 <tcp_input+0x290>)
 801a33c:	695b      	ldr	r3, [r3, #20]
 801a33e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a342:	2be0      	cmp	r3, #224	; 0xe0
 801a344:	f000 83b3 	beq.w	801aaae <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801a348:	4b8d      	ldr	r3, [pc, #564]	; (801a580 <tcp_input+0x28c>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	899b      	ldrh	r3, [r3, #12]
 801a34e:	b29b      	uxth	r3, r3
 801a350:	4618      	mov	r0, r3
 801a352:	f7fc faf9 	bl	8016948 <lwip_htons>
 801a356:	4603      	mov	r3, r0
 801a358:	0b1b      	lsrs	r3, r3, #12
 801a35a:	b29b      	uxth	r3, r3
 801a35c:	b2db      	uxtb	r3, r3
 801a35e:	009b      	lsls	r3, r3, #2
 801a360:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801a362:	7cbb      	ldrb	r3, [r7, #18]
 801a364:	2b13      	cmp	r3, #19
 801a366:	f240 83a2 	bls.w	801aaae <tcp_input+0x7ba>
 801a36a:	7cbb      	ldrb	r3, [r7, #18]
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	891b      	ldrh	r3, [r3, #8]
 801a372:	429a      	cmp	r2, r3
 801a374:	f200 839b 	bhi.w	801aaae <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a378:	7cbb      	ldrb	r3, [r7, #18]
 801a37a:	b29b      	uxth	r3, r3
 801a37c:	3b14      	subs	r3, #20
 801a37e:	b29a      	uxth	r2, r3
 801a380:	4b81      	ldr	r3, [pc, #516]	; (801a588 <tcp_input+0x294>)
 801a382:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801a384:	4b81      	ldr	r3, [pc, #516]	; (801a58c <tcp_input+0x298>)
 801a386:	2200      	movs	r2, #0
 801a388:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	895a      	ldrh	r2, [r3, #10]
 801a38e:	7cbb      	ldrb	r3, [r7, #18]
 801a390:	b29b      	uxth	r3, r3
 801a392:	429a      	cmp	r2, r3
 801a394:	d309      	bcc.n	801a3aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801a396:	4b7c      	ldr	r3, [pc, #496]	; (801a588 <tcp_input+0x294>)
 801a398:	881a      	ldrh	r2, [r3, #0]
 801a39a:	4b7d      	ldr	r3, [pc, #500]	; (801a590 <tcp_input+0x29c>)
 801a39c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801a39e:	7cbb      	ldrb	r3, [r7, #18]
 801a3a0:	4619      	mov	r1, r3
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	f7fd fe18 	bl	8017fd8 <pbuf_remove_header>
 801a3a8:	e04e      	b.n	801a448 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d105      	bne.n	801a3be <tcp_input+0xca>
 801a3b2:	4b70      	ldr	r3, [pc, #448]	; (801a574 <tcp_input+0x280>)
 801a3b4:	22c2      	movs	r2, #194	; 0xc2
 801a3b6:	4977      	ldr	r1, [pc, #476]	; (801a594 <tcp_input+0x2a0>)
 801a3b8:	4870      	ldr	r0, [pc, #448]	; (801a57c <tcp_input+0x288>)
 801a3ba:	f00a f9f1 	bl	80247a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801a3be:	2114      	movs	r1, #20
 801a3c0:	6878      	ldr	r0, [r7, #4]
 801a3c2:	f7fd fe09 	bl	8017fd8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	895a      	ldrh	r2, [r3, #10]
 801a3ca:	4b71      	ldr	r3, [pc, #452]	; (801a590 <tcp_input+0x29c>)
 801a3cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a3ce:	4b6e      	ldr	r3, [pc, #440]	; (801a588 <tcp_input+0x294>)
 801a3d0:	881a      	ldrh	r2, [r3, #0]
 801a3d2:	4b6f      	ldr	r3, [pc, #444]	; (801a590 <tcp_input+0x29c>)
 801a3d4:	881b      	ldrh	r3, [r3, #0]
 801a3d6:	1ad3      	subs	r3, r2, r3
 801a3d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801a3da:	4b6d      	ldr	r3, [pc, #436]	; (801a590 <tcp_input+0x29c>)
 801a3dc:	881b      	ldrh	r3, [r3, #0]
 801a3de:	4619      	mov	r1, r3
 801a3e0:	6878      	ldr	r0, [r7, #4]
 801a3e2:	f7fd fdf9 	bl	8017fd8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	895b      	ldrh	r3, [r3, #10]
 801a3ec:	8a3a      	ldrh	r2, [r7, #16]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	f200 835f 	bhi.w	801aab2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	4a64      	ldr	r2, [pc, #400]	; (801a58c <tcp_input+0x298>)
 801a3fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	8a3a      	ldrh	r2, [r7, #16]
 801a404:	4611      	mov	r1, r2
 801a406:	4618      	mov	r0, r3
 801a408:	f7fd fde6 	bl	8017fd8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	891a      	ldrh	r2, [r3, #8]
 801a410:	8a3b      	ldrh	r3, [r7, #16]
 801a412:	1ad3      	subs	r3, r2, r3
 801a414:	b29a      	uxth	r2, r3
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	895b      	ldrh	r3, [r3, #10]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d005      	beq.n	801a42e <tcp_input+0x13a>
 801a422:	4b54      	ldr	r3, [pc, #336]	; (801a574 <tcp_input+0x280>)
 801a424:	22df      	movs	r2, #223	; 0xdf
 801a426:	495c      	ldr	r1, [pc, #368]	; (801a598 <tcp_input+0x2a4>)
 801a428:	4854      	ldr	r0, [pc, #336]	; (801a57c <tcp_input+0x288>)
 801a42a:	f00a f9b9 	bl	80247a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	891a      	ldrh	r2, [r3, #8]
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	891b      	ldrh	r3, [r3, #8]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d005      	beq.n	801a448 <tcp_input+0x154>
 801a43c:	4b4d      	ldr	r3, [pc, #308]	; (801a574 <tcp_input+0x280>)
 801a43e:	22e0      	movs	r2, #224	; 0xe0
 801a440:	4956      	ldr	r1, [pc, #344]	; (801a59c <tcp_input+0x2a8>)
 801a442:	484e      	ldr	r0, [pc, #312]	; (801a57c <tcp_input+0x288>)
 801a444:	f00a f9ac 	bl	80247a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801a448:	4b4d      	ldr	r3, [pc, #308]	; (801a580 <tcp_input+0x28c>)
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	881b      	ldrh	r3, [r3, #0]
 801a44e:	b29a      	uxth	r2, r3
 801a450:	4b4b      	ldr	r3, [pc, #300]	; (801a580 <tcp_input+0x28c>)
 801a452:	681c      	ldr	r4, [r3, #0]
 801a454:	4610      	mov	r0, r2
 801a456:	f7fc fa77 	bl	8016948 <lwip_htons>
 801a45a:	4603      	mov	r3, r0
 801a45c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a45e:	4b48      	ldr	r3, [pc, #288]	; (801a580 <tcp_input+0x28c>)
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	885b      	ldrh	r3, [r3, #2]
 801a464:	b29a      	uxth	r2, r3
 801a466:	4b46      	ldr	r3, [pc, #280]	; (801a580 <tcp_input+0x28c>)
 801a468:	681c      	ldr	r4, [r3, #0]
 801a46a:	4610      	mov	r0, r2
 801a46c:	f7fc fa6c 	bl	8016948 <lwip_htons>
 801a470:	4603      	mov	r3, r0
 801a472:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a474:	4b42      	ldr	r3, [pc, #264]	; (801a580 <tcp_input+0x28c>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	685a      	ldr	r2, [r3, #4]
 801a47a:	4b41      	ldr	r3, [pc, #260]	; (801a580 <tcp_input+0x28c>)
 801a47c:	681c      	ldr	r4, [r3, #0]
 801a47e:	4610      	mov	r0, r2
 801a480:	f7fc fa77 	bl	8016972 <lwip_htonl>
 801a484:	4603      	mov	r3, r0
 801a486:	6063      	str	r3, [r4, #4]
 801a488:	6863      	ldr	r3, [r4, #4]
 801a48a:	4a45      	ldr	r2, [pc, #276]	; (801a5a0 <tcp_input+0x2ac>)
 801a48c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a48e:	4b3c      	ldr	r3, [pc, #240]	; (801a580 <tcp_input+0x28c>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	689a      	ldr	r2, [r3, #8]
 801a494:	4b3a      	ldr	r3, [pc, #232]	; (801a580 <tcp_input+0x28c>)
 801a496:	681c      	ldr	r4, [r3, #0]
 801a498:	4610      	mov	r0, r2
 801a49a:	f7fc fa6a 	bl	8016972 <lwip_htonl>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	60a3      	str	r3, [r4, #8]
 801a4a2:	68a3      	ldr	r3, [r4, #8]
 801a4a4:	4a3f      	ldr	r2, [pc, #252]	; (801a5a4 <tcp_input+0x2b0>)
 801a4a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a4a8:	4b35      	ldr	r3, [pc, #212]	; (801a580 <tcp_input+0x28c>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	89db      	ldrh	r3, [r3, #14]
 801a4ae:	b29a      	uxth	r2, r3
 801a4b0:	4b33      	ldr	r3, [pc, #204]	; (801a580 <tcp_input+0x28c>)
 801a4b2:	681c      	ldr	r4, [r3, #0]
 801a4b4:	4610      	mov	r0, r2
 801a4b6:	f7fc fa47 	bl	8016948 <lwip_htons>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801a4be:	4b30      	ldr	r3, [pc, #192]	; (801a580 <tcp_input+0x28c>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	899b      	ldrh	r3, [r3, #12]
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7fc fa3e 	bl	8016948 <lwip_htons>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	b2db      	uxtb	r3, r3
 801a4d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a4d4:	b2da      	uxtb	r2, r3
 801a4d6:	4b34      	ldr	r3, [pc, #208]	; (801a5a8 <tcp_input+0x2b4>)
 801a4d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	891a      	ldrh	r2, [r3, #8]
 801a4de:	4b33      	ldr	r3, [pc, #204]	; (801a5ac <tcp_input+0x2b8>)
 801a4e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a4e2:	4b31      	ldr	r3, [pc, #196]	; (801a5a8 <tcp_input+0x2b4>)
 801a4e4:	781b      	ldrb	r3, [r3, #0]
 801a4e6:	f003 0303 	and.w	r3, r3, #3
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d00c      	beq.n	801a508 <tcp_input+0x214>
    tcplen++;
 801a4ee:	4b2f      	ldr	r3, [pc, #188]	; (801a5ac <tcp_input+0x2b8>)
 801a4f0:	881b      	ldrh	r3, [r3, #0]
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	4b2d      	ldr	r3, [pc, #180]	; (801a5ac <tcp_input+0x2b8>)
 801a4f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	891a      	ldrh	r2, [r3, #8]
 801a4fe:	4b2b      	ldr	r3, [pc, #172]	; (801a5ac <tcp_input+0x2b8>)
 801a500:	881b      	ldrh	r3, [r3, #0]
 801a502:	429a      	cmp	r2, r3
 801a504:	f200 82d7 	bhi.w	801aab6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801a508:	2300      	movs	r3, #0
 801a50a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a50c:	4b28      	ldr	r3, [pc, #160]	; (801a5b0 <tcp_input+0x2bc>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	61fb      	str	r3, [r7, #28]
 801a512:	e09d      	b.n	801a650 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a514:	69fb      	ldr	r3, [r7, #28]
 801a516:	7d1b      	ldrb	r3, [r3, #20]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d105      	bne.n	801a528 <tcp_input+0x234>
 801a51c:	4b15      	ldr	r3, [pc, #84]	; (801a574 <tcp_input+0x280>)
 801a51e:	22fb      	movs	r2, #251	; 0xfb
 801a520:	4924      	ldr	r1, [pc, #144]	; (801a5b4 <tcp_input+0x2c0>)
 801a522:	4816      	ldr	r0, [pc, #88]	; (801a57c <tcp_input+0x288>)
 801a524:	f00a f93c 	bl	80247a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a528:	69fb      	ldr	r3, [r7, #28]
 801a52a:	7d1b      	ldrb	r3, [r3, #20]
 801a52c:	2b0a      	cmp	r3, #10
 801a52e:	d105      	bne.n	801a53c <tcp_input+0x248>
 801a530:	4b10      	ldr	r3, [pc, #64]	; (801a574 <tcp_input+0x280>)
 801a532:	22fc      	movs	r2, #252	; 0xfc
 801a534:	4920      	ldr	r1, [pc, #128]	; (801a5b8 <tcp_input+0x2c4>)
 801a536:	4811      	ldr	r0, [pc, #68]	; (801a57c <tcp_input+0x288>)
 801a538:	f00a f932 	bl	80247a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a53c:	69fb      	ldr	r3, [r7, #28]
 801a53e:	7d1b      	ldrb	r3, [r3, #20]
 801a540:	2b01      	cmp	r3, #1
 801a542:	d105      	bne.n	801a550 <tcp_input+0x25c>
 801a544:	4b0b      	ldr	r3, [pc, #44]	; (801a574 <tcp_input+0x280>)
 801a546:	22fd      	movs	r2, #253	; 0xfd
 801a548:	491c      	ldr	r1, [pc, #112]	; (801a5bc <tcp_input+0x2c8>)
 801a54a:	480c      	ldr	r0, [pc, #48]	; (801a57c <tcp_input+0x288>)
 801a54c:	f00a f928 	bl	80247a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a550:	69fb      	ldr	r3, [r7, #28]
 801a552:	7a1b      	ldrb	r3, [r3, #8]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d033      	beq.n	801a5c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a558:	69fb      	ldr	r3, [r7, #28]
 801a55a:	7a1a      	ldrb	r2, [r3, #8]
 801a55c:	4b09      	ldr	r3, [pc, #36]	; (801a584 <tcp_input+0x290>)
 801a55e:	685b      	ldr	r3, [r3, #4]
 801a560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a564:	3301      	adds	r3, #1
 801a566:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a568:	429a      	cmp	r2, r3
 801a56a:	d029      	beq.n	801a5c0 <tcp_input+0x2cc>
      prev = pcb;
 801a56c:	69fb      	ldr	r3, [r7, #28]
 801a56e:	61bb      	str	r3, [r7, #24]
      continue;
 801a570:	e06b      	b.n	801a64a <tcp_input+0x356>
 801a572:	bf00      	nop
 801a574:	080272e4 	.word	0x080272e4
 801a578:	08027318 	.word	0x08027318
 801a57c:	08027330 	.word	0x08027330
 801a580:	20008fd4 	.word	0x20008fd4
 801a584:	2000cc8c 	.word	0x2000cc8c
 801a588:	20008fd8 	.word	0x20008fd8
 801a58c:	20008fdc 	.word	0x20008fdc
 801a590:	20008fda 	.word	0x20008fda
 801a594:	08027358 	.word	0x08027358
 801a598:	08027368 	.word	0x08027368
 801a59c:	08027374 	.word	0x08027374
 801a5a0:	20008fe4 	.word	0x20008fe4
 801a5a4:	20008fe8 	.word	0x20008fe8
 801a5a8:	20008ff0 	.word	0x20008ff0
 801a5ac:	20008fee 	.word	0x20008fee
 801a5b0:	200103c0 	.word	0x200103c0
 801a5b4:	08027394 	.word	0x08027394
 801a5b8:	080273bc 	.word	0x080273bc
 801a5bc:	080273e8 	.word	0x080273e8
    }

    if (pcb->remote_port == tcphdr->src &&
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	8b1a      	ldrh	r2, [r3, #24]
 801a5c4:	4b94      	ldr	r3, [pc, #592]	; (801a818 <tcp_input+0x524>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	881b      	ldrh	r3, [r3, #0]
 801a5ca:	b29b      	uxth	r3, r3
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d13a      	bne.n	801a646 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801a5d0:	69fb      	ldr	r3, [r7, #28]
 801a5d2:	8ada      	ldrh	r2, [r3, #22]
 801a5d4:	4b90      	ldr	r3, [pc, #576]	; (801a818 <tcp_input+0x524>)
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	885b      	ldrh	r3, [r3, #2]
 801a5da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	d132      	bne.n	801a646 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	685a      	ldr	r2, [r3, #4]
 801a5e4:	4b8d      	ldr	r3, [pc, #564]	; (801a81c <tcp_input+0x528>)
 801a5e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	d12c      	bne.n	801a646 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a5ec:	69fb      	ldr	r3, [r7, #28]
 801a5ee:	681a      	ldr	r2, [r3, #0]
 801a5f0:	4b8a      	ldr	r3, [pc, #552]	; (801a81c <tcp_input+0x528>)
 801a5f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a5f4:	429a      	cmp	r2, r3
 801a5f6:	d126      	bne.n	801a646 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a5f8:	69fb      	ldr	r3, [r7, #28]
 801a5fa:	68db      	ldr	r3, [r3, #12]
 801a5fc:	69fa      	ldr	r2, [r7, #28]
 801a5fe:	429a      	cmp	r2, r3
 801a600:	d106      	bne.n	801a610 <tcp_input+0x31c>
 801a602:	4b87      	ldr	r3, [pc, #540]	; (801a820 <tcp_input+0x52c>)
 801a604:	f240 120d 	movw	r2, #269	; 0x10d
 801a608:	4986      	ldr	r1, [pc, #536]	; (801a824 <tcp_input+0x530>)
 801a60a:	4887      	ldr	r0, [pc, #540]	; (801a828 <tcp_input+0x534>)
 801a60c:	f00a f8c8 	bl	80247a0 <iprintf>
      if (prev != NULL) {
 801a610:	69bb      	ldr	r3, [r7, #24]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d00a      	beq.n	801a62c <tcp_input+0x338>
        prev->next = pcb->next;
 801a616:	69fb      	ldr	r3, [r7, #28]
 801a618:	68da      	ldr	r2, [r3, #12]
 801a61a:	69bb      	ldr	r3, [r7, #24]
 801a61c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801a61e:	4b83      	ldr	r3, [pc, #524]	; (801a82c <tcp_input+0x538>)
 801a620:	681a      	ldr	r2, [r3, #0]
 801a622:	69fb      	ldr	r3, [r7, #28]
 801a624:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801a626:	4a81      	ldr	r2, [pc, #516]	; (801a82c <tcp_input+0x538>)
 801a628:	69fb      	ldr	r3, [r7, #28]
 801a62a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801a62c:	69fb      	ldr	r3, [r7, #28]
 801a62e:	68db      	ldr	r3, [r3, #12]
 801a630:	69fa      	ldr	r2, [r7, #28]
 801a632:	429a      	cmp	r2, r3
 801a634:	d111      	bne.n	801a65a <tcp_input+0x366>
 801a636:	4b7a      	ldr	r3, [pc, #488]	; (801a820 <tcp_input+0x52c>)
 801a638:	f240 1215 	movw	r2, #277	; 0x115
 801a63c:	497c      	ldr	r1, [pc, #496]	; (801a830 <tcp_input+0x53c>)
 801a63e:	487a      	ldr	r0, [pc, #488]	; (801a828 <tcp_input+0x534>)
 801a640:	f00a f8ae 	bl	80247a0 <iprintf>
      break;
 801a644:	e009      	b.n	801a65a <tcp_input+0x366>
    }
    prev = pcb;
 801a646:	69fb      	ldr	r3, [r7, #28]
 801a648:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a64a:	69fb      	ldr	r3, [r7, #28]
 801a64c:	68db      	ldr	r3, [r3, #12]
 801a64e:	61fb      	str	r3, [r7, #28]
 801a650:	69fb      	ldr	r3, [r7, #28]
 801a652:	2b00      	cmp	r3, #0
 801a654:	f47f af5e 	bne.w	801a514 <tcp_input+0x220>
 801a658:	e000      	b.n	801a65c <tcp_input+0x368>
      break;
 801a65a:	bf00      	nop
  }

  if (pcb == NULL) {
 801a65c:	69fb      	ldr	r3, [r7, #28]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	f040 8095 	bne.w	801a78e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a664:	4b73      	ldr	r3, [pc, #460]	; (801a834 <tcp_input+0x540>)
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	61fb      	str	r3, [r7, #28]
 801a66a:	e03f      	b.n	801a6ec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a66c:	69fb      	ldr	r3, [r7, #28]
 801a66e:	7d1b      	ldrb	r3, [r3, #20]
 801a670:	2b0a      	cmp	r3, #10
 801a672:	d006      	beq.n	801a682 <tcp_input+0x38e>
 801a674:	4b6a      	ldr	r3, [pc, #424]	; (801a820 <tcp_input+0x52c>)
 801a676:	f240 121f 	movw	r2, #287	; 0x11f
 801a67a:	496f      	ldr	r1, [pc, #444]	; (801a838 <tcp_input+0x544>)
 801a67c:	486a      	ldr	r0, [pc, #424]	; (801a828 <tcp_input+0x534>)
 801a67e:	f00a f88f 	bl	80247a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a682:	69fb      	ldr	r3, [r7, #28]
 801a684:	7a1b      	ldrb	r3, [r3, #8]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d009      	beq.n	801a69e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a68a:	69fb      	ldr	r3, [r7, #28]
 801a68c:	7a1a      	ldrb	r2, [r3, #8]
 801a68e:	4b63      	ldr	r3, [pc, #396]	; (801a81c <tcp_input+0x528>)
 801a690:	685b      	ldr	r3, [r3, #4]
 801a692:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a696:	3301      	adds	r3, #1
 801a698:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a69a:	429a      	cmp	r2, r3
 801a69c:	d122      	bne.n	801a6e4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801a69e:	69fb      	ldr	r3, [r7, #28]
 801a6a0:	8b1a      	ldrh	r2, [r3, #24]
 801a6a2:	4b5d      	ldr	r3, [pc, #372]	; (801a818 <tcp_input+0x524>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	881b      	ldrh	r3, [r3, #0]
 801a6a8:	b29b      	uxth	r3, r3
 801a6aa:	429a      	cmp	r2, r3
 801a6ac:	d11b      	bne.n	801a6e6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801a6ae:	69fb      	ldr	r3, [r7, #28]
 801a6b0:	8ada      	ldrh	r2, [r3, #22]
 801a6b2:	4b59      	ldr	r3, [pc, #356]	; (801a818 <tcp_input+0x524>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	885b      	ldrh	r3, [r3, #2]
 801a6b8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801a6ba:	429a      	cmp	r2, r3
 801a6bc:	d113      	bne.n	801a6e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a6be:	69fb      	ldr	r3, [r7, #28]
 801a6c0:	685a      	ldr	r2, [r3, #4]
 801a6c2:	4b56      	ldr	r3, [pc, #344]	; (801a81c <tcp_input+0x528>)
 801a6c4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d10d      	bne.n	801a6e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a6ca:	69fb      	ldr	r3, [r7, #28]
 801a6cc:	681a      	ldr	r2, [r3, #0]
 801a6ce:	4b53      	ldr	r3, [pc, #332]	; (801a81c <tcp_input+0x528>)
 801a6d0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a6d2:	429a      	cmp	r2, r3
 801a6d4:	d107      	bne.n	801a6e6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801a6d6:	69f8      	ldr	r0, [r7, #28]
 801a6d8:	f000 fb52 	bl	801ad80 <tcp_timewait_input>
        }
        pbuf_free(p);
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f7fd fd01 	bl	80180e4 <pbuf_free>
        return;
 801a6e2:	e1ee      	b.n	801aac2 <tcp_input+0x7ce>
        continue;
 801a6e4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6e6:	69fb      	ldr	r3, [r7, #28]
 801a6e8:	68db      	ldr	r3, [r3, #12]
 801a6ea:	61fb      	str	r3, [r7, #28]
 801a6ec:	69fb      	ldr	r3, [r7, #28]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d1bc      	bne.n	801a66c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a6f6:	4b51      	ldr	r3, [pc, #324]	; (801a83c <tcp_input+0x548>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	617b      	str	r3, [r7, #20]
 801a6fc:	e02a      	b.n	801a754 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	7a1b      	ldrb	r3, [r3, #8]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d00c      	beq.n	801a720 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a706:	697b      	ldr	r3, [r7, #20]
 801a708:	7a1a      	ldrb	r2, [r3, #8]
 801a70a:	4b44      	ldr	r3, [pc, #272]	; (801a81c <tcp_input+0x528>)
 801a70c:	685b      	ldr	r3, [r3, #4]
 801a70e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a712:	3301      	adds	r3, #1
 801a714:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a716:	429a      	cmp	r2, r3
 801a718:	d002      	beq.n	801a720 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801a71a:	697b      	ldr	r3, [r7, #20]
 801a71c:	61bb      	str	r3, [r7, #24]
        continue;
 801a71e:	e016      	b.n	801a74e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	8ada      	ldrh	r2, [r3, #22]
 801a724:	4b3c      	ldr	r3, [pc, #240]	; (801a818 <tcp_input+0x524>)
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	885b      	ldrh	r3, [r3, #2]
 801a72a:	b29b      	uxth	r3, r3
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d10c      	bne.n	801a74a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	681a      	ldr	r2, [r3, #0]
 801a734:	4b39      	ldr	r3, [pc, #228]	; (801a81c <tcp_input+0x528>)
 801a736:	695b      	ldr	r3, [r3, #20]
 801a738:	429a      	cmp	r2, r3
 801a73a:	d00f      	beq.n	801a75c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801a73c:	697b      	ldr	r3, [r7, #20]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d00d      	beq.n	801a75e <tcp_input+0x46a>
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d009      	beq.n	801a75e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801a74a:	697b      	ldr	r3, [r7, #20]
 801a74c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	68db      	ldr	r3, [r3, #12]
 801a752:	617b      	str	r3, [r7, #20]
 801a754:	697b      	ldr	r3, [r7, #20]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d1d1      	bne.n	801a6fe <tcp_input+0x40a>
 801a75a:	e000      	b.n	801a75e <tcp_input+0x46a>
            break;
 801a75c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d014      	beq.n	801a78e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801a764:	69bb      	ldr	r3, [r7, #24]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d00a      	beq.n	801a780 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a76a:	697b      	ldr	r3, [r7, #20]
 801a76c:	68da      	ldr	r2, [r3, #12]
 801a76e:	69bb      	ldr	r3, [r7, #24]
 801a770:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801a772:	4b32      	ldr	r3, [pc, #200]	; (801a83c <tcp_input+0x548>)
 801a774:	681a      	ldr	r2, [r3, #0]
 801a776:	697b      	ldr	r3, [r7, #20]
 801a778:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801a77a:	4a30      	ldr	r2, [pc, #192]	; (801a83c <tcp_input+0x548>)
 801a77c:	697b      	ldr	r3, [r7, #20]
 801a77e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801a780:	6978      	ldr	r0, [r7, #20]
 801a782:	f000 f9ff 	bl	801ab84 <tcp_listen_input>
      }
      pbuf_free(p);
 801a786:	6878      	ldr	r0, [r7, #4]
 801a788:	f7fd fcac 	bl	80180e4 <pbuf_free>
      return;
 801a78c:	e199      	b.n	801aac2 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801a78e:	69fb      	ldr	r3, [r7, #28]
 801a790:	2b00      	cmp	r3, #0
 801a792:	f000 8160 	beq.w	801aa56 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801a796:	4b2a      	ldr	r3, [pc, #168]	; (801a840 <tcp_input+0x54c>)
 801a798:	2200      	movs	r2, #0
 801a79a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	891a      	ldrh	r2, [r3, #8]
 801a7a0:	4b27      	ldr	r3, [pc, #156]	; (801a840 <tcp_input+0x54c>)
 801a7a2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801a7a4:	4a26      	ldr	r2, [pc, #152]	; (801a840 <tcp_input+0x54c>)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801a7aa:	4b1b      	ldr	r3, [pc, #108]	; (801a818 <tcp_input+0x524>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	4a24      	ldr	r2, [pc, #144]	; (801a840 <tcp_input+0x54c>)
 801a7b0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801a7b2:	4b24      	ldr	r3, [pc, #144]	; (801a844 <tcp_input+0x550>)
 801a7b4:	2200      	movs	r2, #0
 801a7b6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801a7b8:	4b23      	ldr	r3, [pc, #140]	; (801a848 <tcp_input+0x554>)
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801a7be:	4b23      	ldr	r3, [pc, #140]	; (801a84c <tcp_input+0x558>)
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801a7c4:	4b22      	ldr	r3, [pc, #136]	; (801a850 <tcp_input+0x55c>)
 801a7c6:	781b      	ldrb	r3, [r3, #0]
 801a7c8:	f003 0308 	and.w	r3, r3, #8
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d006      	beq.n	801a7de <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	7b5b      	ldrb	r3, [r3, #13]
 801a7d4:	f043 0301 	orr.w	r3, r3, #1
 801a7d8:	b2da      	uxtb	r2, r3
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801a7de:	69fb      	ldr	r3, [r7, #28]
 801a7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d038      	beq.n	801a858 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a7e6:	69f8      	ldr	r0, [r7, #28]
 801a7e8:	f7ff f872 	bl	80198d0 <tcp_process_refused_data>
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	f113 0f0d 	cmn.w	r3, #13
 801a7f2:	d007      	beq.n	801a804 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a7f4:	69fb      	ldr	r3, [r7, #28]
 801a7f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d02d      	beq.n	801a858 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a7fc:	4b15      	ldr	r3, [pc, #84]	; (801a854 <tcp_input+0x560>)
 801a7fe:	881b      	ldrh	r3, [r3, #0]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d029      	beq.n	801a858 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801a804:	69fb      	ldr	r3, [r7, #28]
 801a806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a808:	2b00      	cmp	r3, #0
 801a80a:	f040 8104 	bne.w	801aa16 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801a80e:	69f8      	ldr	r0, [r7, #28]
 801a810:	f003 fe28 	bl	801e464 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801a814:	e0ff      	b.n	801aa16 <tcp_input+0x722>
 801a816:	bf00      	nop
 801a818:	20008fd4 	.word	0x20008fd4
 801a81c:	2000cc8c 	.word	0x2000cc8c
 801a820:	080272e4 	.word	0x080272e4
 801a824:	08027410 	.word	0x08027410
 801a828:	08027330 	.word	0x08027330
 801a82c:	200103c0 	.word	0x200103c0
 801a830:	0802743c 	.word	0x0802743c
 801a834:	200103d0 	.word	0x200103d0
 801a838:	08027468 	.word	0x08027468
 801a83c:	200103c8 	.word	0x200103c8
 801a840:	20008fc4 	.word	0x20008fc4
 801a844:	20008ff4 	.word	0x20008ff4
 801a848:	20008ff1 	.word	0x20008ff1
 801a84c:	20008fec 	.word	0x20008fec
 801a850:	20008ff0 	.word	0x20008ff0
 801a854:	20008fee 	.word	0x20008fee
      }
    }
    tcp_input_pcb = pcb;
 801a858:	4a9b      	ldr	r2, [pc, #620]	; (801aac8 <tcp_input+0x7d4>)
 801a85a:	69fb      	ldr	r3, [r7, #28]
 801a85c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801a85e:	69f8      	ldr	r0, [r7, #28]
 801a860:	f000 fb0a 	bl	801ae78 <tcp_process>
 801a864:	4603      	mov	r3, r0
 801a866:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801a868:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a86c:	f113 0f0d 	cmn.w	r3, #13
 801a870:	f000 80d3 	beq.w	801aa1a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801a874:	4b95      	ldr	r3, [pc, #596]	; (801aacc <tcp_input+0x7d8>)
 801a876:	781b      	ldrb	r3, [r3, #0]
 801a878:	f003 0308 	and.w	r3, r3, #8
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d015      	beq.n	801a8ac <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801a880:	69fb      	ldr	r3, [r7, #28]
 801a882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a886:	2b00      	cmp	r3, #0
 801a888:	d008      	beq.n	801a89c <tcp_input+0x5a8>
 801a88a:	69fb      	ldr	r3, [r7, #28]
 801a88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a890:	69fa      	ldr	r2, [r7, #28]
 801a892:	6912      	ldr	r2, [r2, #16]
 801a894:	f06f 010d 	mvn.w	r1, #13
 801a898:	4610      	mov	r0, r2
 801a89a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a89c:	69f9      	ldr	r1, [r7, #28]
 801a89e:	488c      	ldr	r0, [pc, #560]	; (801aad0 <tcp_input+0x7dc>)
 801a8a0:	f7ff fbb0 	bl	801a004 <tcp_pcb_remove>
        tcp_free(pcb);
 801a8a4:	69f8      	ldr	r0, [r7, #28]
 801a8a6:	f7fd fed9 	bl	801865c <tcp_free>
 801a8aa:	e0c1      	b.n	801aa30 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801a8b0:	4b88      	ldr	r3, [pc, #544]	; (801aad4 <tcp_input+0x7e0>)
 801a8b2:	881b      	ldrh	r3, [r3, #0]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d01d      	beq.n	801a8f4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801a8b8:	4b86      	ldr	r3, [pc, #536]	; (801aad4 <tcp_input+0x7e0>)
 801a8ba:	881b      	ldrh	r3, [r3, #0]
 801a8bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801a8be:	69fb      	ldr	r3, [r7, #28]
 801a8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d00a      	beq.n	801a8de <tcp_input+0x5ea>
 801a8c8:	69fb      	ldr	r3, [r7, #28]
 801a8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a8ce:	69fa      	ldr	r2, [r7, #28]
 801a8d0:	6910      	ldr	r0, [r2, #16]
 801a8d2:	89fa      	ldrh	r2, [r7, #14]
 801a8d4:	69f9      	ldr	r1, [r7, #28]
 801a8d6:	4798      	blx	r3
 801a8d8:	4603      	mov	r3, r0
 801a8da:	74fb      	strb	r3, [r7, #19]
 801a8dc:	e001      	b.n	801a8e2 <tcp_input+0x5ee>
 801a8de:	2300      	movs	r3, #0
 801a8e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a8e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a8e6:	f113 0f0d 	cmn.w	r3, #13
 801a8ea:	f000 8098 	beq.w	801aa1e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801a8ee:	4b79      	ldr	r3, [pc, #484]	; (801aad4 <tcp_input+0x7e0>)
 801a8f0:	2200      	movs	r2, #0
 801a8f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801a8f4:	69f8      	ldr	r0, [r7, #28]
 801a8f6:	f000 f905 	bl	801ab04 <tcp_input_delayed_close>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	f040 8090 	bne.w	801aa22 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801a902:	4b75      	ldr	r3, [pc, #468]	; (801aad8 <tcp_input+0x7e4>)
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d041      	beq.n	801a98e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d006      	beq.n	801a920 <tcp_input+0x62c>
 801a912:	4b72      	ldr	r3, [pc, #456]	; (801aadc <tcp_input+0x7e8>)
 801a914:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a918:	4971      	ldr	r1, [pc, #452]	; (801aae0 <tcp_input+0x7ec>)
 801a91a:	4872      	ldr	r0, [pc, #456]	; (801aae4 <tcp_input+0x7f0>)
 801a91c:	f009 ff40 	bl	80247a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801a920:	69fb      	ldr	r3, [r7, #28]
 801a922:	8b5b      	ldrh	r3, [r3, #26]
 801a924:	f003 0310 	and.w	r3, r3, #16
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d008      	beq.n	801a93e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801a92c:	4b6a      	ldr	r3, [pc, #424]	; (801aad8 <tcp_input+0x7e4>)
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	4618      	mov	r0, r3
 801a932:	f7fd fbd7 	bl	80180e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801a936:	69f8      	ldr	r0, [r7, #28]
 801a938:	f7fe f9ca 	bl	8018cd0 <tcp_abort>
            goto aborted;
 801a93c:	e078      	b.n	801aa30 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801a93e:	69fb      	ldr	r3, [r7, #28]
 801a940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a944:	2b00      	cmp	r3, #0
 801a946:	d00c      	beq.n	801a962 <tcp_input+0x66e>
 801a948:	69fb      	ldr	r3, [r7, #28]
 801a94a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a94e:	69fb      	ldr	r3, [r7, #28]
 801a950:	6918      	ldr	r0, [r3, #16]
 801a952:	4b61      	ldr	r3, [pc, #388]	; (801aad8 <tcp_input+0x7e4>)
 801a954:	681a      	ldr	r2, [r3, #0]
 801a956:	2300      	movs	r3, #0
 801a958:	69f9      	ldr	r1, [r7, #28]
 801a95a:	47a0      	blx	r4
 801a95c:	4603      	mov	r3, r0
 801a95e:	74fb      	strb	r3, [r7, #19]
 801a960:	e008      	b.n	801a974 <tcp_input+0x680>
 801a962:	4b5d      	ldr	r3, [pc, #372]	; (801aad8 <tcp_input+0x7e4>)
 801a964:	681a      	ldr	r2, [r3, #0]
 801a966:	2300      	movs	r3, #0
 801a968:	69f9      	ldr	r1, [r7, #28]
 801a96a:	2000      	movs	r0, #0
 801a96c:	f7ff f884 	bl	8019a78 <tcp_recv_null>
 801a970:	4603      	mov	r3, r0
 801a972:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801a974:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a978:	f113 0f0d 	cmn.w	r3, #13
 801a97c:	d053      	beq.n	801aa26 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801a97e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d003      	beq.n	801a98e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801a986:	4b54      	ldr	r3, [pc, #336]	; (801aad8 <tcp_input+0x7e4>)
 801a988:	681a      	ldr	r2, [r3, #0]
 801a98a:	69fb      	ldr	r3, [r7, #28]
 801a98c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801a98e:	4b4f      	ldr	r3, [pc, #316]	; (801aacc <tcp_input+0x7d8>)
 801a990:	781b      	ldrb	r3, [r3, #0]
 801a992:	f003 0320 	and.w	r3, r3, #32
 801a996:	2b00      	cmp	r3, #0
 801a998:	d030      	beq.n	801a9fc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801a99a:	69fb      	ldr	r3, [r7, #28]
 801a99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d009      	beq.n	801a9b6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801a9a2:	69fb      	ldr	r3, [r7, #28]
 801a9a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a9a6:	7b5a      	ldrb	r2, [r3, #13]
 801a9a8:	69fb      	ldr	r3, [r7, #28]
 801a9aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a9ac:	f042 0220 	orr.w	r2, r2, #32
 801a9b0:	b2d2      	uxtb	r2, r2
 801a9b2:	735a      	strb	r2, [r3, #13]
 801a9b4:	e022      	b.n	801a9fc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a9b6:	69fb      	ldr	r3, [r7, #28]
 801a9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a9ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a9be:	d005      	beq.n	801a9cc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801a9c0:	69fb      	ldr	r3, [r7, #28]
 801a9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a9c4:	3301      	adds	r3, #1
 801a9c6:	b29a      	uxth	r2, r3
 801a9c8:	69fb      	ldr	r3, [r7, #28]
 801a9ca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801a9cc:	69fb      	ldr	r3, [r7, #28]
 801a9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d00b      	beq.n	801a9ee <tcp_input+0x6fa>
 801a9d6:	69fb      	ldr	r3, [r7, #28]
 801a9d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a9dc:	69fb      	ldr	r3, [r7, #28]
 801a9de:	6918      	ldr	r0, [r3, #16]
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	2200      	movs	r2, #0
 801a9e4:	69f9      	ldr	r1, [r7, #28]
 801a9e6:	47a0      	blx	r4
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	74fb      	strb	r3, [r7, #19]
 801a9ec:	e001      	b.n	801a9f2 <tcp_input+0x6fe>
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a9f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a9f6:	f113 0f0d 	cmn.w	r3, #13
 801a9fa:	d016      	beq.n	801aa2a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801a9fc:	4b32      	ldr	r3, [pc, #200]	; (801aac8 <tcp_input+0x7d4>)
 801a9fe:	2200      	movs	r2, #0
 801aa00:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801aa02:	69f8      	ldr	r0, [r7, #28]
 801aa04:	f000 f87e 	bl	801ab04 <tcp_input_delayed_close>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d10f      	bne.n	801aa2e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801aa0e:	69f8      	ldr	r0, [r7, #28]
 801aa10:	f002 ff10 	bl	801d834 <tcp_output>
 801aa14:	e00c      	b.n	801aa30 <tcp_input+0x73c>
        goto aborted;
 801aa16:	bf00      	nop
 801aa18:	e00a      	b.n	801aa30 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801aa1a:	bf00      	nop
 801aa1c:	e008      	b.n	801aa30 <tcp_input+0x73c>
              goto aborted;
 801aa1e:	bf00      	nop
 801aa20:	e006      	b.n	801aa30 <tcp_input+0x73c>
          goto aborted;
 801aa22:	bf00      	nop
 801aa24:	e004      	b.n	801aa30 <tcp_input+0x73c>
            goto aborted;
 801aa26:	bf00      	nop
 801aa28:	e002      	b.n	801aa30 <tcp_input+0x73c>
              goto aborted;
 801aa2a:	bf00      	nop
 801aa2c:	e000      	b.n	801aa30 <tcp_input+0x73c>
          goto aborted;
 801aa2e:	bf00      	nop
    tcp_input_pcb = NULL;
 801aa30:	4b25      	ldr	r3, [pc, #148]	; (801aac8 <tcp_input+0x7d4>)
 801aa32:	2200      	movs	r2, #0
 801aa34:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801aa36:	4b28      	ldr	r3, [pc, #160]	; (801aad8 <tcp_input+0x7e4>)
 801aa38:	2200      	movs	r2, #0
 801aa3a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801aa3c:	4b2a      	ldr	r3, [pc, #168]	; (801aae8 <tcp_input+0x7f4>)
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d03d      	beq.n	801aac0 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801aa44:	4b28      	ldr	r3, [pc, #160]	; (801aae8 <tcp_input+0x7f4>)
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	4618      	mov	r0, r3
 801aa4a:	f7fd fb4b 	bl	80180e4 <pbuf_free>
      inseg.p = NULL;
 801aa4e:	4b26      	ldr	r3, [pc, #152]	; (801aae8 <tcp_input+0x7f4>)
 801aa50:	2200      	movs	r2, #0
 801aa52:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801aa54:	e034      	b.n	801aac0 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801aa56:	4b25      	ldr	r3, [pc, #148]	; (801aaec <tcp_input+0x7f8>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	899b      	ldrh	r3, [r3, #12]
 801aa5c:	b29b      	uxth	r3, r3
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f7fb ff72 	bl	8016948 <lwip_htons>
 801aa64:	4603      	mov	r3, r0
 801aa66:	b2db      	uxtb	r3, r3
 801aa68:	f003 0304 	and.w	r3, r3, #4
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d118      	bne.n	801aaa2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa70:	4b1f      	ldr	r3, [pc, #124]	; (801aaf0 <tcp_input+0x7fc>)
 801aa72:	6819      	ldr	r1, [r3, #0]
 801aa74:	4b1f      	ldr	r3, [pc, #124]	; (801aaf4 <tcp_input+0x800>)
 801aa76:	881b      	ldrh	r3, [r3, #0]
 801aa78:	461a      	mov	r2, r3
 801aa7a:	4b1f      	ldr	r3, [pc, #124]	; (801aaf8 <tcp_input+0x804>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aa80:	4b1a      	ldr	r3, [pc, #104]	; (801aaec <tcp_input+0x7f8>)
 801aa82:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa84:	885b      	ldrh	r3, [r3, #2]
 801aa86:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aa88:	4a18      	ldr	r2, [pc, #96]	; (801aaec <tcp_input+0x7f8>)
 801aa8a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa8c:	8812      	ldrh	r2, [r2, #0]
 801aa8e:	b292      	uxth	r2, r2
 801aa90:	9202      	str	r2, [sp, #8]
 801aa92:	9301      	str	r3, [sp, #4]
 801aa94:	4b19      	ldr	r3, [pc, #100]	; (801aafc <tcp_input+0x808>)
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	4b19      	ldr	r3, [pc, #100]	; (801ab00 <tcp_input+0x80c>)
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	2000      	movs	r0, #0
 801aa9e:	f003 fc8f 	bl	801e3c0 <tcp_rst>
    pbuf_free(p);
 801aaa2:	6878      	ldr	r0, [r7, #4]
 801aaa4:	f7fd fb1e 	bl	80180e4 <pbuf_free>
  return;
 801aaa8:	e00a      	b.n	801aac0 <tcp_input+0x7cc>
    goto dropped;
 801aaaa:	bf00      	nop
 801aaac:	e004      	b.n	801aab8 <tcp_input+0x7c4>
dropped:
 801aaae:	bf00      	nop
 801aab0:	e002      	b.n	801aab8 <tcp_input+0x7c4>
      goto dropped;
 801aab2:	bf00      	nop
 801aab4:	e000      	b.n	801aab8 <tcp_input+0x7c4>
      goto dropped;
 801aab6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	f7fd fb13 	bl	80180e4 <pbuf_free>
 801aabe:	e000      	b.n	801aac2 <tcp_input+0x7ce>
  return;
 801aac0:	bf00      	nop
}
 801aac2:	3724      	adds	r7, #36	; 0x24
 801aac4:	46bd      	mov	sp, r7
 801aac6:	bd90      	pop	{r4, r7, pc}
 801aac8:	200103d4 	.word	0x200103d4
 801aacc:	20008ff1 	.word	0x20008ff1
 801aad0:	200103c0 	.word	0x200103c0
 801aad4:	20008fec 	.word	0x20008fec
 801aad8:	20008ff4 	.word	0x20008ff4
 801aadc:	080272e4 	.word	0x080272e4
 801aae0:	08027498 	.word	0x08027498
 801aae4:	08027330 	.word	0x08027330
 801aae8:	20008fc4 	.word	0x20008fc4
 801aaec:	20008fd4 	.word	0x20008fd4
 801aaf0:	20008fe8 	.word	0x20008fe8
 801aaf4:	20008fee 	.word	0x20008fee
 801aaf8:	20008fe4 	.word	0x20008fe4
 801aafc:	2000cc9c 	.word	0x2000cc9c
 801ab00:	2000cca0 	.word	0x2000cca0

0801ab04 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b082      	sub	sp, #8
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d106      	bne.n	801ab20 <tcp_input_delayed_close+0x1c>
 801ab12:	4b17      	ldr	r3, [pc, #92]	; (801ab70 <tcp_input_delayed_close+0x6c>)
 801ab14:	f240 225a 	movw	r2, #602	; 0x25a
 801ab18:	4916      	ldr	r1, [pc, #88]	; (801ab74 <tcp_input_delayed_close+0x70>)
 801ab1a:	4817      	ldr	r0, [pc, #92]	; (801ab78 <tcp_input_delayed_close+0x74>)
 801ab1c:	f009 fe40 	bl	80247a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ab20:	4b16      	ldr	r3, [pc, #88]	; (801ab7c <tcp_input_delayed_close+0x78>)
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	f003 0310 	and.w	r3, r3, #16
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d01c      	beq.n	801ab66 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	8b5b      	ldrh	r3, [r3, #26]
 801ab30:	f003 0310 	and.w	r3, r3, #16
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d10d      	bne.n	801ab54 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d008      	beq.n	801ab54 <tcp_input_delayed_close+0x50>
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ab48:	687a      	ldr	r2, [r7, #4]
 801ab4a:	6912      	ldr	r2, [r2, #16]
 801ab4c:	f06f 010e 	mvn.w	r1, #14
 801ab50:	4610      	mov	r0, r2
 801ab52:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ab54:	6879      	ldr	r1, [r7, #4]
 801ab56:	480a      	ldr	r0, [pc, #40]	; (801ab80 <tcp_input_delayed_close+0x7c>)
 801ab58:	f7ff fa54 	bl	801a004 <tcp_pcb_remove>
    tcp_free(pcb);
 801ab5c:	6878      	ldr	r0, [r7, #4]
 801ab5e:	f7fd fd7d 	bl	801865c <tcp_free>
    return 1;
 801ab62:	2301      	movs	r3, #1
 801ab64:	e000      	b.n	801ab68 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ab66:	2300      	movs	r3, #0
}
 801ab68:	4618      	mov	r0, r3
 801ab6a:	3708      	adds	r7, #8
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}
 801ab70:	080272e4 	.word	0x080272e4
 801ab74:	080274b4 	.word	0x080274b4
 801ab78:	08027330 	.word	0x08027330
 801ab7c:	20008ff1 	.word	0x20008ff1
 801ab80:	200103c0 	.word	0x200103c0

0801ab84 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801ab84:	b590      	push	{r4, r7, lr}
 801ab86:	b08b      	sub	sp, #44	; 0x2c
 801ab88:	af04      	add	r7, sp, #16
 801ab8a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801ab8c:	4b6f      	ldr	r3, [pc, #444]	; (801ad4c <tcp_listen_input+0x1c8>)
 801ab8e:	781b      	ldrb	r3, [r3, #0]
 801ab90:	f003 0304 	and.w	r3, r3, #4
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	f040 80d3 	bne.w	801ad40 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d106      	bne.n	801abae <tcp_listen_input+0x2a>
 801aba0:	4b6b      	ldr	r3, [pc, #428]	; (801ad50 <tcp_listen_input+0x1cc>)
 801aba2:	f240 2281 	movw	r2, #641	; 0x281
 801aba6:	496b      	ldr	r1, [pc, #428]	; (801ad54 <tcp_listen_input+0x1d0>)
 801aba8:	486b      	ldr	r0, [pc, #428]	; (801ad58 <tcp_listen_input+0x1d4>)
 801abaa:	f009 fdf9 	bl	80247a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801abae:	4b67      	ldr	r3, [pc, #412]	; (801ad4c <tcp_listen_input+0x1c8>)
 801abb0:	781b      	ldrb	r3, [r3, #0]
 801abb2:	f003 0310 	and.w	r3, r3, #16
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d019      	beq.n	801abee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801abba:	4b68      	ldr	r3, [pc, #416]	; (801ad5c <tcp_listen_input+0x1d8>)
 801abbc:	6819      	ldr	r1, [r3, #0]
 801abbe:	4b68      	ldr	r3, [pc, #416]	; (801ad60 <tcp_listen_input+0x1dc>)
 801abc0:	881b      	ldrh	r3, [r3, #0]
 801abc2:	461a      	mov	r2, r3
 801abc4:	4b67      	ldr	r3, [pc, #412]	; (801ad64 <tcp_listen_input+0x1e0>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801abca:	4b67      	ldr	r3, [pc, #412]	; (801ad68 <tcp_listen_input+0x1e4>)
 801abcc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801abce:	885b      	ldrh	r3, [r3, #2]
 801abd0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801abd2:	4a65      	ldr	r2, [pc, #404]	; (801ad68 <tcp_listen_input+0x1e4>)
 801abd4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801abd6:	8812      	ldrh	r2, [r2, #0]
 801abd8:	b292      	uxth	r2, r2
 801abda:	9202      	str	r2, [sp, #8]
 801abdc:	9301      	str	r3, [sp, #4]
 801abde:	4b63      	ldr	r3, [pc, #396]	; (801ad6c <tcp_listen_input+0x1e8>)
 801abe0:	9300      	str	r3, [sp, #0]
 801abe2:	4b63      	ldr	r3, [pc, #396]	; (801ad70 <tcp_listen_input+0x1ec>)
 801abe4:	4602      	mov	r2, r0
 801abe6:	6878      	ldr	r0, [r7, #4]
 801abe8:	f003 fbea 	bl	801e3c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801abec:	e0aa      	b.n	801ad44 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801abee:	4b57      	ldr	r3, [pc, #348]	; (801ad4c <tcp_listen_input+0x1c8>)
 801abf0:	781b      	ldrb	r3, [r3, #0]
 801abf2:	f003 0302 	and.w	r3, r3, #2
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	f000 80a4 	beq.w	801ad44 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	7d5b      	ldrb	r3, [r3, #21]
 801ac00:	4618      	mov	r0, r3
 801ac02:	f7ff f85d 	bl	8019cc0 <tcp_alloc>
 801ac06:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801ac08:	697b      	ldr	r3, [r7, #20]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d111      	bne.n	801ac32 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	699b      	ldr	r3, [r3, #24]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d00a      	beq.n	801ac2c <tcp_listen_input+0xa8>
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	699b      	ldr	r3, [r3, #24]
 801ac1a:	687a      	ldr	r2, [r7, #4]
 801ac1c:	6910      	ldr	r0, [r2, #16]
 801ac1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac22:	2100      	movs	r1, #0
 801ac24:	4798      	blx	r3
 801ac26:	4603      	mov	r3, r0
 801ac28:	73bb      	strb	r3, [r7, #14]
      return;
 801ac2a:	e08c      	b.n	801ad46 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801ac2c:	23f0      	movs	r3, #240	; 0xf0
 801ac2e:	73bb      	strb	r3, [r7, #14]
      return;
 801ac30:	e089      	b.n	801ad46 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ac32:	4b50      	ldr	r3, [pc, #320]	; (801ad74 <tcp_listen_input+0x1f0>)
 801ac34:	695a      	ldr	r2, [r3, #20]
 801ac36:	697b      	ldr	r3, [r7, #20]
 801ac38:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801ac3a:	4b4e      	ldr	r3, [pc, #312]	; (801ad74 <tcp_listen_input+0x1f0>)
 801ac3c:	691a      	ldr	r2, [r3, #16]
 801ac3e:	697b      	ldr	r3, [r7, #20]
 801ac40:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	8ada      	ldrh	r2, [r3, #22]
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801ac4a:	4b47      	ldr	r3, [pc, #284]	; (801ad68 <tcp_listen_input+0x1e4>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	881b      	ldrh	r3, [r3, #0]
 801ac50:	b29a      	uxth	r2, r3
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	2203      	movs	r2, #3
 801ac5a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801ac5c:	4b41      	ldr	r3, [pc, #260]	; (801ad64 <tcp_listen_input+0x1e0>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	1c5a      	adds	r2, r3, #1
 801ac62:	697b      	ldr	r3, [r7, #20]
 801ac64:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801ac66:	697b      	ldr	r3, [r7, #20]
 801ac68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801ac6e:	6978      	ldr	r0, [r7, #20]
 801ac70:	f7ff fa5c 	bl	801a12c <tcp_next_iss>
 801ac74:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	693a      	ldr	r2, [r7, #16]
 801ac7a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801ac7c:	697b      	ldr	r3, [r7, #20]
 801ac7e:	693a      	ldr	r2, [r7, #16]
 801ac80:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	693a      	ldr	r2, [r7, #16]
 801ac86:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	693a      	ldr	r2, [r7, #16]
 801ac8c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ac8e:	4b35      	ldr	r3, [pc, #212]	; (801ad64 <tcp_listen_input+0x1e0>)
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	1e5a      	subs	r2, r3, #1
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	691a      	ldr	r2, [r3, #16]
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801aca0:	697b      	ldr	r3, [r7, #20]
 801aca2:	687a      	ldr	r2, [r7, #4]
 801aca4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	7a5b      	ldrb	r3, [r3, #9]
 801acaa:	f003 030c 	and.w	r3, r3, #12
 801acae:	b2da      	uxtb	r2, r3
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	7a1a      	ldrb	r2, [r3, #8]
 801acb8:	697b      	ldr	r3, [r7, #20]
 801acba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801acbc:	4b2e      	ldr	r3, [pc, #184]	; (801ad78 <tcp_listen_input+0x1f4>)
 801acbe:	681a      	ldr	r2, [r3, #0]
 801acc0:	697b      	ldr	r3, [r7, #20]
 801acc2:	60da      	str	r2, [r3, #12]
 801acc4:	4a2c      	ldr	r2, [pc, #176]	; (801ad78 <tcp_listen_input+0x1f4>)
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	6013      	str	r3, [r2, #0]
 801acca:	f003 fd3b 	bl	801e744 <tcp_timer_needed>
 801acce:	4b2b      	ldr	r3, [pc, #172]	; (801ad7c <tcp_listen_input+0x1f8>)
 801acd0:	2201      	movs	r2, #1
 801acd2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801acd4:	6978      	ldr	r0, [r7, #20]
 801acd6:	f001 fd8f 	bl	801c7f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801acda:	4b23      	ldr	r3, [pc, #140]	; (801ad68 <tcp_listen_input+0x1e4>)
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	89db      	ldrh	r3, [r3, #14]
 801ace0:	b29a      	uxth	r2, r3
 801ace2:	697b      	ldr	r3, [r7, #20]
 801ace4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801acee:	697b      	ldr	r3, [r7, #20]
 801acf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801acf4:	697b      	ldr	r3, [r7, #20]
 801acf6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801acf8:	697b      	ldr	r3, [r7, #20]
 801acfa:	3304      	adds	r3, #4
 801acfc:	4618      	mov	r0, r3
 801acfe:	f007 fae3 	bl	80222c8 <ip4_route>
 801ad02:	4601      	mov	r1, r0
 801ad04:	697b      	ldr	r3, [r7, #20]
 801ad06:	3304      	adds	r3, #4
 801ad08:	461a      	mov	r2, r3
 801ad0a:	4620      	mov	r0, r4
 801ad0c:	f7ff fa34 	bl	801a178 <tcp_eff_send_mss_netif>
 801ad10:	4603      	mov	r3, r0
 801ad12:	461a      	mov	r2, r3
 801ad14:	697b      	ldr	r3, [r7, #20]
 801ad16:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ad18:	2112      	movs	r1, #18
 801ad1a:	6978      	ldr	r0, [r7, #20]
 801ad1c:	f002 fc9c 	bl	801d658 <tcp_enqueue_flags>
 801ad20:	4603      	mov	r3, r0
 801ad22:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801ad24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d004      	beq.n	801ad36 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801ad2c:	2100      	movs	r1, #0
 801ad2e:	6978      	ldr	r0, [r7, #20]
 801ad30:	f7fd ff10 	bl	8018b54 <tcp_abandon>
      return;
 801ad34:	e007      	b.n	801ad46 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801ad36:	6978      	ldr	r0, [r7, #20]
 801ad38:	f002 fd7c 	bl	801d834 <tcp_output>
  return;
 801ad3c:	bf00      	nop
 801ad3e:	e001      	b.n	801ad44 <tcp_listen_input+0x1c0>
    return;
 801ad40:	bf00      	nop
 801ad42:	e000      	b.n	801ad46 <tcp_listen_input+0x1c2>
  return;
 801ad44:	bf00      	nop
}
 801ad46:	371c      	adds	r7, #28
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd90      	pop	{r4, r7, pc}
 801ad4c:	20008ff0 	.word	0x20008ff0
 801ad50:	080272e4 	.word	0x080272e4
 801ad54:	080274dc 	.word	0x080274dc
 801ad58:	08027330 	.word	0x08027330
 801ad5c:	20008fe8 	.word	0x20008fe8
 801ad60:	20008fee 	.word	0x20008fee
 801ad64:	20008fe4 	.word	0x20008fe4
 801ad68:	20008fd4 	.word	0x20008fd4
 801ad6c:	2000cc9c 	.word	0x2000cc9c
 801ad70:	2000cca0 	.word	0x2000cca0
 801ad74:	2000cc8c 	.word	0x2000cc8c
 801ad78:	200103c0 	.word	0x200103c0
 801ad7c:	200103bc 	.word	0x200103bc

0801ad80 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b086      	sub	sp, #24
 801ad84:	af04      	add	r7, sp, #16
 801ad86:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801ad88:	4b30      	ldr	r3, [pc, #192]	; (801ae4c <tcp_timewait_input+0xcc>)
 801ad8a:	781b      	ldrb	r3, [r3, #0]
 801ad8c:	f003 0304 	and.w	r3, r3, #4
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d154      	bne.n	801ae3e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d106      	bne.n	801ada8 <tcp_timewait_input+0x28>
 801ad9a:	4b2d      	ldr	r3, [pc, #180]	; (801ae50 <tcp_timewait_input+0xd0>)
 801ad9c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ada0:	492c      	ldr	r1, [pc, #176]	; (801ae54 <tcp_timewait_input+0xd4>)
 801ada2:	482d      	ldr	r0, [pc, #180]	; (801ae58 <tcp_timewait_input+0xd8>)
 801ada4:	f009 fcfc 	bl	80247a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801ada8:	4b28      	ldr	r3, [pc, #160]	; (801ae4c <tcp_timewait_input+0xcc>)
 801adaa:	781b      	ldrb	r3, [r3, #0]
 801adac:	f003 0302 	and.w	r3, r3, #2
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d02a      	beq.n	801ae0a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801adb4:	4b29      	ldr	r3, [pc, #164]	; (801ae5c <tcp_timewait_input+0xdc>)
 801adb6:	681a      	ldr	r2, [r3, #0]
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adbc:	1ad3      	subs	r3, r2, r3
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	db2d      	blt.n	801ae1e <tcp_timewait_input+0x9e>
 801adc2:	4b26      	ldr	r3, [pc, #152]	; (801ae5c <tcp_timewait_input+0xdc>)
 801adc4:	681a      	ldr	r2, [r3, #0]
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adca:	6879      	ldr	r1, [r7, #4]
 801adcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801adce:	440b      	add	r3, r1
 801add0:	1ad3      	subs	r3, r2, r3
 801add2:	2b00      	cmp	r3, #0
 801add4:	dc23      	bgt.n	801ae1e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801add6:	4b22      	ldr	r3, [pc, #136]	; (801ae60 <tcp_timewait_input+0xe0>)
 801add8:	6819      	ldr	r1, [r3, #0]
 801adda:	4b22      	ldr	r3, [pc, #136]	; (801ae64 <tcp_timewait_input+0xe4>)
 801addc:	881b      	ldrh	r3, [r3, #0]
 801adde:	461a      	mov	r2, r3
 801ade0:	4b1e      	ldr	r3, [pc, #120]	; (801ae5c <tcp_timewait_input+0xdc>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ade6:	4b20      	ldr	r3, [pc, #128]	; (801ae68 <tcp_timewait_input+0xe8>)
 801ade8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801adea:	885b      	ldrh	r3, [r3, #2]
 801adec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801adee:	4a1e      	ldr	r2, [pc, #120]	; (801ae68 <tcp_timewait_input+0xe8>)
 801adf0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801adf2:	8812      	ldrh	r2, [r2, #0]
 801adf4:	b292      	uxth	r2, r2
 801adf6:	9202      	str	r2, [sp, #8]
 801adf8:	9301      	str	r3, [sp, #4]
 801adfa:	4b1c      	ldr	r3, [pc, #112]	; (801ae6c <tcp_timewait_input+0xec>)
 801adfc:	9300      	str	r3, [sp, #0]
 801adfe:	4b1c      	ldr	r3, [pc, #112]	; (801ae70 <tcp_timewait_input+0xf0>)
 801ae00:	4602      	mov	r2, r0
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f003 fadc 	bl	801e3c0 <tcp_rst>
      return;
 801ae08:	e01c      	b.n	801ae44 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801ae0a:	4b10      	ldr	r3, [pc, #64]	; (801ae4c <tcp_timewait_input+0xcc>)
 801ae0c:	781b      	ldrb	r3, [r3, #0]
 801ae0e:	f003 0301 	and.w	r3, r3, #1
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d003      	beq.n	801ae1e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801ae16:	4b17      	ldr	r3, [pc, #92]	; (801ae74 <tcp_timewait_input+0xf4>)
 801ae18:	681a      	ldr	r2, [r3, #0]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801ae1e:	4b11      	ldr	r3, [pc, #68]	; (801ae64 <tcp_timewait_input+0xe4>)
 801ae20:	881b      	ldrh	r3, [r3, #0]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d00d      	beq.n	801ae42 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	8b5b      	ldrh	r3, [r3, #26]
 801ae2a:	f043 0302 	orr.w	r3, r3, #2
 801ae2e:	b29a      	uxth	r2, r3
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801ae34:	6878      	ldr	r0, [r7, #4]
 801ae36:	f002 fcfd 	bl	801d834 <tcp_output>
  }
  return;
 801ae3a:	bf00      	nop
 801ae3c:	e001      	b.n	801ae42 <tcp_timewait_input+0xc2>
    return;
 801ae3e:	bf00      	nop
 801ae40:	e000      	b.n	801ae44 <tcp_timewait_input+0xc4>
  return;
 801ae42:	bf00      	nop
}
 801ae44:	3708      	adds	r7, #8
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bd80      	pop	{r7, pc}
 801ae4a:	bf00      	nop
 801ae4c:	20008ff0 	.word	0x20008ff0
 801ae50:	080272e4 	.word	0x080272e4
 801ae54:	080274fc 	.word	0x080274fc
 801ae58:	08027330 	.word	0x08027330
 801ae5c:	20008fe4 	.word	0x20008fe4
 801ae60:	20008fe8 	.word	0x20008fe8
 801ae64:	20008fee 	.word	0x20008fee
 801ae68:	20008fd4 	.word	0x20008fd4
 801ae6c:	2000cc9c 	.word	0x2000cc9c
 801ae70:	2000cca0 	.word	0x2000cca0
 801ae74:	200103c4 	.word	0x200103c4

0801ae78 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801ae78:	b590      	push	{r4, r7, lr}
 801ae7a:	b08d      	sub	sp, #52	; 0x34
 801ae7c:	af04      	add	r7, sp, #16
 801ae7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801ae80:	2300      	movs	r3, #0
 801ae82:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801ae84:	2300      	movs	r3, #0
 801ae86:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d106      	bne.n	801ae9c <tcp_process+0x24>
 801ae8e:	4ba5      	ldr	r3, [pc, #660]	; (801b124 <tcp_process+0x2ac>)
 801ae90:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801ae94:	49a4      	ldr	r1, [pc, #656]	; (801b128 <tcp_process+0x2b0>)
 801ae96:	48a5      	ldr	r0, [pc, #660]	; (801b12c <tcp_process+0x2b4>)
 801ae98:	f009 fc82 	bl	80247a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801ae9c:	4ba4      	ldr	r3, [pc, #656]	; (801b130 <tcp_process+0x2b8>)
 801ae9e:	781b      	ldrb	r3, [r3, #0]
 801aea0:	f003 0304 	and.w	r3, r3, #4
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d04e      	beq.n	801af46 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	7d1b      	ldrb	r3, [r3, #20]
 801aeac:	2b02      	cmp	r3, #2
 801aeae:	d108      	bne.n	801aec2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aeb4:	4b9f      	ldr	r3, [pc, #636]	; (801b134 <tcp_process+0x2bc>)
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d123      	bne.n	801af04 <tcp_process+0x8c>
        acceptable = 1;
 801aebc:	2301      	movs	r3, #1
 801aebe:	76fb      	strb	r3, [r7, #27]
 801aec0:	e020      	b.n	801af04 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aec6:	4b9c      	ldr	r3, [pc, #624]	; (801b138 <tcp_process+0x2c0>)
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	429a      	cmp	r2, r3
 801aecc:	d102      	bne.n	801aed4 <tcp_process+0x5c>
        acceptable = 1;
 801aece:	2301      	movs	r3, #1
 801aed0:	76fb      	strb	r3, [r7, #27]
 801aed2:	e017      	b.n	801af04 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801aed4:	4b98      	ldr	r3, [pc, #608]	; (801b138 <tcp_process+0x2c0>)
 801aed6:	681a      	ldr	r2, [r3, #0]
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aedc:	1ad3      	subs	r3, r2, r3
 801aede:	2b00      	cmp	r3, #0
 801aee0:	db10      	blt.n	801af04 <tcp_process+0x8c>
 801aee2:	4b95      	ldr	r3, [pc, #596]	; (801b138 <tcp_process+0x2c0>)
 801aee4:	681a      	ldr	r2, [r3, #0]
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeea:	6879      	ldr	r1, [r7, #4]
 801aeec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801aeee:	440b      	add	r3, r1
 801aef0:	1ad3      	subs	r3, r2, r3
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	dc06      	bgt.n	801af04 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	8b5b      	ldrh	r3, [r3, #26]
 801aefa:	f043 0302 	orr.w	r3, r3, #2
 801aefe:	b29a      	uxth	r2, r3
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801af04:	7efb      	ldrb	r3, [r7, #27]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d01b      	beq.n	801af42 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	7d1b      	ldrb	r3, [r3, #20]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d106      	bne.n	801af20 <tcp_process+0xa8>
 801af12:	4b84      	ldr	r3, [pc, #528]	; (801b124 <tcp_process+0x2ac>)
 801af14:	f44f 724e 	mov.w	r2, #824	; 0x338
 801af18:	4988      	ldr	r1, [pc, #544]	; (801b13c <tcp_process+0x2c4>)
 801af1a:	4884      	ldr	r0, [pc, #528]	; (801b12c <tcp_process+0x2b4>)
 801af1c:	f009 fc40 	bl	80247a0 <iprintf>
      recv_flags |= TF_RESET;
 801af20:	4b87      	ldr	r3, [pc, #540]	; (801b140 <tcp_process+0x2c8>)
 801af22:	781b      	ldrb	r3, [r3, #0]
 801af24:	f043 0308 	orr.w	r3, r3, #8
 801af28:	b2da      	uxtb	r2, r3
 801af2a:	4b85      	ldr	r3, [pc, #532]	; (801b140 <tcp_process+0x2c8>)
 801af2c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	8b5b      	ldrh	r3, [r3, #26]
 801af32:	f023 0301 	bic.w	r3, r3, #1
 801af36:	b29a      	uxth	r2, r3
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801af3c:	f06f 030d 	mvn.w	r3, #13
 801af40:	e37a      	b.n	801b638 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801af42:	2300      	movs	r3, #0
 801af44:	e378      	b.n	801b638 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801af46:	4b7a      	ldr	r3, [pc, #488]	; (801b130 <tcp_process+0x2b8>)
 801af48:	781b      	ldrb	r3, [r3, #0]
 801af4a:	f003 0302 	and.w	r3, r3, #2
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d010      	beq.n	801af74 <tcp_process+0xfc>
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	7d1b      	ldrb	r3, [r3, #20]
 801af56:	2b02      	cmp	r3, #2
 801af58:	d00c      	beq.n	801af74 <tcp_process+0xfc>
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	7d1b      	ldrb	r3, [r3, #20]
 801af5e:	2b03      	cmp	r3, #3
 801af60:	d008      	beq.n	801af74 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	8b5b      	ldrh	r3, [r3, #26]
 801af66:	f043 0302 	orr.w	r3, r3, #2
 801af6a:	b29a      	uxth	r2, r3
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801af70:	2300      	movs	r3, #0
 801af72:	e361      	b.n	801b638 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	8b5b      	ldrh	r3, [r3, #26]
 801af78:	f003 0310 	and.w	r3, r3, #16
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d103      	bne.n	801af88 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801af80:	4b70      	ldr	r3, [pc, #448]	; (801b144 <tcp_process+0x2cc>)
 801af82:	681a      	ldr	r2, [r3, #0]
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	2200      	movs	r2, #0
 801af8c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	2200      	movs	r2, #0
 801af94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801af98:	6878      	ldr	r0, [r7, #4]
 801af9a:	f001 fc2d 	bl	801c7f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	7d1b      	ldrb	r3, [r3, #20]
 801afa2:	3b02      	subs	r3, #2
 801afa4:	2b07      	cmp	r3, #7
 801afa6:	f200 8337 	bhi.w	801b618 <tcp_process+0x7a0>
 801afaa:	a201      	add	r2, pc, #4	; (adr r2, 801afb0 <tcp_process+0x138>)
 801afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afb0:	0801afd1 	.word	0x0801afd1
 801afb4:	0801b201 	.word	0x0801b201
 801afb8:	0801b379 	.word	0x0801b379
 801afbc:	0801b3a3 	.word	0x0801b3a3
 801afc0:	0801b4c7 	.word	0x0801b4c7
 801afc4:	0801b379 	.word	0x0801b379
 801afc8:	0801b553 	.word	0x0801b553
 801afcc:	0801b5e3 	.word	0x0801b5e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801afd0:	4b57      	ldr	r3, [pc, #348]	; (801b130 <tcp_process+0x2b8>)
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	f003 0310 	and.w	r3, r3, #16
 801afd8:	2b00      	cmp	r3, #0
 801afda:	f000 80e4 	beq.w	801b1a6 <tcp_process+0x32e>
 801afde:	4b54      	ldr	r3, [pc, #336]	; (801b130 <tcp_process+0x2b8>)
 801afe0:	781b      	ldrb	r3, [r3, #0]
 801afe2:	f003 0302 	and.w	r3, r3, #2
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	f000 80dd 	beq.w	801b1a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aff0:	1c5a      	adds	r2, r3, #1
 801aff2:	4b50      	ldr	r3, [pc, #320]	; (801b134 <tcp_process+0x2bc>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	429a      	cmp	r2, r3
 801aff8:	f040 80d5 	bne.w	801b1a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801affc:	4b4e      	ldr	r3, [pc, #312]	; (801b138 <tcp_process+0x2c0>)
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	1c5a      	adds	r2, r3, #1
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801b00e:	4b49      	ldr	r3, [pc, #292]	; (801b134 <tcp_process+0x2bc>)
 801b010:	681a      	ldr	r2, [r3, #0]
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801b016:	4b4c      	ldr	r3, [pc, #304]	; (801b148 <tcp_process+0x2d0>)
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	89db      	ldrh	r3, [r3, #14]
 801b01c:	b29a      	uxth	r2, r3
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b030:	4b41      	ldr	r3, [pc, #260]	; (801b138 <tcp_process+0x2c0>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	1e5a      	subs	r2, r3, #1
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	2204      	movs	r2, #4
 801b03e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	3304      	adds	r3, #4
 801b048:	4618      	mov	r0, r3
 801b04a:	f007 f93d 	bl	80222c8 <ip4_route>
 801b04e:	4601      	mov	r1, r0
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	3304      	adds	r3, #4
 801b054:	461a      	mov	r2, r3
 801b056:	4620      	mov	r0, r4
 801b058:	f7ff f88e 	bl	801a178 <tcp_eff_send_mss_netif>
 801b05c:	4603      	mov	r3, r0
 801b05e:	461a      	mov	r2, r3
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b068:	009a      	lsls	r2, r3, #2
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b06e:	005b      	lsls	r3, r3, #1
 801b070:	f241 111c 	movw	r1, #4380	; 0x111c
 801b074:	428b      	cmp	r3, r1
 801b076:	bf38      	it	cc
 801b078:	460b      	movcc	r3, r1
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d204      	bcs.n	801b088 <tcp_process+0x210>
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b082:	009b      	lsls	r3, r3, #2
 801b084:	b29b      	uxth	r3, r3
 801b086:	e00d      	b.n	801b0a4 <tcp_process+0x22c>
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b08c:	005b      	lsls	r3, r3, #1
 801b08e:	f241 121c 	movw	r2, #4380	; 0x111c
 801b092:	4293      	cmp	r3, r2
 801b094:	d904      	bls.n	801b0a0 <tcp_process+0x228>
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b09a:	005b      	lsls	r3, r3, #1
 801b09c:	b29b      	uxth	r3, r3
 801b09e:	e001      	b.n	801b0a4 <tcp_process+0x22c>
 801b0a0:	f241 131c 	movw	r3, #4380	; 0x111c
 801b0a4:	687a      	ldr	r2, [r7, #4]
 801b0a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d106      	bne.n	801b0c2 <tcp_process+0x24a>
 801b0b4:	4b1b      	ldr	r3, [pc, #108]	; (801b124 <tcp_process+0x2ac>)
 801b0b6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801b0ba:	4924      	ldr	r1, [pc, #144]	; (801b14c <tcp_process+0x2d4>)
 801b0bc:	481b      	ldr	r0, [pc, #108]	; (801b12c <tcp_process+0x2b4>)
 801b0be:	f009 fb6f 	bl	80247a0 <iprintf>
        --pcb->snd_queuelen;
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b0c8:	3b01      	subs	r3, #1
 801b0ca:	b29a      	uxth	r2, r3
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0d6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801b0d8:	69fb      	ldr	r3, [r7, #28]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d111      	bne.n	801b102 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0e2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b0e4:	69fb      	ldr	r3, [r7, #28]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d106      	bne.n	801b0f8 <tcp_process+0x280>
 801b0ea:	4b0e      	ldr	r3, [pc, #56]	; (801b124 <tcp_process+0x2ac>)
 801b0ec:	f44f 725d 	mov.w	r2, #884	; 0x374
 801b0f0:	4917      	ldr	r1, [pc, #92]	; (801b150 <tcp_process+0x2d8>)
 801b0f2:	480e      	ldr	r0, [pc, #56]	; (801b12c <tcp_process+0x2b4>)
 801b0f4:	f009 fb54 	bl	80247a0 <iprintf>
          pcb->unsent = rseg->next;
 801b0f8:	69fb      	ldr	r3, [r7, #28]
 801b0fa:	681a      	ldr	r2, [r3, #0]
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	66da      	str	r2, [r3, #108]	; 0x6c
 801b100:	e003      	b.n	801b10a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801b102:	69fb      	ldr	r3, [r7, #28]
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801b10a:	69f8      	ldr	r0, [r7, #28]
 801b10c:	f7fe fc70 	bl	80199f0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b114:	2b00      	cmp	r3, #0
 801b116:	d11d      	bne.n	801b154 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b11e:	861a      	strh	r2, [r3, #48]	; 0x30
 801b120:	e01f      	b.n	801b162 <tcp_process+0x2ea>
 801b122:	bf00      	nop
 801b124:	080272e4 	.word	0x080272e4
 801b128:	0802751c 	.word	0x0802751c
 801b12c:	08027330 	.word	0x08027330
 801b130:	20008ff0 	.word	0x20008ff0
 801b134:	20008fe8 	.word	0x20008fe8
 801b138:	20008fe4 	.word	0x20008fe4
 801b13c:	08027538 	.word	0x08027538
 801b140:	20008ff1 	.word	0x20008ff1
 801b144:	200103c4 	.word	0x200103c4
 801b148:	20008fd4 	.word	0x20008fd4
 801b14c:	08027558 	.word	0x08027558
 801b150:	08027570 	.word	0x08027570
        } else {
          pcb->rtime = 0;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	2200      	movs	r2, #0
 801b158:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	2200      	movs	r2, #0
 801b15e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d00a      	beq.n	801b182 <tcp_process+0x30a>
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b172:	687a      	ldr	r2, [r7, #4]
 801b174:	6910      	ldr	r0, [r2, #16]
 801b176:	2200      	movs	r2, #0
 801b178:	6879      	ldr	r1, [r7, #4]
 801b17a:	4798      	blx	r3
 801b17c:	4603      	mov	r3, r0
 801b17e:	76bb      	strb	r3, [r7, #26]
 801b180:	e001      	b.n	801b186 <tcp_process+0x30e>
 801b182:	2300      	movs	r3, #0
 801b184:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801b186:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b18a:	f113 0f0d 	cmn.w	r3, #13
 801b18e:	d102      	bne.n	801b196 <tcp_process+0x31e>
          return ERR_ABRT;
 801b190:	f06f 030c 	mvn.w	r3, #12
 801b194:	e250      	b.n	801b638 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	8b5b      	ldrh	r3, [r3, #26]
 801b19a:	f043 0302 	orr.w	r3, r3, #2
 801b19e:	b29a      	uxth	r2, r3
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801b1a4:	e23a      	b.n	801b61c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801b1a6:	4b9d      	ldr	r3, [pc, #628]	; (801b41c <tcp_process+0x5a4>)
 801b1a8:	781b      	ldrb	r3, [r3, #0]
 801b1aa:	f003 0310 	and.w	r3, r3, #16
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	f000 8234 	beq.w	801b61c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b1b4:	4b9a      	ldr	r3, [pc, #616]	; (801b420 <tcp_process+0x5a8>)
 801b1b6:	6819      	ldr	r1, [r3, #0]
 801b1b8:	4b9a      	ldr	r3, [pc, #616]	; (801b424 <tcp_process+0x5ac>)
 801b1ba:	881b      	ldrh	r3, [r3, #0]
 801b1bc:	461a      	mov	r2, r3
 801b1be:	4b9a      	ldr	r3, [pc, #616]	; (801b428 <tcp_process+0x5b0>)
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b1c4:	4b99      	ldr	r3, [pc, #612]	; (801b42c <tcp_process+0x5b4>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b1c8:	885b      	ldrh	r3, [r3, #2]
 801b1ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b1cc:	4a97      	ldr	r2, [pc, #604]	; (801b42c <tcp_process+0x5b4>)
 801b1ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b1d0:	8812      	ldrh	r2, [r2, #0]
 801b1d2:	b292      	uxth	r2, r2
 801b1d4:	9202      	str	r2, [sp, #8]
 801b1d6:	9301      	str	r3, [sp, #4]
 801b1d8:	4b95      	ldr	r3, [pc, #596]	; (801b430 <tcp_process+0x5b8>)
 801b1da:	9300      	str	r3, [sp, #0]
 801b1dc:	4b95      	ldr	r3, [pc, #596]	; (801b434 <tcp_process+0x5bc>)
 801b1de:	4602      	mov	r2, r0
 801b1e0:	6878      	ldr	r0, [r7, #4]
 801b1e2:	f003 f8ed 	bl	801e3c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b1ec:	2b05      	cmp	r3, #5
 801b1ee:	f200 8215 	bhi.w	801b61c <tcp_process+0x7a4>
          pcb->rtime = 0;
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801b1f8:	6878      	ldr	r0, [r7, #4]
 801b1fa:	f002 feab 	bl	801df54 <tcp_rexmit_rto>
      break;
 801b1fe:	e20d      	b.n	801b61c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801b200:	4b86      	ldr	r3, [pc, #536]	; (801b41c <tcp_process+0x5a4>)
 801b202:	781b      	ldrb	r3, [r3, #0]
 801b204:	f003 0310 	and.w	r3, r3, #16
 801b208:	2b00      	cmp	r3, #0
 801b20a:	f000 80a1 	beq.w	801b350 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b20e:	4b84      	ldr	r3, [pc, #528]	; (801b420 <tcp_process+0x5a8>)
 801b210:	681a      	ldr	r2, [r3, #0]
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b216:	1ad3      	subs	r3, r2, r3
 801b218:	3b01      	subs	r3, #1
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	db7e      	blt.n	801b31c <tcp_process+0x4a4>
 801b21e:	4b80      	ldr	r3, [pc, #512]	; (801b420 <tcp_process+0x5a8>)
 801b220:	681a      	ldr	r2, [r3, #0]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b226:	1ad3      	subs	r3, r2, r3
 801b228:	2b00      	cmp	r3, #0
 801b22a:	dc77      	bgt.n	801b31c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	2204      	movs	r2, #4
 801b230:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b236:	2b00      	cmp	r3, #0
 801b238:	d102      	bne.n	801b240 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801b23a:	23fa      	movs	r3, #250	; 0xfa
 801b23c:	76bb      	strb	r3, [r7, #26]
 801b23e:	e01d      	b.n	801b27c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b244:	699b      	ldr	r3, [r3, #24]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d106      	bne.n	801b258 <tcp_process+0x3e0>
 801b24a:	4b7b      	ldr	r3, [pc, #492]	; (801b438 <tcp_process+0x5c0>)
 801b24c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801b250:	497a      	ldr	r1, [pc, #488]	; (801b43c <tcp_process+0x5c4>)
 801b252:	487b      	ldr	r0, [pc, #492]	; (801b440 <tcp_process+0x5c8>)
 801b254:	f009 faa4 	bl	80247a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b25c:	699b      	ldr	r3, [r3, #24]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d00a      	beq.n	801b278 <tcp_process+0x400>
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b266:	699b      	ldr	r3, [r3, #24]
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	6910      	ldr	r0, [r2, #16]
 801b26c:	2200      	movs	r2, #0
 801b26e:	6879      	ldr	r1, [r7, #4]
 801b270:	4798      	blx	r3
 801b272:	4603      	mov	r3, r0
 801b274:	76bb      	strb	r3, [r7, #26]
 801b276:	e001      	b.n	801b27c <tcp_process+0x404>
 801b278:	23f0      	movs	r3, #240	; 0xf0
 801b27a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801b27c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d00a      	beq.n	801b29a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801b284:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b288:	f113 0f0d 	cmn.w	r3, #13
 801b28c:	d002      	beq.n	801b294 <tcp_process+0x41c>
              tcp_abort(pcb);
 801b28e:	6878      	ldr	r0, [r7, #4]
 801b290:	f7fd fd1e 	bl	8018cd0 <tcp_abort>
            }
            return ERR_ABRT;
 801b294:	f06f 030c 	mvn.w	r3, #12
 801b298:	e1ce      	b.n	801b638 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801b29a:	6878      	ldr	r0, [r7, #4]
 801b29c:	f000 fae0 	bl	801b860 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801b2a0:	4b68      	ldr	r3, [pc, #416]	; (801b444 <tcp_process+0x5cc>)
 801b2a2:	881b      	ldrh	r3, [r3, #0]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d005      	beq.n	801b2b4 <tcp_process+0x43c>
            recv_acked--;
 801b2a8:	4b66      	ldr	r3, [pc, #408]	; (801b444 <tcp_process+0x5cc>)
 801b2aa:	881b      	ldrh	r3, [r3, #0]
 801b2ac:	3b01      	subs	r3, #1
 801b2ae:	b29a      	uxth	r2, r3
 801b2b0:	4b64      	ldr	r3, [pc, #400]	; (801b444 <tcp_process+0x5cc>)
 801b2b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2b8:	009a      	lsls	r2, r3, #2
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2be:	005b      	lsls	r3, r3, #1
 801b2c0:	f241 111c 	movw	r1, #4380	; 0x111c
 801b2c4:	428b      	cmp	r3, r1
 801b2c6:	bf38      	it	cc
 801b2c8:	460b      	movcc	r3, r1
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d204      	bcs.n	801b2d8 <tcp_process+0x460>
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2d2:	009b      	lsls	r3, r3, #2
 801b2d4:	b29b      	uxth	r3, r3
 801b2d6:	e00d      	b.n	801b2f4 <tcp_process+0x47c>
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2dc:	005b      	lsls	r3, r3, #1
 801b2de:	f241 121c 	movw	r2, #4380	; 0x111c
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	d904      	bls.n	801b2f0 <tcp_process+0x478>
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b2ea:	005b      	lsls	r3, r3, #1
 801b2ec:	b29b      	uxth	r3, r3
 801b2ee:	e001      	b.n	801b2f4 <tcp_process+0x47c>
 801b2f0:	f241 131c 	movw	r3, #4380	; 0x111c
 801b2f4:	687a      	ldr	r2, [r7, #4]
 801b2f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801b2fa:	4b53      	ldr	r3, [pc, #332]	; (801b448 <tcp_process+0x5d0>)
 801b2fc:	781b      	ldrb	r3, [r3, #0]
 801b2fe:	f003 0320 	and.w	r3, r3, #32
 801b302:	2b00      	cmp	r3, #0
 801b304:	d037      	beq.n	801b376 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	8b5b      	ldrh	r3, [r3, #26]
 801b30a:	f043 0302 	orr.w	r3, r3, #2
 801b30e:	b29a      	uxth	r2, r3
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	2207      	movs	r2, #7
 801b318:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801b31a:	e02c      	b.n	801b376 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b31c:	4b40      	ldr	r3, [pc, #256]	; (801b420 <tcp_process+0x5a8>)
 801b31e:	6819      	ldr	r1, [r3, #0]
 801b320:	4b40      	ldr	r3, [pc, #256]	; (801b424 <tcp_process+0x5ac>)
 801b322:	881b      	ldrh	r3, [r3, #0]
 801b324:	461a      	mov	r2, r3
 801b326:	4b40      	ldr	r3, [pc, #256]	; (801b428 <tcp_process+0x5b0>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b32c:	4b3f      	ldr	r3, [pc, #252]	; (801b42c <tcp_process+0x5b4>)
 801b32e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b330:	885b      	ldrh	r3, [r3, #2]
 801b332:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b334:	4a3d      	ldr	r2, [pc, #244]	; (801b42c <tcp_process+0x5b4>)
 801b336:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b338:	8812      	ldrh	r2, [r2, #0]
 801b33a:	b292      	uxth	r2, r2
 801b33c:	9202      	str	r2, [sp, #8]
 801b33e:	9301      	str	r3, [sp, #4]
 801b340:	4b3b      	ldr	r3, [pc, #236]	; (801b430 <tcp_process+0x5b8>)
 801b342:	9300      	str	r3, [sp, #0]
 801b344:	4b3b      	ldr	r3, [pc, #236]	; (801b434 <tcp_process+0x5bc>)
 801b346:	4602      	mov	r2, r0
 801b348:	6878      	ldr	r0, [r7, #4]
 801b34a:	f003 f839 	bl	801e3c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801b34e:	e167      	b.n	801b620 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801b350:	4b32      	ldr	r3, [pc, #200]	; (801b41c <tcp_process+0x5a4>)
 801b352:	781b      	ldrb	r3, [r3, #0]
 801b354:	f003 0302 	and.w	r3, r3, #2
 801b358:	2b00      	cmp	r3, #0
 801b35a:	f000 8161 	beq.w	801b620 <tcp_process+0x7a8>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b362:	1e5a      	subs	r2, r3, #1
 801b364:	4b30      	ldr	r3, [pc, #192]	; (801b428 <tcp_process+0x5b0>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	429a      	cmp	r2, r3
 801b36a:	f040 8159 	bne.w	801b620 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801b36e:	6878      	ldr	r0, [r7, #4]
 801b370:	f002 fe12 	bl	801df98 <tcp_rexmit>
      break;
 801b374:	e154      	b.n	801b620 <tcp_process+0x7a8>
 801b376:	e153      	b.n	801b620 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801b378:	6878      	ldr	r0, [r7, #4]
 801b37a:	f000 fa71 	bl	801b860 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801b37e:	4b32      	ldr	r3, [pc, #200]	; (801b448 <tcp_process+0x5d0>)
 801b380:	781b      	ldrb	r3, [r3, #0]
 801b382:	f003 0320 	and.w	r3, r3, #32
 801b386:	2b00      	cmp	r3, #0
 801b388:	f000 814c 	beq.w	801b624 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	8b5b      	ldrh	r3, [r3, #26]
 801b390:	f043 0302 	orr.w	r3, r3, #2
 801b394:	b29a      	uxth	r2, r3
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2207      	movs	r2, #7
 801b39e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b3a0:	e140      	b.n	801b624 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	f000 fa5c 	bl	801b860 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b3a8:	4b27      	ldr	r3, [pc, #156]	; (801b448 <tcp_process+0x5d0>)
 801b3aa:	781b      	ldrb	r3, [r3, #0]
 801b3ac:	f003 0320 	and.w	r3, r3, #32
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d071      	beq.n	801b498 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b3b4:	4b19      	ldr	r3, [pc, #100]	; (801b41c <tcp_process+0x5a4>)
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	f003 0310 	and.w	r3, r3, #16
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d060      	beq.n	801b482 <tcp_process+0x60a>
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b3c4:	4b16      	ldr	r3, [pc, #88]	; (801b420 <tcp_process+0x5a8>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	429a      	cmp	r2, r3
 801b3ca:	d15a      	bne.n	801b482 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d156      	bne.n	801b482 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	8b5b      	ldrh	r3, [r3, #26]
 801b3d8:	f043 0302 	orr.w	r3, r3, #2
 801b3dc:	b29a      	uxth	r2, r3
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	f7fe fdbe 	bl	8019f64 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801b3e8:	4b18      	ldr	r3, [pc, #96]	; (801b44c <tcp_process+0x5d4>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	687a      	ldr	r2, [r7, #4]
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d105      	bne.n	801b3fe <tcp_process+0x586>
 801b3f2:	4b16      	ldr	r3, [pc, #88]	; (801b44c <tcp_process+0x5d4>)
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	68db      	ldr	r3, [r3, #12]
 801b3f8:	4a14      	ldr	r2, [pc, #80]	; (801b44c <tcp_process+0x5d4>)
 801b3fa:	6013      	str	r3, [r2, #0]
 801b3fc:	e02e      	b.n	801b45c <tcp_process+0x5e4>
 801b3fe:	4b13      	ldr	r3, [pc, #76]	; (801b44c <tcp_process+0x5d4>)
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	617b      	str	r3, [r7, #20]
 801b404:	e027      	b.n	801b456 <tcp_process+0x5de>
 801b406:	697b      	ldr	r3, [r7, #20]
 801b408:	68db      	ldr	r3, [r3, #12]
 801b40a:	687a      	ldr	r2, [r7, #4]
 801b40c:	429a      	cmp	r2, r3
 801b40e:	d11f      	bne.n	801b450 <tcp_process+0x5d8>
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	68da      	ldr	r2, [r3, #12]
 801b414:	697b      	ldr	r3, [r7, #20]
 801b416:	60da      	str	r2, [r3, #12]
 801b418:	e020      	b.n	801b45c <tcp_process+0x5e4>
 801b41a:	bf00      	nop
 801b41c:	20008ff0 	.word	0x20008ff0
 801b420:	20008fe8 	.word	0x20008fe8
 801b424:	20008fee 	.word	0x20008fee
 801b428:	20008fe4 	.word	0x20008fe4
 801b42c:	20008fd4 	.word	0x20008fd4
 801b430:	2000cc9c 	.word	0x2000cc9c
 801b434:	2000cca0 	.word	0x2000cca0
 801b438:	080272e4 	.word	0x080272e4
 801b43c:	08027584 	.word	0x08027584
 801b440:	08027330 	.word	0x08027330
 801b444:	20008fec 	.word	0x20008fec
 801b448:	20008ff1 	.word	0x20008ff1
 801b44c:	200103c0 	.word	0x200103c0
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	68db      	ldr	r3, [r3, #12]
 801b454:	617b      	str	r3, [r7, #20]
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d1d4      	bne.n	801b406 <tcp_process+0x58e>
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	2200      	movs	r2, #0
 801b460:	60da      	str	r2, [r3, #12]
 801b462:	4b77      	ldr	r3, [pc, #476]	; (801b640 <tcp_process+0x7c8>)
 801b464:	2201      	movs	r2, #1
 801b466:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	220a      	movs	r2, #10
 801b46c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801b46e:	4b75      	ldr	r3, [pc, #468]	; (801b644 <tcp_process+0x7cc>)
 801b470:	681a      	ldr	r2, [r3, #0]
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	60da      	str	r2, [r3, #12]
 801b476:	4a73      	ldr	r2, [pc, #460]	; (801b644 <tcp_process+0x7cc>)
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	6013      	str	r3, [r2, #0]
 801b47c:	f003 f962 	bl	801e744 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801b480:	e0d2      	b.n	801b628 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	8b5b      	ldrh	r3, [r3, #26]
 801b486:	f043 0302 	orr.w	r3, r3, #2
 801b48a:	b29a      	uxth	r2, r3
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	2208      	movs	r2, #8
 801b494:	751a      	strb	r2, [r3, #20]
      break;
 801b496:	e0c7      	b.n	801b628 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b498:	4b6b      	ldr	r3, [pc, #428]	; (801b648 <tcp_process+0x7d0>)
 801b49a:	781b      	ldrb	r3, [r3, #0]
 801b49c:	f003 0310 	and.w	r3, r3, #16
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	f000 80c1 	beq.w	801b628 <tcp_process+0x7b0>
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b4aa:	4b68      	ldr	r3, [pc, #416]	; (801b64c <tcp_process+0x7d4>)
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	429a      	cmp	r2, r3
 801b4b0:	f040 80ba 	bne.w	801b628 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	f040 80b5 	bne.w	801b628 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	2206      	movs	r2, #6
 801b4c2:	751a      	strb	r2, [r3, #20]
      break;
 801b4c4:	e0b0      	b.n	801b628 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801b4c6:	6878      	ldr	r0, [r7, #4]
 801b4c8:	f000 f9ca 	bl	801b860 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b4cc:	4b60      	ldr	r3, [pc, #384]	; (801b650 <tcp_process+0x7d8>)
 801b4ce:	781b      	ldrb	r3, [r3, #0]
 801b4d0:	f003 0320 	and.w	r3, r3, #32
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	f000 80a9 	beq.w	801b62c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	8b5b      	ldrh	r3, [r3, #26]
 801b4de:	f043 0302 	orr.w	r3, r3, #2
 801b4e2:	b29a      	uxth	r2, r3
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	f7fe fd3b 	bl	8019f64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b4ee:	4b59      	ldr	r3, [pc, #356]	; (801b654 <tcp_process+0x7dc>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	687a      	ldr	r2, [r7, #4]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d105      	bne.n	801b504 <tcp_process+0x68c>
 801b4f8:	4b56      	ldr	r3, [pc, #344]	; (801b654 <tcp_process+0x7dc>)
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	68db      	ldr	r3, [r3, #12]
 801b4fe:	4a55      	ldr	r2, [pc, #340]	; (801b654 <tcp_process+0x7dc>)
 801b500:	6013      	str	r3, [r2, #0]
 801b502:	e013      	b.n	801b52c <tcp_process+0x6b4>
 801b504:	4b53      	ldr	r3, [pc, #332]	; (801b654 <tcp_process+0x7dc>)
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	613b      	str	r3, [r7, #16]
 801b50a:	e00c      	b.n	801b526 <tcp_process+0x6ae>
 801b50c:	693b      	ldr	r3, [r7, #16]
 801b50e:	68db      	ldr	r3, [r3, #12]
 801b510:	687a      	ldr	r2, [r7, #4]
 801b512:	429a      	cmp	r2, r3
 801b514:	d104      	bne.n	801b520 <tcp_process+0x6a8>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	68da      	ldr	r2, [r3, #12]
 801b51a:	693b      	ldr	r3, [r7, #16]
 801b51c:	60da      	str	r2, [r3, #12]
 801b51e:	e005      	b.n	801b52c <tcp_process+0x6b4>
 801b520:	693b      	ldr	r3, [r7, #16]
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	613b      	str	r3, [r7, #16]
 801b526:	693b      	ldr	r3, [r7, #16]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d1ef      	bne.n	801b50c <tcp_process+0x694>
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	2200      	movs	r2, #0
 801b530:	60da      	str	r2, [r3, #12]
 801b532:	4b43      	ldr	r3, [pc, #268]	; (801b640 <tcp_process+0x7c8>)
 801b534:	2201      	movs	r2, #1
 801b536:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	220a      	movs	r2, #10
 801b53c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b53e:	4b41      	ldr	r3, [pc, #260]	; (801b644 <tcp_process+0x7cc>)
 801b540:	681a      	ldr	r2, [r3, #0]
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	60da      	str	r2, [r3, #12]
 801b546:	4a3f      	ldr	r2, [pc, #252]	; (801b644 <tcp_process+0x7cc>)
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	6013      	str	r3, [r2, #0]
 801b54c:	f003 f8fa 	bl	801e744 <tcp_timer_needed>
      }
      break;
 801b550:	e06c      	b.n	801b62c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f000 f984 	bl	801b860 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b558:	4b3b      	ldr	r3, [pc, #236]	; (801b648 <tcp_process+0x7d0>)
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	f003 0310 	and.w	r3, r3, #16
 801b560:	2b00      	cmp	r3, #0
 801b562:	d065      	beq.n	801b630 <tcp_process+0x7b8>
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b568:	4b38      	ldr	r3, [pc, #224]	; (801b64c <tcp_process+0x7d4>)
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	429a      	cmp	r2, r3
 801b56e:	d15f      	bne.n	801b630 <tcp_process+0x7b8>
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b574:	2b00      	cmp	r3, #0
 801b576:	d15b      	bne.n	801b630 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801b578:	6878      	ldr	r0, [r7, #4]
 801b57a:	f7fe fcf3 	bl	8019f64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b57e:	4b35      	ldr	r3, [pc, #212]	; (801b654 <tcp_process+0x7dc>)
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	687a      	ldr	r2, [r7, #4]
 801b584:	429a      	cmp	r2, r3
 801b586:	d105      	bne.n	801b594 <tcp_process+0x71c>
 801b588:	4b32      	ldr	r3, [pc, #200]	; (801b654 <tcp_process+0x7dc>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	68db      	ldr	r3, [r3, #12]
 801b58e:	4a31      	ldr	r2, [pc, #196]	; (801b654 <tcp_process+0x7dc>)
 801b590:	6013      	str	r3, [r2, #0]
 801b592:	e013      	b.n	801b5bc <tcp_process+0x744>
 801b594:	4b2f      	ldr	r3, [pc, #188]	; (801b654 <tcp_process+0x7dc>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	60fb      	str	r3, [r7, #12]
 801b59a:	e00c      	b.n	801b5b6 <tcp_process+0x73e>
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	68db      	ldr	r3, [r3, #12]
 801b5a0:	687a      	ldr	r2, [r7, #4]
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	d104      	bne.n	801b5b0 <tcp_process+0x738>
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	68da      	ldr	r2, [r3, #12]
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	60da      	str	r2, [r3, #12]
 801b5ae:	e005      	b.n	801b5bc <tcp_process+0x744>
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	68db      	ldr	r3, [r3, #12]
 801b5b4:	60fb      	str	r3, [r7, #12]
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d1ef      	bne.n	801b59c <tcp_process+0x724>
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	2200      	movs	r2, #0
 801b5c0:	60da      	str	r2, [r3, #12]
 801b5c2:	4b1f      	ldr	r3, [pc, #124]	; (801b640 <tcp_process+0x7c8>)
 801b5c4:	2201      	movs	r2, #1
 801b5c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	220a      	movs	r2, #10
 801b5cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b5ce:	4b1d      	ldr	r3, [pc, #116]	; (801b644 <tcp_process+0x7cc>)
 801b5d0:	681a      	ldr	r2, [r3, #0]
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	60da      	str	r2, [r3, #12]
 801b5d6:	4a1b      	ldr	r2, [pc, #108]	; (801b644 <tcp_process+0x7cc>)
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	6013      	str	r3, [r2, #0]
 801b5dc:	f003 f8b2 	bl	801e744 <tcp_timer_needed>
      }
      break;
 801b5e0:	e026      	b.n	801b630 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801b5e2:	6878      	ldr	r0, [r7, #4]
 801b5e4:	f000 f93c 	bl	801b860 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b5e8:	4b17      	ldr	r3, [pc, #92]	; (801b648 <tcp_process+0x7d0>)
 801b5ea:	781b      	ldrb	r3, [r3, #0]
 801b5ec:	f003 0310 	and.w	r3, r3, #16
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d01f      	beq.n	801b634 <tcp_process+0x7bc>
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b5f8:	4b14      	ldr	r3, [pc, #80]	; (801b64c <tcp_process+0x7d4>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d119      	bne.n	801b634 <tcp_process+0x7bc>
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b604:	2b00      	cmp	r3, #0
 801b606:	d115      	bne.n	801b634 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801b608:	4b11      	ldr	r3, [pc, #68]	; (801b650 <tcp_process+0x7d8>)
 801b60a:	781b      	ldrb	r3, [r3, #0]
 801b60c:	f043 0310 	orr.w	r3, r3, #16
 801b610:	b2da      	uxtb	r2, r3
 801b612:	4b0f      	ldr	r3, [pc, #60]	; (801b650 <tcp_process+0x7d8>)
 801b614:	701a      	strb	r2, [r3, #0]
      }
      break;
 801b616:	e00d      	b.n	801b634 <tcp_process+0x7bc>
    default:
      break;
 801b618:	bf00      	nop
 801b61a:	e00c      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b61c:	bf00      	nop
 801b61e:	e00a      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b620:	bf00      	nop
 801b622:	e008      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b624:	bf00      	nop
 801b626:	e006      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b628:	bf00      	nop
 801b62a:	e004      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b62c:	bf00      	nop
 801b62e:	e002      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b630:	bf00      	nop
 801b632:	e000      	b.n	801b636 <tcp_process+0x7be>
      break;
 801b634:	bf00      	nop
  }
  return ERR_OK;
 801b636:	2300      	movs	r3, #0
}
 801b638:	4618      	mov	r0, r3
 801b63a:	3724      	adds	r7, #36	; 0x24
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bd90      	pop	{r4, r7, pc}
 801b640:	200103bc 	.word	0x200103bc
 801b644:	200103d0 	.word	0x200103d0
 801b648:	20008ff0 	.word	0x20008ff0
 801b64c:	20008fe8 	.word	0x20008fe8
 801b650:	20008ff1 	.word	0x20008ff1
 801b654:	200103c0 	.word	0x200103c0

0801b658 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801b658:	b590      	push	{r4, r7, lr}
 801b65a:	b085      	sub	sp, #20
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
 801b660:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d106      	bne.n	801b676 <tcp_oos_insert_segment+0x1e>
 801b668:	4b3b      	ldr	r3, [pc, #236]	; (801b758 <tcp_oos_insert_segment+0x100>)
 801b66a:	f240 421f 	movw	r2, #1055	; 0x41f
 801b66e:	493b      	ldr	r1, [pc, #236]	; (801b75c <tcp_oos_insert_segment+0x104>)
 801b670:	483b      	ldr	r0, [pc, #236]	; (801b760 <tcp_oos_insert_segment+0x108>)
 801b672:	f009 f895 	bl	80247a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	68db      	ldr	r3, [r3, #12]
 801b67a:	899b      	ldrh	r3, [r3, #12]
 801b67c:	b29b      	uxth	r3, r3
 801b67e:	4618      	mov	r0, r3
 801b680:	f7fb f962 	bl	8016948 <lwip_htons>
 801b684:	4603      	mov	r3, r0
 801b686:	b2db      	uxtb	r3, r3
 801b688:	f003 0301 	and.w	r3, r3, #1
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d028      	beq.n	801b6e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801b690:	6838      	ldr	r0, [r7, #0]
 801b692:	f7fe f999 	bl	80199c8 <tcp_segs_free>
    next = NULL;
 801b696:	2300      	movs	r3, #0
 801b698:	603b      	str	r3, [r7, #0]
 801b69a:	e056      	b.n	801b74a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b69c:	683b      	ldr	r3, [r7, #0]
 801b69e:	68db      	ldr	r3, [r3, #12]
 801b6a0:	899b      	ldrh	r3, [r3, #12]
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	f7fb f94f 	bl	8016948 <lwip_htons>
 801b6aa:	4603      	mov	r3, r0
 801b6ac:	b2db      	uxtb	r3, r3
 801b6ae:	f003 0301 	and.w	r3, r3, #1
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d00d      	beq.n	801b6d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	68db      	ldr	r3, [r3, #12]
 801b6ba:	899b      	ldrh	r3, [r3, #12]
 801b6bc:	b29c      	uxth	r4, r3
 801b6be:	2001      	movs	r0, #1
 801b6c0:	f7fb f942 	bl	8016948 <lwip_htons>
 801b6c4:	4603      	mov	r3, r0
 801b6c6:	461a      	mov	r2, r3
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	68db      	ldr	r3, [r3, #12]
 801b6cc:	4322      	orrs	r2, r4
 801b6ce:	b292      	uxth	r2, r2
 801b6d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801b6d2:	683b      	ldr	r3, [r7, #0]
 801b6d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801b6d6:	683b      	ldr	r3, [r7, #0]
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801b6dc:	68f8      	ldr	r0, [r7, #12]
 801b6de:	f7fe f987 	bl	80199f0 <tcp_seg_free>
    while (next &&
 801b6e2:	683b      	ldr	r3, [r7, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d00e      	beq.n	801b706 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	891b      	ldrh	r3, [r3, #8]
 801b6ec:	461a      	mov	r2, r3
 801b6ee:	4b1d      	ldr	r3, [pc, #116]	; (801b764 <tcp_oos_insert_segment+0x10c>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	441a      	add	r2, r3
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	68db      	ldr	r3, [r3, #12]
 801b6f8:	685b      	ldr	r3, [r3, #4]
 801b6fa:	6839      	ldr	r1, [r7, #0]
 801b6fc:	8909      	ldrh	r1, [r1, #8]
 801b6fe:	440b      	add	r3, r1
 801b700:	1ad3      	subs	r3, r2, r3
    while (next &&
 801b702:	2b00      	cmp	r3, #0
 801b704:	daca      	bge.n	801b69c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d01e      	beq.n	801b74a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	891b      	ldrh	r3, [r3, #8]
 801b710:	461a      	mov	r2, r3
 801b712:	4b14      	ldr	r3, [pc, #80]	; (801b764 <tcp_oos_insert_segment+0x10c>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	441a      	add	r2, r3
 801b718:	683b      	ldr	r3, [r7, #0]
 801b71a:	68db      	ldr	r3, [r3, #12]
 801b71c:	685b      	ldr	r3, [r3, #4]
 801b71e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801b720:	2b00      	cmp	r3, #0
 801b722:	dd12      	ble.n	801b74a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801b724:	683b      	ldr	r3, [r7, #0]
 801b726:	68db      	ldr	r3, [r3, #12]
 801b728:	685b      	ldr	r3, [r3, #4]
 801b72a:	b29a      	uxth	r2, r3
 801b72c:	4b0d      	ldr	r3, [pc, #52]	; (801b764 <tcp_oos_insert_segment+0x10c>)
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	b29b      	uxth	r3, r3
 801b732:	1ad3      	subs	r3, r2, r3
 801b734:	b29a      	uxth	r2, r3
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	685a      	ldr	r2, [r3, #4]
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	891b      	ldrh	r3, [r3, #8]
 801b742:	4619      	mov	r1, r3
 801b744:	4610      	mov	r0, r2
 801b746:	f7fc fb47 	bl	8017dd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	683a      	ldr	r2, [r7, #0]
 801b74e:	601a      	str	r2, [r3, #0]
}
 801b750:	bf00      	nop
 801b752:	3714      	adds	r7, #20
 801b754:	46bd      	mov	sp, r7
 801b756:	bd90      	pop	{r4, r7, pc}
 801b758:	080272e4 	.word	0x080272e4
 801b75c:	080275a4 	.word	0x080275a4
 801b760:	08027330 	.word	0x08027330
 801b764:	20008fe4 	.word	0x20008fe4

0801b768 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801b768:	b5b0      	push	{r4, r5, r7, lr}
 801b76a:	b086      	sub	sp, #24
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	60f8      	str	r0, [r7, #12]
 801b770:	60b9      	str	r1, [r7, #8]
 801b772:	607a      	str	r2, [r7, #4]
 801b774:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801b776:	e03e      	b.n	801b7f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	685b      	ldr	r3, [r3, #4]
 801b786:	4618      	mov	r0, r3
 801b788:	f7fc fd3a 	bl	8018200 <pbuf_clen>
 801b78c:	4603      	mov	r3, r0
 801b78e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b796:	8a7a      	ldrh	r2, [r7, #18]
 801b798:	429a      	cmp	r2, r3
 801b79a:	d906      	bls.n	801b7aa <tcp_free_acked_segments+0x42>
 801b79c:	4b2a      	ldr	r3, [pc, #168]	; (801b848 <tcp_free_acked_segments+0xe0>)
 801b79e:	f240 4257 	movw	r2, #1111	; 0x457
 801b7a2:	492a      	ldr	r1, [pc, #168]	; (801b84c <tcp_free_acked_segments+0xe4>)
 801b7a4:	482a      	ldr	r0, [pc, #168]	; (801b850 <tcp_free_acked_segments+0xe8>)
 801b7a6:	f008 fffb 	bl	80247a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801b7b0:	8a7b      	ldrh	r3, [r7, #18]
 801b7b2:	1ad3      	subs	r3, r2, r3
 801b7b4:	b29a      	uxth	r2, r3
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801b7bc:	697b      	ldr	r3, [r7, #20]
 801b7be:	891a      	ldrh	r2, [r3, #8]
 801b7c0:	4b24      	ldr	r3, [pc, #144]	; (801b854 <tcp_free_acked_segments+0xec>)
 801b7c2:	881b      	ldrh	r3, [r3, #0]
 801b7c4:	4413      	add	r3, r2
 801b7c6:	b29a      	uxth	r2, r3
 801b7c8:	4b22      	ldr	r3, [pc, #136]	; (801b854 <tcp_free_acked_segments+0xec>)
 801b7ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801b7cc:	6978      	ldr	r0, [r7, #20]
 801b7ce:	f7fe f90f 	bl	80199f0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d00c      	beq.n	801b7f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d109      	bne.n	801b7f6 <tcp_free_acked_segments+0x8e>
 801b7e2:	683b      	ldr	r3, [r7, #0]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d106      	bne.n	801b7f6 <tcp_free_acked_segments+0x8e>
 801b7e8:	4b17      	ldr	r3, [pc, #92]	; (801b848 <tcp_free_acked_segments+0xe0>)
 801b7ea:	f240 4262 	movw	r2, #1122	; 0x462
 801b7ee:	491a      	ldr	r1, [pc, #104]	; (801b858 <tcp_free_acked_segments+0xf0>)
 801b7f0:	4817      	ldr	r0, [pc, #92]	; (801b850 <tcp_free_acked_segments+0xe8>)
 801b7f2:	f008 ffd5 	bl	80247a0 <iprintf>
  while (seg_list != NULL &&
 801b7f6:	68bb      	ldr	r3, [r7, #8]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d020      	beq.n	801b83e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	68db      	ldr	r3, [r3, #12]
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	4618      	mov	r0, r3
 801b804:	f7fb f8b5 	bl	8016972 <lwip_htonl>
 801b808:	4604      	mov	r4, r0
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	891b      	ldrh	r3, [r3, #8]
 801b80e:	461d      	mov	r5, r3
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	68db      	ldr	r3, [r3, #12]
 801b814:	899b      	ldrh	r3, [r3, #12]
 801b816:	b29b      	uxth	r3, r3
 801b818:	4618      	mov	r0, r3
 801b81a:	f7fb f895 	bl	8016948 <lwip_htons>
 801b81e:	4603      	mov	r3, r0
 801b820:	b2db      	uxtb	r3, r3
 801b822:	f003 0303 	and.w	r3, r3, #3
 801b826:	2b00      	cmp	r3, #0
 801b828:	d001      	beq.n	801b82e <tcp_free_acked_segments+0xc6>
 801b82a:	2301      	movs	r3, #1
 801b82c:	e000      	b.n	801b830 <tcp_free_acked_segments+0xc8>
 801b82e:	2300      	movs	r3, #0
 801b830:	442b      	add	r3, r5
 801b832:	18e2      	adds	r2, r4, r3
 801b834:	4b09      	ldr	r3, [pc, #36]	; (801b85c <tcp_free_acked_segments+0xf4>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	dd9c      	ble.n	801b778 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801b83e:	68bb      	ldr	r3, [r7, #8]
}
 801b840:	4618      	mov	r0, r3
 801b842:	3718      	adds	r7, #24
 801b844:	46bd      	mov	sp, r7
 801b846:	bdb0      	pop	{r4, r5, r7, pc}
 801b848:	080272e4 	.word	0x080272e4
 801b84c:	080275cc 	.word	0x080275cc
 801b850:	08027330 	.word	0x08027330
 801b854:	20008fec 	.word	0x20008fec
 801b858:	080275f4 	.word	0x080275f4
 801b85c:	20008fe8 	.word	0x20008fe8

0801b860 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801b860:	b5b0      	push	{r4, r5, r7, lr}
 801b862:	b094      	sub	sp, #80	; 0x50
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801b868:	2300      	movs	r3, #0
 801b86a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d106      	bne.n	801b880 <tcp_receive+0x20>
 801b872:	4ba6      	ldr	r3, [pc, #664]	; (801bb0c <tcp_receive+0x2ac>)
 801b874:	f240 427b 	movw	r2, #1147	; 0x47b
 801b878:	49a5      	ldr	r1, [pc, #660]	; (801bb10 <tcp_receive+0x2b0>)
 801b87a:	48a6      	ldr	r0, [pc, #664]	; (801bb14 <tcp_receive+0x2b4>)
 801b87c:	f008 ff90 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	7d1b      	ldrb	r3, [r3, #20]
 801b884:	2b03      	cmp	r3, #3
 801b886:	d806      	bhi.n	801b896 <tcp_receive+0x36>
 801b888:	4ba0      	ldr	r3, [pc, #640]	; (801bb0c <tcp_receive+0x2ac>)
 801b88a:	f240 427c 	movw	r2, #1148	; 0x47c
 801b88e:	49a2      	ldr	r1, [pc, #648]	; (801bb18 <tcp_receive+0x2b8>)
 801b890:	48a0      	ldr	r0, [pc, #640]	; (801bb14 <tcp_receive+0x2b4>)
 801b892:	f008 ff85 	bl	80247a0 <iprintf>

  if (flags & TCP_ACK) {
 801b896:	4ba1      	ldr	r3, [pc, #644]	; (801bb1c <tcp_receive+0x2bc>)
 801b898:	781b      	ldrb	r3, [r3, #0]
 801b89a:	f003 0310 	and.w	r3, r3, #16
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	f000 8263 	beq.w	801bd6a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b8aa:	461a      	mov	r2, r3
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b8b0:	4413      	add	r3, r2
 801b8b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b8b8:	4b99      	ldr	r3, [pc, #612]	; (801bb20 <tcp_receive+0x2c0>)
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	1ad3      	subs	r3, r2, r3
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	db1b      	blt.n	801b8fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b8c6:	4b96      	ldr	r3, [pc, #600]	; (801bb20 <tcp_receive+0x2c0>)
 801b8c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d106      	bne.n	801b8dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b8d2:	4b94      	ldr	r3, [pc, #592]	; (801bb24 <tcp_receive+0x2c4>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	1ad3      	subs	r3, r2, r3
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	db0e      	blt.n	801b8fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b8e0:	4b90      	ldr	r3, [pc, #576]	; (801bb24 <tcp_receive+0x2c4>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d125      	bne.n	801b934 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b8e8:	4b8f      	ldr	r3, [pc, #572]	; (801bb28 <tcp_receive+0x2c8>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	89db      	ldrh	r3, [r3, #14]
 801b8ee:	b29a      	uxth	r2, r3
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	d91c      	bls.n	801b934 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801b8fa:	4b8b      	ldr	r3, [pc, #556]	; (801bb28 <tcp_receive+0x2c8>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	89db      	ldrh	r3, [r3, #14]
 801b900:	b29a      	uxth	r2, r3
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b914:	429a      	cmp	r2, r3
 801b916:	d205      	bcs.n	801b924 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801b924:	4b7e      	ldr	r3, [pc, #504]	; (801bb20 <tcp_receive+0x2c0>)
 801b926:	681a      	ldr	r2, [r3, #0]
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801b92c:	4b7d      	ldr	r3, [pc, #500]	; (801bb24 <tcp_receive+0x2c4>)
 801b92e:	681a      	ldr	r2, [r3, #0]
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801b934:	4b7b      	ldr	r3, [pc, #492]	; (801bb24 <tcp_receive+0x2c4>)
 801b936:	681a      	ldr	r2, [r3, #0]
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b93c:	1ad3      	subs	r3, r2, r3
 801b93e:	2b00      	cmp	r3, #0
 801b940:	dc58      	bgt.n	801b9f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801b942:	4b7a      	ldr	r3, [pc, #488]	; (801bb2c <tcp_receive+0x2cc>)
 801b944:	881b      	ldrh	r3, [r3, #0]
 801b946:	2b00      	cmp	r3, #0
 801b948:	d14b      	bne.n	801b9e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b94e:	687a      	ldr	r2, [r7, #4]
 801b950:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801b954:	4413      	add	r3, r2
 801b956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b958:	429a      	cmp	r2, r3
 801b95a:	d142      	bne.n	801b9e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b962:	2b00      	cmp	r3, #0
 801b964:	db3d      	blt.n	801b9e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b96a:	4b6e      	ldr	r3, [pc, #440]	; (801bb24 <tcp_receive+0x2c4>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	429a      	cmp	r2, r3
 801b970:	d137      	bne.n	801b9e2 <tcp_receive+0x182>
              found_dupack = 1;
 801b972:	2301      	movs	r3, #1
 801b974:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b97c:	2bff      	cmp	r3, #255	; 0xff
 801b97e:	d007      	beq.n	801b990 <tcp_receive+0x130>
                ++pcb->dupacks;
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b986:	3301      	adds	r3, #1
 801b988:	b2da      	uxtb	r2, r3
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b996:	2b03      	cmp	r3, #3
 801b998:	d91b      	bls.n	801b9d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b9a4:	4413      	add	r3, r2
 801b9a6:	b29a      	uxth	r2, r3
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	d30a      	bcc.n	801b9c8 <tcp_receive+0x168>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b9bc:	4413      	add	r3, r2
 801b9be:	b29a      	uxth	r2, r3
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b9c6:	e004      	b.n	801b9d2 <tcp_receive+0x172>
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b9d8:	2b02      	cmp	r3, #2
 801b9da:	d902      	bls.n	801b9e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801b9dc:	6878      	ldr	r0, [r7, #4]
 801b9de:	f002 fb47 	bl	801e070 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801b9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	f040 8160 	bne.w	801bcaa <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b9f2:	e15a      	b.n	801bcaa <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b9f4:	4b4b      	ldr	r3, [pc, #300]	; (801bb24 <tcp_receive+0x2c4>)
 801b9f6:	681a      	ldr	r2, [r3, #0]
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9fc:	1ad3      	subs	r3, r2, r3
 801b9fe:	3b01      	subs	r3, #1
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	f2c0 814d 	blt.w	801bca0 <tcp_receive+0x440>
 801ba06:	4b47      	ldr	r3, [pc, #284]	; (801bb24 <tcp_receive+0x2c4>)
 801ba08:	681a      	ldr	r2, [r3, #0]
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba0e:	1ad3      	subs	r3, r2, r3
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	f300 8145 	bgt.w	801bca0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	8b5b      	ldrh	r3, [r3, #26]
 801ba1a:	f003 0304 	and.w	r3, r3, #4
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d010      	beq.n	801ba44 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	8b5b      	ldrh	r3, [r3, #26]
 801ba26:	f023 0304 	bic.w	r3, r3, #4
 801ba2a:	b29a      	uxth	r2, r3
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	2200      	movs	r2, #0
 801ba40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	2200      	movs	r2, #0
 801ba48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ba52:	10db      	asrs	r3, r3, #3
 801ba54:	b21b      	sxth	r3, r3
 801ba56:	b29a      	uxth	r2, r3
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ba5e:	b29b      	uxth	r3, r3
 801ba60:	4413      	add	r3, r2
 801ba62:	b29b      	uxth	r3, r3
 801ba64:	b21a      	sxth	r2, r3
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801ba6c:	4b2d      	ldr	r3, [pc, #180]	; (801bb24 <tcp_receive+0x2c4>)
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	b29a      	uxth	r2, r3
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba76:	b29b      	uxth	r3, r3
 801ba78:	1ad3      	subs	r3, r2, r3
 801ba7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	2200      	movs	r2, #0
 801ba80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801ba84:	4b27      	ldr	r3, [pc, #156]	; (801bb24 <tcp_receive+0x2c4>)
 801ba86:	681a      	ldr	r2, [r3, #0]
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	7d1b      	ldrb	r3, [r3, #20]
 801ba90:	2b03      	cmp	r3, #3
 801ba92:	f240 8096 	bls.w	801bbc2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d244      	bcs.n	801bb30 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	8b5b      	ldrh	r3, [r3, #26]
 801baaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d001      	beq.n	801bab6 <tcp_receive+0x256>
 801bab2:	2301      	movs	r3, #1
 801bab4:	e000      	b.n	801bab8 <tcp_receive+0x258>
 801bab6:	2302      	movs	r3, #2
 801bab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801babc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801bac0:	b29a      	uxth	r2, r3
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bac6:	fb12 f303 	smulbb	r3, r2, r3
 801baca:	b29b      	uxth	r3, r3
 801bacc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801bace:	4293      	cmp	r3, r2
 801bad0:	bf28      	it	cs
 801bad2:	4613      	movcs	r3, r2
 801bad4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801badc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bade:	4413      	add	r3, r2
 801bae0:	b29a      	uxth	r2, r3
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bae8:	429a      	cmp	r2, r3
 801baea:	d309      	bcc.n	801bb00 <tcp_receive+0x2a0>
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801baf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801baf4:	4413      	add	r3, r2
 801baf6:	b29a      	uxth	r2, r3
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bafe:	e060      	b.n	801bbc2 <tcp_receive+0x362>
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bb0a:	e05a      	b.n	801bbc2 <tcp_receive+0x362>
 801bb0c:	080272e4 	.word	0x080272e4
 801bb10:	08027614 	.word	0x08027614
 801bb14:	08027330 	.word	0x08027330
 801bb18:	08027630 	.word	0x08027630
 801bb1c:	20008ff0 	.word	0x20008ff0
 801bb20:	20008fe4 	.word	0x20008fe4
 801bb24:	20008fe8 	.word	0x20008fe8
 801bb28:	20008fd4 	.word	0x20008fd4
 801bb2c:	20008fee 	.word	0x20008fee
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bb36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bb38:	4413      	add	r3, r2
 801bb3a:	b29a      	uxth	r2, r3
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d309      	bcc.n	801bb5a <tcp_receive+0x2fa>
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bb4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bb4e:	4413      	add	r3, r2
 801bb50:	b29a      	uxth	r2, r3
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801bb58:	e004      	b.n	801bb64 <tcp_receive+0x304>
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bb70:	429a      	cmp	r2, r3
 801bb72:	d326      	bcc.n	801bbc2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bb80:	1ad3      	subs	r3, r2, r3
 801bb82:	b29a      	uxth	r2, r3
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb94:	4413      	add	r3, r2
 801bb96:	b29a      	uxth	r2, r3
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	d30a      	bcc.n	801bbb8 <tcp_receive+0x358>
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbac:	4413      	add	r3, r2
 801bbae:	b29a      	uxth	r2, r3
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bbb6:	e004      	b.n	801bbc2 <tcp_receive+0x362>
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbca:	4a98      	ldr	r2, [pc, #608]	; (801be2c <tcp_receive+0x5cc>)
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	f7ff fdcb 	bl	801b768 <tcp_free_acked_segments>
 801bbd2:	4602      	mov	r2, r0
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbe0:	4a93      	ldr	r2, [pc, #588]	; (801be30 <tcp_receive+0x5d0>)
 801bbe2:	6878      	ldr	r0, [r7, #4]
 801bbe4:	f7ff fdc0 	bl	801b768 <tcp_free_acked_segments>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d104      	bne.n	801bc00 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbfc:	861a      	strh	r2, [r3, #48]	; 0x30
 801bbfe:	e002      	b.n	801bc06 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	2200      	movs	r2, #0
 801bc04:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	2200      	movs	r2, #0
 801bc0a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d103      	bne.n	801bc1c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	2200      	movs	r2, #0
 801bc18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801bc22:	4b84      	ldr	r3, [pc, #528]	; (801be34 <tcp_receive+0x5d4>)
 801bc24:	881b      	ldrh	r3, [r3, #0]
 801bc26:	4413      	add	r3, r2
 801bc28:	b29a      	uxth	r2, r3
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	8b5b      	ldrh	r3, [r3, #26]
 801bc34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d035      	beq.n	801bca8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d118      	bne.n	801bc76 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d00c      	beq.n	801bc66 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc54:	68db      	ldr	r3, [r3, #12]
 801bc56:	685b      	ldr	r3, [r3, #4]
 801bc58:	4618      	mov	r0, r3
 801bc5a:	f7fa fe8a 	bl	8016972 <lwip_htonl>
 801bc5e:	4603      	mov	r3, r0
 801bc60:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	dc20      	bgt.n	801bca8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	8b5b      	ldrh	r3, [r3, #26]
 801bc6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bc6e:	b29a      	uxth	r2, r3
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bc74:	e018      	b.n	801bca8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc7e:	68db      	ldr	r3, [r3, #12]
 801bc80:	685b      	ldr	r3, [r3, #4]
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7fa fe75 	bl	8016972 <lwip_htonl>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	1ae3      	subs	r3, r4, r3
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	dc0b      	bgt.n	801bca8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	8b5b      	ldrh	r3, [r3, #26]
 801bc94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bc98:	b29a      	uxth	r2, r3
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bc9e:	e003      	b.n	801bca8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f002 fbdf 	bl	801e464 <tcp_send_empty_ack>
 801bca6:	e000      	b.n	801bcaa <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bca8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d05b      	beq.n	801bd6a <tcp_receive+0x50a>
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bcb6:	4b60      	ldr	r3, [pc, #384]	; (801be38 <tcp_receive+0x5d8>)
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	1ad3      	subs	r3, r2, r3
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	da54      	bge.n	801bd6a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801bcc0:	4b5e      	ldr	r3, [pc, #376]	; (801be3c <tcp_receive+0x5dc>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	b29a      	uxth	r2, r3
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcca:	b29b      	uxth	r3, r3
 801bccc:	1ad3      	subs	r3, r2, r3
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801bcd4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bcde:	10db      	asrs	r3, r3, #3
 801bce0:	b21b      	sxth	r3, r3
 801bce2:	b29b      	uxth	r3, r3
 801bce4:	1ad3      	subs	r3, r2, r3
 801bce6:	b29b      	uxth	r3, r3
 801bce8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bcf2:	b29a      	uxth	r2, r3
 801bcf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801bcf8:	4413      	add	r3, r2
 801bcfa:	b29b      	uxth	r3, r3
 801bcfc:	b21a      	sxth	r2, r3
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801bd02:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	da05      	bge.n	801bd16 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801bd0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801bd0e:	425b      	negs	r3, r3
 801bd10:	b29b      	uxth	r3, r3
 801bd12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801bd16:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bd20:	109b      	asrs	r3, r3, #2
 801bd22:	b21b      	sxth	r3, r3
 801bd24:	b29b      	uxth	r3, r3
 801bd26:	1ad3      	subs	r3, r2, r3
 801bd28:	b29b      	uxth	r3, r3
 801bd2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bd34:	b29a      	uxth	r2, r3
 801bd36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801bd3a:	4413      	add	r3, r2
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	b21a      	sxth	r2, r3
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bd4a:	10db      	asrs	r3, r3, #3
 801bd4c:	b21b      	sxth	r3, r3
 801bd4e:	b29a      	uxth	r2, r3
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	4413      	add	r3, r2
 801bd5a:	b29b      	uxth	r3, r3
 801bd5c:	b21a      	sxth	r2, r3
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	2200      	movs	r2, #0
 801bd68:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bd6a:	4b35      	ldr	r3, [pc, #212]	; (801be40 <tcp_receive+0x5e0>)
 801bd6c:	881b      	ldrh	r3, [r3, #0]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	f000 84e1 	beq.w	801c736 <tcp_receive+0xed6>
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	7d1b      	ldrb	r3, [r3, #20]
 801bd78:	2b06      	cmp	r3, #6
 801bd7a:	f200 84dc 	bhi.w	801c736 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bd82:	4b30      	ldr	r3, [pc, #192]	; (801be44 <tcp_receive+0x5e4>)
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	1ad3      	subs	r3, r2, r3
 801bd88:	3b01      	subs	r3, #1
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	f2c0 808e 	blt.w	801beac <tcp_receive+0x64c>
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bd94:	4b2a      	ldr	r3, [pc, #168]	; (801be40 <tcp_receive+0x5e0>)
 801bd96:	881b      	ldrh	r3, [r3, #0]
 801bd98:	4619      	mov	r1, r3
 801bd9a:	4b2a      	ldr	r3, [pc, #168]	; (801be44 <tcp_receive+0x5e4>)
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	440b      	add	r3, r1
 801bda0:	1ad3      	subs	r3, r2, r3
 801bda2:	3301      	adds	r3, #1
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	f300 8081 	bgt.w	801beac <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801bdaa:	4b27      	ldr	r3, [pc, #156]	; (801be48 <tcp_receive+0x5e8>)
 801bdac:	685b      	ldr	r3, [r3, #4]
 801bdae:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bdb4:	4b23      	ldr	r3, [pc, #140]	; (801be44 <tcp_receive+0x5e4>)
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	1ad3      	subs	r3, r2, r3
 801bdba:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801bdbc:	4b22      	ldr	r3, [pc, #136]	; (801be48 <tcp_receive+0x5e8>)
 801bdbe:	685b      	ldr	r3, [r3, #4]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d106      	bne.n	801bdd2 <tcp_receive+0x572>
 801bdc4:	4b21      	ldr	r3, [pc, #132]	; (801be4c <tcp_receive+0x5ec>)
 801bdc6:	f240 5294 	movw	r2, #1428	; 0x594
 801bdca:	4921      	ldr	r1, [pc, #132]	; (801be50 <tcp_receive+0x5f0>)
 801bdcc:	4821      	ldr	r0, [pc, #132]	; (801be54 <tcp_receive+0x5f4>)
 801bdce:	f008 fce7 	bl	80247a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bdd8:	4293      	cmp	r3, r2
 801bdda:	d906      	bls.n	801bdea <tcp_receive+0x58a>
 801bddc:	4b1b      	ldr	r3, [pc, #108]	; (801be4c <tcp_receive+0x5ec>)
 801bdde:	f240 5295 	movw	r2, #1429	; 0x595
 801bde2:	491d      	ldr	r1, [pc, #116]	; (801be58 <tcp_receive+0x5f8>)
 801bde4:	481b      	ldr	r0, [pc, #108]	; (801be54 <tcp_receive+0x5f4>)
 801bde6:	f008 fcdb 	bl	80247a0 <iprintf>
      off = (u16_t)off32;
 801bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801bdf0:	4b15      	ldr	r3, [pc, #84]	; (801be48 <tcp_receive+0x5e8>)
 801bdf2:	685b      	ldr	r3, [r3, #4]
 801bdf4:	891b      	ldrh	r3, [r3, #8]
 801bdf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	d906      	bls.n	801be0c <tcp_receive+0x5ac>
 801bdfe:	4b13      	ldr	r3, [pc, #76]	; (801be4c <tcp_receive+0x5ec>)
 801be00:	f240 5297 	movw	r2, #1431	; 0x597
 801be04:	4915      	ldr	r1, [pc, #84]	; (801be5c <tcp_receive+0x5fc>)
 801be06:	4813      	ldr	r0, [pc, #76]	; (801be54 <tcp_receive+0x5f4>)
 801be08:	f008 fcca 	bl	80247a0 <iprintf>
      inseg.len -= off;
 801be0c:	4b0e      	ldr	r3, [pc, #56]	; (801be48 <tcp_receive+0x5e8>)
 801be0e:	891a      	ldrh	r2, [r3, #8]
 801be10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be14:	1ad3      	subs	r3, r2, r3
 801be16:	b29a      	uxth	r2, r3
 801be18:	4b0b      	ldr	r3, [pc, #44]	; (801be48 <tcp_receive+0x5e8>)
 801be1a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801be1c:	4b0a      	ldr	r3, [pc, #40]	; (801be48 <tcp_receive+0x5e8>)
 801be1e:	685b      	ldr	r3, [r3, #4]
 801be20:	891a      	ldrh	r2, [r3, #8]
 801be22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be26:	1ad3      	subs	r3, r2, r3
 801be28:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801be2a:	e029      	b.n	801be80 <tcp_receive+0x620>
 801be2c:	0802764c 	.word	0x0802764c
 801be30:	08027654 	.word	0x08027654
 801be34:	20008fec 	.word	0x20008fec
 801be38:	20008fe8 	.word	0x20008fe8
 801be3c:	200103c4 	.word	0x200103c4
 801be40:	20008fee 	.word	0x20008fee
 801be44:	20008fe4 	.word	0x20008fe4
 801be48:	20008fc4 	.word	0x20008fc4
 801be4c:	080272e4 	.word	0x080272e4
 801be50:	0802765c 	.word	0x0802765c
 801be54:	08027330 	.word	0x08027330
 801be58:	0802766c 	.word	0x0802766c
 801be5c:	0802767c 	.word	0x0802767c
        off -= p->len;
 801be60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be62:	895b      	ldrh	r3, [r3, #10]
 801be64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801be68:	1ad3      	subs	r3, r2, r3
 801be6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801be6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801be72:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801be74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be76:	2200      	movs	r2, #0
 801be78:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801be7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801be80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be82:	895b      	ldrh	r3, [r3, #10]
 801be84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801be88:	429a      	cmp	r2, r3
 801be8a:	d8e9      	bhi.n	801be60 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801be8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be90:	4619      	mov	r1, r3
 801be92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801be94:	f7fc f8a0 	bl	8017fd8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be9c:	4a91      	ldr	r2, [pc, #580]	; (801c0e4 <tcp_receive+0x884>)
 801be9e:	6013      	str	r3, [r2, #0]
 801bea0:	4b91      	ldr	r3, [pc, #580]	; (801c0e8 <tcp_receive+0x888>)
 801bea2:	68db      	ldr	r3, [r3, #12]
 801bea4:	4a8f      	ldr	r2, [pc, #572]	; (801c0e4 <tcp_receive+0x884>)
 801bea6:	6812      	ldr	r2, [r2, #0]
 801bea8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801beaa:	e00d      	b.n	801bec8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801beac:	4b8d      	ldr	r3, [pc, #564]	; (801c0e4 <tcp_receive+0x884>)
 801beae:	681a      	ldr	r2, [r3, #0]
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801beb4:	1ad3      	subs	r3, r2, r3
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	da06      	bge.n	801bec8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	8b5b      	ldrh	r3, [r3, #26]
 801bebe:	f043 0302 	orr.w	r3, r3, #2
 801bec2:	b29a      	uxth	r2, r3
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bec8:	4b86      	ldr	r3, [pc, #536]	; (801c0e4 <tcp_receive+0x884>)
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bed0:	1ad3      	subs	r3, r2, r3
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	f2c0 842a 	blt.w	801c72c <tcp_receive+0xecc>
 801bed8:	4b82      	ldr	r3, [pc, #520]	; (801c0e4 <tcp_receive+0x884>)
 801beda:	681a      	ldr	r2, [r3, #0]
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bee0:	6879      	ldr	r1, [r7, #4]
 801bee2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bee4:	440b      	add	r3, r1
 801bee6:	1ad3      	subs	r3, r2, r3
 801bee8:	3301      	adds	r3, #1
 801beea:	2b00      	cmp	r3, #0
 801beec:	f300 841e 	bgt.w	801c72c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bef4:	4b7b      	ldr	r3, [pc, #492]	; (801c0e4 <tcp_receive+0x884>)
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	429a      	cmp	r2, r3
 801befa:	f040 829a 	bne.w	801c432 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801befe:	4b7a      	ldr	r3, [pc, #488]	; (801c0e8 <tcp_receive+0x888>)
 801bf00:	891c      	ldrh	r4, [r3, #8]
 801bf02:	4b79      	ldr	r3, [pc, #484]	; (801c0e8 <tcp_receive+0x888>)
 801bf04:	68db      	ldr	r3, [r3, #12]
 801bf06:	899b      	ldrh	r3, [r3, #12]
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7fa fd1c 	bl	8016948 <lwip_htons>
 801bf10:	4603      	mov	r3, r0
 801bf12:	b2db      	uxtb	r3, r3
 801bf14:	f003 0303 	and.w	r3, r3, #3
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d001      	beq.n	801bf20 <tcp_receive+0x6c0>
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	e000      	b.n	801bf22 <tcp_receive+0x6c2>
 801bf20:	2300      	movs	r3, #0
 801bf22:	4423      	add	r3, r4
 801bf24:	b29a      	uxth	r2, r3
 801bf26:	4b71      	ldr	r3, [pc, #452]	; (801c0ec <tcp_receive+0x88c>)
 801bf28:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bf2e:	4b6f      	ldr	r3, [pc, #444]	; (801c0ec <tcp_receive+0x88c>)
 801bf30:	881b      	ldrh	r3, [r3, #0]
 801bf32:	429a      	cmp	r2, r3
 801bf34:	d275      	bcs.n	801c022 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bf36:	4b6c      	ldr	r3, [pc, #432]	; (801c0e8 <tcp_receive+0x888>)
 801bf38:	68db      	ldr	r3, [r3, #12]
 801bf3a:	899b      	ldrh	r3, [r3, #12]
 801bf3c:	b29b      	uxth	r3, r3
 801bf3e:	4618      	mov	r0, r3
 801bf40:	f7fa fd02 	bl	8016948 <lwip_htons>
 801bf44:	4603      	mov	r3, r0
 801bf46:	b2db      	uxtb	r3, r3
 801bf48:	f003 0301 	and.w	r3, r3, #1
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d01f      	beq.n	801bf90 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801bf50:	4b65      	ldr	r3, [pc, #404]	; (801c0e8 <tcp_receive+0x888>)
 801bf52:	68db      	ldr	r3, [r3, #12]
 801bf54:	899b      	ldrh	r3, [r3, #12]
 801bf56:	b29b      	uxth	r3, r3
 801bf58:	b21b      	sxth	r3, r3
 801bf5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bf5e:	b21c      	sxth	r4, r3
 801bf60:	4b61      	ldr	r3, [pc, #388]	; (801c0e8 <tcp_receive+0x888>)
 801bf62:	68db      	ldr	r3, [r3, #12]
 801bf64:	899b      	ldrh	r3, [r3, #12]
 801bf66:	b29b      	uxth	r3, r3
 801bf68:	4618      	mov	r0, r3
 801bf6a:	f7fa fced 	bl	8016948 <lwip_htons>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	b2db      	uxtb	r3, r3
 801bf72:	b29b      	uxth	r3, r3
 801bf74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bf78:	b29b      	uxth	r3, r3
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f7fa fce4 	bl	8016948 <lwip_htons>
 801bf80:	4603      	mov	r3, r0
 801bf82:	b21b      	sxth	r3, r3
 801bf84:	4323      	orrs	r3, r4
 801bf86:	b21a      	sxth	r2, r3
 801bf88:	4b57      	ldr	r3, [pc, #348]	; (801c0e8 <tcp_receive+0x888>)
 801bf8a:	68db      	ldr	r3, [r3, #12]
 801bf8c:	b292      	uxth	r2, r2
 801bf8e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bf94:	4b54      	ldr	r3, [pc, #336]	; (801c0e8 <tcp_receive+0x888>)
 801bf96:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801bf98:	4b53      	ldr	r3, [pc, #332]	; (801c0e8 <tcp_receive+0x888>)
 801bf9a:	68db      	ldr	r3, [r3, #12]
 801bf9c:	899b      	ldrh	r3, [r3, #12]
 801bf9e:	b29b      	uxth	r3, r3
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	f7fa fcd1 	bl	8016948 <lwip_htons>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	b2db      	uxtb	r3, r3
 801bfaa:	f003 0302 	and.w	r3, r3, #2
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d005      	beq.n	801bfbe <tcp_receive+0x75e>
            inseg.len -= 1;
 801bfb2:	4b4d      	ldr	r3, [pc, #308]	; (801c0e8 <tcp_receive+0x888>)
 801bfb4:	891b      	ldrh	r3, [r3, #8]
 801bfb6:	3b01      	subs	r3, #1
 801bfb8:	b29a      	uxth	r2, r3
 801bfba:	4b4b      	ldr	r3, [pc, #300]	; (801c0e8 <tcp_receive+0x888>)
 801bfbc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801bfbe:	4b4a      	ldr	r3, [pc, #296]	; (801c0e8 <tcp_receive+0x888>)
 801bfc0:	685a      	ldr	r2, [r3, #4]
 801bfc2:	4b49      	ldr	r3, [pc, #292]	; (801c0e8 <tcp_receive+0x888>)
 801bfc4:	891b      	ldrh	r3, [r3, #8]
 801bfc6:	4619      	mov	r1, r3
 801bfc8:	4610      	mov	r0, r2
 801bfca:	f7fb ff05 	bl	8017dd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801bfce:	4b46      	ldr	r3, [pc, #280]	; (801c0e8 <tcp_receive+0x888>)
 801bfd0:	891c      	ldrh	r4, [r3, #8]
 801bfd2:	4b45      	ldr	r3, [pc, #276]	; (801c0e8 <tcp_receive+0x888>)
 801bfd4:	68db      	ldr	r3, [r3, #12]
 801bfd6:	899b      	ldrh	r3, [r3, #12]
 801bfd8:	b29b      	uxth	r3, r3
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7fa fcb4 	bl	8016948 <lwip_htons>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	b2db      	uxtb	r3, r3
 801bfe4:	f003 0303 	and.w	r3, r3, #3
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d001      	beq.n	801bff0 <tcp_receive+0x790>
 801bfec:	2301      	movs	r3, #1
 801bfee:	e000      	b.n	801bff2 <tcp_receive+0x792>
 801bff0:	2300      	movs	r3, #0
 801bff2:	4423      	add	r3, r4
 801bff4:	b29a      	uxth	r2, r3
 801bff6:	4b3d      	ldr	r3, [pc, #244]	; (801c0ec <tcp_receive+0x88c>)
 801bff8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801bffa:	4b3c      	ldr	r3, [pc, #240]	; (801c0ec <tcp_receive+0x88c>)
 801bffc:	881b      	ldrh	r3, [r3, #0]
 801bffe:	461a      	mov	r2, r3
 801c000:	4b38      	ldr	r3, [pc, #224]	; (801c0e4 <tcp_receive+0x884>)
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	441a      	add	r2, r3
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c00a:	6879      	ldr	r1, [r7, #4]
 801c00c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c00e:	440b      	add	r3, r1
 801c010:	429a      	cmp	r2, r3
 801c012:	d006      	beq.n	801c022 <tcp_receive+0x7c2>
 801c014:	4b36      	ldr	r3, [pc, #216]	; (801c0f0 <tcp_receive+0x890>)
 801c016:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801c01a:	4936      	ldr	r1, [pc, #216]	; (801c0f4 <tcp_receive+0x894>)
 801c01c:	4836      	ldr	r0, [pc, #216]	; (801c0f8 <tcp_receive+0x898>)
 801c01e:	f008 fbbf 	bl	80247a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c026:	2b00      	cmp	r3, #0
 801c028:	f000 80e7 	beq.w	801c1fa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c02c:	4b2e      	ldr	r3, [pc, #184]	; (801c0e8 <tcp_receive+0x888>)
 801c02e:	68db      	ldr	r3, [r3, #12]
 801c030:	899b      	ldrh	r3, [r3, #12]
 801c032:	b29b      	uxth	r3, r3
 801c034:	4618      	mov	r0, r3
 801c036:	f7fa fc87 	bl	8016948 <lwip_htons>
 801c03a:	4603      	mov	r3, r0
 801c03c:	b2db      	uxtb	r3, r3
 801c03e:	f003 0301 	and.w	r3, r3, #1
 801c042:	2b00      	cmp	r3, #0
 801c044:	d010      	beq.n	801c068 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801c046:	e00a      	b.n	801c05e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c04c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c052:	681a      	ldr	r2, [r3, #0]
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801c058:	68f8      	ldr	r0, [r7, #12]
 801c05a:	f7fd fcc9 	bl	80199f0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c062:	2b00      	cmp	r3, #0
 801c064:	d1f0      	bne.n	801c048 <tcp_receive+0x7e8>
 801c066:	e0c8      	b.n	801c1fa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801c06e:	e052      	b.n	801c116 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c072:	68db      	ldr	r3, [r3, #12]
 801c074:	899b      	ldrh	r3, [r3, #12]
 801c076:	b29b      	uxth	r3, r3
 801c078:	4618      	mov	r0, r3
 801c07a:	f7fa fc65 	bl	8016948 <lwip_htons>
 801c07e:	4603      	mov	r3, r0
 801c080:	b2db      	uxtb	r3, r3
 801c082:	f003 0301 	and.w	r3, r3, #1
 801c086:	2b00      	cmp	r3, #0
 801c088:	d03d      	beq.n	801c106 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c08a:	4b17      	ldr	r3, [pc, #92]	; (801c0e8 <tcp_receive+0x888>)
 801c08c:	68db      	ldr	r3, [r3, #12]
 801c08e:	899b      	ldrh	r3, [r3, #12]
 801c090:	b29b      	uxth	r3, r3
 801c092:	4618      	mov	r0, r3
 801c094:	f7fa fc58 	bl	8016948 <lwip_htons>
 801c098:	4603      	mov	r3, r0
 801c09a:	b2db      	uxtb	r3, r3
 801c09c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d130      	bne.n	801c106 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c0a4:	4b10      	ldr	r3, [pc, #64]	; (801c0e8 <tcp_receive+0x888>)
 801c0a6:	68db      	ldr	r3, [r3, #12]
 801c0a8:	899b      	ldrh	r3, [r3, #12]
 801c0aa:	b29c      	uxth	r4, r3
 801c0ac:	2001      	movs	r0, #1
 801c0ae:	f7fa fc4b 	bl	8016948 <lwip_htons>
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	461a      	mov	r2, r3
 801c0b6:	4b0c      	ldr	r3, [pc, #48]	; (801c0e8 <tcp_receive+0x888>)
 801c0b8:	68db      	ldr	r3, [r3, #12]
 801c0ba:	4322      	orrs	r2, r4
 801c0bc:	b292      	uxth	r2, r2
 801c0be:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c0c0:	4b09      	ldr	r3, [pc, #36]	; (801c0e8 <tcp_receive+0x888>)
 801c0c2:	891c      	ldrh	r4, [r3, #8]
 801c0c4:	4b08      	ldr	r3, [pc, #32]	; (801c0e8 <tcp_receive+0x888>)
 801c0c6:	68db      	ldr	r3, [r3, #12]
 801c0c8:	899b      	ldrh	r3, [r3, #12]
 801c0ca:	b29b      	uxth	r3, r3
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	f7fa fc3b 	bl	8016948 <lwip_htons>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	b2db      	uxtb	r3, r3
 801c0d6:	f003 0303 	and.w	r3, r3, #3
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d00e      	beq.n	801c0fc <tcp_receive+0x89c>
 801c0de:	2301      	movs	r3, #1
 801c0e0:	e00d      	b.n	801c0fe <tcp_receive+0x89e>
 801c0e2:	bf00      	nop
 801c0e4:	20008fe4 	.word	0x20008fe4
 801c0e8:	20008fc4 	.word	0x20008fc4
 801c0ec:	20008fee 	.word	0x20008fee
 801c0f0:	080272e4 	.word	0x080272e4
 801c0f4:	0802768c 	.word	0x0802768c
 801c0f8:	08027330 	.word	0x08027330
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	4423      	add	r3, r4
 801c100:	b29a      	uxth	r2, r3
 801c102:	4b98      	ldr	r3, [pc, #608]	; (801c364 <tcp_receive+0xb04>)
 801c104:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c108:	613b      	str	r3, [r7, #16]
              next = next->next;
 801c10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801c110:	6938      	ldr	r0, [r7, #16]
 801c112:	f7fd fc6d 	bl	80199f0 <tcp_seg_free>
            while (next &&
 801c116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d00e      	beq.n	801c13a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801c11c:	4b91      	ldr	r3, [pc, #580]	; (801c364 <tcp_receive+0xb04>)
 801c11e:	881b      	ldrh	r3, [r3, #0]
 801c120:	461a      	mov	r2, r3
 801c122:	4b91      	ldr	r3, [pc, #580]	; (801c368 <tcp_receive+0xb08>)
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	441a      	add	r2, r3
 801c128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c12a:	68db      	ldr	r3, [r3, #12]
 801c12c:	685b      	ldr	r3, [r3, #4]
 801c12e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c130:	8909      	ldrh	r1, [r1, #8]
 801c132:	440b      	add	r3, r1
 801c134:	1ad3      	subs	r3, r2, r3
            while (next &&
 801c136:	2b00      	cmp	r3, #0
 801c138:	da9a      	bge.n	801c070 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801c13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d059      	beq.n	801c1f4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801c140:	4b88      	ldr	r3, [pc, #544]	; (801c364 <tcp_receive+0xb04>)
 801c142:	881b      	ldrh	r3, [r3, #0]
 801c144:	461a      	mov	r2, r3
 801c146:	4b88      	ldr	r3, [pc, #544]	; (801c368 <tcp_receive+0xb08>)
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	441a      	add	r2, r3
 801c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c14e:	68db      	ldr	r3, [r3, #12]
 801c150:	685b      	ldr	r3, [r3, #4]
 801c152:	1ad3      	subs	r3, r2, r3
            if (next &&
 801c154:	2b00      	cmp	r3, #0
 801c156:	dd4d      	ble.n	801c1f4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c15a:	68db      	ldr	r3, [r3, #12]
 801c15c:	685b      	ldr	r3, [r3, #4]
 801c15e:	b29a      	uxth	r2, r3
 801c160:	4b81      	ldr	r3, [pc, #516]	; (801c368 <tcp_receive+0xb08>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	b29b      	uxth	r3, r3
 801c166:	1ad3      	subs	r3, r2, r3
 801c168:	b29a      	uxth	r2, r3
 801c16a:	4b80      	ldr	r3, [pc, #512]	; (801c36c <tcp_receive+0xb0c>)
 801c16c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c16e:	4b7f      	ldr	r3, [pc, #508]	; (801c36c <tcp_receive+0xb0c>)
 801c170:	68db      	ldr	r3, [r3, #12]
 801c172:	899b      	ldrh	r3, [r3, #12]
 801c174:	b29b      	uxth	r3, r3
 801c176:	4618      	mov	r0, r3
 801c178:	f7fa fbe6 	bl	8016948 <lwip_htons>
 801c17c:	4603      	mov	r3, r0
 801c17e:	b2db      	uxtb	r3, r3
 801c180:	f003 0302 	and.w	r3, r3, #2
 801c184:	2b00      	cmp	r3, #0
 801c186:	d005      	beq.n	801c194 <tcp_receive+0x934>
                inseg.len -= 1;
 801c188:	4b78      	ldr	r3, [pc, #480]	; (801c36c <tcp_receive+0xb0c>)
 801c18a:	891b      	ldrh	r3, [r3, #8]
 801c18c:	3b01      	subs	r3, #1
 801c18e:	b29a      	uxth	r2, r3
 801c190:	4b76      	ldr	r3, [pc, #472]	; (801c36c <tcp_receive+0xb0c>)
 801c192:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801c194:	4b75      	ldr	r3, [pc, #468]	; (801c36c <tcp_receive+0xb0c>)
 801c196:	685a      	ldr	r2, [r3, #4]
 801c198:	4b74      	ldr	r3, [pc, #464]	; (801c36c <tcp_receive+0xb0c>)
 801c19a:	891b      	ldrh	r3, [r3, #8]
 801c19c:	4619      	mov	r1, r3
 801c19e:	4610      	mov	r0, r2
 801c1a0:	f7fb fe1a 	bl	8017dd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801c1a4:	4b71      	ldr	r3, [pc, #452]	; (801c36c <tcp_receive+0xb0c>)
 801c1a6:	891c      	ldrh	r4, [r3, #8]
 801c1a8:	4b70      	ldr	r3, [pc, #448]	; (801c36c <tcp_receive+0xb0c>)
 801c1aa:	68db      	ldr	r3, [r3, #12]
 801c1ac:	899b      	ldrh	r3, [r3, #12]
 801c1ae:	b29b      	uxth	r3, r3
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	f7fa fbc9 	bl	8016948 <lwip_htons>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	b2db      	uxtb	r3, r3
 801c1ba:	f003 0303 	and.w	r3, r3, #3
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d001      	beq.n	801c1c6 <tcp_receive+0x966>
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	e000      	b.n	801c1c8 <tcp_receive+0x968>
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	4423      	add	r3, r4
 801c1ca:	b29a      	uxth	r2, r3
 801c1cc:	4b65      	ldr	r3, [pc, #404]	; (801c364 <tcp_receive+0xb04>)
 801c1ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c1d0:	4b64      	ldr	r3, [pc, #400]	; (801c364 <tcp_receive+0xb04>)
 801c1d2:	881b      	ldrh	r3, [r3, #0]
 801c1d4:	461a      	mov	r2, r3
 801c1d6:	4b64      	ldr	r3, [pc, #400]	; (801c368 <tcp_receive+0xb08>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	441a      	add	r2, r3
 801c1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1de:	68db      	ldr	r3, [r3, #12]
 801c1e0:	685b      	ldr	r3, [r3, #4]
 801c1e2:	429a      	cmp	r2, r3
 801c1e4:	d006      	beq.n	801c1f4 <tcp_receive+0x994>
 801c1e6:	4b62      	ldr	r3, [pc, #392]	; (801c370 <tcp_receive+0xb10>)
 801c1e8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801c1ec:	4961      	ldr	r1, [pc, #388]	; (801c374 <tcp_receive+0xb14>)
 801c1ee:	4862      	ldr	r0, [pc, #392]	; (801c378 <tcp_receive+0xb18>)
 801c1f0:	f008 fad6 	bl	80247a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c1f8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801c1fa:	4b5a      	ldr	r3, [pc, #360]	; (801c364 <tcp_receive+0xb04>)
 801c1fc:	881b      	ldrh	r3, [r3, #0]
 801c1fe:	461a      	mov	r2, r3
 801c200:	4b59      	ldr	r3, [pc, #356]	; (801c368 <tcp_receive+0xb08>)
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	441a      	add	r2, r3
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c20e:	4b55      	ldr	r3, [pc, #340]	; (801c364 <tcp_receive+0xb04>)
 801c210:	881b      	ldrh	r3, [r3, #0]
 801c212:	429a      	cmp	r2, r3
 801c214:	d206      	bcs.n	801c224 <tcp_receive+0x9c4>
 801c216:	4b56      	ldr	r3, [pc, #344]	; (801c370 <tcp_receive+0xb10>)
 801c218:	f240 6207 	movw	r2, #1543	; 0x607
 801c21c:	4957      	ldr	r1, [pc, #348]	; (801c37c <tcp_receive+0xb1c>)
 801c21e:	4856      	ldr	r0, [pc, #344]	; (801c378 <tcp_receive+0xb18>)
 801c220:	f008 fabe 	bl	80247a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c228:	4b4e      	ldr	r3, [pc, #312]	; (801c364 <tcp_receive+0xb04>)
 801c22a:	881b      	ldrh	r3, [r3, #0]
 801c22c:	1ad3      	subs	r3, r2, r3
 801c22e:	b29a      	uxth	r2, r3
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	f7fc feb9 	bl	8018fac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801c23a:	4b4c      	ldr	r3, [pc, #304]	; (801c36c <tcp_receive+0xb0c>)
 801c23c:	685b      	ldr	r3, [r3, #4]
 801c23e:	891b      	ldrh	r3, [r3, #8]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d006      	beq.n	801c252 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801c244:	4b49      	ldr	r3, [pc, #292]	; (801c36c <tcp_receive+0xb0c>)
 801c246:	685b      	ldr	r3, [r3, #4]
 801c248:	4a4d      	ldr	r2, [pc, #308]	; (801c380 <tcp_receive+0xb20>)
 801c24a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801c24c:	4b47      	ldr	r3, [pc, #284]	; (801c36c <tcp_receive+0xb0c>)
 801c24e:	2200      	movs	r2, #0
 801c250:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c252:	4b46      	ldr	r3, [pc, #280]	; (801c36c <tcp_receive+0xb0c>)
 801c254:	68db      	ldr	r3, [r3, #12]
 801c256:	899b      	ldrh	r3, [r3, #12]
 801c258:	b29b      	uxth	r3, r3
 801c25a:	4618      	mov	r0, r3
 801c25c:	f7fa fb74 	bl	8016948 <lwip_htons>
 801c260:	4603      	mov	r3, r0
 801c262:	b2db      	uxtb	r3, r3
 801c264:	f003 0301 	and.w	r3, r3, #1
 801c268:	2b00      	cmp	r3, #0
 801c26a:	f000 80b8 	beq.w	801c3de <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801c26e:	4b45      	ldr	r3, [pc, #276]	; (801c384 <tcp_receive+0xb24>)
 801c270:	781b      	ldrb	r3, [r3, #0]
 801c272:	f043 0320 	orr.w	r3, r3, #32
 801c276:	b2da      	uxtb	r2, r3
 801c278:	4b42      	ldr	r3, [pc, #264]	; (801c384 <tcp_receive+0xb24>)
 801c27a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801c27c:	e0af      	b.n	801c3de <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c282:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c288:	68db      	ldr	r3, [r3, #12]
 801c28a:	685b      	ldr	r3, [r3, #4]
 801c28c:	4a36      	ldr	r2, [pc, #216]	; (801c368 <tcp_receive+0xb08>)
 801c28e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	891b      	ldrh	r3, [r3, #8]
 801c294:	461c      	mov	r4, r3
 801c296:	68bb      	ldr	r3, [r7, #8]
 801c298:	68db      	ldr	r3, [r3, #12]
 801c29a:	899b      	ldrh	r3, [r3, #12]
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f7fa fb52 	bl	8016948 <lwip_htons>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	b2db      	uxtb	r3, r3
 801c2a8:	f003 0303 	and.w	r3, r3, #3
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d001      	beq.n	801c2b4 <tcp_receive+0xa54>
 801c2b0:	2301      	movs	r3, #1
 801c2b2:	e000      	b.n	801c2b6 <tcp_receive+0xa56>
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	191a      	adds	r2, r3, r4
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2bc:	441a      	add	r2, r3
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c2c6:	461c      	mov	r4, r3
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	891b      	ldrh	r3, [r3, #8]
 801c2cc:	461d      	mov	r5, r3
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	68db      	ldr	r3, [r3, #12]
 801c2d2:	899b      	ldrh	r3, [r3, #12]
 801c2d4:	b29b      	uxth	r3, r3
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	f7fa fb36 	bl	8016948 <lwip_htons>
 801c2dc:	4603      	mov	r3, r0
 801c2de:	b2db      	uxtb	r3, r3
 801c2e0:	f003 0303 	and.w	r3, r3, #3
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d001      	beq.n	801c2ec <tcp_receive+0xa8c>
 801c2e8:	2301      	movs	r3, #1
 801c2ea:	e000      	b.n	801c2ee <tcp_receive+0xa8e>
 801c2ec:	2300      	movs	r3, #0
 801c2ee:	442b      	add	r3, r5
 801c2f0:	429c      	cmp	r4, r3
 801c2f2:	d206      	bcs.n	801c302 <tcp_receive+0xaa2>
 801c2f4:	4b1e      	ldr	r3, [pc, #120]	; (801c370 <tcp_receive+0xb10>)
 801c2f6:	f240 622c 	movw	r2, #1580	; 0x62c
 801c2fa:	4923      	ldr	r1, [pc, #140]	; (801c388 <tcp_receive+0xb28>)
 801c2fc:	481e      	ldr	r0, [pc, #120]	; (801c378 <tcp_receive+0xb18>)
 801c2fe:	f008 fa4f 	bl	80247a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801c302:	68bb      	ldr	r3, [r7, #8]
 801c304:	891b      	ldrh	r3, [r3, #8]
 801c306:	461c      	mov	r4, r3
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	68db      	ldr	r3, [r3, #12]
 801c30c:	899b      	ldrh	r3, [r3, #12]
 801c30e:	b29b      	uxth	r3, r3
 801c310:	4618      	mov	r0, r3
 801c312:	f7fa fb19 	bl	8016948 <lwip_htons>
 801c316:	4603      	mov	r3, r0
 801c318:	b2db      	uxtb	r3, r3
 801c31a:	f003 0303 	and.w	r3, r3, #3
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d001      	beq.n	801c326 <tcp_receive+0xac6>
 801c322:	2301      	movs	r3, #1
 801c324:	e000      	b.n	801c328 <tcp_receive+0xac8>
 801c326:	2300      	movs	r3, #0
 801c328:	1919      	adds	r1, r3, r4
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c32e:	b28b      	uxth	r3, r1
 801c330:	1ad3      	subs	r3, r2, r3
 801c332:	b29a      	uxth	r2, r3
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801c338:	6878      	ldr	r0, [r7, #4]
 801c33a:	f7fc fe37 	bl	8018fac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801c33e:	68bb      	ldr	r3, [r7, #8]
 801c340:	685b      	ldr	r3, [r3, #4]
 801c342:	891b      	ldrh	r3, [r3, #8]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d028      	beq.n	801c39a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801c348:	4b0d      	ldr	r3, [pc, #52]	; (801c380 <tcp_receive+0xb20>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d01d      	beq.n	801c38c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801c350:	4b0b      	ldr	r3, [pc, #44]	; (801c380 <tcp_receive+0xb20>)
 801c352:	681a      	ldr	r2, [r3, #0]
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	685b      	ldr	r3, [r3, #4]
 801c358:	4619      	mov	r1, r3
 801c35a:	4610      	mov	r0, r2
 801c35c:	f7fb ff90 	bl	8018280 <pbuf_cat>
 801c360:	e018      	b.n	801c394 <tcp_receive+0xb34>
 801c362:	bf00      	nop
 801c364:	20008fee 	.word	0x20008fee
 801c368:	20008fe4 	.word	0x20008fe4
 801c36c:	20008fc4 	.word	0x20008fc4
 801c370:	080272e4 	.word	0x080272e4
 801c374:	080276c4 	.word	0x080276c4
 801c378:	08027330 	.word	0x08027330
 801c37c:	08027700 	.word	0x08027700
 801c380:	20008ff4 	.word	0x20008ff4
 801c384:	20008ff1 	.word	0x20008ff1
 801c388:	08027720 	.word	0x08027720
            } else {
              recv_data = cseg->p;
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	685b      	ldr	r3, [r3, #4]
 801c390:	4a70      	ldr	r2, [pc, #448]	; (801c554 <tcp_receive+0xcf4>)
 801c392:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801c394:	68bb      	ldr	r3, [r7, #8]
 801c396:	2200      	movs	r2, #0
 801c398:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c39a:	68bb      	ldr	r3, [r7, #8]
 801c39c:	68db      	ldr	r3, [r3, #12]
 801c39e:	899b      	ldrh	r3, [r3, #12]
 801c3a0:	b29b      	uxth	r3, r3
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	f7fa fad0 	bl	8016948 <lwip_htons>
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	b2db      	uxtb	r3, r3
 801c3ac:	f003 0301 	and.w	r3, r3, #1
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d00d      	beq.n	801c3d0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801c3b4:	4b68      	ldr	r3, [pc, #416]	; (801c558 <tcp_receive+0xcf8>)
 801c3b6:	781b      	ldrb	r3, [r3, #0]
 801c3b8:	f043 0320 	orr.w	r3, r3, #32
 801c3bc:	b2da      	uxtb	r2, r3
 801c3be:	4b66      	ldr	r3, [pc, #408]	; (801c558 <tcp_receive+0xcf8>)
 801c3c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	7d1b      	ldrb	r3, [r3, #20]
 801c3c6:	2b04      	cmp	r3, #4
 801c3c8:	d102      	bne.n	801c3d0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	2207      	movs	r2, #7
 801c3ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801c3d0:	68bb      	ldr	r3, [r7, #8]
 801c3d2:	681a      	ldr	r2, [r3, #0]
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801c3d8:	68b8      	ldr	r0, [r7, #8]
 801c3da:	f7fd fb09 	bl	80199f0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d008      	beq.n	801c3f8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c3ea:	68db      	ldr	r3, [r3, #12]
 801c3ec:	685a      	ldr	r2, [r3, #4]
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	f43f af43 	beq.w	801c27e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	8b5b      	ldrh	r3, [r3, #26]
 801c3fc:	f003 0301 	and.w	r3, r3, #1
 801c400:	2b00      	cmp	r3, #0
 801c402:	d00e      	beq.n	801c422 <tcp_receive+0xbc2>
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	8b5b      	ldrh	r3, [r3, #26]
 801c408:	f023 0301 	bic.w	r3, r3, #1
 801c40c:	b29a      	uxth	r2, r3
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	835a      	strh	r2, [r3, #26]
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	8b5b      	ldrh	r3, [r3, #26]
 801c416:	f043 0302 	orr.w	r3, r3, #2
 801c41a:	b29a      	uxth	r2, r3
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c420:	e188      	b.n	801c734 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	8b5b      	ldrh	r3, [r3, #26]
 801c426:	f043 0301 	orr.w	r3, r3, #1
 801c42a:	b29a      	uxth	r2, r3
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c430:	e180      	b.n	801c734 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c436:	2b00      	cmp	r3, #0
 801c438:	d106      	bne.n	801c448 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801c43a:	4848      	ldr	r0, [pc, #288]	; (801c55c <tcp_receive+0xcfc>)
 801c43c:	f7fd faf0 	bl	8019a20 <tcp_seg_copy>
 801c440:	4602      	mov	r2, r0
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	675a      	str	r2, [r3, #116]	; 0x74
 801c446:	e16d      	b.n	801c724 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801c448:	2300      	movs	r3, #0
 801c44a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c450:	63bb      	str	r3, [r7, #56]	; 0x38
 801c452:	e157      	b.n	801c704 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c456:	68db      	ldr	r3, [r3, #12]
 801c458:	685a      	ldr	r2, [r3, #4]
 801c45a:	4b41      	ldr	r3, [pc, #260]	; (801c560 <tcp_receive+0xd00>)
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	429a      	cmp	r2, r3
 801c460:	d11d      	bne.n	801c49e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801c462:	4b3e      	ldr	r3, [pc, #248]	; (801c55c <tcp_receive+0xcfc>)
 801c464:	891a      	ldrh	r2, [r3, #8]
 801c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c468:	891b      	ldrh	r3, [r3, #8]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	f240 814f 	bls.w	801c70e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c470:	483a      	ldr	r0, [pc, #232]	; (801c55c <tcp_receive+0xcfc>)
 801c472:	f7fd fad5 	bl	8019a20 <tcp_seg_copy>
 801c476:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801c478:	697b      	ldr	r3, [r7, #20]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	f000 8149 	beq.w	801c712 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801c480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c482:	2b00      	cmp	r3, #0
 801c484:	d003      	beq.n	801c48e <tcp_receive+0xc2e>
                    prev->next = cseg;
 801c486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c488:	697a      	ldr	r2, [r7, #20]
 801c48a:	601a      	str	r2, [r3, #0]
 801c48c:	e002      	b.n	801c494 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	697a      	ldr	r2, [r7, #20]
 801c492:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801c494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c496:	6978      	ldr	r0, [r7, #20]
 801c498:	f7ff f8de 	bl	801b658 <tcp_oos_insert_segment>
                }
                break;
 801c49c:	e139      	b.n	801c712 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d117      	bne.n	801c4d4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c4a4:	4b2e      	ldr	r3, [pc, #184]	; (801c560 <tcp_receive+0xd00>)
 801c4a6:	681a      	ldr	r2, [r3, #0]
 801c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4aa:	68db      	ldr	r3, [r3, #12]
 801c4ac:	685b      	ldr	r3, [r3, #4]
 801c4ae:	1ad3      	subs	r3, r2, r3
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	da57      	bge.n	801c564 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c4b4:	4829      	ldr	r0, [pc, #164]	; (801c55c <tcp_receive+0xcfc>)
 801c4b6:	f7fd fab3 	bl	8019a20 <tcp_seg_copy>
 801c4ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801c4bc:	69bb      	ldr	r3, [r7, #24]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	f000 8129 	beq.w	801c716 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	69ba      	ldr	r2, [r7, #24]
 801c4c8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c4ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c4cc:	69b8      	ldr	r0, [r7, #24]
 801c4ce:	f7ff f8c3 	bl	801b658 <tcp_oos_insert_segment>
                  }
                  break;
 801c4d2:	e120      	b.n	801c716 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c4d4:	4b22      	ldr	r3, [pc, #136]	; (801c560 <tcp_receive+0xd00>)
 801c4d6:	681a      	ldr	r2, [r3, #0]
 801c4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4da:	68db      	ldr	r3, [r3, #12]
 801c4dc:	685b      	ldr	r3, [r3, #4]
 801c4de:	1ad3      	subs	r3, r2, r3
 801c4e0:	3b01      	subs	r3, #1
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	db3e      	blt.n	801c564 <tcp_receive+0xd04>
 801c4e6:	4b1e      	ldr	r3, [pc, #120]	; (801c560 <tcp_receive+0xd00>)
 801c4e8:	681a      	ldr	r2, [r3, #0]
 801c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4ec:	68db      	ldr	r3, [r3, #12]
 801c4ee:	685b      	ldr	r3, [r3, #4]
 801c4f0:	1ad3      	subs	r3, r2, r3
 801c4f2:	3301      	adds	r3, #1
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	dc35      	bgt.n	801c564 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c4f8:	4818      	ldr	r0, [pc, #96]	; (801c55c <tcp_receive+0xcfc>)
 801c4fa:	f7fd fa91 	bl	8019a20 <tcp_seg_copy>
 801c4fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801c500:	69fb      	ldr	r3, [r7, #28]
 801c502:	2b00      	cmp	r3, #0
 801c504:	f000 8109 	beq.w	801c71a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c50a:	68db      	ldr	r3, [r3, #12]
 801c50c:	685b      	ldr	r3, [r3, #4]
 801c50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c510:	8912      	ldrh	r2, [r2, #8]
 801c512:	441a      	add	r2, r3
 801c514:	4b12      	ldr	r3, [pc, #72]	; (801c560 <tcp_receive+0xd00>)
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	1ad3      	subs	r3, r2, r3
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	dd12      	ble.n	801c544 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c51e:	4b10      	ldr	r3, [pc, #64]	; (801c560 <tcp_receive+0xd00>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	b29a      	uxth	r2, r3
 801c524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c526:	68db      	ldr	r3, [r3, #12]
 801c528:	685b      	ldr	r3, [r3, #4]
 801c52a:	b29b      	uxth	r3, r3
 801c52c:	1ad3      	subs	r3, r2, r3
 801c52e:	b29a      	uxth	r2, r3
 801c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c532:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c536:	685a      	ldr	r2, [r3, #4]
 801c538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c53a:	891b      	ldrh	r3, [r3, #8]
 801c53c:	4619      	mov	r1, r3
 801c53e:	4610      	mov	r0, r2
 801c540:	f7fb fc4a 	bl	8017dd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801c544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c546:	69fa      	ldr	r2, [r7, #28]
 801c548:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801c54a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c54c:	69f8      	ldr	r0, [r7, #28]
 801c54e:	f7ff f883 	bl	801b658 <tcp_oos_insert_segment>
                  }
                  break;
 801c552:	e0e2      	b.n	801c71a <tcp_receive+0xeba>
 801c554:	20008ff4 	.word	0x20008ff4
 801c558:	20008ff1 	.word	0x20008ff1
 801c55c:	20008fc4 	.word	0x20008fc4
 801c560:	20008fe4 	.word	0x20008fe4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c566:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	f040 80c6 	bne.w	801c6fe <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c572:	4b80      	ldr	r3, [pc, #512]	; (801c774 <tcp_receive+0xf14>)
 801c574:	681a      	ldr	r2, [r3, #0]
 801c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c578:	68db      	ldr	r3, [r3, #12]
 801c57a:	685b      	ldr	r3, [r3, #4]
 801c57c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801c57e:	2b00      	cmp	r3, #0
 801c580:	f340 80bd 	ble.w	801c6fe <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c586:	68db      	ldr	r3, [r3, #12]
 801c588:	899b      	ldrh	r3, [r3, #12]
 801c58a:	b29b      	uxth	r3, r3
 801c58c:	4618      	mov	r0, r3
 801c58e:	f7fa f9db 	bl	8016948 <lwip_htons>
 801c592:	4603      	mov	r3, r0
 801c594:	b2db      	uxtb	r3, r3
 801c596:	f003 0301 	and.w	r3, r3, #1
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	f040 80bf 	bne.w	801c71e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801c5a0:	4875      	ldr	r0, [pc, #468]	; (801c778 <tcp_receive+0xf18>)
 801c5a2:	f7fd fa3d 	bl	8019a20 <tcp_seg_copy>
 801c5a6:	4602      	mov	r2, r0
 801c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	f000 80b6 	beq.w	801c722 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5b8:	68db      	ldr	r3, [r3, #12]
 801c5ba:	685b      	ldr	r3, [r3, #4]
 801c5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c5be:	8912      	ldrh	r2, [r2, #8]
 801c5c0:	441a      	add	r2, r3
 801c5c2:	4b6c      	ldr	r3, [pc, #432]	; (801c774 <tcp_receive+0xf14>)
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	1ad3      	subs	r3, r2, r3
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	dd12      	ble.n	801c5f2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c5cc:	4b69      	ldr	r3, [pc, #420]	; (801c774 <tcp_receive+0xf14>)
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	b29a      	uxth	r2, r3
 801c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5d4:	68db      	ldr	r3, [r3, #12]
 801c5d6:	685b      	ldr	r3, [r3, #4]
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	1ad3      	subs	r3, r2, r3
 801c5dc:	b29a      	uxth	r2, r3
 801c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5e4:	685a      	ldr	r2, [r3, #4]
 801c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5e8:	891b      	ldrh	r3, [r3, #8]
 801c5ea:	4619      	mov	r1, r3
 801c5ec:	4610      	mov	r0, r2
 801c5ee:	f7fb fbf3 	bl	8017dd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c5f2:	4b62      	ldr	r3, [pc, #392]	; (801c77c <tcp_receive+0xf1c>)
 801c5f4:	881b      	ldrh	r3, [r3, #0]
 801c5f6:	461a      	mov	r2, r3
 801c5f8:	4b5e      	ldr	r3, [pc, #376]	; (801c774 <tcp_receive+0xf14>)
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	441a      	add	r2, r3
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c602:	6879      	ldr	r1, [r7, #4]
 801c604:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c606:	440b      	add	r3, r1
 801c608:	1ad3      	subs	r3, r2, r3
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	f340 8089 	ble.w	801c722 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	68db      	ldr	r3, [r3, #12]
 801c616:	899b      	ldrh	r3, [r3, #12]
 801c618:	b29b      	uxth	r3, r3
 801c61a:	4618      	mov	r0, r3
 801c61c:	f7fa f994 	bl	8016948 <lwip_htons>
 801c620:	4603      	mov	r3, r0
 801c622:	b2db      	uxtb	r3, r3
 801c624:	f003 0301 	and.w	r3, r3, #1
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d022      	beq.n	801c672 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	68db      	ldr	r3, [r3, #12]
 801c632:	899b      	ldrh	r3, [r3, #12]
 801c634:	b29b      	uxth	r3, r3
 801c636:	b21b      	sxth	r3, r3
 801c638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c63c:	b21c      	sxth	r4, r3
 801c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	68db      	ldr	r3, [r3, #12]
 801c644:	899b      	ldrh	r3, [r3, #12]
 801c646:	b29b      	uxth	r3, r3
 801c648:	4618      	mov	r0, r3
 801c64a:	f7fa f97d 	bl	8016948 <lwip_htons>
 801c64e:	4603      	mov	r3, r0
 801c650:	b2db      	uxtb	r3, r3
 801c652:	b29b      	uxth	r3, r3
 801c654:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c658:	b29b      	uxth	r3, r3
 801c65a:	4618      	mov	r0, r3
 801c65c:	f7fa f974 	bl	8016948 <lwip_htons>
 801c660:	4603      	mov	r3, r0
 801c662:	b21b      	sxth	r3, r3
 801c664:	4323      	orrs	r3, r4
 801c666:	b21a      	sxth	r2, r3
 801c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	68db      	ldr	r3, [r3, #12]
 801c66e:	b292      	uxth	r2, r2
 801c670:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c676:	b29a      	uxth	r2, r3
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c67c:	4413      	add	r3, r2
 801c67e:	b299      	uxth	r1, r3
 801c680:	4b3c      	ldr	r3, [pc, #240]	; (801c774 <tcp_receive+0xf14>)
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	b29a      	uxth	r2, r3
 801c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	1a8a      	subs	r2, r1, r2
 801c68c:	b292      	uxth	r2, r2
 801c68e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	685a      	ldr	r2, [r3, #4]
 801c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	891b      	ldrh	r3, [r3, #8]
 801c69c:	4619      	mov	r1, r3
 801c69e:	4610      	mov	r0, r2
 801c6a0:	f7fb fb9a 	bl	8017dd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	891c      	ldrh	r4, [r3, #8]
 801c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	68db      	ldr	r3, [r3, #12]
 801c6b0:	899b      	ldrh	r3, [r3, #12]
 801c6b2:	b29b      	uxth	r3, r3
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	f7fa f947 	bl	8016948 <lwip_htons>
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	b2db      	uxtb	r3, r3
 801c6be:	f003 0303 	and.w	r3, r3, #3
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d001      	beq.n	801c6ca <tcp_receive+0xe6a>
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	e000      	b.n	801c6cc <tcp_receive+0xe6c>
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	4423      	add	r3, r4
 801c6ce:	b29a      	uxth	r2, r3
 801c6d0:	4b2a      	ldr	r3, [pc, #168]	; (801c77c <tcp_receive+0xf1c>)
 801c6d2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c6d4:	4b29      	ldr	r3, [pc, #164]	; (801c77c <tcp_receive+0xf1c>)
 801c6d6:	881b      	ldrh	r3, [r3, #0]
 801c6d8:	461a      	mov	r2, r3
 801c6da:	4b26      	ldr	r3, [pc, #152]	; (801c774 <tcp_receive+0xf14>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	441a      	add	r2, r3
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6e4:	6879      	ldr	r1, [r7, #4]
 801c6e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c6e8:	440b      	add	r3, r1
 801c6ea:	429a      	cmp	r2, r3
 801c6ec:	d019      	beq.n	801c722 <tcp_receive+0xec2>
 801c6ee:	4b24      	ldr	r3, [pc, #144]	; (801c780 <tcp_receive+0xf20>)
 801c6f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801c6f4:	4923      	ldr	r1, [pc, #140]	; (801c784 <tcp_receive+0xf24>)
 801c6f6:	4824      	ldr	r0, [pc, #144]	; (801c788 <tcp_receive+0xf28>)
 801c6f8:	f008 f852 	bl	80247a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801c6fc:	e011      	b.n	801c722 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	63bb      	str	r3, [r7, #56]	; 0x38
 801c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c706:	2b00      	cmp	r3, #0
 801c708:	f47f aea4 	bne.w	801c454 <tcp_receive+0xbf4>
 801c70c:	e00a      	b.n	801c724 <tcp_receive+0xec4>
                break;
 801c70e:	bf00      	nop
 801c710:	e008      	b.n	801c724 <tcp_receive+0xec4>
                break;
 801c712:	bf00      	nop
 801c714:	e006      	b.n	801c724 <tcp_receive+0xec4>
                  break;
 801c716:	bf00      	nop
 801c718:	e004      	b.n	801c724 <tcp_receive+0xec4>
                  break;
 801c71a:	bf00      	nop
 801c71c:	e002      	b.n	801c724 <tcp_receive+0xec4>
                  break;
 801c71e:	bf00      	nop
 801c720:	e000      	b.n	801c724 <tcp_receive+0xec4>
                break;
 801c722:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801c724:	6878      	ldr	r0, [r7, #4]
 801c726:	f001 fe9d 	bl	801e464 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801c72a:	e003      	b.n	801c734 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801c72c:	6878      	ldr	r0, [r7, #4]
 801c72e:	f001 fe99 	bl	801e464 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c732:	e01a      	b.n	801c76a <tcp_receive+0xf0a>
 801c734:	e019      	b.n	801c76a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c736:	4b0f      	ldr	r3, [pc, #60]	; (801c774 <tcp_receive+0xf14>)
 801c738:	681a      	ldr	r2, [r3, #0]
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c73e:	1ad3      	subs	r3, r2, r3
 801c740:	2b00      	cmp	r3, #0
 801c742:	db0a      	blt.n	801c75a <tcp_receive+0xefa>
 801c744:	4b0b      	ldr	r3, [pc, #44]	; (801c774 <tcp_receive+0xf14>)
 801c746:	681a      	ldr	r2, [r3, #0]
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c74c:	6879      	ldr	r1, [r7, #4]
 801c74e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c750:	440b      	add	r3, r1
 801c752:	1ad3      	subs	r3, r2, r3
 801c754:	3301      	adds	r3, #1
 801c756:	2b00      	cmp	r3, #0
 801c758:	dd07      	ble.n	801c76a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	8b5b      	ldrh	r3, [r3, #26]
 801c75e:	f043 0302 	orr.w	r3, r3, #2
 801c762:	b29a      	uxth	r2, r3
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801c768:	e7ff      	b.n	801c76a <tcp_receive+0xf0a>
 801c76a:	bf00      	nop
 801c76c:	3750      	adds	r7, #80	; 0x50
 801c76e:	46bd      	mov	sp, r7
 801c770:	bdb0      	pop	{r4, r5, r7, pc}
 801c772:	bf00      	nop
 801c774:	20008fe4 	.word	0x20008fe4
 801c778:	20008fc4 	.word	0x20008fc4
 801c77c:	20008fee 	.word	0x20008fee
 801c780:	080272e4 	.word	0x080272e4
 801c784:	0802768c 	.word	0x0802768c
 801c788:	08027330 	.word	0x08027330

0801c78c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801c78c:	b480      	push	{r7}
 801c78e:	b083      	sub	sp, #12
 801c790:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801c792:	4b15      	ldr	r3, [pc, #84]	; (801c7e8 <tcp_get_next_optbyte+0x5c>)
 801c794:	881b      	ldrh	r3, [r3, #0]
 801c796:	1c5a      	adds	r2, r3, #1
 801c798:	b291      	uxth	r1, r2
 801c79a:	4a13      	ldr	r2, [pc, #76]	; (801c7e8 <tcp_get_next_optbyte+0x5c>)
 801c79c:	8011      	strh	r1, [r2, #0]
 801c79e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c7a0:	4b12      	ldr	r3, [pc, #72]	; (801c7ec <tcp_get_next_optbyte+0x60>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d004      	beq.n	801c7b2 <tcp_get_next_optbyte+0x26>
 801c7a8:	4b11      	ldr	r3, [pc, #68]	; (801c7f0 <tcp_get_next_optbyte+0x64>)
 801c7aa:	881b      	ldrh	r3, [r3, #0]
 801c7ac:	88fa      	ldrh	r2, [r7, #6]
 801c7ae:	429a      	cmp	r2, r3
 801c7b0:	d208      	bcs.n	801c7c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c7b2:	4b10      	ldr	r3, [pc, #64]	; (801c7f4 <tcp_get_next_optbyte+0x68>)
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	3314      	adds	r3, #20
 801c7b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801c7ba:	88fb      	ldrh	r3, [r7, #6]
 801c7bc:	683a      	ldr	r2, [r7, #0]
 801c7be:	4413      	add	r3, r2
 801c7c0:	781b      	ldrb	r3, [r3, #0]
 801c7c2:	e00b      	b.n	801c7dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c7c4:	88fb      	ldrh	r3, [r7, #6]
 801c7c6:	b2da      	uxtb	r2, r3
 801c7c8:	4b09      	ldr	r3, [pc, #36]	; (801c7f0 <tcp_get_next_optbyte+0x64>)
 801c7ca:	881b      	ldrh	r3, [r3, #0]
 801c7cc:	b2db      	uxtb	r3, r3
 801c7ce:	1ad3      	subs	r3, r2, r3
 801c7d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801c7d2:	4b06      	ldr	r3, [pc, #24]	; (801c7ec <tcp_get_next_optbyte+0x60>)
 801c7d4:	681a      	ldr	r2, [r3, #0]
 801c7d6:	797b      	ldrb	r3, [r7, #5]
 801c7d8:	4413      	add	r3, r2
 801c7da:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c7dc:	4618      	mov	r0, r3
 801c7de:	370c      	adds	r7, #12
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7e6:	4770      	bx	lr
 801c7e8:	20008fe0 	.word	0x20008fe0
 801c7ec:	20008fdc 	.word	0x20008fdc
 801c7f0:	20008fda 	.word	0x20008fda
 801c7f4:	20008fd4 	.word	0x20008fd4

0801c7f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b084      	sub	sp, #16
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d106      	bne.n	801c814 <tcp_parseopt+0x1c>
 801c806:	4b31      	ldr	r3, [pc, #196]	; (801c8cc <tcp_parseopt+0xd4>)
 801c808:	f240 727d 	movw	r2, #1917	; 0x77d
 801c80c:	4930      	ldr	r1, [pc, #192]	; (801c8d0 <tcp_parseopt+0xd8>)
 801c80e:	4831      	ldr	r0, [pc, #196]	; (801c8d4 <tcp_parseopt+0xdc>)
 801c810:	f007 ffc6 	bl	80247a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801c814:	4b30      	ldr	r3, [pc, #192]	; (801c8d8 <tcp_parseopt+0xe0>)
 801c816:	881b      	ldrh	r3, [r3, #0]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d053      	beq.n	801c8c4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c81c:	4b2f      	ldr	r3, [pc, #188]	; (801c8dc <tcp_parseopt+0xe4>)
 801c81e:	2200      	movs	r2, #0
 801c820:	801a      	strh	r2, [r3, #0]
 801c822:	e043      	b.n	801c8ac <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801c824:	f7ff ffb2 	bl	801c78c <tcp_get_next_optbyte>
 801c828:	4603      	mov	r3, r0
 801c82a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801c82c:	7bfb      	ldrb	r3, [r7, #15]
 801c82e:	2b01      	cmp	r3, #1
 801c830:	d03c      	beq.n	801c8ac <tcp_parseopt+0xb4>
 801c832:	2b02      	cmp	r3, #2
 801c834:	d002      	beq.n	801c83c <tcp_parseopt+0x44>
 801c836:	2b00      	cmp	r3, #0
 801c838:	d03f      	beq.n	801c8ba <tcp_parseopt+0xc2>
 801c83a:	e026      	b.n	801c88a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c83c:	f7ff ffa6 	bl	801c78c <tcp_get_next_optbyte>
 801c840:	4603      	mov	r3, r0
 801c842:	2b04      	cmp	r3, #4
 801c844:	d13b      	bne.n	801c8be <tcp_parseopt+0xc6>
 801c846:	4b25      	ldr	r3, [pc, #148]	; (801c8dc <tcp_parseopt+0xe4>)
 801c848:	881b      	ldrh	r3, [r3, #0]
 801c84a:	3302      	adds	r3, #2
 801c84c:	4a22      	ldr	r2, [pc, #136]	; (801c8d8 <tcp_parseopt+0xe0>)
 801c84e:	8812      	ldrh	r2, [r2, #0]
 801c850:	4293      	cmp	r3, r2
 801c852:	dc34      	bgt.n	801c8be <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c854:	f7ff ff9a 	bl	801c78c <tcp_get_next_optbyte>
 801c858:	4603      	mov	r3, r0
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	021b      	lsls	r3, r3, #8
 801c85e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801c860:	f7ff ff94 	bl	801c78c <tcp_get_next_optbyte>
 801c864:	4603      	mov	r3, r0
 801c866:	b29a      	uxth	r2, r3
 801c868:	89bb      	ldrh	r3, [r7, #12]
 801c86a:	4313      	orrs	r3, r2
 801c86c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c86e:	89bb      	ldrh	r3, [r7, #12]
 801c870:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801c874:	d804      	bhi.n	801c880 <tcp_parseopt+0x88>
 801c876:	89bb      	ldrh	r3, [r7, #12]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d001      	beq.n	801c880 <tcp_parseopt+0x88>
 801c87c:	89ba      	ldrh	r2, [r7, #12]
 801c87e:	e001      	b.n	801c884 <tcp_parseopt+0x8c>
 801c880:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801c888:	e010      	b.n	801c8ac <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801c88a:	f7ff ff7f 	bl	801c78c <tcp_get_next_optbyte>
 801c88e:	4603      	mov	r3, r0
 801c890:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801c892:	7afb      	ldrb	r3, [r7, #11]
 801c894:	2b01      	cmp	r3, #1
 801c896:	d914      	bls.n	801c8c2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c898:	7afb      	ldrb	r3, [r7, #11]
 801c89a:	b29a      	uxth	r2, r3
 801c89c:	4b0f      	ldr	r3, [pc, #60]	; (801c8dc <tcp_parseopt+0xe4>)
 801c89e:	881b      	ldrh	r3, [r3, #0]
 801c8a0:	4413      	add	r3, r2
 801c8a2:	b29b      	uxth	r3, r3
 801c8a4:	3b02      	subs	r3, #2
 801c8a6:	b29a      	uxth	r2, r3
 801c8a8:	4b0c      	ldr	r3, [pc, #48]	; (801c8dc <tcp_parseopt+0xe4>)
 801c8aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c8ac:	4b0b      	ldr	r3, [pc, #44]	; (801c8dc <tcp_parseopt+0xe4>)
 801c8ae:	881a      	ldrh	r2, [r3, #0]
 801c8b0:	4b09      	ldr	r3, [pc, #36]	; (801c8d8 <tcp_parseopt+0xe0>)
 801c8b2:	881b      	ldrh	r3, [r3, #0]
 801c8b4:	429a      	cmp	r2, r3
 801c8b6:	d3b5      	bcc.n	801c824 <tcp_parseopt+0x2c>
 801c8b8:	e004      	b.n	801c8c4 <tcp_parseopt+0xcc>
          return;
 801c8ba:	bf00      	nop
 801c8bc:	e002      	b.n	801c8c4 <tcp_parseopt+0xcc>
            return;
 801c8be:	bf00      	nop
 801c8c0:	e000      	b.n	801c8c4 <tcp_parseopt+0xcc>
            return;
 801c8c2:	bf00      	nop
      }
    }
  }
}
 801c8c4:	3710      	adds	r7, #16
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	bd80      	pop	{r7, pc}
 801c8ca:	bf00      	nop
 801c8cc:	080272e4 	.word	0x080272e4
 801c8d0:	08027748 	.word	0x08027748
 801c8d4:	08027330 	.word	0x08027330
 801c8d8:	20008fd8 	.word	0x20008fd8
 801c8dc:	20008fe0 	.word	0x20008fe0

0801c8e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801c8e0:	b480      	push	{r7}
 801c8e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801c8e4:	4b05      	ldr	r3, [pc, #20]	; (801c8fc <tcp_trigger_input_pcb_close+0x1c>)
 801c8e6:	781b      	ldrb	r3, [r3, #0]
 801c8e8:	f043 0310 	orr.w	r3, r3, #16
 801c8ec:	b2da      	uxtb	r2, r3
 801c8ee:	4b03      	ldr	r3, [pc, #12]	; (801c8fc <tcp_trigger_input_pcb_close+0x1c>)
 801c8f0:	701a      	strb	r2, [r3, #0]
}
 801c8f2:	bf00      	nop
 801c8f4:	46bd      	mov	sp, r7
 801c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8fa:	4770      	bx	lr
 801c8fc:	20008ff1 	.word	0x20008ff1

0801c900 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801c900:	b580      	push	{r7, lr}
 801c902:	b084      	sub	sp, #16
 801c904:	af00      	add	r7, sp, #0
 801c906:	60f8      	str	r0, [r7, #12]
 801c908:	60b9      	str	r1, [r7, #8]
 801c90a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d00a      	beq.n	801c928 <tcp_route+0x28>
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	7a1b      	ldrb	r3, [r3, #8]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d006      	beq.n	801c928 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	7a1b      	ldrb	r3, [r3, #8]
 801c91e:	4618      	mov	r0, r3
 801c920:	f7fb f856 	bl	80179d0 <netif_get_by_index>
 801c924:	4603      	mov	r3, r0
 801c926:	e003      	b.n	801c930 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801c928:	6878      	ldr	r0, [r7, #4]
 801c92a:	f005 fccd 	bl	80222c8 <ip4_route>
 801c92e:	4603      	mov	r3, r0
  }
}
 801c930:	4618      	mov	r0, r3
 801c932:	3710      	adds	r7, #16
 801c934:	46bd      	mov	sp, r7
 801c936:	bd80      	pop	{r7, pc}

0801c938 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801c938:	b590      	push	{r4, r7, lr}
 801c93a:	b087      	sub	sp, #28
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	60f8      	str	r0, [r7, #12]
 801c940:	60b9      	str	r1, [r7, #8]
 801c942:	603b      	str	r3, [r7, #0]
 801c944:	4613      	mov	r3, r2
 801c946:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d105      	bne.n	801c95a <tcp_create_segment+0x22>
 801c94e:	4b44      	ldr	r3, [pc, #272]	; (801ca60 <tcp_create_segment+0x128>)
 801c950:	22a3      	movs	r2, #163	; 0xa3
 801c952:	4944      	ldr	r1, [pc, #272]	; (801ca64 <tcp_create_segment+0x12c>)
 801c954:	4844      	ldr	r0, [pc, #272]	; (801ca68 <tcp_create_segment+0x130>)
 801c956:	f007 ff23 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801c95a:	68bb      	ldr	r3, [r7, #8]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d105      	bne.n	801c96c <tcp_create_segment+0x34>
 801c960:	4b3f      	ldr	r3, [pc, #252]	; (801ca60 <tcp_create_segment+0x128>)
 801c962:	22a4      	movs	r2, #164	; 0xa4
 801c964:	4941      	ldr	r1, [pc, #260]	; (801ca6c <tcp_create_segment+0x134>)
 801c966:	4840      	ldr	r0, [pc, #256]	; (801ca68 <tcp_create_segment+0x130>)
 801c968:	f007 ff1a 	bl	80247a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c96c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c970:	009b      	lsls	r3, r3, #2
 801c972:	b2db      	uxtb	r3, r3
 801c974:	f003 0304 	and.w	r3, r3, #4
 801c978:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c97a:	2003      	movs	r0, #3
 801c97c:	f7fa fc9a 	bl	80172b4 <memp_malloc>
 801c980:	6138      	str	r0, [r7, #16]
 801c982:	693b      	ldr	r3, [r7, #16]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d104      	bne.n	801c992 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801c988:	68b8      	ldr	r0, [r7, #8]
 801c98a:	f7fb fbab 	bl	80180e4 <pbuf_free>
    return NULL;
 801c98e:	2300      	movs	r3, #0
 801c990:	e061      	b.n	801ca56 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801c992:	693b      	ldr	r3, [r7, #16]
 801c994:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c998:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801c99a:	693b      	ldr	r3, [r7, #16]
 801c99c:	2200      	movs	r2, #0
 801c99e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801c9a0:	693b      	ldr	r3, [r7, #16]
 801c9a2:	68ba      	ldr	r2, [r7, #8]
 801c9a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c9a6:	68bb      	ldr	r3, [r7, #8]
 801c9a8:	891a      	ldrh	r2, [r3, #8]
 801c9aa:	7dfb      	ldrb	r3, [r7, #23]
 801c9ac:	b29b      	uxth	r3, r3
 801c9ae:	429a      	cmp	r2, r3
 801c9b0:	d205      	bcs.n	801c9be <tcp_create_segment+0x86>
 801c9b2:	4b2b      	ldr	r3, [pc, #172]	; (801ca60 <tcp_create_segment+0x128>)
 801c9b4:	22b0      	movs	r2, #176	; 0xb0
 801c9b6:	492e      	ldr	r1, [pc, #184]	; (801ca70 <tcp_create_segment+0x138>)
 801c9b8:	482b      	ldr	r0, [pc, #172]	; (801ca68 <tcp_create_segment+0x130>)
 801c9ba:	f007 fef1 	bl	80247a0 <iprintf>
  seg->len = p->tot_len - optlen;
 801c9be:	68bb      	ldr	r3, [r7, #8]
 801c9c0:	891a      	ldrh	r2, [r3, #8]
 801c9c2:	7dfb      	ldrb	r3, [r7, #23]
 801c9c4:	b29b      	uxth	r3, r3
 801c9c6:	1ad3      	subs	r3, r2, r3
 801c9c8:	b29a      	uxth	r2, r3
 801c9ca:	693b      	ldr	r3, [r7, #16]
 801c9cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801c9ce:	2114      	movs	r1, #20
 801c9d0:	68b8      	ldr	r0, [r7, #8]
 801c9d2:	f7fb faf1 	bl	8017fb8 <pbuf_add_header>
 801c9d6:	4603      	mov	r3, r0
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d004      	beq.n	801c9e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801c9dc:	6938      	ldr	r0, [r7, #16]
 801c9de:	f7fd f807 	bl	80199f0 <tcp_seg_free>
    return NULL;
 801c9e2:	2300      	movs	r3, #0
 801c9e4:	e037      	b.n	801ca56 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c9e6:	693b      	ldr	r3, [r7, #16]
 801c9e8:	685b      	ldr	r3, [r3, #4]
 801c9ea:	685a      	ldr	r2, [r3, #4]
 801c9ec:	693b      	ldr	r3, [r7, #16]
 801c9ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	8ada      	ldrh	r2, [r3, #22]
 801c9f4:	693b      	ldr	r3, [r7, #16]
 801c9f6:	68dc      	ldr	r4, [r3, #12]
 801c9f8:	4610      	mov	r0, r2
 801c9fa:	f7f9 ffa5 	bl	8016948 <lwip_htons>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	8b1a      	ldrh	r2, [r3, #24]
 801ca06:	693b      	ldr	r3, [r7, #16]
 801ca08:	68dc      	ldr	r4, [r3, #12]
 801ca0a:	4610      	mov	r0, r2
 801ca0c:	f7f9 ff9c 	bl	8016948 <lwip_htons>
 801ca10:	4603      	mov	r3, r0
 801ca12:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ca14:	693b      	ldr	r3, [r7, #16]
 801ca16:	68dc      	ldr	r4, [r3, #12]
 801ca18:	6838      	ldr	r0, [r7, #0]
 801ca1a:	f7f9 ffaa 	bl	8016972 <lwip_htonl>
 801ca1e:	4603      	mov	r3, r0
 801ca20:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ca22:	7dfb      	ldrb	r3, [r7, #23]
 801ca24:	089b      	lsrs	r3, r3, #2
 801ca26:	b2db      	uxtb	r3, r3
 801ca28:	b29b      	uxth	r3, r3
 801ca2a:	3305      	adds	r3, #5
 801ca2c:	b29b      	uxth	r3, r3
 801ca2e:	031b      	lsls	r3, r3, #12
 801ca30:	b29a      	uxth	r2, r3
 801ca32:	79fb      	ldrb	r3, [r7, #7]
 801ca34:	b29b      	uxth	r3, r3
 801ca36:	4313      	orrs	r3, r2
 801ca38:	b29a      	uxth	r2, r3
 801ca3a:	693b      	ldr	r3, [r7, #16]
 801ca3c:	68dc      	ldr	r4, [r3, #12]
 801ca3e:	4610      	mov	r0, r2
 801ca40:	f7f9 ff82 	bl	8016948 <lwip_htons>
 801ca44:	4603      	mov	r3, r0
 801ca46:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801ca48:	693b      	ldr	r3, [r7, #16]
 801ca4a:	68db      	ldr	r3, [r3, #12]
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	749a      	strb	r2, [r3, #18]
 801ca50:	2200      	movs	r2, #0
 801ca52:	74da      	strb	r2, [r3, #19]
  return seg;
 801ca54:	693b      	ldr	r3, [r7, #16]
}
 801ca56:	4618      	mov	r0, r3
 801ca58:	371c      	adds	r7, #28
 801ca5a:	46bd      	mov	sp, r7
 801ca5c:	bd90      	pop	{r4, r7, pc}
 801ca5e:	bf00      	nop
 801ca60:	08027764 	.word	0x08027764
 801ca64:	08027798 	.word	0x08027798
 801ca68:	080277b8 	.word	0x080277b8
 801ca6c:	080277e0 	.word	0x080277e0
 801ca70:	08027804 	.word	0x08027804

0801ca74 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b086      	sub	sp, #24
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	607b      	str	r3, [r7, #4]
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	73fb      	strb	r3, [r7, #15]
 801ca80:	460b      	mov	r3, r1
 801ca82:	81bb      	strh	r3, [r7, #12]
 801ca84:	4613      	mov	r3, r2
 801ca86:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801ca88:	89bb      	ldrh	r3, [r7, #12]
 801ca8a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d105      	bne.n	801ca9e <tcp_pbuf_prealloc+0x2a>
 801ca92:	4b30      	ldr	r3, [pc, #192]	; (801cb54 <tcp_pbuf_prealloc+0xe0>)
 801ca94:	22e8      	movs	r2, #232	; 0xe8
 801ca96:	4930      	ldr	r1, [pc, #192]	; (801cb58 <tcp_pbuf_prealloc+0xe4>)
 801ca98:	4830      	ldr	r0, [pc, #192]	; (801cb5c <tcp_pbuf_prealloc+0xe8>)
 801ca9a:	f007 fe81 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ca9e:	6a3b      	ldr	r3, [r7, #32]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d105      	bne.n	801cab0 <tcp_pbuf_prealloc+0x3c>
 801caa4:	4b2b      	ldr	r3, [pc, #172]	; (801cb54 <tcp_pbuf_prealloc+0xe0>)
 801caa6:	22e9      	movs	r2, #233	; 0xe9
 801caa8:	492d      	ldr	r1, [pc, #180]	; (801cb60 <tcp_pbuf_prealloc+0xec>)
 801caaa:	482c      	ldr	r0, [pc, #176]	; (801cb5c <tcp_pbuf_prealloc+0xe8>)
 801caac:	f007 fe78 	bl	80247a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801cab0:	89ba      	ldrh	r2, [r7, #12]
 801cab2:	897b      	ldrh	r3, [r7, #10]
 801cab4:	429a      	cmp	r2, r3
 801cab6:	d221      	bcs.n	801cafc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801cab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cabc:	f003 0302 	and.w	r3, r3, #2
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d111      	bne.n	801cae8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801cac4:	6a3b      	ldr	r3, [r7, #32]
 801cac6:	8b5b      	ldrh	r3, [r3, #26]
 801cac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d115      	bne.n	801cafc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801cad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d007      	beq.n	801cae8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801cad8:	6a3b      	ldr	r3, [r7, #32]
 801cada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d103      	bne.n	801cae8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801cae0:	6a3b      	ldr	r3, [r7, #32]
 801cae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d009      	beq.n	801cafc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801cae8:	89bb      	ldrh	r3, [r7, #12]
 801caea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801caee:	f023 0203 	bic.w	r2, r3, #3
 801caf2:	897b      	ldrh	r3, [r7, #10]
 801caf4:	4293      	cmp	r3, r2
 801caf6:	bf28      	it	cs
 801caf8:	4613      	movcs	r3, r2
 801cafa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801cafc:	8af9      	ldrh	r1, [r7, #22]
 801cafe:	7bfb      	ldrb	r3, [r7, #15]
 801cb00:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cb04:	4618      	mov	r0, r3
 801cb06:	f7fb f80d 	bl	8017b24 <pbuf_alloc>
 801cb0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cb0c:	693b      	ldr	r3, [r7, #16]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d101      	bne.n	801cb16 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801cb12:	2300      	movs	r3, #0
 801cb14:	e019      	b.n	801cb4a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801cb16:	693b      	ldr	r3, [r7, #16]
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d006      	beq.n	801cb2c <tcp_pbuf_prealloc+0xb8>
 801cb1e:	4b0d      	ldr	r3, [pc, #52]	; (801cb54 <tcp_pbuf_prealloc+0xe0>)
 801cb20:	f240 120b 	movw	r2, #267	; 0x10b
 801cb24:	490f      	ldr	r1, [pc, #60]	; (801cb64 <tcp_pbuf_prealloc+0xf0>)
 801cb26:	480d      	ldr	r0, [pc, #52]	; (801cb5c <tcp_pbuf_prealloc+0xe8>)
 801cb28:	f007 fe3a 	bl	80247a0 <iprintf>
  *oversize = p->len - length;
 801cb2c:	693b      	ldr	r3, [r7, #16]
 801cb2e:	895a      	ldrh	r2, [r3, #10]
 801cb30:	89bb      	ldrh	r3, [r7, #12]
 801cb32:	1ad3      	subs	r3, r2, r3
 801cb34:	b29a      	uxth	r2, r3
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801cb3a:	693b      	ldr	r3, [r7, #16]
 801cb3c:	89ba      	ldrh	r2, [r7, #12]
 801cb3e:	811a      	strh	r2, [r3, #8]
 801cb40:	693b      	ldr	r3, [r7, #16]
 801cb42:	891a      	ldrh	r2, [r3, #8]
 801cb44:	693b      	ldr	r3, [r7, #16]
 801cb46:	815a      	strh	r2, [r3, #10]
  return p;
 801cb48:	693b      	ldr	r3, [r7, #16]
}
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	3718      	adds	r7, #24
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	bd80      	pop	{r7, pc}
 801cb52:	bf00      	nop
 801cb54:	08027764 	.word	0x08027764
 801cb58:	0802781c 	.word	0x0802781c
 801cb5c:	080277b8 	.word	0x080277b8
 801cb60:	08027840 	.word	0x08027840
 801cb64:	08027860 	.word	0x08027860

0801cb68 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b082      	sub	sp, #8
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	460b      	mov	r3, r1
 801cb72:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d106      	bne.n	801cb88 <tcp_write_checks+0x20>
 801cb7a:	4b33      	ldr	r3, [pc, #204]	; (801cc48 <tcp_write_checks+0xe0>)
 801cb7c:	f240 1233 	movw	r2, #307	; 0x133
 801cb80:	4932      	ldr	r1, [pc, #200]	; (801cc4c <tcp_write_checks+0xe4>)
 801cb82:	4833      	ldr	r0, [pc, #204]	; (801cc50 <tcp_write_checks+0xe8>)
 801cb84:	f007 fe0c 	bl	80247a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	7d1b      	ldrb	r3, [r3, #20]
 801cb8c:	2b04      	cmp	r3, #4
 801cb8e:	d00e      	beq.n	801cbae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801cb94:	2b07      	cmp	r3, #7
 801cb96:	d00a      	beq.n	801cbae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801cb9c:	2b02      	cmp	r3, #2
 801cb9e:	d006      	beq.n	801cbae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801cba4:	2b03      	cmp	r3, #3
 801cba6:	d002      	beq.n	801cbae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801cba8:	f06f 030a 	mvn.w	r3, #10
 801cbac:	e048      	b.n	801cc40 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801cbae:	887b      	ldrh	r3, [r7, #2]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d101      	bne.n	801cbb8 <tcp_write_checks+0x50>
    return ERR_OK;
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	e043      	b.n	801cc40 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801cbbe:	887a      	ldrh	r2, [r7, #2]
 801cbc0:	429a      	cmp	r2, r3
 801cbc2:	d909      	bls.n	801cbd8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	8b5b      	ldrh	r3, [r3, #26]
 801cbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbcc:	b29a      	uxth	r2, r3
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801cbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbd6:	e033      	b.n	801cc40 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cbde:	2b08      	cmp	r3, #8
 801cbe0:	d909      	bls.n	801cbf6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	8b5b      	ldrh	r3, [r3, #26]
 801cbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbea:	b29a      	uxth	r2, r3
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801cbf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbf4:	e024      	b.n	801cc40 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d00f      	beq.n	801cc20 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d11a      	bne.n	801cc3e <tcp_write_checks+0xd6>
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d116      	bne.n	801cc3e <tcp_write_checks+0xd6>
 801cc10:	4b0d      	ldr	r3, [pc, #52]	; (801cc48 <tcp_write_checks+0xe0>)
 801cc12:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801cc16:	490f      	ldr	r1, [pc, #60]	; (801cc54 <tcp_write_checks+0xec>)
 801cc18:	480d      	ldr	r0, [pc, #52]	; (801cc50 <tcp_write_checks+0xe8>)
 801cc1a:	f007 fdc1 	bl	80247a0 <iprintf>
 801cc1e:	e00e      	b.n	801cc3e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d103      	bne.n	801cc30 <tcp_write_checks+0xc8>
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d006      	beq.n	801cc3e <tcp_write_checks+0xd6>
 801cc30:	4b05      	ldr	r3, [pc, #20]	; (801cc48 <tcp_write_checks+0xe0>)
 801cc32:	f240 1259 	movw	r2, #345	; 0x159
 801cc36:	4908      	ldr	r1, [pc, #32]	; (801cc58 <tcp_write_checks+0xf0>)
 801cc38:	4805      	ldr	r0, [pc, #20]	; (801cc50 <tcp_write_checks+0xe8>)
 801cc3a:	f007 fdb1 	bl	80247a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801cc3e:	2300      	movs	r3, #0
}
 801cc40:	4618      	mov	r0, r3
 801cc42:	3708      	adds	r7, #8
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bd80      	pop	{r7, pc}
 801cc48:	08027764 	.word	0x08027764
 801cc4c:	08027874 	.word	0x08027874
 801cc50:	080277b8 	.word	0x080277b8
 801cc54:	08027894 	.word	0x08027894
 801cc58:	080278d0 	.word	0x080278d0

0801cc5c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801cc5c:	b590      	push	{r4, r7, lr}
 801cc5e:	b09b      	sub	sp, #108	; 0x6c
 801cc60:	af04      	add	r7, sp, #16
 801cc62:	60f8      	str	r0, [r7, #12]
 801cc64:	60b9      	str	r1, [r7, #8]
 801cc66:	4611      	mov	r1, r2
 801cc68:	461a      	mov	r2, r3
 801cc6a:	460b      	mov	r3, r1
 801cc6c:	80fb      	strh	r3, [r7, #6]
 801cc6e:	4613      	mov	r3, r2
 801cc70:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801cc72:	2300      	movs	r3, #0
 801cc74:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801cc76:	2300      	movs	r3, #0
 801cc78:	653b      	str	r3, [r7, #80]	; 0x50
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cc7e:	2300      	movs	r3, #0
 801cc80:	64bb      	str	r3, [r7, #72]	; 0x48
 801cc82:	2300      	movs	r3, #0
 801cc84:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801cc86:	2300      	movs	r3, #0
 801cc88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801cc92:	2300      	movs	r3, #0
 801cc94:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801cc96:	2300      	movs	r3, #0
 801cc98:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d109      	bne.n	801ccb8 <tcp_write+0x5c>
 801cca4:	4ba5      	ldr	r3, [pc, #660]	; (801cf3c <tcp_write+0x2e0>)
 801cca6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ccaa:	49a5      	ldr	r1, [pc, #660]	; (801cf40 <tcp_write+0x2e4>)
 801ccac:	48a5      	ldr	r0, [pc, #660]	; (801cf44 <tcp_write+0x2e8>)
 801ccae:	f007 fd77 	bl	80247a0 <iprintf>
 801ccb2:	f06f 030f 	mvn.w	r3, #15
 801ccb6:	e32c      	b.n	801d312 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ccbe:	085b      	lsrs	r3, r3, #1
 801ccc0:	b29a      	uxth	r2, r3
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ccc6:	4293      	cmp	r3, r2
 801ccc8:	bf28      	it	cs
 801ccca:	4613      	movcs	r3, r2
 801cccc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ccce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d102      	bne.n	801ccda <tcp_write+0x7e>
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ccd8:	e000      	b.n	801ccdc <tcp_write+0x80>
 801ccda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ccdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ccde:	68bb      	ldr	r3, [r7, #8]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d109      	bne.n	801ccf8 <tcp_write+0x9c>
 801cce4:	4b95      	ldr	r3, [pc, #596]	; (801cf3c <tcp_write+0x2e0>)
 801cce6:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801ccea:	4997      	ldr	r1, [pc, #604]	; (801cf48 <tcp_write+0x2ec>)
 801ccec:	4895      	ldr	r0, [pc, #596]	; (801cf44 <tcp_write+0x2e8>)
 801ccee:	f007 fd57 	bl	80247a0 <iprintf>
 801ccf2:	f06f 030f 	mvn.w	r3, #15
 801ccf6:	e30c      	b.n	801d312 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ccf8:	88fb      	ldrh	r3, [r7, #6]
 801ccfa:	4619      	mov	r1, r3
 801ccfc:	68f8      	ldr	r0, [r7, #12]
 801ccfe:	f7ff ff33 	bl	801cb68 <tcp_write_checks>
 801cd02:	4603      	mov	r3, r0
 801cd04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801cd08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d002      	beq.n	801cd16 <tcp_write+0xba>
    return err;
 801cd10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801cd14:	e2fd      	b.n	801d312 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cd1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cd20:	2300      	movs	r3, #0
 801cd22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	f000 80f7 	beq.w	801cf1e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd34:	653b      	str	r3, [r7, #80]	; 0x50
 801cd36:	e002      	b.n	801cd3e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801cd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d1f8      	bne.n	801cd38 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801cd46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd48:	7a9b      	ldrb	r3, [r3, #10]
 801cd4a:	009b      	lsls	r3, r3, #2
 801cd4c:	b29b      	uxth	r3, r3
 801cd4e:	f003 0304 	and.w	r3, r3, #4
 801cd52:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801cd54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cd56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd58:	891b      	ldrh	r3, [r3, #8]
 801cd5a:	4619      	mov	r1, r3
 801cd5c:	8c3b      	ldrh	r3, [r7, #32]
 801cd5e:	440b      	add	r3, r1
 801cd60:	429a      	cmp	r2, r3
 801cd62:	da06      	bge.n	801cd72 <tcp_write+0x116>
 801cd64:	4b75      	ldr	r3, [pc, #468]	; (801cf3c <tcp_write+0x2e0>)
 801cd66:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801cd6a:	4978      	ldr	r1, [pc, #480]	; (801cf4c <tcp_write+0x2f0>)
 801cd6c:	4875      	ldr	r0, [pc, #468]	; (801cf44 <tcp_write+0x2e8>)
 801cd6e:	f007 fd17 	bl	80247a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801cd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd74:	891a      	ldrh	r2, [r3, #8]
 801cd76:	8c3b      	ldrh	r3, [r7, #32]
 801cd78:	4413      	add	r3, r2
 801cd7a:	b29b      	uxth	r3, r3
 801cd7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cd7e:	1ad3      	subs	r3, r2, r3
 801cd80:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cd88:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801cd8a:	8a7b      	ldrh	r3, [r7, #18]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d027      	beq.n	801cde0 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801cd90:	8a7b      	ldrh	r3, [r7, #18]
 801cd92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd94:	429a      	cmp	r2, r3
 801cd96:	d206      	bcs.n	801cda6 <tcp_write+0x14a>
 801cd98:	4b68      	ldr	r3, [pc, #416]	; (801cf3c <tcp_write+0x2e0>)
 801cd9a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801cd9e:	496c      	ldr	r1, [pc, #432]	; (801cf50 <tcp_write+0x2f4>)
 801cda0:	4868      	ldr	r0, [pc, #416]	; (801cf44 <tcp_write+0x2e8>)
 801cda2:	f007 fcfd 	bl	80247a0 <iprintf>
      seg = last_unsent;
 801cda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cda8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801cdaa:	8a7b      	ldrh	r3, [r7, #18]
 801cdac:	88fa      	ldrh	r2, [r7, #6]
 801cdae:	429a      	cmp	r2, r3
 801cdb0:	d901      	bls.n	801cdb6 <tcp_write+0x15a>
 801cdb2:	8a7b      	ldrh	r3, [r7, #18]
 801cdb4:	e000      	b.n	801cdb8 <tcp_write+0x15c>
 801cdb6:	88fb      	ldrh	r3, [r7, #6]
 801cdb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cdba:	4293      	cmp	r3, r2
 801cdbc:	bfa8      	it	ge
 801cdbe:	4613      	movge	r3, r2
 801cdc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801cdc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cdc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cdc8:	4413      	add	r3, r2
 801cdca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801cdce:	8a7a      	ldrh	r2, [r7, #18]
 801cdd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cdd2:	1ad3      	subs	r3, r2, r3
 801cdd4:	b29b      	uxth	r3, r3
 801cdd6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801cdd8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cdda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cddc:	1ad3      	subs	r3, r2, r3
 801cdde:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801cde0:	8a7b      	ldrh	r3, [r7, #18]
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d00b      	beq.n	801cdfe <tcp_write+0x1a2>
 801cde6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cdea:	88fb      	ldrh	r3, [r7, #6]
 801cdec:	429a      	cmp	r2, r3
 801cdee:	d006      	beq.n	801cdfe <tcp_write+0x1a2>
 801cdf0:	4b52      	ldr	r3, [pc, #328]	; (801cf3c <tcp_write+0x2e0>)
 801cdf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cdf6:	4957      	ldr	r1, [pc, #348]	; (801cf54 <tcp_write+0x2f8>)
 801cdf8:	4852      	ldr	r0, [pc, #328]	; (801cf44 <tcp_write+0x2e8>)
 801cdfa:	f007 fcd1 	bl	80247a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801cdfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce02:	88fb      	ldrh	r3, [r7, #6]
 801ce04:	429a      	cmp	r2, r3
 801ce06:	f080 8168 	bcs.w	801d0da <tcp_write+0x47e>
 801ce0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	f000 8164 	beq.w	801d0da <tcp_write+0x47e>
 801ce12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce14:	891b      	ldrh	r3, [r3, #8]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	f000 815f 	beq.w	801d0da <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ce1c:	88fa      	ldrh	r2, [r7, #6]
 801ce1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce22:	1ad2      	subs	r2, r2, r3
 801ce24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ce26:	4293      	cmp	r3, r2
 801ce28:	bfa8      	it	ge
 801ce2a:	4613      	movge	r3, r2
 801ce2c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ce2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce30:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ce32:	797b      	ldrb	r3, [r7, #5]
 801ce34:	f003 0301 	and.w	r3, r3, #1
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d027      	beq.n	801ce8c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ce3c:	f107 0012 	add.w	r0, r7, #18
 801ce40:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ce42:	8bf9      	ldrh	r1, [r7, #30]
 801ce44:	2301      	movs	r3, #1
 801ce46:	9302      	str	r3, [sp, #8]
 801ce48:	797b      	ldrb	r3, [r7, #5]
 801ce4a:	9301      	str	r3, [sp, #4]
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	9300      	str	r3, [sp, #0]
 801ce50:	4603      	mov	r3, r0
 801ce52:	2000      	movs	r0, #0
 801ce54:	f7ff fe0e 	bl	801ca74 <tcp_pbuf_prealloc>
 801ce58:	6578      	str	r0, [r7, #84]	; 0x54
 801ce5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	f000 8226 	beq.w	801d2ae <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ce62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce64:	6858      	ldr	r0, [r3, #4]
 801ce66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce6a:	68ba      	ldr	r2, [r7, #8]
 801ce6c:	4413      	add	r3, r2
 801ce6e:	8bfa      	ldrh	r2, [r7, #30]
 801ce70:	4619      	mov	r1, r3
 801ce72:	f007 fbda 	bl	802462a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ce76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ce78:	f7fb f9c2 	bl	8018200 <pbuf_clen>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	461a      	mov	r2, r3
 801ce80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ce84:	4413      	add	r3, r2
 801ce86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ce8a:	e041      	b.n	801cf10 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ce8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce8e:	685b      	ldr	r3, [r3, #4]
 801ce90:	637b      	str	r3, [r7, #52]	; 0x34
 801ce92:	e002      	b.n	801ce9a <tcp_write+0x23e>
 801ce94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	637b      	str	r3, [r7, #52]	; 0x34
 801ce9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d1f8      	bne.n	801ce94 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cea4:	7b1b      	ldrb	r3, [r3, #12]
 801cea6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d115      	bne.n	801ceda <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ceae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ceb4:	8952      	ldrh	r2, [r2, #10]
 801ceb6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ceb8:	68ba      	ldr	r2, [r7, #8]
 801ceba:	429a      	cmp	r2, r3
 801cebc:	d10d      	bne.n	801ceda <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801cebe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d006      	beq.n	801ced4 <tcp_write+0x278>
 801cec6:	4b1d      	ldr	r3, [pc, #116]	; (801cf3c <tcp_write+0x2e0>)
 801cec8:	f240 2231 	movw	r2, #561	; 0x231
 801cecc:	4922      	ldr	r1, [pc, #136]	; (801cf58 <tcp_write+0x2fc>)
 801cece:	481d      	ldr	r0, [pc, #116]	; (801cf44 <tcp_write+0x2e8>)
 801ced0:	f007 fc66 	bl	80247a0 <iprintf>
          extendlen = seglen;
 801ced4:	8bfb      	ldrh	r3, [r7, #30]
 801ced6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801ced8:	e01a      	b.n	801cf10 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ceda:	8bfb      	ldrh	r3, [r7, #30]
 801cedc:	2201      	movs	r2, #1
 801cede:	4619      	mov	r1, r3
 801cee0:	2000      	movs	r0, #0
 801cee2:	f7fa fe1f 	bl	8017b24 <pbuf_alloc>
 801cee6:	6578      	str	r0, [r7, #84]	; 0x54
 801cee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	f000 81e1 	beq.w	801d2b2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801cef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cef4:	68ba      	ldr	r2, [r7, #8]
 801cef6:	441a      	add	r2, r3
 801cef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cefa:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801cefc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cefe:	f7fb f97f 	bl	8018200 <pbuf_clen>
 801cf02:	4603      	mov	r3, r0
 801cf04:	461a      	mov	r2, r3
 801cf06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cf0a:	4413      	add	r3, r2
 801cf0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801cf10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cf14:	8bfb      	ldrh	r3, [r7, #30]
 801cf16:	4413      	add	r3, r2
 801cf18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801cf1c:	e0dd      	b.n	801d0da <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	f000 80d8 	beq.w	801d0da <tcp_write+0x47e>
 801cf2a:	4b04      	ldr	r3, [pc, #16]	; (801cf3c <tcp_write+0x2e0>)
 801cf2c:	f240 224b 	movw	r2, #587	; 0x24b
 801cf30:	490a      	ldr	r1, [pc, #40]	; (801cf5c <tcp_write+0x300>)
 801cf32:	4804      	ldr	r0, [pc, #16]	; (801cf44 <tcp_write+0x2e8>)
 801cf34:	f007 fc34 	bl	80247a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801cf38:	e0cf      	b.n	801d0da <tcp_write+0x47e>
 801cf3a:	bf00      	nop
 801cf3c:	08027764 	.word	0x08027764
 801cf40:	08027904 	.word	0x08027904
 801cf44:	080277b8 	.word	0x080277b8
 801cf48:	0802791c 	.word	0x0802791c
 801cf4c:	08027950 	.word	0x08027950
 801cf50:	08027968 	.word	0x08027968
 801cf54:	08027988 	.word	0x08027988
 801cf58:	080279a8 	.word	0x080279a8
 801cf5c:	080279d4 	.word	0x080279d4
    struct pbuf *p;
    u16_t left = len - pos;
 801cf60:	88fa      	ldrh	r2, [r7, #6]
 801cf62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cf66:	1ad3      	subs	r3, r2, r3
 801cf68:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801cf6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cf6e:	b29b      	uxth	r3, r3
 801cf70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cf72:	1ad3      	subs	r3, r2, r3
 801cf74:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801cf76:	8b7a      	ldrh	r2, [r7, #26]
 801cf78:	8bbb      	ldrh	r3, [r7, #28]
 801cf7a:	4293      	cmp	r3, r2
 801cf7c:	bf28      	it	cs
 801cf7e:	4613      	movcs	r3, r2
 801cf80:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cf82:	797b      	ldrb	r3, [r7, #5]
 801cf84:	f003 0301 	and.w	r3, r3, #1
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d036      	beq.n	801cffa <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801cf8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cf90:	b29a      	uxth	r2, r3
 801cf92:	8b3b      	ldrh	r3, [r7, #24]
 801cf94:	4413      	add	r3, r2
 801cf96:	b299      	uxth	r1, r3
 801cf98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	bf0c      	ite	eq
 801cf9e:	2301      	moveq	r3, #1
 801cfa0:	2300      	movne	r3, #0
 801cfa2:	b2db      	uxtb	r3, r3
 801cfa4:	f107 0012 	add.w	r0, r7, #18
 801cfa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801cfaa:	9302      	str	r3, [sp, #8]
 801cfac:	797b      	ldrb	r3, [r7, #5]
 801cfae:	9301      	str	r3, [sp, #4]
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	9300      	str	r3, [sp, #0]
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	2036      	movs	r0, #54	; 0x36
 801cfb8:	f7ff fd5c 	bl	801ca74 <tcp_pbuf_prealloc>
 801cfbc:	6338      	str	r0, [r7, #48]	; 0x30
 801cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	f000 8178 	beq.w	801d2b6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfc8:	895b      	ldrh	r3, [r3, #10]
 801cfca:	8b3a      	ldrh	r2, [r7, #24]
 801cfcc:	429a      	cmp	r2, r3
 801cfce:	d906      	bls.n	801cfde <tcp_write+0x382>
 801cfd0:	4b8c      	ldr	r3, [pc, #560]	; (801d204 <tcp_write+0x5a8>)
 801cfd2:	f240 2267 	movw	r2, #615	; 0x267
 801cfd6:	498c      	ldr	r1, [pc, #560]	; (801d208 <tcp_write+0x5ac>)
 801cfd8:	488c      	ldr	r0, [pc, #560]	; (801d20c <tcp_write+0x5b0>)
 801cfda:	f007 fbe1 	bl	80247a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfe0:	685a      	ldr	r2, [r3, #4]
 801cfe2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cfe6:	18d0      	adds	r0, r2, r3
 801cfe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cfec:	68ba      	ldr	r2, [r7, #8]
 801cfee:	4413      	add	r3, r2
 801cff0:	8b3a      	ldrh	r2, [r7, #24]
 801cff2:	4619      	mov	r1, r3
 801cff4:	f007 fb19 	bl	802462a <memcpy>
 801cff8:	e02f      	b.n	801d05a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801cffa:	8a7b      	ldrh	r3, [r7, #18]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d006      	beq.n	801d00e <tcp_write+0x3b2>
 801d000:	4b80      	ldr	r3, [pc, #512]	; (801d204 <tcp_write+0x5a8>)
 801d002:	f240 2271 	movw	r2, #625	; 0x271
 801d006:	4982      	ldr	r1, [pc, #520]	; (801d210 <tcp_write+0x5b4>)
 801d008:	4880      	ldr	r0, [pc, #512]	; (801d20c <tcp_write+0x5b0>)
 801d00a:	f007 fbc9 	bl	80247a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d00e:	8b3b      	ldrh	r3, [r7, #24]
 801d010:	2201      	movs	r2, #1
 801d012:	4619      	mov	r1, r3
 801d014:	2036      	movs	r0, #54	; 0x36
 801d016:	f7fa fd85 	bl	8017b24 <pbuf_alloc>
 801d01a:	6178      	str	r0, [r7, #20]
 801d01c:	697b      	ldr	r3, [r7, #20]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	f000 814b 	beq.w	801d2ba <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d028:	68ba      	ldr	r2, [r7, #8]
 801d02a:	441a      	add	r2, r3
 801d02c:	697b      	ldr	r3, [r7, #20]
 801d02e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d030:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d034:	b29b      	uxth	r3, r3
 801d036:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d03a:	4619      	mov	r1, r3
 801d03c:	2036      	movs	r0, #54	; 0x36
 801d03e:	f7fa fd71 	bl	8017b24 <pbuf_alloc>
 801d042:	6338      	str	r0, [r7, #48]	; 0x30
 801d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d046:	2b00      	cmp	r3, #0
 801d048:	d103      	bne.n	801d052 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801d04a:	6978      	ldr	r0, [r7, #20]
 801d04c:	f7fb f84a 	bl	80180e4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801d050:	e136      	b.n	801d2c0 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801d052:	6979      	ldr	r1, [r7, #20]
 801d054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d056:	f7fb f913 	bl	8018280 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801d05a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d05c:	f7fb f8d0 	bl	8018200 <pbuf_clen>
 801d060:	4603      	mov	r3, r0
 801d062:	461a      	mov	r2, r3
 801d064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d068:	4413      	add	r3, r2
 801d06a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d06e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d072:	2b09      	cmp	r3, #9
 801d074:	d903      	bls.n	801d07e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801d076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d078:	f7fb f834 	bl	80180e4 <pbuf_free>
      goto memerr;
 801d07c:	e120      	b.n	801d2c0 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d082:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d086:	441a      	add	r2, r3
 801d088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d08c:	9300      	str	r3, [sp, #0]
 801d08e:	4613      	mov	r3, r2
 801d090:	2200      	movs	r2, #0
 801d092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d094:	68f8      	ldr	r0, [r7, #12]
 801d096:	f7ff fc4f 	bl	801c938 <tcp_create_segment>
 801d09a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f000 810d 	beq.w	801d2be <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801d0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d102      	bne.n	801d0b0 <tcp_write+0x454>
      queue = seg;
 801d0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0ac:	647b      	str	r3, [r7, #68]	; 0x44
 801d0ae:	e00c      	b.n	801d0ca <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801d0b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d106      	bne.n	801d0c4 <tcp_write+0x468>
 801d0b6:	4b53      	ldr	r3, [pc, #332]	; (801d204 <tcp_write+0x5a8>)
 801d0b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d0bc:	4955      	ldr	r1, [pc, #340]	; (801d214 <tcp_write+0x5b8>)
 801d0be:	4853      	ldr	r0, [pc, #332]	; (801d20c <tcp_write+0x5b0>)
 801d0c0:	f007 fb6e 	bl	80247a0 <iprintf>
      prev_seg->next = seg;
 801d0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d0c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d0c8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801d0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0cc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801d0ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d0d2:	8b3b      	ldrh	r3, [r7, #24]
 801d0d4:	4413      	add	r3, r2
 801d0d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801d0da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d0de:	88fb      	ldrh	r3, [r7, #6]
 801d0e0:	429a      	cmp	r2, r3
 801d0e2:	f4ff af3d 	bcc.w	801cf60 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801d0e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d02c      	beq.n	801d146 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801d0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0ee:	685b      	ldr	r3, [r3, #4]
 801d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d0f2:	e01e      	b.n	801d132 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0f6:	891a      	ldrh	r2, [r3, #8]
 801d0f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d0fa:	4413      	add	r3, r2
 801d0fc:	b29a      	uxth	r2, r3
 801d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d100:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d110      	bne.n	801d12c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801d10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d10c:	685b      	ldr	r3, [r3, #4]
 801d10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d110:	8952      	ldrh	r2, [r2, #10]
 801d112:	4413      	add	r3, r2
 801d114:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d116:	68b9      	ldr	r1, [r7, #8]
 801d118:	4618      	mov	r0, r3
 801d11a:	f007 fa86 	bl	802462a <memcpy>
        p->len += oversize_used;
 801d11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d120:	895a      	ldrh	r2, [r3, #10]
 801d122:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d124:	4413      	add	r3, r2
 801d126:	b29a      	uxth	r2, r3
 801d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d12a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d134:	2b00      	cmp	r3, #0
 801d136:	d1dd      	bne.n	801d0f4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801d138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d13a:	891a      	ldrh	r2, [r3, #8]
 801d13c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d13e:	4413      	add	r3, r2
 801d140:	b29a      	uxth	r2, r3
 801d142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d144:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801d146:	8a7a      	ldrh	r2, [r7, #18]
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801d14e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d150:	2b00      	cmp	r3, #0
 801d152:	d018      	beq.n	801d186 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801d154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d156:	2b00      	cmp	r3, #0
 801d158:	d106      	bne.n	801d168 <tcp_write+0x50c>
 801d15a:	4b2a      	ldr	r3, [pc, #168]	; (801d204 <tcp_write+0x5a8>)
 801d15c:	f240 22e1 	movw	r2, #737	; 0x2e1
 801d160:	492d      	ldr	r1, [pc, #180]	; (801d218 <tcp_write+0x5bc>)
 801d162:	482a      	ldr	r0, [pc, #168]	; (801d20c <tcp_write+0x5b0>)
 801d164:	f007 fb1c 	bl	80247a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801d168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d16a:	685b      	ldr	r3, [r3, #4]
 801d16c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d16e:	4618      	mov	r0, r3
 801d170:	f7fb f886 	bl	8018280 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801d174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d176:	891a      	ldrh	r2, [r3, #8]
 801d178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d17a:	891b      	ldrh	r3, [r3, #8]
 801d17c:	4413      	add	r3, r2
 801d17e:	b29a      	uxth	r2, r3
 801d180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d182:	811a      	strh	r2, [r3, #8]
 801d184:	e037      	b.n	801d1f6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801d186:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d034      	beq.n	801d1f6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801d18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d003      	beq.n	801d19a <tcp_write+0x53e>
 801d192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d194:	685b      	ldr	r3, [r3, #4]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d106      	bne.n	801d1a8 <tcp_write+0x54c>
 801d19a:	4b1a      	ldr	r3, [pc, #104]	; (801d204 <tcp_write+0x5a8>)
 801d19c:	f240 22e7 	movw	r2, #743	; 0x2e7
 801d1a0:	491e      	ldr	r1, [pc, #120]	; (801d21c <tcp_write+0x5c0>)
 801d1a2:	481a      	ldr	r0, [pc, #104]	; (801d20c <tcp_write+0x5b0>)
 801d1a4:	f007 fafc 	bl	80247a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801d1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1ae:	e009      	b.n	801d1c4 <tcp_write+0x568>
      p->tot_len += extendlen;
 801d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1b2:	891a      	ldrh	r2, [r3, #8]
 801d1b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d1b6:	4413      	add	r3, r2
 801d1b8:	b29a      	uxth	r2, r3
 801d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1bc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d1f1      	bne.n	801d1b0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ce:	891a      	ldrh	r2, [r3, #8]
 801d1d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d1d2:	4413      	add	r3, r2
 801d1d4:	b29a      	uxth	r2, r3
 801d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1dc:	895a      	ldrh	r2, [r3, #10]
 801d1de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d1e0:	4413      	add	r3, r2
 801d1e2:	b29a      	uxth	r2, r3
 801d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1e6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801d1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1ea:	891a      	ldrh	r2, [r3, #8]
 801d1ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d1ee:	4413      	add	r3, r2
 801d1f0:	b29a      	uxth	r2, r3
 801d1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1f4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801d1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d111      	bne.n	801d220 <tcp_write+0x5c4>
    pcb->unsent = queue;
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d200:	66da      	str	r2, [r3, #108]	; 0x6c
 801d202:	e010      	b.n	801d226 <tcp_write+0x5ca>
 801d204:	08027764 	.word	0x08027764
 801d208:	08027a04 	.word	0x08027a04
 801d20c:	080277b8 	.word	0x080277b8
 801d210:	08027a44 	.word	0x08027a44
 801d214:	08027a54 	.word	0x08027a54
 801d218:	08027a68 	.word	0x08027a68
 801d21c:	08027aa0 	.word	0x08027aa0
  } else {
    last_unsent->next = queue;
 801d220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d224:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d22a:	88fb      	ldrh	r3, [r7, #6]
 801d22c:	441a      	add	r2, r3
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801d238:	88fb      	ldrh	r3, [r7, #6]
 801d23a:	1ad3      	subs	r3, r2, r3
 801d23c:	b29a      	uxth	r2, r3
 801d23e:	68fb      	ldr	r3, [r7, #12]
 801d240:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d24a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d254:	2b00      	cmp	r3, #0
 801d256:	d00e      	beq.n	801d276 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d10a      	bne.n	801d276 <tcp_write+0x61a>
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d264:	2b00      	cmp	r3, #0
 801d266:	d106      	bne.n	801d276 <tcp_write+0x61a>
 801d268:	4b2c      	ldr	r3, [pc, #176]	; (801d31c <tcp_write+0x6c0>)
 801d26a:	f240 3213 	movw	r2, #787	; 0x313
 801d26e:	492c      	ldr	r1, [pc, #176]	; (801d320 <tcp_write+0x6c4>)
 801d270:	482c      	ldr	r0, [pc, #176]	; (801d324 <tcp_write+0x6c8>)
 801d272:	f007 fa95 	bl	80247a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801d276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d016      	beq.n	801d2aa <tcp_write+0x64e>
 801d27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d27e:	68db      	ldr	r3, [r3, #12]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d012      	beq.n	801d2aa <tcp_write+0x64e>
 801d284:	797b      	ldrb	r3, [r7, #5]
 801d286:	f003 0302 	and.w	r3, r3, #2
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d10d      	bne.n	801d2aa <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801d28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d290:	68db      	ldr	r3, [r3, #12]
 801d292:	899b      	ldrh	r3, [r3, #12]
 801d294:	b29c      	uxth	r4, r3
 801d296:	2008      	movs	r0, #8
 801d298:	f7f9 fb56 	bl	8016948 <lwip_htons>
 801d29c:	4603      	mov	r3, r0
 801d29e:	461a      	mov	r2, r3
 801d2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d2a2:	68db      	ldr	r3, [r3, #12]
 801d2a4:	4322      	orrs	r2, r4
 801d2a6:	b292      	uxth	r2, r2
 801d2a8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	e031      	b.n	801d312 <tcp_write+0x6b6>
          goto memerr;
 801d2ae:	bf00      	nop
 801d2b0:	e006      	b.n	801d2c0 <tcp_write+0x664>
            goto memerr;
 801d2b2:	bf00      	nop
 801d2b4:	e004      	b.n	801d2c0 <tcp_write+0x664>
        goto memerr;
 801d2b6:	bf00      	nop
 801d2b8:	e002      	b.n	801d2c0 <tcp_write+0x664>
        goto memerr;
 801d2ba:	bf00      	nop
 801d2bc:	e000      	b.n	801d2c0 <tcp_write+0x664>
      goto memerr;
 801d2be:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	8b5b      	ldrh	r3, [r3, #26]
 801d2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d2c8:	b29a      	uxth	r2, r3
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801d2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d002      	beq.n	801d2da <tcp_write+0x67e>
    pbuf_free(concat_p);
 801d2d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d2d6:	f7fa ff05 	bl	80180e4 <pbuf_free>
  }
  if (queue != NULL) {
 801d2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d002      	beq.n	801d2e6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801d2e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d2e2:	f7fc fb71 	bl	80199c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d00e      	beq.n	801d30e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d10a      	bne.n	801d30e <tcp_write+0x6b2>
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d106      	bne.n	801d30e <tcp_write+0x6b2>
 801d300:	4b06      	ldr	r3, [pc, #24]	; (801d31c <tcp_write+0x6c0>)
 801d302:	f44f 724a 	mov.w	r2, #808	; 0x328
 801d306:	4906      	ldr	r1, [pc, #24]	; (801d320 <tcp_write+0x6c4>)
 801d308:	4806      	ldr	r0, [pc, #24]	; (801d324 <tcp_write+0x6c8>)
 801d30a:	f007 fa49 	bl	80247a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801d30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d312:	4618      	mov	r0, r3
 801d314:	375c      	adds	r7, #92	; 0x5c
 801d316:	46bd      	mov	sp, r7
 801d318:	bd90      	pop	{r4, r7, pc}
 801d31a:	bf00      	nop
 801d31c:	08027764 	.word	0x08027764
 801d320:	08027ad8 	.word	0x08027ad8
 801d324:	080277b8 	.word	0x080277b8

0801d328 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801d328:	b590      	push	{r4, r7, lr}
 801d32a:	b08b      	sub	sp, #44	; 0x2c
 801d32c:	af02      	add	r7, sp, #8
 801d32e:	6078      	str	r0, [r7, #4]
 801d330:	460b      	mov	r3, r1
 801d332:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801d334:	2300      	movs	r3, #0
 801d336:	61fb      	str	r3, [r7, #28]
 801d338:	2300      	movs	r3, #0
 801d33a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801d33c:	2300      	movs	r3, #0
 801d33e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	2b00      	cmp	r3, #0
 801d344:	d106      	bne.n	801d354 <tcp_split_unsent_seg+0x2c>
 801d346:	4b95      	ldr	r3, [pc, #596]	; (801d59c <tcp_split_unsent_seg+0x274>)
 801d348:	f240 324b 	movw	r2, #843	; 0x34b
 801d34c:	4994      	ldr	r1, [pc, #592]	; (801d5a0 <tcp_split_unsent_seg+0x278>)
 801d34e:	4895      	ldr	r0, [pc, #596]	; (801d5a4 <tcp_split_unsent_seg+0x27c>)
 801d350:	f007 fa26 	bl	80247a0 <iprintf>

  useg = pcb->unsent;
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d358:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801d35a:	697b      	ldr	r3, [r7, #20]
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d102      	bne.n	801d366 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801d360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d364:	e116      	b.n	801d594 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801d366:	887b      	ldrh	r3, [r7, #2]
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d109      	bne.n	801d380 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801d36c:	4b8b      	ldr	r3, [pc, #556]	; (801d59c <tcp_split_unsent_seg+0x274>)
 801d36e:	f240 3253 	movw	r2, #851	; 0x353
 801d372:	498d      	ldr	r1, [pc, #564]	; (801d5a8 <tcp_split_unsent_seg+0x280>)
 801d374:	488b      	ldr	r0, [pc, #556]	; (801d5a4 <tcp_split_unsent_seg+0x27c>)
 801d376:	f007 fa13 	bl	80247a0 <iprintf>
    return ERR_VAL;
 801d37a:	f06f 0305 	mvn.w	r3, #5
 801d37e:	e109      	b.n	801d594 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801d380:	697b      	ldr	r3, [r7, #20]
 801d382:	891b      	ldrh	r3, [r3, #8]
 801d384:	887a      	ldrh	r2, [r7, #2]
 801d386:	429a      	cmp	r2, r3
 801d388:	d301      	bcc.n	801d38e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801d38a:	2300      	movs	r3, #0
 801d38c:	e102      	b.n	801d594 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d392:	887a      	ldrh	r2, [r7, #2]
 801d394:	429a      	cmp	r2, r3
 801d396:	d906      	bls.n	801d3a6 <tcp_split_unsent_seg+0x7e>
 801d398:	4b80      	ldr	r3, [pc, #512]	; (801d59c <tcp_split_unsent_seg+0x274>)
 801d39a:	f240 325b 	movw	r2, #859	; 0x35b
 801d39e:	4983      	ldr	r1, [pc, #524]	; (801d5ac <tcp_split_unsent_seg+0x284>)
 801d3a0:	4880      	ldr	r0, [pc, #512]	; (801d5a4 <tcp_split_unsent_seg+0x27c>)
 801d3a2:	f007 f9fd 	bl	80247a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	891b      	ldrh	r3, [r3, #8]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d106      	bne.n	801d3bc <tcp_split_unsent_seg+0x94>
 801d3ae:	4b7b      	ldr	r3, [pc, #492]	; (801d59c <tcp_split_unsent_seg+0x274>)
 801d3b0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801d3b4:	497e      	ldr	r1, [pc, #504]	; (801d5b0 <tcp_split_unsent_seg+0x288>)
 801d3b6:	487b      	ldr	r0, [pc, #492]	; (801d5a4 <tcp_split_unsent_seg+0x27c>)
 801d3b8:	f007 f9f2 	bl	80247a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801d3bc:	697b      	ldr	r3, [r7, #20]
 801d3be:	7a9b      	ldrb	r3, [r3, #10]
 801d3c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801d3c2:	7bfb      	ldrb	r3, [r7, #15]
 801d3c4:	009b      	lsls	r3, r3, #2
 801d3c6:	b2db      	uxtb	r3, r3
 801d3c8:	f003 0304 	and.w	r3, r3, #4
 801d3cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801d3ce:	697b      	ldr	r3, [r7, #20]
 801d3d0:	891a      	ldrh	r2, [r3, #8]
 801d3d2:	887b      	ldrh	r3, [r7, #2]
 801d3d4:	1ad3      	subs	r3, r2, r3
 801d3d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801d3d8:	7bbb      	ldrb	r3, [r7, #14]
 801d3da:	b29a      	uxth	r2, r3
 801d3dc:	89bb      	ldrh	r3, [r7, #12]
 801d3de:	4413      	add	r3, r2
 801d3e0:	b29b      	uxth	r3, r3
 801d3e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d3e6:	4619      	mov	r1, r3
 801d3e8:	2036      	movs	r0, #54	; 0x36
 801d3ea:	f7fa fb9b 	bl	8017b24 <pbuf_alloc>
 801d3ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d3f0:	693b      	ldr	r3, [r7, #16]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	f000 80b7 	beq.w	801d566 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801d3f8:	697b      	ldr	r3, [r7, #20]
 801d3fa:	685b      	ldr	r3, [r3, #4]
 801d3fc:	891a      	ldrh	r2, [r3, #8]
 801d3fe:	697b      	ldr	r3, [r7, #20]
 801d400:	891b      	ldrh	r3, [r3, #8]
 801d402:	1ad3      	subs	r3, r2, r3
 801d404:	b29a      	uxth	r2, r3
 801d406:	887b      	ldrh	r3, [r7, #2]
 801d408:	4413      	add	r3, r2
 801d40a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801d40c:	697b      	ldr	r3, [r7, #20]
 801d40e:	6858      	ldr	r0, [r3, #4]
 801d410:	693b      	ldr	r3, [r7, #16]
 801d412:	685a      	ldr	r2, [r3, #4]
 801d414:	7bbb      	ldrb	r3, [r7, #14]
 801d416:	18d1      	adds	r1, r2, r3
 801d418:	897b      	ldrh	r3, [r7, #10]
 801d41a:	89ba      	ldrh	r2, [r7, #12]
 801d41c:	f7fb f868 	bl	80184f0 <pbuf_copy_partial>
 801d420:	4603      	mov	r3, r0
 801d422:	461a      	mov	r2, r3
 801d424:	89bb      	ldrh	r3, [r7, #12]
 801d426:	4293      	cmp	r3, r2
 801d428:	f040 809f 	bne.w	801d56a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d42c:	697b      	ldr	r3, [r7, #20]
 801d42e:	68db      	ldr	r3, [r3, #12]
 801d430:	899b      	ldrh	r3, [r3, #12]
 801d432:	b29b      	uxth	r3, r3
 801d434:	4618      	mov	r0, r3
 801d436:	f7f9 fa87 	bl	8016948 <lwip_htons>
 801d43a:	4603      	mov	r3, r0
 801d43c:	b2db      	uxtb	r3, r3
 801d43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d442:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801d444:	2300      	movs	r3, #0
 801d446:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801d448:	7efb      	ldrb	r3, [r7, #27]
 801d44a:	f003 0308 	and.w	r3, r3, #8
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d007      	beq.n	801d462 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801d452:	7efb      	ldrb	r3, [r7, #27]
 801d454:	f023 0308 	bic.w	r3, r3, #8
 801d458:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801d45a:	7ebb      	ldrb	r3, [r7, #26]
 801d45c:	f043 0308 	orr.w	r3, r3, #8
 801d460:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801d462:	7efb      	ldrb	r3, [r7, #27]
 801d464:	f003 0301 	and.w	r3, r3, #1
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d007      	beq.n	801d47c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801d46c:	7efb      	ldrb	r3, [r7, #27]
 801d46e:	f023 0301 	bic.w	r3, r3, #1
 801d472:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801d474:	7ebb      	ldrb	r3, [r7, #26]
 801d476:	f043 0301 	orr.w	r3, r3, #1
 801d47a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801d47c:	697b      	ldr	r3, [r7, #20]
 801d47e:	68db      	ldr	r3, [r3, #12]
 801d480:	685b      	ldr	r3, [r3, #4]
 801d482:	4618      	mov	r0, r3
 801d484:	f7f9 fa75 	bl	8016972 <lwip_htonl>
 801d488:	4602      	mov	r2, r0
 801d48a:	887b      	ldrh	r3, [r7, #2]
 801d48c:	18d1      	adds	r1, r2, r3
 801d48e:	7eba      	ldrb	r2, [r7, #26]
 801d490:	7bfb      	ldrb	r3, [r7, #15]
 801d492:	9300      	str	r3, [sp, #0]
 801d494:	460b      	mov	r3, r1
 801d496:	6939      	ldr	r1, [r7, #16]
 801d498:	6878      	ldr	r0, [r7, #4]
 801d49a:	f7ff fa4d 	bl	801c938 <tcp_create_segment>
 801d49e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801d4a0:	69fb      	ldr	r3, [r7, #28]
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	d063      	beq.n	801d56e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d4a6:	697b      	ldr	r3, [r7, #20]
 801d4a8:	685b      	ldr	r3, [r3, #4]
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	f7fa fea8 	bl	8018200 <pbuf_clen>
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	461a      	mov	r2, r3
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d4ba:	1a9b      	subs	r3, r3, r2
 801d4bc:	b29a      	uxth	r2, r3
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d4c4:	697b      	ldr	r3, [r7, #20]
 801d4c6:	6858      	ldr	r0, [r3, #4]
 801d4c8:	697b      	ldr	r3, [r7, #20]
 801d4ca:	685b      	ldr	r3, [r3, #4]
 801d4cc:	891a      	ldrh	r2, [r3, #8]
 801d4ce:	89bb      	ldrh	r3, [r7, #12]
 801d4d0:	1ad3      	subs	r3, r2, r3
 801d4d2:	b29b      	uxth	r3, r3
 801d4d4:	4619      	mov	r1, r3
 801d4d6:	f7fa fc7f 	bl	8017dd8 <pbuf_realloc>
  useg->len -= remainder;
 801d4da:	697b      	ldr	r3, [r7, #20]
 801d4dc:	891a      	ldrh	r2, [r3, #8]
 801d4de:	89bb      	ldrh	r3, [r7, #12]
 801d4e0:	1ad3      	subs	r3, r2, r3
 801d4e2:	b29a      	uxth	r2, r3
 801d4e4:	697b      	ldr	r3, [r7, #20]
 801d4e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d4e8:	697b      	ldr	r3, [r7, #20]
 801d4ea:	68db      	ldr	r3, [r3, #12]
 801d4ec:	899b      	ldrh	r3, [r3, #12]
 801d4ee:	b29c      	uxth	r4, r3
 801d4f0:	7efb      	ldrb	r3, [r7, #27]
 801d4f2:	b29b      	uxth	r3, r3
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	f7f9 fa27 	bl	8016948 <lwip_htons>
 801d4fa:	4603      	mov	r3, r0
 801d4fc:	461a      	mov	r2, r3
 801d4fe:	697b      	ldr	r3, [r7, #20]
 801d500:	68db      	ldr	r3, [r3, #12]
 801d502:	4322      	orrs	r2, r4
 801d504:	b292      	uxth	r2, r2
 801d506:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d508:	697b      	ldr	r3, [r7, #20]
 801d50a:	685b      	ldr	r3, [r3, #4]
 801d50c:	4618      	mov	r0, r3
 801d50e:	f7fa fe77 	bl	8018200 <pbuf_clen>
 801d512:	4603      	mov	r3, r0
 801d514:	461a      	mov	r2, r3
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d51c:	4413      	add	r3, r2
 801d51e:	b29a      	uxth	r2, r3
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d526:	69fb      	ldr	r3, [r7, #28]
 801d528:	685b      	ldr	r3, [r3, #4]
 801d52a:	4618      	mov	r0, r3
 801d52c:	f7fa fe68 	bl	8018200 <pbuf_clen>
 801d530:	4603      	mov	r3, r0
 801d532:	461a      	mov	r2, r3
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d53a:	4413      	add	r3, r2
 801d53c:	b29a      	uxth	r2, r3
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801d544:	697b      	ldr	r3, [r7, #20]
 801d546:	681a      	ldr	r2, [r3, #0]
 801d548:	69fb      	ldr	r3, [r7, #28]
 801d54a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801d54c:	697b      	ldr	r3, [r7, #20]
 801d54e:	69fa      	ldr	r2, [r7, #28]
 801d550:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d103      	bne.n	801d562 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	2200      	movs	r2, #0
 801d55e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801d562:	2300      	movs	r3, #0
 801d564:	e016      	b.n	801d594 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801d566:	bf00      	nop
 801d568:	e002      	b.n	801d570 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d56a:	bf00      	nop
 801d56c:	e000      	b.n	801d570 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d56e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801d570:	69fb      	ldr	r3, [r7, #28]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d006      	beq.n	801d584 <tcp_split_unsent_seg+0x25c>
 801d576:	4b09      	ldr	r3, [pc, #36]	; (801d59c <tcp_split_unsent_seg+0x274>)
 801d578:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801d57c:	490d      	ldr	r1, [pc, #52]	; (801d5b4 <tcp_split_unsent_seg+0x28c>)
 801d57e:	4809      	ldr	r0, [pc, #36]	; (801d5a4 <tcp_split_unsent_seg+0x27c>)
 801d580:	f007 f90e 	bl	80247a0 <iprintf>
  if (p != NULL) {
 801d584:	693b      	ldr	r3, [r7, #16]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d002      	beq.n	801d590 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801d58a:	6938      	ldr	r0, [r7, #16]
 801d58c:	f7fa fdaa 	bl	80180e4 <pbuf_free>
  }

  return ERR_MEM;
 801d590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d594:	4618      	mov	r0, r3
 801d596:	3724      	adds	r7, #36	; 0x24
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd90      	pop	{r4, r7, pc}
 801d59c:	08027764 	.word	0x08027764
 801d5a0:	08027af8 	.word	0x08027af8
 801d5a4:	080277b8 	.word	0x080277b8
 801d5a8:	08027b1c 	.word	0x08027b1c
 801d5ac:	08027b40 	.word	0x08027b40
 801d5b0:	08027b50 	.word	0x08027b50
 801d5b4:	08027b60 	.word	0x08027b60

0801d5b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801d5b8:	b590      	push	{r4, r7, lr}
 801d5ba:	b085      	sub	sp, #20
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d106      	bne.n	801d5d4 <tcp_send_fin+0x1c>
 801d5c6:	4b21      	ldr	r3, [pc, #132]	; (801d64c <tcp_send_fin+0x94>)
 801d5c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801d5cc:	4920      	ldr	r1, [pc, #128]	; (801d650 <tcp_send_fin+0x98>)
 801d5ce:	4821      	ldr	r0, [pc, #132]	; (801d654 <tcp_send_fin+0x9c>)
 801d5d0:	f007 f8e6 	bl	80247a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d02e      	beq.n	801d63a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d5e0:	60fb      	str	r3, [r7, #12]
 801d5e2:	e002      	b.n	801d5ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d1f8      	bne.n	801d5e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	68db      	ldr	r3, [r3, #12]
 801d5f6:	899b      	ldrh	r3, [r3, #12]
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	4618      	mov	r0, r3
 801d5fc:	f7f9 f9a4 	bl	8016948 <lwip_htons>
 801d600:	4603      	mov	r3, r0
 801d602:	b2db      	uxtb	r3, r3
 801d604:	f003 0307 	and.w	r3, r3, #7
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d116      	bne.n	801d63a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	68db      	ldr	r3, [r3, #12]
 801d610:	899b      	ldrh	r3, [r3, #12]
 801d612:	b29c      	uxth	r4, r3
 801d614:	2001      	movs	r0, #1
 801d616:	f7f9 f997 	bl	8016948 <lwip_htons>
 801d61a:	4603      	mov	r3, r0
 801d61c:	461a      	mov	r2, r3
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	68db      	ldr	r3, [r3, #12]
 801d622:	4322      	orrs	r2, r4
 801d624:	b292      	uxth	r2, r2
 801d626:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	8b5b      	ldrh	r3, [r3, #26]
 801d62c:	f043 0320 	orr.w	r3, r3, #32
 801d630:	b29a      	uxth	r2, r3
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801d636:	2300      	movs	r3, #0
 801d638:	e004      	b.n	801d644 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d63a:	2101      	movs	r1, #1
 801d63c:	6878      	ldr	r0, [r7, #4]
 801d63e:	f000 f80b 	bl	801d658 <tcp_enqueue_flags>
 801d642:	4603      	mov	r3, r0
}
 801d644:	4618      	mov	r0, r3
 801d646:	3714      	adds	r7, #20
 801d648:	46bd      	mov	sp, r7
 801d64a:	bd90      	pop	{r4, r7, pc}
 801d64c:	08027764 	.word	0x08027764
 801d650:	08027b6c 	.word	0x08027b6c
 801d654:	080277b8 	.word	0x080277b8

0801d658 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801d658:	b580      	push	{r7, lr}
 801d65a:	b08a      	sub	sp, #40	; 0x28
 801d65c:	af02      	add	r7, sp, #8
 801d65e:	6078      	str	r0, [r7, #4]
 801d660:	460b      	mov	r3, r1
 801d662:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801d664:	2300      	movs	r3, #0
 801d666:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801d668:	2300      	movs	r3, #0
 801d66a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d66c:	78fb      	ldrb	r3, [r7, #3]
 801d66e:	f003 0303 	and.w	r3, r3, #3
 801d672:	2b00      	cmp	r3, #0
 801d674:	d106      	bne.n	801d684 <tcp_enqueue_flags+0x2c>
 801d676:	4b67      	ldr	r3, [pc, #412]	; (801d814 <tcp_enqueue_flags+0x1bc>)
 801d678:	f240 4212 	movw	r2, #1042	; 0x412
 801d67c:	4966      	ldr	r1, [pc, #408]	; (801d818 <tcp_enqueue_flags+0x1c0>)
 801d67e:	4867      	ldr	r0, [pc, #412]	; (801d81c <tcp_enqueue_flags+0x1c4>)
 801d680:	f007 f88e 	bl	80247a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	2b00      	cmp	r3, #0
 801d688:	d106      	bne.n	801d698 <tcp_enqueue_flags+0x40>
 801d68a:	4b62      	ldr	r3, [pc, #392]	; (801d814 <tcp_enqueue_flags+0x1bc>)
 801d68c:	f240 4213 	movw	r2, #1043	; 0x413
 801d690:	4963      	ldr	r1, [pc, #396]	; (801d820 <tcp_enqueue_flags+0x1c8>)
 801d692:	4862      	ldr	r0, [pc, #392]	; (801d81c <tcp_enqueue_flags+0x1c4>)
 801d694:	f007 f884 	bl	80247a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801d698:	78fb      	ldrb	r3, [r7, #3]
 801d69a:	f003 0302 	and.w	r3, r3, #2
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d001      	beq.n	801d6a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801d6a2:	2301      	movs	r3, #1
 801d6a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d6a6:	7ffb      	ldrb	r3, [r7, #31]
 801d6a8:	009b      	lsls	r3, r3, #2
 801d6aa:	b2db      	uxtb	r3, r3
 801d6ac:	f003 0304 	and.w	r3, r3, #4
 801d6b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d6b2:	7dfb      	ldrb	r3, [r7, #23]
 801d6b4:	b29b      	uxth	r3, r3
 801d6b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d6ba:	4619      	mov	r1, r3
 801d6bc:	2036      	movs	r0, #54	; 0x36
 801d6be:	f7fa fa31 	bl	8017b24 <pbuf_alloc>
 801d6c2:	6138      	str	r0, [r7, #16]
 801d6c4:	693b      	ldr	r3, [r7, #16]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d109      	bne.n	801d6de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	8b5b      	ldrh	r3, [r3, #26]
 801d6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6d2:	b29a      	uxth	r2, r3
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6dc:	e095      	b.n	801d80a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d6de:	693b      	ldr	r3, [r7, #16]
 801d6e0:	895a      	ldrh	r2, [r3, #10]
 801d6e2:	7dfb      	ldrb	r3, [r7, #23]
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	429a      	cmp	r2, r3
 801d6e8:	d206      	bcs.n	801d6f8 <tcp_enqueue_flags+0xa0>
 801d6ea:	4b4a      	ldr	r3, [pc, #296]	; (801d814 <tcp_enqueue_flags+0x1bc>)
 801d6ec:	f240 423a 	movw	r2, #1082	; 0x43a
 801d6f0:	494c      	ldr	r1, [pc, #304]	; (801d824 <tcp_enqueue_flags+0x1cc>)
 801d6f2:	484a      	ldr	r0, [pc, #296]	; (801d81c <tcp_enqueue_flags+0x1c4>)
 801d6f4:	f007 f854 	bl	80247a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801d6fc:	78fa      	ldrb	r2, [r7, #3]
 801d6fe:	7ffb      	ldrb	r3, [r7, #31]
 801d700:	9300      	str	r3, [sp, #0]
 801d702:	460b      	mov	r3, r1
 801d704:	6939      	ldr	r1, [r7, #16]
 801d706:	6878      	ldr	r0, [r7, #4]
 801d708:	f7ff f916 	bl	801c938 <tcp_create_segment>
 801d70c:	60f8      	str	r0, [r7, #12]
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	2b00      	cmp	r3, #0
 801d712:	d109      	bne.n	801d728 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	8b5b      	ldrh	r3, [r3, #26]
 801d718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d71c:	b29a      	uxth	r2, r3
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d726:	e070      	b.n	801d80a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	68db      	ldr	r3, [r3, #12]
 801d72c:	f003 0303 	and.w	r3, r3, #3
 801d730:	2b00      	cmp	r3, #0
 801d732:	d006      	beq.n	801d742 <tcp_enqueue_flags+0xea>
 801d734:	4b37      	ldr	r3, [pc, #220]	; (801d814 <tcp_enqueue_flags+0x1bc>)
 801d736:	f240 4242 	movw	r2, #1090	; 0x442
 801d73a:	493b      	ldr	r1, [pc, #236]	; (801d828 <tcp_enqueue_flags+0x1d0>)
 801d73c:	4837      	ldr	r0, [pc, #220]	; (801d81c <tcp_enqueue_flags+0x1c4>)
 801d73e:	f007 f82f 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	891b      	ldrh	r3, [r3, #8]
 801d746:	2b00      	cmp	r3, #0
 801d748:	d006      	beq.n	801d758 <tcp_enqueue_flags+0x100>
 801d74a:	4b32      	ldr	r3, [pc, #200]	; (801d814 <tcp_enqueue_flags+0x1bc>)
 801d74c:	f240 4243 	movw	r2, #1091	; 0x443
 801d750:	4936      	ldr	r1, [pc, #216]	; (801d82c <tcp_enqueue_flags+0x1d4>)
 801d752:	4832      	ldr	r0, [pc, #200]	; (801d81c <tcp_enqueue_flags+0x1c4>)
 801d754:	f007 f824 	bl	80247a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d103      	bne.n	801d768 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	68fa      	ldr	r2, [r7, #12]
 801d764:	66da      	str	r2, [r3, #108]	; 0x6c
 801d766:	e00d      	b.n	801d784 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d76c:	61bb      	str	r3, [r7, #24]
 801d76e:	e002      	b.n	801d776 <tcp_enqueue_flags+0x11e>
 801d770:	69bb      	ldr	r3, [r7, #24]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	61bb      	str	r3, [r7, #24]
 801d776:	69bb      	ldr	r3, [r7, #24]
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d1f8      	bne.n	801d770 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801d77e:	69bb      	ldr	r3, [r7, #24]
 801d780:	68fa      	ldr	r2, [r7, #12]
 801d782:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	2200      	movs	r2, #0
 801d788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801d78c:	78fb      	ldrb	r3, [r7, #3]
 801d78e:	f003 0302 	and.w	r3, r3, #2
 801d792:	2b00      	cmp	r3, #0
 801d794:	d104      	bne.n	801d7a0 <tcp_enqueue_flags+0x148>
 801d796:	78fb      	ldrb	r3, [r7, #3]
 801d798:	f003 0301 	and.w	r3, r3, #1
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d004      	beq.n	801d7aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d7a4:	1c5a      	adds	r2, r3, #1
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801d7aa:	78fb      	ldrb	r3, [r7, #3]
 801d7ac:	f003 0301 	and.w	r3, r3, #1
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d006      	beq.n	801d7c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	8b5b      	ldrh	r3, [r3, #26]
 801d7b8:	f043 0320 	orr.w	r3, r3, #32
 801d7bc:	b29a      	uxth	r2, r3
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	685b      	ldr	r3, [r3, #4]
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7fa fd1a 	bl	8018200 <pbuf_clen>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	461a      	mov	r2, r3
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d7d6:	4413      	add	r3, r2
 801d7d8:	b29a      	uxth	r2, r3
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d00e      	beq.n	801d808 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d10a      	bne.n	801d808 <tcp_enqueue_flags+0x1b0>
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d106      	bne.n	801d808 <tcp_enqueue_flags+0x1b0>
 801d7fa:	4b06      	ldr	r3, [pc, #24]	; (801d814 <tcp_enqueue_flags+0x1bc>)
 801d7fc:	f240 4266 	movw	r2, #1126	; 0x466
 801d800:	490b      	ldr	r1, [pc, #44]	; (801d830 <tcp_enqueue_flags+0x1d8>)
 801d802:	4806      	ldr	r0, [pc, #24]	; (801d81c <tcp_enqueue_flags+0x1c4>)
 801d804:	f006 ffcc 	bl	80247a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801d808:	2300      	movs	r3, #0
}
 801d80a:	4618      	mov	r0, r3
 801d80c:	3720      	adds	r7, #32
 801d80e:	46bd      	mov	sp, r7
 801d810:	bd80      	pop	{r7, pc}
 801d812:	bf00      	nop
 801d814:	08027764 	.word	0x08027764
 801d818:	08027b88 	.word	0x08027b88
 801d81c:	080277b8 	.word	0x080277b8
 801d820:	08027be0 	.word	0x08027be0
 801d824:	08027c00 	.word	0x08027c00
 801d828:	08027c3c 	.word	0x08027c3c
 801d82c:	08027c54 	.word	0x08027c54
 801d830:	08027c80 	.word	0x08027c80

0801d834 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801d834:	b5b0      	push	{r4, r5, r7, lr}
 801d836:	b08a      	sub	sp, #40	; 0x28
 801d838:	af00      	add	r7, sp, #0
 801d83a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d106      	bne.n	801d850 <tcp_output+0x1c>
 801d842:	4ba0      	ldr	r3, [pc, #640]	; (801dac4 <tcp_output+0x290>)
 801d844:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801d848:	499f      	ldr	r1, [pc, #636]	; (801dac8 <tcp_output+0x294>)
 801d84a:	48a0      	ldr	r0, [pc, #640]	; (801dacc <tcp_output+0x298>)
 801d84c:	f006 ffa8 	bl	80247a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	7d1b      	ldrb	r3, [r3, #20]
 801d854:	2b01      	cmp	r3, #1
 801d856:	d106      	bne.n	801d866 <tcp_output+0x32>
 801d858:	4b9a      	ldr	r3, [pc, #616]	; (801dac4 <tcp_output+0x290>)
 801d85a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801d85e:	499c      	ldr	r1, [pc, #624]	; (801dad0 <tcp_output+0x29c>)
 801d860:	489a      	ldr	r0, [pc, #616]	; (801dacc <tcp_output+0x298>)
 801d862:	f006 ff9d 	bl	80247a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801d866:	4b9b      	ldr	r3, [pc, #620]	; (801dad4 <tcp_output+0x2a0>)
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	687a      	ldr	r2, [r7, #4]
 801d86c:	429a      	cmp	r2, r3
 801d86e:	d101      	bne.n	801d874 <tcp_output+0x40>
    return ERR_OK;
 801d870:	2300      	movs	r3, #0
 801d872:	e1d2      	b.n	801dc1a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d880:	429a      	cmp	r2, r3
 801d882:	d203      	bcs.n	801d88c <tcp_output+0x58>
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d88a:	e002      	b.n	801d892 <tcp_output+0x5e>
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d892:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d898:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d10b      	bne.n	801d8b8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	8b5b      	ldrh	r3, [r3, #26]
 801d8a4:	f003 0302 	and.w	r3, r3, #2
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	f000 81a9 	beq.w	801dc00 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801d8ae:	6878      	ldr	r0, [r7, #4]
 801d8b0:	f000 fdd8 	bl	801e464 <tcp_send_empty_ack>
 801d8b4:	4603      	mov	r3, r0
 801d8b6:	e1b0      	b.n	801dc1a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801d8b8:	6879      	ldr	r1, [r7, #4]
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	3304      	adds	r3, #4
 801d8be:	461a      	mov	r2, r3
 801d8c0:	6878      	ldr	r0, [r7, #4]
 801d8c2:	f7ff f81d 	bl	801c900 <tcp_route>
 801d8c6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801d8c8:	697b      	ldr	r3, [r7, #20]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d102      	bne.n	801d8d4 <tcp_output+0xa0>
    return ERR_RTE;
 801d8ce:	f06f 0303 	mvn.w	r3, #3
 801d8d2:	e1a2      	b.n	801dc1a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d003      	beq.n	801d8e2 <tcp_output+0xae>
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	d111      	bne.n	801d906 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d002      	beq.n	801d8ee <tcp_output+0xba>
 801d8e8:	697b      	ldr	r3, [r7, #20]
 801d8ea:	3304      	adds	r3, #4
 801d8ec:	e000      	b.n	801d8f0 <tcp_output+0xbc>
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801d8f2:	693b      	ldr	r3, [r7, #16]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d102      	bne.n	801d8fe <tcp_output+0xca>
      return ERR_RTE;
 801d8f8:	f06f 0303 	mvn.w	r3, #3
 801d8fc:	e18d      	b.n	801dc1a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d8fe:	693b      	ldr	r3, [r7, #16]
 801d900:	681a      	ldr	r2, [r3, #0]
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d908:	68db      	ldr	r3, [r3, #12]
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	4618      	mov	r0, r3
 801d90e:	f7f9 f830 	bl	8016972 <lwip_htonl>
 801d912:	4602      	mov	r2, r0
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d918:	1ad3      	subs	r3, r2, r3
 801d91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d91c:	8912      	ldrh	r2, [r2, #8]
 801d91e:	4413      	add	r3, r2
 801d920:	69ba      	ldr	r2, [r7, #24]
 801d922:	429a      	cmp	r2, r3
 801d924:	d227      	bcs.n	801d976 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d92c:	461a      	mov	r2, r3
 801d92e:	69bb      	ldr	r3, [r7, #24]
 801d930:	4293      	cmp	r3, r2
 801d932:	d114      	bne.n	801d95e <tcp_output+0x12a>
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d110      	bne.n	801d95e <tcp_output+0x12a>
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d942:	2b00      	cmp	r3, #0
 801d944:	d10b      	bne.n	801d95e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	2200      	movs	r2, #0
 801d94a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	2201      	movs	r2, #1
 801d952:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	2200      	movs	r2, #0
 801d95a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	8b5b      	ldrh	r3, [r3, #26]
 801d962:	f003 0302 	and.w	r3, r3, #2
 801d966:	2b00      	cmp	r3, #0
 801d968:	f000 814c 	beq.w	801dc04 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f000 fd79 	bl	801e464 <tcp_send_empty_ack>
 801d972:	4603      	mov	r3, r0
 801d974:	e151      	b.n	801dc1a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	2200      	movs	r2, #0
 801d97a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d982:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801d984:	6a3b      	ldr	r3, [r7, #32]
 801d986:	2b00      	cmp	r3, #0
 801d988:	f000 811b 	beq.w	801dbc2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801d98c:	e002      	b.n	801d994 <tcp_output+0x160>
 801d98e:	6a3b      	ldr	r3, [r7, #32]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	623b      	str	r3, [r7, #32]
 801d994:	6a3b      	ldr	r3, [r7, #32]
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d1f8      	bne.n	801d98e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801d99c:	e111      	b.n	801dbc2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9a0:	68db      	ldr	r3, [r3, #12]
 801d9a2:	899b      	ldrh	r3, [r3, #12]
 801d9a4:	b29b      	uxth	r3, r3
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	f7f8 ffce 	bl	8016948 <lwip_htons>
 801d9ac:	4603      	mov	r3, r0
 801d9ae:	b2db      	uxtb	r3, r3
 801d9b0:	f003 0304 	and.w	r3, r3, #4
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d006      	beq.n	801d9c6 <tcp_output+0x192>
 801d9b8:	4b42      	ldr	r3, [pc, #264]	; (801dac4 <tcp_output+0x290>)
 801d9ba:	f240 5237 	movw	r2, #1335	; 0x537
 801d9be:	4946      	ldr	r1, [pc, #280]	; (801dad8 <tcp_output+0x2a4>)
 801d9c0:	4842      	ldr	r0, [pc, #264]	; (801dacc <tcp_output+0x298>)
 801d9c2:	f006 feed 	bl	80247a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d01f      	beq.n	801da0e <tcp_output+0x1da>
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	8b5b      	ldrh	r3, [r3, #26]
 801d9d2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d119      	bne.n	801da0e <tcp_output+0x1da>
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d00b      	beq.n	801d9fa <tcp_output+0x1c6>
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d110      	bne.n	801da0e <tcp_output+0x1da>
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d9f0:	891a      	ldrh	r2, [r3, #8]
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d9f6:	429a      	cmp	r2, r3
 801d9f8:	d209      	bcs.n	801da0e <tcp_output+0x1da>
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801da00:	2b00      	cmp	r3, #0
 801da02:	d004      	beq.n	801da0e <tcp_output+0x1da>
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801da0a:	2b08      	cmp	r3, #8
 801da0c:	d901      	bls.n	801da12 <tcp_output+0x1de>
 801da0e:	2301      	movs	r3, #1
 801da10:	e000      	b.n	801da14 <tcp_output+0x1e0>
 801da12:	2300      	movs	r3, #0
 801da14:	2b00      	cmp	r3, #0
 801da16:	d106      	bne.n	801da26 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	8b5b      	ldrh	r3, [r3, #26]
 801da1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801da20:	2b00      	cmp	r3, #0
 801da22:	f000 80e3 	beq.w	801dbec <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	7d1b      	ldrb	r3, [r3, #20]
 801da2a:	2b02      	cmp	r3, #2
 801da2c:	d00d      	beq.n	801da4a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da30:	68db      	ldr	r3, [r3, #12]
 801da32:	899b      	ldrh	r3, [r3, #12]
 801da34:	b29c      	uxth	r4, r3
 801da36:	2010      	movs	r0, #16
 801da38:	f7f8 ff86 	bl	8016948 <lwip_htons>
 801da3c:	4603      	mov	r3, r0
 801da3e:	461a      	mov	r2, r3
 801da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da42:	68db      	ldr	r3, [r3, #12]
 801da44:	4322      	orrs	r2, r4
 801da46:	b292      	uxth	r2, r2
 801da48:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801da4a:	697a      	ldr	r2, [r7, #20]
 801da4c:	6879      	ldr	r1, [r7, #4]
 801da4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da50:	f000 f908 	bl	801dc64 <tcp_output_segment>
 801da54:	4603      	mov	r3, r0
 801da56:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801da58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d009      	beq.n	801da74 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	8b5b      	ldrh	r3, [r3, #26]
 801da64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da68:	b29a      	uxth	r2, r3
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	835a      	strh	r2, [r3, #26]
      return err;
 801da6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da72:	e0d2      	b.n	801dc1a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da76:	681a      	ldr	r2, [r3, #0]
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	7d1b      	ldrb	r3, [r3, #20]
 801da80:	2b02      	cmp	r3, #2
 801da82:	d006      	beq.n	801da92 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	8b5b      	ldrh	r3, [r3, #26]
 801da88:	f023 0303 	bic.w	r3, r3, #3
 801da8c:	b29a      	uxth	r2, r3
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da94:	68db      	ldr	r3, [r3, #12]
 801da96:	685b      	ldr	r3, [r3, #4]
 801da98:	4618      	mov	r0, r3
 801da9a:	f7f8 ff6a 	bl	8016972 <lwip_htonl>
 801da9e:	4604      	mov	r4, r0
 801daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daa2:	891b      	ldrh	r3, [r3, #8]
 801daa4:	461d      	mov	r5, r3
 801daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daa8:	68db      	ldr	r3, [r3, #12]
 801daaa:	899b      	ldrh	r3, [r3, #12]
 801daac:	b29b      	uxth	r3, r3
 801daae:	4618      	mov	r0, r3
 801dab0:	f7f8 ff4a 	bl	8016948 <lwip_htons>
 801dab4:	4603      	mov	r3, r0
 801dab6:	b2db      	uxtb	r3, r3
 801dab8:	f003 0303 	and.w	r3, r3, #3
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d00d      	beq.n	801dadc <tcp_output+0x2a8>
 801dac0:	2301      	movs	r3, #1
 801dac2:	e00c      	b.n	801dade <tcp_output+0x2aa>
 801dac4:	08027764 	.word	0x08027764
 801dac8:	08027ca8 	.word	0x08027ca8
 801dacc:	080277b8 	.word	0x080277b8
 801dad0:	08027cc0 	.word	0x08027cc0
 801dad4:	200103d4 	.word	0x200103d4
 801dad8:	08027ce8 	.word	0x08027ce8
 801dadc:	2300      	movs	r3, #0
 801dade:	442b      	add	r3, r5
 801dae0:	4423      	add	r3, r4
 801dae2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dae8:	68bb      	ldr	r3, [r7, #8]
 801daea:	1ad3      	subs	r3, r2, r3
 801daec:	2b00      	cmp	r3, #0
 801daee:	da02      	bge.n	801daf6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	68ba      	ldr	r2, [r7, #8]
 801daf4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf8:	891b      	ldrh	r3, [r3, #8]
 801dafa:	461c      	mov	r4, r3
 801dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dafe:	68db      	ldr	r3, [r3, #12]
 801db00:	899b      	ldrh	r3, [r3, #12]
 801db02:	b29b      	uxth	r3, r3
 801db04:	4618      	mov	r0, r3
 801db06:	f7f8 ff1f 	bl	8016948 <lwip_htons>
 801db0a:	4603      	mov	r3, r0
 801db0c:	b2db      	uxtb	r3, r3
 801db0e:	f003 0303 	and.w	r3, r3, #3
 801db12:	2b00      	cmp	r3, #0
 801db14:	d001      	beq.n	801db1a <tcp_output+0x2e6>
 801db16:	2301      	movs	r3, #1
 801db18:	e000      	b.n	801db1c <tcp_output+0x2e8>
 801db1a:	2300      	movs	r3, #0
 801db1c:	4423      	add	r3, r4
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d049      	beq.n	801dbb6 <tcp_output+0x382>
      seg->next = NULL;
 801db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db24:	2200      	movs	r2, #0
 801db26:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	d105      	bne.n	801db3c <tcp_output+0x308>
        pcb->unacked = seg;
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801db34:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db38:	623b      	str	r3, [r7, #32]
 801db3a:	e03f      	b.n	801dbbc <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db3e:	68db      	ldr	r3, [r3, #12]
 801db40:	685b      	ldr	r3, [r3, #4]
 801db42:	4618      	mov	r0, r3
 801db44:	f7f8 ff15 	bl	8016972 <lwip_htonl>
 801db48:	4604      	mov	r4, r0
 801db4a:	6a3b      	ldr	r3, [r7, #32]
 801db4c:	68db      	ldr	r3, [r3, #12]
 801db4e:	685b      	ldr	r3, [r3, #4]
 801db50:	4618      	mov	r0, r3
 801db52:	f7f8 ff0e 	bl	8016972 <lwip_htonl>
 801db56:	4603      	mov	r3, r0
 801db58:	1ae3      	subs	r3, r4, r3
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	da24      	bge.n	801dba8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	3370      	adds	r3, #112	; 0x70
 801db62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801db64:	e002      	b.n	801db6c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801db66:	69fb      	ldr	r3, [r7, #28]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801db6c:	69fb      	ldr	r3, [r7, #28]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d011      	beq.n	801db98 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801db74:	69fb      	ldr	r3, [r7, #28]
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	68db      	ldr	r3, [r3, #12]
 801db7a:	685b      	ldr	r3, [r3, #4]
 801db7c:	4618      	mov	r0, r3
 801db7e:	f7f8 fef8 	bl	8016972 <lwip_htonl>
 801db82:	4604      	mov	r4, r0
 801db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db86:	68db      	ldr	r3, [r3, #12]
 801db88:	685b      	ldr	r3, [r3, #4]
 801db8a:	4618      	mov	r0, r3
 801db8c:	f7f8 fef1 	bl	8016972 <lwip_htonl>
 801db90:	4603      	mov	r3, r0
 801db92:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801db94:	2b00      	cmp	r3, #0
 801db96:	dbe6      	blt.n	801db66 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801db98:	69fb      	ldr	r3, [r7, #28]
 801db9a:	681a      	ldr	r2, [r3, #0]
 801db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db9e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801dba0:	69fb      	ldr	r3, [r7, #28]
 801dba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dba4:	601a      	str	r2, [r3, #0]
 801dba6:	e009      	b.n	801dbbc <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801dba8:	6a3b      	ldr	r3, [r7, #32]
 801dbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801dbae:	6a3b      	ldr	r3, [r7, #32]
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	623b      	str	r3, [r7, #32]
 801dbb4:	e002      	b.n	801dbbc <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801dbb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dbb8:	f7fb ff1a 	bl	80199f0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dbc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d012      	beq.n	801dbee <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbca:	68db      	ldr	r3, [r3, #12]
 801dbcc:	685b      	ldr	r3, [r3, #4]
 801dbce:	4618      	mov	r0, r3
 801dbd0:	f7f8 fecf 	bl	8016972 <lwip_htonl>
 801dbd4:	4602      	mov	r2, r0
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dbda:	1ad3      	subs	r3, r2, r3
 801dbdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbde:	8912      	ldrh	r2, [r2, #8]
 801dbe0:	4413      	add	r3, r2
  while (seg != NULL &&
 801dbe2:	69ba      	ldr	r2, [r7, #24]
 801dbe4:	429a      	cmp	r2, r3
 801dbe6:	f4bf aeda 	bcs.w	801d99e <tcp_output+0x16a>
 801dbea:	e000      	b.n	801dbee <tcp_output+0x3ba>
      break;
 801dbec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d108      	bne.n	801dc08 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801dbfe:	e004      	b.n	801dc0a <tcp_output+0x3d6>
    goto output_done;
 801dc00:	bf00      	nop
 801dc02:	e002      	b.n	801dc0a <tcp_output+0x3d6>
    goto output_done;
 801dc04:	bf00      	nop
 801dc06:	e000      	b.n	801dc0a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801dc08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	8b5b      	ldrh	r3, [r3, #26]
 801dc0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dc12:	b29a      	uxth	r2, r3
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801dc18:	2300      	movs	r3, #0
}
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	3728      	adds	r7, #40	; 0x28
 801dc1e:	46bd      	mov	sp, r7
 801dc20:	bdb0      	pop	{r4, r5, r7, pc}
 801dc22:	bf00      	nop

0801dc24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801dc24:	b580      	push	{r7, lr}
 801dc26:	b082      	sub	sp, #8
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d106      	bne.n	801dc40 <tcp_output_segment_busy+0x1c>
 801dc32:	4b09      	ldr	r3, [pc, #36]	; (801dc58 <tcp_output_segment_busy+0x34>)
 801dc34:	f240 529a 	movw	r2, #1434	; 0x59a
 801dc38:	4908      	ldr	r1, [pc, #32]	; (801dc5c <tcp_output_segment_busy+0x38>)
 801dc3a:	4809      	ldr	r0, [pc, #36]	; (801dc60 <tcp_output_segment_busy+0x3c>)
 801dc3c:	f006 fdb0 	bl	80247a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	685b      	ldr	r3, [r3, #4]
 801dc44:	7b9b      	ldrb	r3, [r3, #14]
 801dc46:	2b01      	cmp	r3, #1
 801dc48:	d001      	beq.n	801dc4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801dc4a:	2301      	movs	r3, #1
 801dc4c:	e000      	b.n	801dc50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801dc4e:	2300      	movs	r3, #0
}
 801dc50:	4618      	mov	r0, r3
 801dc52:	3708      	adds	r7, #8
 801dc54:	46bd      	mov	sp, r7
 801dc56:	bd80      	pop	{r7, pc}
 801dc58:	08027764 	.word	0x08027764
 801dc5c:	08027d00 	.word	0x08027d00
 801dc60:	080277b8 	.word	0x080277b8

0801dc64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801dc64:	b5b0      	push	{r4, r5, r7, lr}
 801dc66:	b08c      	sub	sp, #48	; 0x30
 801dc68:	af04      	add	r7, sp, #16
 801dc6a:	60f8      	str	r0, [r7, #12]
 801dc6c:	60b9      	str	r1, [r7, #8]
 801dc6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d106      	bne.n	801dc84 <tcp_output_segment+0x20>
 801dc76:	4b64      	ldr	r3, [pc, #400]	; (801de08 <tcp_output_segment+0x1a4>)
 801dc78:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801dc7c:	4963      	ldr	r1, [pc, #396]	; (801de0c <tcp_output_segment+0x1a8>)
 801dc7e:	4864      	ldr	r0, [pc, #400]	; (801de10 <tcp_output_segment+0x1ac>)
 801dc80:	f006 fd8e 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801dc84:	68bb      	ldr	r3, [r7, #8]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d106      	bne.n	801dc98 <tcp_output_segment+0x34>
 801dc8a:	4b5f      	ldr	r3, [pc, #380]	; (801de08 <tcp_output_segment+0x1a4>)
 801dc8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801dc90:	4960      	ldr	r1, [pc, #384]	; (801de14 <tcp_output_segment+0x1b0>)
 801dc92:	485f      	ldr	r0, [pc, #380]	; (801de10 <tcp_output_segment+0x1ac>)
 801dc94:	f006 fd84 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d106      	bne.n	801dcac <tcp_output_segment+0x48>
 801dc9e:	4b5a      	ldr	r3, [pc, #360]	; (801de08 <tcp_output_segment+0x1a4>)
 801dca0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801dca4:	495c      	ldr	r1, [pc, #368]	; (801de18 <tcp_output_segment+0x1b4>)
 801dca6:	485a      	ldr	r0, [pc, #360]	; (801de10 <tcp_output_segment+0x1ac>)
 801dca8:	f006 fd7a 	bl	80247a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801dcac:	68f8      	ldr	r0, [r7, #12]
 801dcae:	f7ff ffb9 	bl	801dc24 <tcp_output_segment_busy>
 801dcb2:	4603      	mov	r3, r0
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d001      	beq.n	801dcbc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801dcb8:	2300      	movs	r3, #0
 801dcba:	e0a0      	b.n	801ddfe <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801dcbc:	68bb      	ldr	r3, [r7, #8]
 801dcbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	68dc      	ldr	r4, [r3, #12]
 801dcc4:	4610      	mov	r0, r2
 801dcc6:	f7f8 fe54 	bl	8016972 <lwip_htonl>
 801dcca:	4603      	mov	r3, r0
 801dccc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801dcce:	68bb      	ldr	r3, [r7, #8]
 801dcd0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	68dc      	ldr	r4, [r3, #12]
 801dcd6:	4610      	mov	r0, r2
 801dcd8:	f7f8 fe36 	bl	8016948 <lwip_htons>
 801dcdc:	4603      	mov	r3, r0
 801dcde:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801dce0:	68bb      	ldr	r3, [r7, #8]
 801dce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dce4:	68ba      	ldr	r2, [r7, #8]
 801dce6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801dce8:	441a      	add	r2, r3
 801dcea:	68bb      	ldr	r3, [r7, #8]
 801dcec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	68db      	ldr	r3, [r3, #12]
 801dcf2:	3314      	adds	r3, #20
 801dcf4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	7a9b      	ldrb	r3, [r3, #10]
 801dcfa:	f003 0301 	and.w	r3, r3, #1
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d015      	beq.n	801dd2e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801dd02:	68bb      	ldr	r3, [r7, #8]
 801dd04:	3304      	adds	r3, #4
 801dd06:	461a      	mov	r2, r3
 801dd08:	6879      	ldr	r1, [r7, #4]
 801dd0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801dd0e:	f7fc fa33 	bl	801a178 <tcp_eff_send_mss_netif>
 801dd12:	4603      	mov	r3, r0
 801dd14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801dd16:	8b7b      	ldrh	r3, [r7, #26]
 801dd18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	f7f8 fe28 	bl	8016972 <lwip_htonl>
 801dd22:	4602      	mov	r2, r0
 801dd24:	69fb      	ldr	r3, [r7, #28]
 801dd26:	601a      	str	r2, [r3, #0]
    opts += 1;
 801dd28:	69fb      	ldr	r3, [r7, #28]
 801dd2a:	3304      	adds	r3, #4
 801dd2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801dd2e:	68bb      	ldr	r3, [r7, #8]
 801dd30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	da02      	bge.n	801dd3e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801dd38:	68bb      	ldr	r3, [r7, #8]
 801dd3a:	2200      	movs	r2, #0
 801dd3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801dd3e:	68bb      	ldr	r3, [r7, #8]
 801dd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d10c      	bne.n	801dd60 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801dd46:	4b35      	ldr	r3, [pc, #212]	; (801de1c <tcp_output_segment+0x1b8>)
 801dd48:	681a      	ldr	r2, [r3, #0]
 801dd4a:	68bb      	ldr	r3, [r7, #8]
 801dd4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801dd4e:	68fb      	ldr	r3, [r7, #12]
 801dd50:	68db      	ldr	r3, [r3, #12]
 801dd52:	685b      	ldr	r3, [r3, #4]
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7f8 fe0c 	bl	8016972 <lwip_htonl>
 801dd5a:	4602      	mov	r2, r0
 801dd5c:	68bb      	ldr	r3, [r7, #8]
 801dd5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	68db      	ldr	r3, [r3, #12]
 801dd64:	461a      	mov	r2, r3
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	685b      	ldr	r3, [r3, #4]
 801dd6a:	685b      	ldr	r3, [r3, #4]
 801dd6c:	1ad3      	subs	r3, r2, r3
 801dd6e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	685b      	ldr	r3, [r3, #4]
 801dd74:	8959      	ldrh	r1, [r3, #10]
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	685b      	ldr	r3, [r3, #4]
 801dd7a:	8b3a      	ldrh	r2, [r7, #24]
 801dd7c:	1a8a      	subs	r2, r1, r2
 801dd7e:	b292      	uxth	r2, r2
 801dd80:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	685b      	ldr	r3, [r3, #4]
 801dd86:	8919      	ldrh	r1, [r3, #8]
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	685b      	ldr	r3, [r3, #4]
 801dd8c:	8b3a      	ldrh	r2, [r7, #24]
 801dd8e:	1a8a      	subs	r2, r1, r2
 801dd90:	b292      	uxth	r2, r2
 801dd92:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	685b      	ldr	r3, [r3, #4]
 801dd98:	68fa      	ldr	r2, [r7, #12]
 801dd9a:	68d2      	ldr	r2, [r2, #12]
 801dd9c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	68db      	ldr	r3, [r3, #12]
 801dda2:	2200      	movs	r2, #0
 801dda4:	741a      	strb	r2, [r3, #16]
 801dda6:	2200      	movs	r2, #0
 801dda8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	68db      	ldr	r3, [r3, #12]
 801ddae:	f103 0214 	add.w	r2, r3, #20
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	7a9b      	ldrb	r3, [r3, #10]
 801ddb6:	009b      	lsls	r3, r3, #2
 801ddb8:	f003 0304 	and.w	r3, r3, #4
 801ddbc:	4413      	add	r3, r2
 801ddbe:	69fa      	ldr	r2, [r7, #28]
 801ddc0:	429a      	cmp	r2, r3
 801ddc2:	d006      	beq.n	801ddd2 <tcp_output_segment+0x16e>
 801ddc4:	4b10      	ldr	r3, [pc, #64]	; (801de08 <tcp_output_segment+0x1a4>)
 801ddc6:	f240 621c 	movw	r2, #1564	; 0x61c
 801ddca:	4915      	ldr	r1, [pc, #84]	; (801de20 <tcp_output_segment+0x1bc>)
 801ddcc:	4810      	ldr	r0, [pc, #64]	; (801de10 <tcp_output_segment+0x1ac>)
 801ddce:	f006 fce7 	bl	80247a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	6858      	ldr	r0, [r3, #4]
 801ddd6:	68b9      	ldr	r1, [r7, #8]
 801ddd8:	68bb      	ldr	r3, [r7, #8]
 801ddda:	1d1c      	adds	r4, r3, #4
 801dddc:	68bb      	ldr	r3, [r7, #8]
 801ddde:	7add      	ldrb	r5, [r3, #11]
 801dde0:	68bb      	ldr	r3, [r7, #8]
 801dde2:	7a9b      	ldrb	r3, [r3, #10]
 801dde4:	687a      	ldr	r2, [r7, #4]
 801dde6:	9202      	str	r2, [sp, #8]
 801dde8:	2206      	movs	r2, #6
 801ddea:	9201      	str	r2, [sp, #4]
 801ddec:	9300      	str	r3, [sp, #0]
 801ddee:	462b      	mov	r3, r5
 801ddf0:	4622      	mov	r2, r4
 801ddf2:	f004 fc43 	bl	802267c <ip4_output_if>
 801ddf6:	4603      	mov	r3, r0
 801ddf8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ddfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ddfe:	4618      	mov	r0, r3
 801de00:	3720      	adds	r7, #32
 801de02:	46bd      	mov	sp, r7
 801de04:	bdb0      	pop	{r4, r5, r7, pc}
 801de06:	bf00      	nop
 801de08:	08027764 	.word	0x08027764
 801de0c:	08027d28 	.word	0x08027d28
 801de10:	080277b8 	.word	0x080277b8
 801de14:	08027d48 	.word	0x08027d48
 801de18:	08027d68 	.word	0x08027d68
 801de1c:	200103c4 	.word	0x200103c4
 801de20:	08027d8c 	.word	0x08027d8c

0801de24 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801de24:	b5b0      	push	{r4, r5, r7, lr}
 801de26:	b084      	sub	sp, #16
 801de28:	af00      	add	r7, sp, #0
 801de2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d106      	bne.n	801de40 <tcp_rexmit_rto_prepare+0x1c>
 801de32:	4b31      	ldr	r3, [pc, #196]	; (801def8 <tcp_rexmit_rto_prepare+0xd4>)
 801de34:	f240 6263 	movw	r2, #1635	; 0x663
 801de38:	4930      	ldr	r1, [pc, #192]	; (801defc <tcp_rexmit_rto_prepare+0xd8>)
 801de3a:	4831      	ldr	r0, [pc, #196]	; (801df00 <tcp_rexmit_rto_prepare+0xdc>)
 801de3c:	f006 fcb0 	bl	80247a0 <iprintf>

  if (pcb->unacked == NULL) {
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de44:	2b00      	cmp	r3, #0
 801de46:	d102      	bne.n	801de4e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801de48:	f06f 0305 	mvn.w	r3, #5
 801de4c:	e050      	b.n	801def0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de52:	60fb      	str	r3, [r7, #12]
 801de54:	e00b      	b.n	801de6e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801de56:	68f8      	ldr	r0, [r7, #12]
 801de58:	f7ff fee4 	bl	801dc24 <tcp_output_segment_busy>
 801de5c:	4603      	mov	r3, r0
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d002      	beq.n	801de68 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801de62:	f06f 0305 	mvn.w	r3, #5
 801de66:	e043      	b.n	801def0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	60fb      	str	r3, [r7, #12]
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	2b00      	cmp	r3, #0
 801de74:	d1ef      	bne.n	801de56 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801de76:	68f8      	ldr	r0, [r7, #12]
 801de78:	f7ff fed4 	bl	801dc24 <tcp_output_segment_busy>
 801de7c:	4603      	mov	r3, r0
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d002      	beq.n	801de88 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801de82:	f06f 0305 	mvn.w	r3, #5
 801de86:	e033      	b.n	801def0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	2200      	movs	r2, #0
 801de9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	8b5b      	ldrh	r3, [r3, #26]
 801dea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801dea6:	b29a      	uxth	r2, r3
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	68db      	ldr	r3, [r3, #12]
 801deb0:	685b      	ldr	r3, [r3, #4]
 801deb2:	4618      	mov	r0, r3
 801deb4:	f7f8 fd5d 	bl	8016972 <lwip_htonl>
 801deb8:	4604      	mov	r4, r0
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	891b      	ldrh	r3, [r3, #8]
 801debe:	461d      	mov	r5, r3
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	68db      	ldr	r3, [r3, #12]
 801dec4:	899b      	ldrh	r3, [r3, #12]
 801dec6:	b29b      	uxth	r3, r3
 801dec8:	4618      	mov	r0, r3
 801deca:	f7f8 fd3d 	bl	8016948 <lwip_htons>
 801dece:	4603      	mov	r3, r0
 801ded0:	b2db      	uxtb	r3, r3
 801ded2:	f003 0303 	and.w	r3, r3, #3
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d001      	beq.n	801dede <tcp_rexmit_rto_prepare+0xba>
 801deda:	2301      	movs	r3, #1
 801dedc:	e000      	b.n	801dee0 <tcp_rexmit_rto_prepare+0xbc>
 801dede:	2300      	movs	r3, #0
 801dee0:	442b      	add	r3, r5
 801dee2:	18e2      	adds	r2, r4, r3
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	2200      	movs	r2, #0
 801deec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801deee:	2300      	movs	r3, #0
}
 801def0:	4618      	mov	r0, r3
 801def2:	3710      	adds	r7, #16
 801def4:	46bd      	mov	sp, r7
 801def6:	bdb0      	pop	{r4, r5, r7, pc}
 801def8:	08027764 	.word	0x08027764
 801defc:	08027da0 	.word	0x08027da0
 801df00:	080277b8 	.word	0x080277b8

0801df04 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801df04:	b580      	push	{r7, lr}
 801df06:	b082      	sub	sp, #8
 801df08:	af00      	add	r7, sp, #0
 801df0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d106      	bne.n	801df20 <tcp_rexmit_rto_commit+0x1c>
 801df12:	4b0d      	ldr	r3, [pc, #52]	; (801df48 <tcp_rexmit_rto_commit+0x44>)
 801df14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801df18:	490c      	ldr	r1, [pc, #48]	; (801df4c <tcp_rexmit_rto_commit+0x48>)
 801df1a:	480d      	ldr	r0, [pc, #52]	; (801df50 <tcp_rexmit_rto_commit+0x4c>)
 801df1c:	f006 fc40 	bl	80247a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801df26:	2bff      	cmp	r3, #255	; 0xff
 801df28:	d007      	beq.n	801df3a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801df30:	3301      	adds	r3, #1
 801df32:	b2da      	uxtb	r2, r3
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801df3a:	6878      	ldr	r0, [r7, #4]
 801df3c:	f7ff fc7a 	bl	801d834 <tcp_output>
}
 801df40:	bf00      	nop
 801df42:	3708      	adds	r7, #8
 801df44:	46bd      	mov	sp, r7
 801df46:	bd80      	pop	{r7, pc}
 801df48:	08027764 	.word	0x08027764
 801df4c:	08027dc4 	.word	0x08027dc4
 801df50:	080277b8 	.word	0x080277b8

0801df54 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801df54:	b580      	push	{r7, lr}
 801df56:	b082      	sub	sp, #8
 801df58:	af00      	add	r7, sp, #0
 801df5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d106      	bne.n	801df70 <tcp_rexmit_rto+0x1c>
 801df62:	4b0a      	ldr	r3, [pc, #40]	; (801df8c <tcp_rexmit_rto+0x38>)
 801df64:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801df68:	4909      	ldr	r1, [pc, #36]	; (801df90 <tcp_rexmit_rto+0x3c>)
 801df6a:	480a      	ldr	r0, [pc, #40]	; (801df94 <tcp_rexmit_rto+0x40>)
 801df6c:	f006 fc18 	bl	80247a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801df70:	6878      	ldr	r0, [r7, #4]
 801df72:	f7ff ff57 	bl	801de24 <tcp_rexmit_rto_prepare>
 801df76:	4603      	mov	r3, r0
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d102      	bne.n	801df82 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801df7c:	6878      	ldr	r0, [r7, #4]
 801df7e:	f7ff ffc1 	bl	801df04 <tcp_rexmit_rto_commit>
  }
}
 801df82:	bf00      	nop
 801df84:	3708      	adds	r7, #8
 801df86:	46bd      	mov	sp, r7
 801df88:	bd80      	pop	{r7, pc}
 801df8a:	bf00      	nop
 801df8c:	08027764 	.word	0x08027764
 801df90:	08027de8 	.word	0x08027de8
 801df94:	080277b8 	.word	0x080277b8

0801df98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801df98:	b590      	push	{r4, r7, lr}
 801df9a:	b085      	sub	sp, #20
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d106      	bne.n	801dfb4 <tcp_rexmit+0x1c>
 801dfa6:	4b2f      	ldr	r3, [pc, #188]	; (801e064 <tcp_rexmit+0xcc>)
 801dfa8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801dfac:	492e      	ldr	r1, [pc, #184]	; (801e068 <tcp_rexmit+0xd0>)
 801dfae:	482f      	ldr	r0, [pc, #188]	; (801e06c <tcp_rexmit+0xd4>)
 801dfb0:	f006 fbf6 	bl	80247a0 <iprintf>

  if (pcb->unacked == NULL) {
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d102      	bne.n	801dfc2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801dfbc:	f06f 0305 	mvn.w	r3, #5
 801dfc0:	e04c      	b.n	801e05c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dfc6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801dfc8:	68b8      	ldr	r0, [r7, #8]
 801dfca:	f7ff fe2b 	bl	801dc24 <tcp_output_segment_busy>
 801dfce:	4603      	mov	r3, r0
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d002      	beq.n	801dfda <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801dfd4:	f06f 0305 	mvn.w	r3, #5
 801dfd8:	e040      	b.n	801e05c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801dfda:	68bb      	ldr	r3, [r7, #8]
 801dfdc:	681a      	ldr	r2, [r3, #0]
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	336c      	adds	r3, #108	; 0x6c
 801dfe6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801dfe8:	e002      	b.n	801dff0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d011      	beq.n	801e01c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	68db      	ldr	r3, [r3, #12]
 801dffe:	685b      	ldr	r3, [r3, #4]
 801e000:	4618      	mov	r0, r3
 801e002:	f7f8 fcb6 	bl	8016972 <lwip_htonl>
 801e006:	4604      	mov	r4, r0
 801e008:	68bb      	ldr	r3, [r7, #8]
 801e00a:	68db      	ldr	r3, [r3, #12]
 801e00c:	685b      	ldr	r3, [r3, #4]
 801e00e:	4618      	mov	r0, r3
 801e010:	f7f8 fcaf 	bl	8016972 <lwip_htonl>
 801e014:	4603      	mov	r3, r0
 801e016:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801e018:	2b00      	cmp	r3, #0
 801e01a:	dbe6      	blt.n	801dfea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	681a      	ldr	r2, [r3, #0]
 801e020:	68bb      	ldr	r3, [r7, #8]
 801e022:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	68ba      	ldr	r2, [r7, #8]
 801e028:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801e02a:	68bb      	ldr	r3, [r7, #8]
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d103      	bne.n	801e03a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	2200      	movs	r2, #0
 801e036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e040:	2bff      	cmp	r3, #255	; 0xff
 801e042:	d007      	beq.n	801e054 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e04a:	3301      	adds	r3, #1
 801e04c:	b2da      	uxtb	r2, r3
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	2200      	movs	r2, #0
 801e058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801e05a:	2300      	movs	r3, #0
}
 801e05c:	4618      	mov	r0, r3
 801e05e:	3714      	adds	r7, #20
 801e060:	46bd      	mov	sp, r7
 801e062:	bd90      	pop	{r4, r7, pc}
 801e064:	08027764 	.word	0x08027764
 801e068:	08027e04 	.word	0x08027e04
 801e06c:	080277b8 	.word	0x080277b8

0801e070 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801e070:	b580      	push	{r7, lr}
 801e072:	b082      	sub	sp, #8
 801e074:	af00      	add	r7, sp, #0
 801e076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d106      	bne.n	801e08c <tcp_rexmit_fast+0x1c>
 801e07e:	4b2f      	ldr	r3, [pc, #188]	; (801e13c <tcp_rexmit_fast+0xcc>)
 801e080:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e084:	492e      	ldr	r1, [pc, #184]	; (801e140 <tcp_rexmit_fast+0xd0>)
 801e086:	482f      	ldr	r0, [pc, #188]	; (801e144 <tcp_rexmit_fast+0xd4>)
 801e088:	f006 fb8a 	bl	80247a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e090:	2b00      	cmp	r3, #0
 801e092:	d04f      	beq.n	801e134 <tcp_rexmit_fast+0xc4>
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	8b5b      	ldrh	r3, [r3, #26]
 801e098:	f003 0304 	and.w	r3, r3, #4
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d149      	bne.n	801e134 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e0a0:	6878      	ldr	r0, [r7, #4]
 801e0a2:	f7ff ff79 	bl	801df98 <tcp_rexmit>
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d143      	bne.n	801e134 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e0b8:	429a      	cmp	r2, r3
 801e0ba:	d208      	bcs.n	801e0ce <tcp_rexmit_fast+0x5e>
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	da00      	bge.n	801e0c8 <tcp_rexmit_fast+0x58>
 801e0c6:	3301      	adds	r3, #1
 801e0c8:	105b      	asrs	r3, r3, #1
 801e0ca:	b29b      	uxth	r3, r3
 801e0cc:	e007      	b.n	801e0de <tcp_rexmit_fast+0x6e>
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	da00      	bge.n	801e0da <tcp_rexmit_fast+0x6a>
 801e0d8:	3301      	adds	r3, #1
 801e0da:	105b      	asrs	r3, r3, #1
 801e0dc:	b29b      	uxth	r3, r3
 801e0de:	687a      	ldr	r2, [r7, #4]
 801e0e0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801e0ea:	461a      	mov	r2, r3
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e0f0:	005b      	lsls	r3, r3, #1
 801e0f2:	429a      	cmp	r2, r3
 801e0f4:	d206      	bcs.n	801e104 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e0fa:	005b      	lsls	r3, r3, #1
 801e0fc:	b29a      	uxth	r2, r3
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e10e:	4619      	mov	r1, r3
 801e110:	0049      	lsls	r1, r1, #1
 801e112:	440b      	add	r3, r1
 801e114:	b29b      	uxth	r3, r3
 801e116:	4413      	add	r3, r2
 801e118:	b29a      	uxth	r2, r3
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	8b5b      	ldrh	r3, [r3, #26]
 801e124:	f043 0304 	orr.w	r3, r3, #4
 801e128:	b29a      	uxth	r2, r3
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	2200      	movs	r2, #0
 801e132:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801e134:	bf00      	nop
 801e136:	3708      	adds	r7, #8
 801e138:	46bd      	mov	sp, r7
 801e13a:	bd80      	pop	{r7, pc}
 801e13c:	08027764 	.word	0x08027764
 801e140:	08027e1c 	.word	0x08027e1c
 801e144:	080277b8 	.word	0x080277b8

0801e148 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801e148:	b580      	push	{r7, lr}
 801e14a:	b086      	sub	sp, #24
 801e14c:	af00      	add	r7, sp, #0
 801e14e:	60f8      	str	r0, [r7, #12]
 801e150:	607b      	str	r3, [r7, #4]
 801e152:	460b      	mov	r3, r1
 801e154:	817b      	strh	r3, [r7, #10]
 801e156:	4613      	mov	r3, r2
 801e158:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e15a:	897a      	ldrh	r2, [r7, #10]
 801e15c:	893b      	ldrh	r3, [r7, #8]
 801e15e:	4413      	add	r3, r2
 801e160:	b29b      	uxth	r3, r3
 801e162:	3314      	adds	r3, #20
 801e164:	b29b      	uxth	r3, r3
 801e166:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e16a:	4619      	mov	r1, r3
 801e16c:	2022      	movs	r0, #34	; 0x22
 801e16e:	f7f9 fcd9 	bl	8017b24 <pbuf_alloc>
 801e172:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801e174:	697b      	ldr	r3, [r7, #20]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d04e      	beq.n	801e218 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	895b      	ldrh	r3, [r3, #10]
 801e17e:	461a      	mov	r2, r3
 801e180:	897b      	ldrh	r3, [r7, #10]
 801e182:	3314      	adds	r3, #20
 801e184:	429a      	cmp	r2, r3
 801e186:	da06      	bge.n	801e196 <tcp_output_alloc_header_common+0x4e>
 801e188:	4b26      	ldr	r3, [pc, #152]	; (801e224 <tcp_output_alloc_header_common+0xdc>)
 801e18a:	f240 7224 	movw	r2, #1828	; 0x724
 801e18e:	4926      	ldr	r1, [pc, #152]	; (801e228 <tcp_output_alloc_header_common+0xe0>)
 801e190:	4826      	ldr	r0, [pc, #152]	; (801e22c <tcp_output_alloc_header_common+0xe4>)
 801e192:	f006 fb05 	bl	80247a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801e196:	697b      	ldr	r3, [r7, #20]
 801e198:	685b      	ldr	r3, [r3, #4]
 801e19a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801e19c:	8c3b      	ldrh	r3, [r7, #32]
 801e19e:	4618      	mov	r0, r3
 801e1a0:	f7f8 fbd2 	bl	8016948 <lwip_htons>
 801e1a4:	4603      	mov	r3, r0
 801e1a6:	461a      	mov	r2, r3
 801e1a8:	693b      	ldr	r3, [r7, #16]
 801e1aa:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e1ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e1ae:	4618      	mov	r0, r3
 801e1b0:	f7f8 fbca 	bl	8016948 <lwip_htons>
 801e1b4:	4603      	mov	r3, r0
 801e1b6:	461a      	mov	r2, r3
 801e1b8:	693b      	ldr	r3, [r7, #16]
 801e1ba:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801e1bc:	693b      	ldr	r3, [r7, #16]
 801e1be:	687a      	ldr	r2, [r7, #4]
 801e1c0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801e1c2:	68f8      	ldr	r0, [r7, #12]
 801e1c4:	f7f8 fbd5 	bl	8016972 <lwip_htonl>
 801e1c8:	4602      	mov	r2, r0
 801e1ca:	693b      	ldr	r3, [r7, #16]
 801e1cc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e1ce:	897b      	ldrh	r3, [r7, #10]
 801e1d0:	089b      	lsrs	r3, r3, #2
 801e1d2:	b29b      	uxth	r3, r3
 801e1d4:	3305      	adds	r3, #5
 801e1d6:	b29b      	uxth	r3, r3
 801e1d8:	031b      	lsls	r3, r3, #12
 801e1da:	b29a      	uxth	r2, r3
 801e1dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e1e0:	b29b      	uxth	r3, r3
 801e1e2:	4313      	orrs	r3, r2
 801e1e4:	b29b      	uxth	r3, r3
 801e1e6:	4618      	mov	r0, r3
 801e1e8:	f7f8 fbae 	bl	8016948 <lwip_htons>
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	461a      	mov	r2, r3
 801e1f0:	693b      	ldr	r3, [r7, #16]
 801e1f2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e1f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e1f6:	4618      	mov	r0, r3
 801e1f8:	f7f8 fba6 	bl	8016948 <lwip_htons>
 801e1fc:	4603      	mov	r3, r0
 801e1fe:	461a      	mov	r2, r3
 801e200:	693b      	ldr	r3, [r7, #16]
 801e202:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801e204:	693b      	ldr	r3, [r7, #16]
 801e206:	2200      	movs	r2, #0
 801e208:	741a      	strb	r2, [r3, #16]
 801e20a:	2200      	movs	r2, #0
 801e20c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801e20e:	693b      	ldr	r3, [r7, #16]
 801e210:	2200      	movs	r2, #0
 801e212:	749a      	strb	r2, [r3, #18]
 801e214:	2200      	movs	r2, #0
 801e216:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801e218:	697b      	ldr	r3, [r7, #20]
}
 801e21a:	4618      	mov	r0, r3
 801e21c:	3718      	adds	r7, #24
 801e21e:	46bd      	mov	sp, r7
 801e220:	bd80      	pop	{r7, pc}
 801e222:	bf00      	nop
 801e224:	08027764 	.word	0x08027764
 801e228:	08027e3c 	.word	0x08027e3c
 801e22c:	080277b8 	.word	0x080277b8

0801e230 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801e230:	b5b0      	push	{r4, r5, r7, lr}
 801e232:	b08a      	sub	sp, #40	; 0x28
 801e234:	af04      	add	r7, sp, #16
 801e236:	60f8      	str	r0, [r7, #12]
 801e238:	607b      	str	r3, [r7, #4]
 801e23a:	460b      	mov	r3, r1
 801e23c:	817b      	strh	r3, [r7, #10]
 801e23e:	4613      	mov	r3, r2
 801e240:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	2b00      	cmp	r3, #0
 801e246:	d106      	bne.n	801e256 <tcp_output_alloc_header+0x26>
 801e248:	4b15      	ldr	r3, [pc, #84]	; (801e2a0 <tcp_output_alloc_header+0x70>)
 801e24a:	f240 7242 	movw	r2, #1858	; 0x742
 801e24e:	4915      	ldr	r1, [pc, #84]	; (801e2a4 <tcp_output_alloc_header+0x74>)
 801e250:	4815      	ldr	r0, [pc, #84]	; (801e2a8 <tcp_output_alloc_header+0x78>)
 801e252:	f006 faa5 	bl	80247a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	8adb      	ldrh	r3, [r3, #22]
 801e25e:	68fa      	ldr	r2, [r7, #12]
 801e260:	8b12      	ldrh	r2, [r2, #24]
 801e262:	68f9      	ldr	r1, [r7, #12]
 801e264:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801e266:	893d      	ldrh	r5, [r7, #8]
 801e268:	897c      	ldrh	r4, [r7, #10]
 801e26a:	9103      	str	r1, [sp, #12]
 801e26c:	2110      	movs	r1, #16
 801e26e:	9102      	str	r1, [sp, #8]
 801e270:	9201      	str	r2, [sp, #4]
 801e272:	9300      	str	r3, [sp, #0]
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	462a      	mov	r2, r5
 801e278:	4621      	mov	r1, r4
 801e27a:	f7ff ff65 	bl	801e148 <tcp_output_alloc_header_common>
 801e27e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e280:	697b      	ldr	r3, [r7, #20]
 801e282:	2b00      	cmp	r3, #0
 801e284:	d006      	beq.n	801e294 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e28a:	68fa      	ldr	r2, [r7, #12]
 801e28c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e28e:	441a      	add	r2, r3
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801e294:	697b      	ldr	r3, [r7, #20]
}
 801e296:	4618      	mov	r0, r3
 801e298:	3718      	adds	r7, #24
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bdb0      	pop	{r4, r5, r7, pc}
 801e29e:	bf00      	nop
 801e2a0:	08027764 	.word	0x08027764
 801e2a4:	08027e6c 	.word	0x08027e6c
 801e2a8:	080277b8 	.word	0x080277b8

0801e2ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801e2ac:	b580      	push	{r7, lr}
 801e2ae:	b088      	sub	sp, #32
 801e2b0:	af00      	add	r7, sp, #0
 801e2b2:	60f8      	str	r0, [r7, #12]
 801e2b4:	60b9      	str	r1, [r7, #8]
 801e2b6:	4611      	mov	r1, r2
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	460b      	mov	r3, r1
 801e2bc:	71fb      	strb	r3, [r7, #7]
 801e2be:	4613      	mov	r3, r2
 801e2c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801e2c6:	68bb      	ldr	r3, [r7, #8]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d106      	bne.n	801e2da <tcp_output_fill_options+0x2e>
 801e2cc:	4b13      	ldr	r3, [pc, #76]	; (801e31c <tcp_output_fill_options+0x70>)
 801e2ce:	f240 7256 	movw	r2, #1878	; 0x756
 801e2d2:	4913      	ldr	r1, [pc, #76]	; (801e320 <tcp_output_fill_options+0x74>)
 801e2d4:	4813      	ldr	r0, [pc, #76]	; (801e324 <tcp_output_fill_options+0x78>)
 801e2d6:	f006 fa63 	bl	80247a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801e2da:	68bb      	ldr	r3, [r7, #8]
 801e2dc:	685b      	ldr	r3, [r3, #4]
 801e2de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801e2e0:	69bb      	ldr	r3, [r7, #24]
 801e2e2:	3314      	adds	r3, #20
 801e2e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801e2e6:	69bb      	ldr	r3, [r7, #24]
 801e2e8:	f103 0214 	add.w	r2, r3, #20
 801e2ec:	8bfb      	ldrh	r3, [r7, #30]
 801e2ee:	009b      	lsls	r3, r3, #2
 801e2f0:	4619      	mov	r1, r3
 801e2f2:	79fb      	ldrb	r3, [r7, #7]
 801e2f4:	009b      	lsls	r3, r3, #2
 801e2f6:	f003 0304 	and.w	r3, r3, #4
 801e2fa:	440b      	add	r3, r1
 801e2fc:	4413      	add	r3, r2
 801e2fe:	697a      	ldr	r2, [r7, #20]
 801e300:	429a      	cmp	r2, r3
 801e302:	d006      	beq.n	801e312 <tcp_output_fill_options+0x66>
 801e304:	4b05      	ldr	r3, [pc, #20]	; (801e31c <tcp_output_fill_options+0x70>)
 801e306:	f240 7275 	movw	r2, #1909	; 0x775
 801e30a:	4907      	ldr	r1, [pc, #28]	; (801e328 <tcp_output_fill_options+0x7c>)
 801e30c:	4805      	ldr	r0, [pc, #20]	; (801e324 <tcp_output_fill_options+0x78>)
 801e30e:	f006 fa47 	bl	80247a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801e312:	bf00      	nop
 801e314:	3720      	adds	r7, #32
 801e316:	46bd      	mov	sp, r7
 801e318:	bd80      	pop	{r7, pc}
 801e31a:	bf00      	nop
 801e31c:	08027764 	.word	0x08027764
 801e320:	08027e94 	.word	0x08027e94
 801e324:	080277b8 	.word	0x080277b8
 801e328:	08027d8c 	.word	0x08027d8c

0801e32c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e32c:	b580      	push	{r7, lr}
 801e32e:	b08a      	sub	sp, #40	; 0x28
 801e330:	af04      	add	r7, sp, #16
 801e332:	60f8      	str	r0, [r7, #12]
 801e334:	60b9      	str	r1, [r7, #8]
 801e336:	607a      	str	r2, [r7, #4]
 801e338:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e33a:	68bb      	ldr	r3, [r7, #8]
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d106      	bne.n	801e34e <tcp_output_control_segment+0x22>
 801e340:	4b1c      	ldr	r3, [pc, #112]	; (801e3b4 <tcp_output_control_segment+0x88>)
 801e342:	f240 7287 	movw	r2, #1927	; 0x787
 801e346:	491c      	ldr	r1, [pc, #112]	; (801e3b8 <tcp_output_control_segment+0x8c>)
 801e348:	481c      	ldr	r0, [pc, #112]	; (801e3bc <tcp_output_control_segment+0x90>)
 801e34a:	f006 fa29 	bl	80247a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801e34e:	683a      	ldr	r2, [r7, #0]
 801e350:	6879      	ldr	r1, [r7, #4]
 801e352:	68f8      	ldr	r0, [r7, #12]
 801e354:	f7fe fad4 	bl	801c900 <tcp_route>
 801e358:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801e35a:	693b      	ldr	r3, [r7, #16]
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	d102      	bne.n	801e366 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801e360:	23fc      	movs	r3, #252	; 0xfc
 801e362:	75fb      	strb	r3, [r7, #23]
 801e364:	e01c      	b.n	801e3a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d006      	beq.n	801e37a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	7adb      	ldrb	r3, [r3, #11]
 801e370:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	7a9b      	ldrb	r3, [r3, #10]
 801e376:	757b      	strb	r3, [r7, #21]
 801e378:	e003      	b.n	801e382 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801e37a:	23ff      	movs	r3, #255	; 0xff
 801e37c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801e37e:	2300      	movs	r3, #0
 801e380:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e382:	7dba      	ldrb	r2, [r7, #22]
 801e384:	693b      	ldr	r3, [r7, #16]
 801e386:	9302      	str	r3, [sp, #8]
 801e388:	2306      	movs	r3, #6
 801e38a:	9301      	str	r3, [sp, #4]
 801e38c:	7d7b      	ldrb	r3, [r7, #21]
 801e38e:	9300      	str	r3, [sp, #0]
 801e390:	4613      	mov	r3, r2
 801e392:	683a      	ldr	r2, [r7, #0]
 801e394:	6879      	ldr	r1, [r7, #4]
 801e396:	68b8      	ldr	r0, [r7, #8]
 801e398:	f004 f970 	bl	802267c <ip4_output_if>
 801e39c:	4603      	mov	r3, r0
 801e39e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e3a0:	68b8      	ldr	r0, [r7, #8]
 801e3a2:	f7f9 fe9f 	bl	80180e4 <pbuf_free>
  return err;
 801e3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	3718      	adds	r7, #24
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	bd80      	pop	{r7, pc}
 801e3b2:	bf00      	nop
 801e3b4:	08027764 	.word	0x08027764
 801e3b8:	08027ebc 	.word	0x08027ebc
 801e3bc:	080277b8 	.word	0x080277b8

0801e3c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801e3c0:	b590      	push	{r4, r7, lr}
 801e3c2:	b08b      	sub	sp, #44	; 0x2c
 801e3c4:	af04      	add	r7, sp, #16
 801e3c6:	60f8      	str	r0, [r7, #12]
 801e3c8:	60b9      	str	r1, [r7, #8]
 801e3ca:	607a      	str	r2, [r7, #4]
 801e3cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e3ce:	683b      	ldr	r3, [r7, #0]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d106      	bne.n	801e3e2 <tcp_rst+0x22>
 801e3d4:	4b1f      	ldr	r3, [pc, #124]	; (801e454 <tcp_rst+0x94>)
 801e3d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801e3da:	491f      	ldr	r1, [pc, #124]	; (801e458 <tcp_rst+0x98>)
 801e3dc:	481f      	ldr	r0, [pc, #124]	; (801e45c <tcp_rst+0x9c>)
 801e3de:	f006 f9df 	bl	80247a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d106      	bne.n	801e3f6 <tcp_rst+0x36>
 801e3e8:	4b1a      	ldr	r3, [pc, #104]	; (801e454 <tcp_rst+0x94>)
 801e3ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801e3ee:	491c      	ldr	r1, [pc, #112]	; (801e460 <tcp_rst+0xa0>)
 801e3f0:	481a      	ldr	r0, [pc, #104]	; (801e45c <tcp_rst+0x9c>)
 801e3f2:	f006 f9d5 	bl	80247a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e3f6:	2300      	movs	r3, #0
 801e3f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801e3fa:	f246 0308 	movw	r3, #24584	; 0x6008
 801e3fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801e400:	7dfb      	ldrb	r3, [r7, #23]
 801e402:	b29c      	uxth	r4, r3
 801e404:	68b8      	ldr	r0, [r7, #8]
 801e406:	f7f8 fab4 	bl	8016972 <lwip_htonl>
 801e40a:	4602      	mov	r2, r0
 801e40c:	8abb      	ldrh	r3, [r7, #20]
 801e40e:	9303      	str	r3, [sp, #12]
 801e410:	2314      	movs	r3, #20
 801e412:	9302      	str	r3, [sp, #8]
 801e414:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e416:	9301      	str	r3, [sp, #4]
 801e418:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e41a:	9300      	str	r3, [sp, #0]
 801e41c:	4613      	mov	r3, r2
 801e41e:	2200      	movs	r2, #0
 801e420:	4621      	mov	r1, r4
 801e422:	6878      	ldr	r0, [r7, #4]
 801e424:	f7ff fe90 	bl	801e148 <tcp_output_alloc_header_common>
 801e428:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801e42a:	693b      	ldr	r3, [r7, #16]
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d00c      	beq.n	801e44a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e430:	7dfb      	ldrb	r3, [r7, #23]
 801e432:	2200      	movs	r2, #0
 801e434:	6939      	ldr	r1, [r7, #16]
 801e436:	68f8      	ldr	r0, [r7, #12]
 801e438:	f7ff ff38 	bl	801e2ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e43e:	683a      	ldr	r2, [r7, #0]
 801e440:	6939      	ldr	r1, [r7, #16]
 801e442:	68f8      	ldr	r0, [r7, #12]
 801e444:	f7ff ff72 	bl	801e32c <tcp_output_control_segment>
 801e448:	e000      	b.n	801e44c <tcp_rst+0x8c>
    return;
 801e44a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801e44c:	371c      	adds	r7, #28
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd90      	pop	{r4, r7, pc}
 801e452:	bf00      	nop
 801e454:	08027764 	.word	0x08027764
 801e458:	08027ee8 	.word	0x08027ee8
 801e45c:	080277b8 	.word	0x080277b8
 801e460:	08027f04 	.word	0x08027f04

0801e464 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801e464:	b590      	push	{r4, r7, lr}
 801e466:	b087      	sub	sp, #28
 801e468:	af00      	add	r7, sp, #0
 801e46a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801e46c:	2300      	movs	r3, #0
 801e46e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801e470:	2300      	movs	r3, #0
 801e472:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d106      	bne.n	801e488 <tcp_send_empty_ack+0x24>
 801e47a:	4b28      	ldr	r3, [pc, #160]	; (801e51c <tcp_send_empty_ack+0xb8>)
 801e47c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801e480:	4927      	ldr	r1, [pc, #156]	; (801e520 <tcp_send_empty_ack+0xbc>)
 801e482:	4828      	ldr	r0, [pc, #160]	; (801e524 <tcp_send_empty_ack+0xc0>)
 801e484:	f006 f98c 	bl	80247a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e488:	7dfb      	ldrb	r3, [r7, #23]
 801e48a:	009b      	lsls	r3, r3, #2
 801e48c:	b2db      	uxtb	r3, r3
 801e48e:	f003 0304 	and.w	r3, r3, #4
 801e492:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e494:	7d7b      	ldrb	r3, [r7, #21]
 801e496:	b29c      	uxth	r4, r3
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e49c:	4618      	mov	r0, r3
 801e49e:	f7f8 fa68 	bl	8016972 <lwip_htonl>
 801e4a2:	4603      	mov	r3, r0
 801e4a4:	2200      	movs	r2, #0
 801e4a6:	4621      	mov	r1, r4
 801e4a8:	6878      	ldr	r0, [r7, #4]
 801e4aa:	f7ff fec1 	bl	801e230 <tcp_output_alloc_header>
 801e4ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e4b0:	693b      	ldr	r3, [r7, #16]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d109      	bne.n	801e4ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	8b5b      	ldrh	r3, [r3, #26]
 801e4ba:	f043 0303 	orr.w	r3, r3, #3
 801e4be:	b29a      	uxth	r2, r3
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801e4c4:	f06f 0301 	mvn.w	r3, #1
 801e4c8:	e023      	b.n	801e512 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801e4ca:	7dbb      	ldrb	r3, [r7, #22]
 801e4cc:	7dfa      	ldrb	r2, [r7, #23]
 801e4ce:	6939      	ldr	r1, [r7, #16]
 801e4d0:	6878      	ldr	r0, [r7, #4]
 801e4d2:	f7ff feeb 	bl	801e2ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e4d6:	687a      	ldr	r2, [r7, #4]
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	3304      	adds	r3, #4
 801e4dc:	6939      	ldr	r1, [r7, #16]
 801e4de:	6878      	ldr	r0, [r7, #4]
 801e4e0:	f7ff ff24 	bl	801e32c <tcp_output_control_segment>
 801e4e4:	4603      	mov	r3, r0
 801e4e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801e4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d007      	beq.n	801e500 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	8b5b      	ldrh	r3, [r3, #26]
 801e4f4:	f043 0303 	orr.w	r3, r3, #3
 801e4f8:	b29a      	uxth	r2, r3
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	835a      	strh	r2, [r3, #26]
 801e4fe:	e006      	b.n	801e50e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	8b5b      	ldrh	r3, [r3, #26]
 801e504:	f023 0303 	bic.w	r3, r3, #3
 801e508:	b29a      	uxth	r2, r3
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801e50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e512:	4618      	mov	r0, r3
 801e514:	371c      	adds	r7, #28
 801e516:	46bd      	mov	sp, r7
 801e518:	bd90      	pop	{r4, r7, pc}
 801e51a:	bf00      	nop
 801e51c:	08027764 	.word	0x08027764
 801e520:	08027f20 	.word	0x08027f20
 801e524:	080277b8 	.word	0x080277b8

0801e528 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e528:	b590      	push	{r4, r7, lr}
 801e52a:	b087      	sub	sp, #28
 801e52c:	af00      	add	r7, sp, #0
 801e52e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e530:	2300      	movs	r3, #0
 801e532:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d106      	bne.n	801e548 <tcp_keepalive+0x20>
 801e53a:	4b18      	ldr	r3, [pc, #96]	; (801e59c <tcp_keepalive+0x74>)
 801e53c:	f640 0224 	movw	r2, #2084	; 0x824
 801e540:	4917      	ldr	r1, [pc, #92]	; (801e5a0 <tcp_keepalive+0x78>)
 801e542:	4818      	ldr	r0, [pc, #96]	; (801e5a4 <tcp_keepalive+0x7c>)
 801e544:	f006 f92c 	bl	80247a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e548:	7dfb      	ldrb	r3, [r7, #23]
 801e54a:	b29c      	uxth	r4, r3
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e550:	3b01      	subs	r3, #1
 801e552:	4618      	mov	r0, r3
 801e554:	f7f8 fa0d 	bl	8016972 <lwip_htonl>
 801e558:	4603      	mov	r3, r0
 801e55a:	2200      	movs	r2, #0
 801e55c:	4621      	mov	r1, r4
 801e55e:	6878      	ldr	r0, [r7, #4]
 801e560:	f7ff fe66 	bl	801e230 <tcp_output_alloc_header>
 801e564:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e566:	693b      	ldr	r3, [r7, #16]
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d102      	bne.n	801e572 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801e56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e570:	e010      	b.n	801e594 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e572:	7dfb      	ldrb	r3, [r7, #23]
 801e574:	2200      	movs	r2, #0
 801e576:	6939      	ldr	r1, [r7, #16]
 801e578:	6878      	ldr	r0, [r7, #4]
 801e57a:	f7ff fe97 	bl	801e2ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e57e:	687a      	ldr	r2, [r7, #4]
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	3304      	adds	r3, #4
 801e584:	6939      	ldr	r1, [r7, #16]
 801e586:	6878      	ldr	r0, [r7, #4]
 801e588:	f7ff fed0 	bl	801e32c <tcp_output_control_segment>
 801e58c:	4603      	mov	r3, r0
 801e58e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e594:	4618      	mov	r0, r3
 801e596:	371c      	adds	r7, #28
 801e598:	46bd      	mov	sp, r7
 801e59a:	bd90      	pop	{r4, r7, pc}
 801e59c:	08027764 	.word	0x08027764
 801e5a0:	08027f40 	.word	0x08027f40
 801e5a4:	080277b8 	.word	0x080277b8

0801e5a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e5a8:	b590      	push	{r4, r7, lr}
 801e5aa:	b08b      	sub	sp, #44	; 0x2c
 801e5ac:	af00      	add	r7, sp, #0
 801e5ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e5b0:	2300      	movs	r3, #0
 801e5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d106      	bne.n	801e5ca <tcp_zero_window_probe+0x22>
 801e5bc:	4b4c      	ldr	r3, [pc, #304]	; (801e6f0 <tcp_zero_window_probe+0x148>)
 801e5be:	f640 024f 	movw	r2, #2127	; 0x84f
 801e5c2:	494c      	ldr	r1, [pc, #304]	; (801e6f4 <tcp_zero_window_probe+0x14c>)
 801e5c4:	484c      	ldr	r0, [pc, #304]	; (801e6f8 <tcp_zero_window_probe+0x150>)
 801e5c6:	f006 f8eb 	bl	80247a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e5ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801e5d0:	6a3b      	ldr	r3, [r7, #32]
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d101      	bne.n	801e5da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	e086      	b.n	801e6e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e5e0:	2bff      	cmp	r3, #255	; 0xff
 801e5e2:	d007      	beq.n	801e5f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e5ea:	3301      	adds	r3, #1
 801e5ec:	b2da      	uxtb	r2, r3
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e5f4:	6a3b      	ldr	r3, [r7, #32]
 801e5f6:	68db      	ldr	r3, [r3, #12]
 801e5f8:	899b      	ldrh	r3, [r3, #12]
 801e5fa:	b29b      	uxth	r3, r3
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	f7f8 f9a3 	bl	8016948 <lwip_htons>
 801e602:	4603      	mov	r3, r0
 801e604:	b2db      	uxtb	r3, r3
 801e606:	f003 0301 	and.w	r3, r3, #1
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d005      	beq.n	801e61a <tcp_zero_window_probe+0x72>
 801e60e:	6a3b      	ldr	r3, [r7, #32]
 801e610:	891b      	ldrh	r3, [r3, #8]
 801e612:	2b00      	cmp	r3, #0
 801e614:	d101      	bne.n	801e61a <tcp_zero_window_probe+0x72>
 801e616:	2301      	movs	r3, #1
 801e618:	e000      	b.n	801e61c <tcp_zero_window_probe+0x74>
 801e61a:	2300      	movs	r3, #0
 801e61c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801e61e:	7ffb      	ldrb	r3, [r7, #31]
 801e620:	2b00      	cmp	r3, #0
 801e622:	bf0c      	ite	eq
 801e624:	2301      	moveq	r3, #1
 801e626:	2300      	movne	r3, #0
 801e628:	b2db      	uxtb	r3, r3
 801e62a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e630:	b299      	uxth	r1, r3
 801e632:	6a3b      	ldr	r3, [r7, #32]
 801e634:	68db      	ldr	r3, [r3, #12]
 801e636:	685b      	ldr	r3, [r3, #4]
 801e638:	8bba      	ldrh	r2, [r7, #28]
 801e63a:	6878      	ldr	r0, [r7, #4]
 801e63c:	f7ff fdf8 	bl	801e230 <tcp_output_alloc_header>
 801e640:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801e642:	69bb      	ldr	r3, [r7, #24]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d102      	bne.n	801e64e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801e648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e64c:	e04c      	b.n	801e6e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e64e:	69bb      	ldr	r3, [r7, #24]
 801e650:	685b      	ldr	r3, [r3, #4]
 801e652:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801e654:	7ffb      	ldrb	r3, [r7, #31]
 801e656:	2b00      	cmp	r3, #0
 801e658:	d011      	beq.n	801e67e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e65a:	697b      	ldr	r3, [r7, #20]
 801e65c:	899b      	ldrh	r3, [r3, #12]
 801e65e:	b29b      	uxth	r3, r3
 801e660:	b21b      	sxth	r3, r3
 801e662:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e666:	b21c      	sxth	r4, r3
 801e668:	2011      	movs	r0, #17
 801e66a:	f7f8 f96d 	bl	8016948 <lwip_htons>
 801e66e:	4603      	mov	r3, r0
 801e670:	b21b      	sxth	r3, r3
 801e672:	4323      	orrs	r3, r4
 801e674:	b21b      	sxth	r3, r3
 801e676:	b29a      	uxth	r2, r3
 801e678:	697b      	ldr	r3, [r7, #20]
 801e67a:	819a      	strh	r2, [r3, #12]
 801e67c:	e010      	b.n	801e6a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801e67e:	69bb      	ldr	r3, [r7, #24]
 801e680:	685b      	ldr	r3, [r3, #4]
 801e682:	3314      	adds	r3, #20
 801e684:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e686:	6a3b      	ldr	r3, [r7, #32]
 801e688:	6858      	ldr	r0, [r3, #4]
 801e68a:	6a3b      	ldr	r3, [r7, #32]
 801e68c:	685b      	ldr	r3, [r3, #4]
 801e68e:	891a      	ldrh	r2, [r3, #8]
 801e690:	6a3b      	ldr	r3, [r7, #32]
 801e692:	891b      	ldrh	r3, [r3, #8]
 801e694:	1ad3      	subs	r3, r2, r3
 801e696:	b29b      	uxth	r3, r3
 801e698:	2201      	movs	r2, #1
 801e69a:	6939      	ldr	r1, [r7, #16]
 801e69c:	f7f9 ff28 	bl	80184f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e6a0:	6a3b      	ldr	r3, [r7, #32]
 801e6a2:	68db      	ldr	r3, [r3, #12]
 801e6a4:	685b      	ldr	r3, [r3, #4]
 801e6a6:	4618      	mov	r0, r3
 801e6a8:	f7f8 f963 	bl	8016972 <lwip_htonl>
 801e6ac:	4603      	mov	r3, r0
 801e6ae:	3301      	adds	r3, #1
 801e6b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	1ad3      	subs	r3, r2, r3
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	da02      	bge.n	801e6c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	68fa      	ldr	r2, [r7, #12]
 801e6c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e6c8:	2200      	movs	r2, #0
 801e6ca:	69b9      	ldr	r1, [r7, #24]
 801e6cc:	6878      	ldr	r0, [r7, #4]
 801e6ce:	f7ff fded 	bl	801e2ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e6d2:	687a      	ldr	r2, [r7, #4]
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	3304      	adds	r3, #4
 801e6d8:	69b9      	ldr	r1, [r7, #24]
 801e6da:	6878      	ldr	r0, [r7, #4]
 801e6dc:	f7ff fe26 	bl	801e32c <tcp_output_control_segment>
 801e6e0:	4603      	mov	r3, r0
 801e6e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e6e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e6e8:	4618      	mov	r0, r3
 801e6ea:	372c      	adds	r7, #44	; 0x2c
 801e6ec:	46bd      	mov	sp, r7
 801e6ee:	bd90      	pop	{r4, r7, pc}
 801e6f0:	08027764 	.word	0x08027764
 801e6f4:	08027f5c 	.word	0x08027f5c
 801e6f8:	080277b8 	.word	0x080277b8

0801e6fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801e6fc:	b580      	push	{r7, lr}
 801e6fe:	b082      	sub	sp, #8
 801e700:	af00      	add	r7, sp, #0
 801e702:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801e704:	f7f9 ffe2 	bl	80186cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801e708:	4b0a      	ldr	r3, [pc, #40]	; (801e734 <tcpip_tcp_timer+0x38>)
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d103      	bne.n	801e718 <tcpip_tcp_timer+0x1c>
 801e710:	4b09      	ldr	r3, [pc, #36]	; (801e738 <tcpip_tcp_timer+0x3c>)
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	2b00      	cmp	r3, #0
 801e716:	d005      	beq.n	801e724 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e718:	2200      	movs	r2, #0
 801e71a:	4908      	ldr	r1, [pc, #32]	; (801e73c <tcpip_tcp_timer+0x40>)
 801e71c:	20fa      	movs	r0, #250	; 0xfa
 801e71e:	f000 f8f1 	bl	801e904 <sys_timeout>
 801e722:	e002      	b.n	801e72a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801e724:	4b06      	ldr	r3, [pc, #24]	; (801e740 <tcpip_tcp_timer+0x44>)
 801e726:	2200      	movs	r2, #0
 801e728:	601a      	str	r2, [r3, #0]
  }
}
 801e72a:	bf00      	nop
 801e72c:	3708      	adds	r7, #8
 801e72e:	46bd      	mov	sp, r7
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	200103c0 	.word	0x200103c0
 801e738:	200103d0 	.word	0x200103d0
 801e73c:	0801e6fd 	.word	0x0801e6fd
 801e740:	20009000 	.word	0x20009000

0801e744 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801e744:	b580      	push	{r7, lr}
 801e746:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801e748:	4b0a      	ldr	r3, [pc, #40]	; (801e774 <tcp_timer_needed+0x30>)
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d10f      	bne.n	801e770 <tcp_timer_needed+0x2c>
 801e750:	4b09      	ldr	r3, [pc, #36]	; (801e778 <tcp_timer_needed+0x34>)
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	2b00      	cmp	r3, #0
 801e756:	d103      	bne.n	801e760 <tcp_timer_needed+0x1c>
 801e758:	4b08      	ldr	r3, [pc, #32]	; (801e77c <tcp_timer_needed+0x38>)
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d007      	beq.n	801e770 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801e760:	4b04      	ldr	r3, [pc, #16]	; (801e774 <tcp_timer_needed+0x30>)
 801e762:	2201      	movs	r2, #1
 801e764:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e766:	2200      	movs	r2, #0
 801e768:	4905      	ldr	r1, [pc, #20]	; (801e780 <tcp_timer_needed+0x3c>)
 801e76a:	20fa      	movs	r0, #250	; 0xfa
 801e76c:	f000 f8ca 	bl	801e904 <sys_timeout>
  }
}
 801e770:	bf00      	nop
 801e772:	bd80      	pop	{r7, pc}
 801e774:	20009000 	.word	0x20009000
 801e778:	200103c0 	.word	0x200103c0
 801e77c:	200103d0 	.word	0x200103d0
 801e780:	0801e6fd 	.word	0x0801e6fd

0801e784 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801e784:	b580      	push	{r7, lr}
 801e786:	b086      	sub	sp, #24
 801e788:	af00      	add	r7, sp, #0
 801e78a:	60f8      	str	r0, [r7, #12]
 801e78c:	60b9      	str	r1, [r7, #8]
 801e78e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801e790:	200a      	movs	r0, #10
 801e792:	f7f8 fd8f 	bl	80172b4 <memp_malloc>
 801e796:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801e798:	693b      	ldr	r3, [r7, #16]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d109      	bne.n	801e7b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801e79e:	693b      	ldr	r3, [r7, #16]
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d151      	bne.n	801e848 <sys_timeout_abs+0xc4>
 801e7a4:	4b2a      	ldr	r3, [pc, #168]	; (801e850 <sys_timeout_abs+0xcc>)
 801e7a6:	22be      	movs	r2, #190	; 0xbe
 801e7a8:	492a      	ldr	r1, [pc, #168]	; (801e854 <sys_timeout_abs+0xd0>)
 801e7aa:	482b      	ldr	r0, [pc, #172]	; (801e858 <sys_timeout_abs+0xd4>)
 801e7ac:	f005 fff8 	bl	80247a0 <iprintf>
    return;
 801e7b0:	e04a      	b.n	801e848 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801e7b2:	693b      	ldr	r3, [r7, #16]
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801e7b8:	693b      	ldr	r3, [r7, #16]
 801e7ba:	68ba      	ldr	r2, [r7, #8]
 801e7bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801e7be:	693b      	ldr	r3, [r7, #16]
 801e7c0:	687a      	ldr	r2, [r7, #4]
 801e7c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801e7c4:	693b      	ldr	r3, [r7, #16]
 801e7c6:	68fa      	ldr	r2, [r7, #12]
 801e7c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801e7ca:	4b24      	ldr	r3, [pc, #144]	; (801e85c <sys_timeout_abs+0xd8>)
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d103      	bne.n	801e7da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801e7d2:	4a22      	ldr	r2, [pc, #136]	; (801e85c <sys_timeout_abs+0xd8>)
 801e7d4:	693b      	ldr	r3, [r7, #16]
 801e7d6:	6013      	str	r3, [r2, #0]
    return;
 801e7d8:	e037      	b.n	801e84a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801e7da:	693b      	ldr	r3, [r7, #16]
 801e7dc:	685a      	ldr	r2, [r3, #4]
 801e7de:	4b1f      	ldr	r3, [pc, #124]	; (801e85c <sys_timeout_abs+0xd8>)
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	685b      	ldr	r3, [r3, #4]
 801e7e4:	1ad3      	subs	r3, r2, r3
 801e7e6:	0fdb      	lsrs	r3, r3, #31
 801e7e8:	f003 0301 	and.w	r3, r3, #1
 801e7ec:	b2db      	uxtb	r3, r3
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d007      	beq.n	801e802 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801e7f2:	4b1a      	ldr	r3, [pc, #104]	; (801e85c <sys_timeout_abs+0xd8>)
 801e7f4:	681a      	ldr	r2, [r3, #0]
 801e7f6:	693b      	ldr	r3, [r7, #16]
 801e7f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801e7fa:	4a18      	ldr	r2, [pc, #96]	; (801e85c <sys_timeout_abs+0xd8>)
 801e7fc:	693b      	ldr	r3, [r7, #16]
 801e7fe:	6013      	str	r3, [r2, #0]
 801e800:	e023      	b.n	801e84a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801e802:	4b16      	ldr	r3, [pc, #88]	; (801e85c <sys_timeout_abs+0xd8>)
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	617b      	str	r3, [r7, #20]
 801e808:	e01a      	b.n	801e840 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801e80a:	697b      	ldr	r3, [r7, #20]
 801e80c:	681b      	ldr	r3, [r3, #0]
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d00b      	beq.n	801e82a <sys_timeout_abs+0xa6>
 801e812:	693b      	ldr	r3, [r7, #16]
 801e814:	685a      	ldr	r2, [r3, #4]
 801e816:	697b      	ldr	r3, [r7, #20]
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	685b      	ldr	r3, [r3, #4]
 801e81c:	1ad3      	subs	r3, r2, r3
 801e81e:	0fdb      	lsrs	r3, r3, #31
 801e820:	f003 0301 	and.w	r3, r3, #1
 801e824:	b2db      	uxtb	r3, r3
 801e826:	2b00      	cmp	r3, #0
 801e828:	d007      	beq.n	801e83a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801e82a:	697b      	ldr	r3, [r7, #20]
 801e82c:	681a      	ldr	r2, [r3, #0]
 801e82e:	693b      	ldr	r3, [r7, #16]
 801e830:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801e832:	697b      	ldr	r3, [r7, #20]
 801e834:	693a      	ldr	r2, [r7, #16]
 801e836:	601a      	str	r2, [r3, #0]
        break;
 801e838:	e007      	b.n	801e84a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801e83a:	697b      	ldr	r3, [r7, #20]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	617b      	str	r3, [r7, #20]
 801e840:	697b      	ldr	r3, [r7, #20]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d1e1      	bne.n	801e80a <sys_timeout_abs+0x86>
 801e846:	e000      	b.n	801e84a <sys_timeout_abs+0xc6>
    return;
 801e848:	bf00      	nop
      }
    }
  }
}
 801e84a:	3718      	adds	r7, #24
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}
 801e850:	08027f80 	.word	0x08027f80
 801e854:	08027fb4 	.word	0x08027fb4
 801e858:	08027ff4 	.word	0x08027ff4
 801e85c:	20008ff8 	.word	0x20008ff8

0801e860 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801e860:	b580      	push	{r7, lr}
 801e862:	b086      	sub	sp, #24
 801e864:	af00      	add	r7, sp, #0
 801e866:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801e86c:	697b      	ldr	r3, [r7, #20]
 801e86e:	685b      	ldr	r3, [r3, #4]
 801e870:	4798      	blx	r3

  now = sys_now();
 801e872:	f7ef ff03 	bl	800e67c <sys_now>
 801e876:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801e878:	697b      	ldr	r3, [r7, #20]
 801e87a:	681a      	ldr	r2, [r3, #0]
 801e87c:	4b0f      	ldr	r3, [pc, #60]	; (801e8bc <lwip_cyclic_timer+0x5c>)
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	4413      	add	r3, r2
 801e882:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801e884:	68fa      	ldr	r2, [r7, #12]
 801e886:	693b      	ldr	r3, [r7, #16]
 801e888:	1ad3      	subs	r3, r2, r3
 801e88a:	0fdb      	lsrs	r3, r3, #31
 801e88c:	f003 0301 	and.w	r3, r3, #1
 801e890:	b2db      	uxtb	r3, r3
 801e892:	2b00      	cmp	r3, #0
 801e894:	d009      	beq.n	801e8aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801e896:	697b      	ldr	r3, [r7, #20]
 801e898:	681a      	ldr	r2, [r3, #0]
 801e89a:	693b      	ldr	r3, [r7, #16]
 801e89c:	4413      	add	r3, r2
 801e89e:	687a      	ldr	r2, [r7, #4]
 801e8a0:	4907      	ldr	r1, [pc, #28]	; (801e8c0 <lwip_cyclic_timer+0x60>)
 801e8a2:	4618      	mov	r0, r3
 801e8a4:	f7ff ff6e 	bl	801e784 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801e8a8:	e004      	b.n	801e8b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801e8aa:	687a      	ldr	r2, [r7, #4]
 801e8ac:	4904      	ldr	r1, [pc, #16]	; (801e8c0 <lwip_cyclic_timer+0x60>)
 801e8ae:	68f8      	ldr	r0, [r7, #12]
 801e8b0:	f7ff ff68 	bl	801e784 <sys_timeout_abs>
}
 801e8b4:	bf00      	nop
 801e8b6:	3718      	adds	r7, #24
 801e8b8:	46bd      	mov	sp, r7
 801e8ba:	bd80      	pop	{r7, pc}
 801e8bc:	20008ffc 	.word	0x20008ffc
 801e8c0:	0801e861 	.word	0x0801e861

0801e8c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801e8c4:	b580      	push	{r7, lr}
 801e8c6:	b082      	sub	sp, #8
 801e8c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	607b      	str	r3, [r7, #4]
 801e8ce:	e00e      	b.n	801e8ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801e8d0:	4a0a      	ldr	r2, [pc, #40]	; (801e8fc <sys_timeouts_init+0x38>)
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	00db      	lsls	r3, r3, #3
 801e8dc:	4a07      	ldr	r2, [pc, #28]	; (801e8fc <sys_timeouts_init+0x38>)
 801e8de:	4413      	add	r3, r2
 801e8e0:	461a      	mov	r2, r3
 801e8e2:	4907      	ldr	r1, [pc, #28]	; (801e900 <sys_timeouts_init+0x3c>)
 801e8e4:	f000 f80e 	bl	801e904 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	3301      	adds	r3, #1
 801e8ec:	607b      	str	r3, [r7, #4]
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2b04      	cmp	r3, #4
 801e8f2:	d9ed      	bls.n	801e8d0 <sys_timeouts_init+0xc>
  }
}
 801e8f4:	bf00      	nop
 801e8f6:	3708      	adds	r7, #8
 801e8f8:	46bd      	mov	sp, r7
 801e8fa:	bd80      	pop	{r7, pc}
 801e8fc:	08028fb8 	.word	0x08028fb8
 801e900:	0801e861 	.word	0x0801e861

0801e904 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801e904:	b580      	push	{r7, lr}
 801e906:	b086      	sub	sp, #24
 801e908:	af00      	add	r7, sp, #0
 801e90a:	60f8      	str	r0, [r7, #12]
 801e90c:	60b9      	str	r1, [r7, #8]
 801e90e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e916:	d306      	bcc.n	801e926 <sys_timeout+0x22>
 801e918:	4b0a      	ldr	r3, [pc, #40]	; (801e944 <sys_timeout+0x40>)
 801e91a:	f240 1229 	movw	r2, #297	; 0x129
 801e91e:	490a      	ldr	r1, [pc, #40]	; (801e948 <sys_timeout+0x44>)
 801e920:	480a      	ldr	r0, [pc, #40]	; (801e94c <sys_timeout+0x48>)
 801e922:	f005 ff3d 	bl	80247a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801e926:	f7ef fea9 	bl	800e67c <sys_now>
 801e92a:	4602      	mov	r2, r0
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	4413      	add	r3, r2
 801e930:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801e932:	687a      	ldr	r2, [r7, #4]
 801e934:	68b9      	ldr	r1, [r7, #8]
 801e936:	6978      	ldr	r0, [r7, #20]
 801e938:	f7ff ff24 	bl	801e784 <sys_timeout_abs>
#endif
}
 801e93c:	bf00      	nop
 801e93e:	3718      	adds	r7, #24
 801e940:	46bd      	mov	sp, r7
 801e942:	bd80      	pop	{r7, pc}
 801e944:	08027f80 	.word	0x08027f80
 801e948:	0802801c 	.word	0x0802801c
 801e94c:	08027ff4 	.word	0x08027ff4

0801e950 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801e950:	b580      	push	{r7, lr}
 801e952:	b084      	sub	sp, #16
 801e954:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801e956:	f7ef fe91 	bl	800e67c <sys_now>
 801e95a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801e95c:	4b17      	ldr	r3, [pc, #92]	; (801e9bc <sys_check_timeouts+0x6c>)
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801e962:	68bb      	ldr	r3, [r7, #8]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d022      	beq.n	801e9ae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801e968:	68bb      	ldr	r3, [r7, #8]
 801e96a:	685b      	ldr	r3, [r3, #4]
 801e96c:	68fa      	ldr	r2, [r7, #12]
 801e96e:	1ad3      	subs	r3, r2, r3
 801e970:	0fdb      	lsrs	r3, r3, #31
 801e972:	f003 0301 	and.w	r3, r3, #1
 801e976:	b2db      	uxtb	r3, r3
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d11a      	bne.n	801e9b2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801e97c:	68bb      	ldr	r3, [r7, #8]
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	4a0e      	ldr	r2, [pc, #56]	; (801e9bc <sys_check_timeouts+0x6c>)
 801e982:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801e984:	68bb      	ldr	r3, [r7, #8]
 801e986:	689b      	ldr	r3, [r3, #8]
 801e988:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801e98a:	68bb      	ldr	r3, [r7, #8]
 801e98c:	68db      	ldr	r3, [r3, #12]
 801e98e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801e990:	68bb      	ldr	r3, [r7, #8]
 801e992:	685b      	ldr	r3, [r3, #4]
 801e994:	4a0a      	ldr	r2, [pc, #40]	; (801e9c0 <sys_check_timeouts+0x70>)
 801e996:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801e998:	68b9      	ldr	r1, [r7, #8]
 801e99a:	200a      	movs	r0, #10
 801e99c:	f7f8 fcdc 	bl	8017358 <memp_free>
    if (handler != NULL) {
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d0da      	beq.n	801e95c <sys_check_timeouts+0xc>
      handler(arg);
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	6838      	ldr	r0, [r7, #0]
 801e9aa:	4798      	blx	r3
  do {
 801e9ac:	e7d6      	b.n	801e95c <sys_check_timeouts+0xc>
      return;
 801e9ae:	bf00      	nop
 801e9b0:	e000      	b.n	801e9b4 <sys_check_timeouts+0x64>
      return;
 801e9b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801e9b4:	3710      	adds	r7, #16
 801e9b6:	46bd      	mov	sp, r7
 801e9b8:	bd80      	pop	{r7, pc}
 801e9ba:	bf00      	nop
 801e9bc:	20008ff8 	.word	0x20008ff8
 801e9c0:	20008ffc 	.word	0x20008ffc

0801e9c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801e9c4:	b580      	push	{r7, lr}
 801e9c6:	b082      	sub	sp, #8
 801e9c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801e9ca:	4b16      	ldr	r3, [pc, #88]	; (801ea24 <sys_timeouts_sleeptime+0x60>)
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d102      	bne.n	801e9d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801e9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9d6:	e020      	b.n	801ea1a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801e9d8:	f7ef fe50 	bl	800e67c <sys_now>
 801e9dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801e9de:	4b11      	ldr	r3, [pc, #68]	; (801ea24 <sys_timeouts_sleeptime+0x60>)
 801e9e0:	681b      	ldr	r3, [r3, #0]
 801e9e2:	685a      	ldr	r2, [r3, #4]
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	1ad3      	subs	r3, r2, r3
 801e9e8:	0fdb      	lsrs	r3, r3, #31
 801e9ea:	f003 0301 	and.w	r3, r3, #1
 801e9ee:	b2db      	uxtb	r3, r3
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d001      	beq.n	801e9f8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	e010      	b.n	801ea1a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801e9f8:	4b0a      	ldr	r3, [pc, #40]	; (801ea24 <sys_timeouts_sleeptime+0x60>)
 801e9fa:	681b      	ldr	r3, [r3, #0]
 801e9fc:	685a      	ldr	r2, [r3, #4]
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	1ad3      	subs	r3, r2, r3
 801ea02:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ea04:	683b      	ldr	r3, [r7, #0]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	da06      	bge.n	801ea18 <sys_timeouts_sleeptime+0x54>
 801ea0a:	4b07      	ldr	r3, [pc, #28]	; (801ea28 <sys_timeouts_sleeptime+0x64>)
 801ea0c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ea10:	4906      	ldr	r1, [pc, #24]	; (801ea2c <sys_timeouts_sleeptime+0x68>)
 801ea12:	4807      	ldr	r0, [pc, #28]	; (801ea30 <sys_timeouts_sleeptime+0x6c>)
 801ea14:	f005 fec4 	bl	80247a0 <iprintf>
    return ret;
 801ea18:	683b      	ldr	r3, [r7, #0]
  }
}
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	3708      	adds	r7, #8
 801ea1e:	46bd      	mov	sp, r7
 801ea20:	bd80      	pop	{r7, pc}
 801ea22:	bf00      	nop
 801ea24:	20008ff8 	.word	0x20008ff8
 801ea28:	08027f80 	.word	0x08027f80
 801ea2c:	08028054 	.word	0x08028054
 801ea30:	08027ff4 	.word	0x08027ff4

0801ea34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ea34:	b580      	push	{r7, lr}
 801ea36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ea38:	f005 ff2e 	bl	8024898 <rand>
 801ea3c:	4603      	mov	r3, r0
 801ea3e:	b29b      	uxth	r3, r3
 801ea40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ea44:	b29b      	uxth	r3, r3
 801ea46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ea4a:	b29a      	uxth	r2, r3
 801ea4c:	4b01      	ldr	r3, [pc, #4]	; (801ea54 <udp_init+0x20>)
 801ea4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ea50:	bf00      	nop
 801ea52:	bd80      	pop	{r7, pc}
 801ea54:	2000003c 	.word	0x2000003c

0801ea58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ea58:	b480      	push	{r7}
 801ea5a:	b083      	sub	sp, #12
 801ea5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ea5e:	2300      	movs	r3, #0
 801ea60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ea62:	4b17      	ldr	r3, [pc, #92]	; (801eac0 <udp_new_port+0x68>)
 801ea64:	881b      	ldrh	r3, [r3, #0]
 801ea66:	1c5a      	adds	r2, r3, #1
 801ea68:	b291      	uxth	r1, r2
 801ea6a:	4a15      	ldr	r2, [pc, #84]	; (801eac0 <udp_new_port+0x68>)
 801ea6c:	8011      	strh	r1, [r2, #0]
 801ea6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea72:	4293      	cmp	r3, r2
 801ea74:	d103      	bne.n	801ea7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ea76:	4b12      	ldr	r3, [pc, #72]	; (801eac0 <udp_new_port+0x68>)
 801ea78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ea7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ea7e:	4b11      	ldr	r3, [pc, #68]	; (801eac4 <udp_new_port+0x6c>)
 801ea80:	681b      	ldr	r3, [r3, #0]
 801ea82:	603b      	str	r3, [r7, #0]
 801ea84:	e011      	b.n	801eaaa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ea86:	683b      	ldr	r3, [r7, #0]
 801ea88:	8a5a      	ldrh	r2, [r3, #18]
 801ea8a:	4b0d      	ldr	r3, [pc, #52]	; (801eac0 <udp_new_port+0x68>)
 801ea8c:	881b      	ldrh	r3, [r3, #0]
 801ea8e:	429a      	cmp	r2, r3
 801ea90:	d108      	bne.n	801eaa4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ea92:	88fb      	ldrh	r3, [r7, #6]
 801ea94:	3301      	adds	r3, #1
 801ea96:	80fb      	strh	r3, [r7, #6]
 801ea98:	88fb      	ldrh	r3, [r7, #6]
 801ea9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ea9e:	d3e0      	bcc.n	801ea62 <udp_new_port+0xa>
        return 0;
 801eaa0:	2300      	movs	r3, #0
 801eaa2:	e007      	b.n	801eab4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801eaa4:	683b      	ldr	r3, [r7, #0]
 801eaa6:	68db      	ldr	r3, [r3, #12]
 801eaa8:	603b      	str	r3, [r7, #0]
 801eaaa:	683b      	ldr	r3, [r7, #0]
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d1ea      	bne.n	801ea86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801eab0:	4b03      	ldr	r3, [pc, #12]	; (801eac0 <udp_new_port+0x68>)
 801eab2:	881b      	ldrh	r3, [r3, #0]
}
 801eab4:	4618      	mov	r0, r3
 801eab6:	370c      	adds	r7, #12
 801eab8:	46bd      	mov	sp, r7
 801eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eabe:	4770      	bx	lr
 801eac0:	2000003c 	.word	0x2000003c
 801eac4:	200103d8 	.word	0x200103d8

0801eac8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b084      	sub	sp, #16
 801eacc:	af00      	add	r7, sp, #0
 801eace:	60f8      	str	r0, [r7, #12]
 801ead0:	60b9      	str	r1, [r7, #8]
 801ead2:	4613      	mov	r3, r2
 801ead4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d105      	bne.n	801eae8 <udp_input_local_match+0x20>
 801eadc:	4b27      	ldr	r3, [pc, #156]	; (801eb7c <udp_input_local_match+0xb4>)
 801eade:	2287      	movs	r2, #135	; 0x87
 801eae0:	4927      	ldr	r1, [pc, #156]	; (801eb80 <udp_input_local_match+0xb8>)
 801eae2:	4828      	ldr	r0, [pc, #160]	; (801eb84 <udp_input_local_match+0xbc>)
 801eae4:	f005 fe5c 	bl	80247a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801eae8:	68bb      	ldr	r3, [r7, #8]
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d105      	bne.n	801eafa <udp_input_local_match+0x32>
 801eaee:	4b23      	ldr	r3, [pc, #140]	; (801eb7c <udp_input_local_match+0xb4>)
 801eaf0:	2288      	movs	r2, #136	; 0x88
 801eaf2:	4925      	ldr	r1, [pc, #148]	; (801eb88 <udp_input_local_match+0xc0>)
 801eaf4:	4823      	ldr	r0, [pc, #140]	; (801eb84 <udp_input_local_match+0xbc>)
 801eaf6:	f005 fe53 	bl	80247a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eafa:	68fb      	ldr	r3, [r7, #12]
 801eafc:	7a1b      	ldrb	r3, [r3, #8]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d00b      	beq.n	801eb1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801eb02:	68fb      	ldr	r3, [r7, #12]
 801eb04:	7a1a      	ldrb	r2, [r3, #8]
 801eb06:	4b21      	ldr	r3, [pc, #132]	; (801eb8c <udp_input_local_match+0xc4>)
 801eb08:	685b      	ldr	r3, [r3, #4]
 801eb0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eb0e:	3301      	adds	r3, #1
 801eb10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eb12:	429a      	cmp	r2, r3
 801eb14:	d001      	beq.n	801eb1a <udp_input_local_match+0x52>
    return 0;
 801eb16:	2300      	movs	r3, #0
 801eb18:	e02b      	b.n	801eb72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801eb1a:	79fb      	ldrb	r3, [r7, #7]
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d018      	beq.n	801eb52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	d013      	beq.n	801eb4e <udp_input_local_match+0x86>
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d00f      	beq.n	801eb4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801eb2e:	4b17      	ldr	r3, [pc, #92]	; (801eb8c <udp_input_local_match+0xc4>)
 801eb30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801eb32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801eb36:	d00a      	beq.n	801eb4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801eb38:	68fb      	ldr	r3, [r7, #12]
 801eb3a:	681a      	ldr	r2, [r3, #0]
 801eb3c:	4b13      	ldr	r3, [pc, #76]	; (801eb8c <udp_input_local_match+0xc4>)
 801eb3e:	695b      	ldr	r3, [r3, #20]
 801eb40:	405a      	eors	r2, r3
 801eb42:	68bb      	ldr	r3, [r7, #8]
 801eb44:	3308      	adds	r3, #8
 801eb46:	681b      	ldr	r3, [r3, #0]
 801eb48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d110      	bne.n	801eb70 <udp_input_local_match+0xa8>
          return 1;
 801eb4e:	2301      	movs	r3, #1
 801eb50:	e00f      	b.n	801eb72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d009      	beq.n	801eb6c <udp_input_local_match+0xa4>
 801eb58:	68fb      	ldr	r3, [r7, #12]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d005      	beq.n	801eb6c <udp_input_local_match+0xa4>
 801eb60:	68fb      	ldr	r3, [r7, #12]
 801eb62:	681a      	ldr	r2, [r3, #0]
 801eb64:	4b09      	ldr	r3, [pc, #36]	; (801eb8c <udp_input_local_match+0xc4>)
 801eb66:	695b      	ldr	r3, [r3, #20]
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	d101      	bne.n	801eb70 <udp_input_local_match+0xa8>
        return 1;
 801eb6c:	2301      	movs	r3, #1
 801eb6e:	e000      	b.n	801eb72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801eb70:	2300      	movs	r3, #0
}
 801eb72:	4618      	mov	r0, r3
 801eb74:	3710      	adds	r7, #16
 801eb76:	46bd      	mov	sp, r7
 801eb78:	bd80      	pop	{r7, pc}
 801eb7a:	bf00      	nop
 801eb7c:	08028068 	.word	0x08028068
 801eb80:	08028098 	.word	0x08028098
 801eb84:	080280bc 	.word	0x080280bc
 801eb88:	080280e4 	.word	0x080280e4
 801eb8c:	2000cc8c 	.word	0x2000cc8c

0801eb90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801eb90:	b590      	push	{r4, r7, lr}
 801eb92:	b08d      	sub	sp, #52	; 0x34
 801eb94:	af02      	add	r7, sp, #8
 801eb96:	6078      	str	r0, [r7, #4]
 801eb98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801eb9a:	2300      	movs	r3, #0
 801eb9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d105      	bne.n	801ebb0 <udp_input+0x20>
 801eba4:	4b7c      	ldr	r3, [pc, #496]	; (801ed98 <udp_input+0x208>)
 801eba6:	22cf      	movs	r2, #207	; 0xcf
 801eba8:	497c      	ldr	r1, [pc, #496]	; (801ed9c <udp_input+0x20c>)
 801ebaa:	487d      	ldr	r0, [pc, #500]	; (801eda0 <udp_input+0x210>)
 801ebac:	f005 fdf8 	bl	80247a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ebb0:	683b      	ldr	r3, [r7, #0]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d105      	bne.n	801ebc2 <udp_input+0x32>
 801ebb6:	4b78      	ldr	r3, [pc, #480]	; (801ed98 <udp_input+0x208>)
 801ebb8:	22d0      	movs	r2, #208	; 0xd0
 801ebba:	497a      	ldr	r1, [pc, #488]	; (801eda4 <udp_input+0x214>)
 801ebbc:	4878      	ldr	r0, [pc, #480]	; (801eda0 <udp_input+0x210>)
 801ebbe:	f005 fdef 	bl	80247a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	895b      	ldrh	r3, [r3, #10]
 801ebc6:	2b07      	cmp	r3, #7
 801ebc8:	d803      	bhi.n	801ebd2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801ebca:	6878      	ldr	r0, [r7, #4]
 801ebcc:	f7f9 fa8a 	bl	80180e4 <pbuf_free>
    goto end;
 801ebd0:	e0de      	b.n	801ed90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	685b      	ldr	r3, [r3, #4]
 801ebd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ebd8:	4b73      	ldr	r3, [pc, #460]	; (801eda8 <udp_input+0x218>)
 801ebda:	695a      	ldr	r2, [r3, #20]
 801ebdc:	4b72      	ldr	r3, [pc, #456]	; (801eda8 <udp_input+0x218>)
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	4619      	mov	r1, r3
 801ebe2:	4610      	mov	r0, r2
 801ebe4:	f003 fe22 	bl	802282c <ip4_addr_isbroadcast_u32>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ebec:	697b      	ldr	r3, [r7, #20]
 801ebee:	881b      	ldrh	r3, [r3, #0]
 801ebf0:	b29b      	uxth	r3, r3
 801ebf2:	4618      	mov	r0, r3
 801ebf4:	f7f7 fea8 	bl	8016948 <lwip_htons>
 801ebf8:	4603      	mov	r3, r0
 801ebfa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ebfc:	697b      	ldr	r3, [r7, #20]
 801ebfe:	885b      	ldrh	r3, [r3, #2]
 801ec00:	b29b      	uxth	r3, r3
 801ec02:	4618      	mov	r0, r3
 801ec04:	f7f7 fea0 	bl	8016948 <lwip_htons>
 801ec08:	4603      	mov	r3, r0
 801ec0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ec0c:	2300      	movs	r3, #0
 801ec0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801ec10:	2300      	movs	r3, #0
 801ec12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ec14:	2300      	movs	r3, #0
 801ec16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ec18:	4b64      	ldr	r3, [pc, #400]	; (801edac <udp_input+0x21c>)
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	627b      	str	r3, [r7, #36]	; 0x24
 801ec1e:	e054      	b.n	801ecca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ec20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec22:	8a5b      	ldrh	r3, [r3, #18]
 801ec24:	89fa      	ldrh	r2, [r7, #14]
 801ec26:	429a      	cmp	r2, r3
 801ec28:	d14a      	bne.n	801ecc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ec2a:	7cfb      	ldrb	r3, [r7, #19]
 801ec2c:	461a      	mov	r2, r3
 801ec2e:	6839      	ldr	r1, [r7, #0]
 801ec30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec32:	f7ff ff49 	bl	801eac8 <udp_input_local_match>
 801ec36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d041      	beq.n	801ecc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ec3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec3e:	7c1b      	ldrb	r3, [r3, #16]
 801ec40:	f003 0304 	and.w	r3, r3, #4
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d11d      	bne.n	801ec84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ec48:	69fb      	ldr	r3, [r7, #28]
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d102      	bne.n	801ec54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec50:	61fb      	str	r3, [r7, #28]
 801ec52:	e017      	b.n	801ec84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ec54:	7cfb      	ldrb	r3, [r7, #19]
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d014      	beq.n	801ec84 <udp_input+0xf4>
 801ec5a:	4b53      	ldr	r3, [pc, #332]	; (801eda8 <udp_input+0x218>)
 801ec5c:	695b      	ldr	r3, [r3, #20]
 801ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ec62:	d10f      	bne.n	801ec84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ec64:	69fb      	ldr	r3, [r7, #28]
 801ec66:	681a      	ldr	r2, [r3, #0]
 801ec68:	683b      	ldr	r3, [r7, #0]
 801ec6a:	3304      	adds	r3, #4
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	429a      	cmp	r2, r3
 801ec70:	d008      	beq.n	801ec84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec74:	681a      	ldr	r2, [r3, #0]
 801ec76:	683b      	ldr	r3, [r7, #0]
 801ec78:	3304      	adds	r3, #4
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	429a      	cmp	r2, r3
 801ec7e:	d101      	bne.n	801ec84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec86:	8a9b      	ldrh	r3, [r3, #20]
 801ec88:	8a3a      	ldrh	r2, [r7, #16]
 801ec8a:	429a      	cmp	r2, r3
 801ec8c:	d118      	bne.n	801ecc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d005      	beq.n	801eca2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec98:	685a      	ldr	r2, [r3, #4]
 801ec9a:	4b43      	ldr	r3, [pc, #268]	; (801eda8 <udp_input+0x218>)
 801ec9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ec9e:	429a      	cmp	r2, r3
 801eca0:	d10e      	bne.n	801ecc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801eca2:	6a3b      	ldr	r3, [r7, #32]
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	d014      	beq.n	801ecd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801eca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecaa:	68da      	ldr	r2, [r3, #12]
 801ecac:	6a3b      	ldr	r3, [r7, #32]
 801ecae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801ecb0:	4b3e      	ldr	r3, [pc, #248]	; (801edac <udp_input+0x21c>)
 801ecb2:	681a      	ldr	r2, [r3, #0]
 801ecb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ecb8:	4a3c      	ldr	r2, [pc, #240]	; (801edac <udp_input+0x21c>)
 801ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ecbe:	e008      	b.n	801ecd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecc6:	68db      	ldr	r3, [r3, #12]
 801ecc8:	627b      	str	r3, [r7, #36]	; 0x24
 801ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d1a7      	bne.n	801ec20 <udp_input+0x90>
 801ecd0:	e000      	b.n	801ecd4 <udp_input+0x144>
        break;
 801ecd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d101      	bne.n	801ecde <udp_input+0x14e>
    pcb = uncon_pcb;
 801ecda:	69fb      	ldr	r3, [r7, #28]
 801ecdc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d002      	beq.n	801ecea <udp_input+0x15a>
    for_us = 1;
 801ece4:	2301      	movs	r3, #1
 801ece6:	76fb      	strb	r3, [r7, #27]
 801ece8:	e00a      	b.n	801ed00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ecea:	683b      	ldr	r3, [r7, #0]
 801ecec:	3304      	adds	r3, #4
 801ecee:	681a      	ldr	r2, [r3, #0]
 801ecf0:	4b2d      	ldr	r3, [pc, #180]	; (801eda8 <udp_input+0x218>)
 801ecf2:	695b      	ldr	r3, [r3, #20]
 801ecf4:	429a      	cmp	r2, r3
 801ecf6:	bf0c      	ite	eq
 801ecf8:	2301      	moveq	r3, #1
 801ecfa:	2300      	movne	r3, #0
 801ecfc:	b2db      	uxtb	r3, r3
 801ecfe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ed00:	7efb      	ldrb	r3, [r7, #27]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d041      	beq.n	801ed8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ed06:	2108      	movs	r1, #8
 801ed08:	6878      	ldr	r0, [r7, #4]
 801ed0a:	f7f9 f965 	bl	8017fd8 <pbuf_remove_header>
 801ed0e:	4603      	mov	r3, r0
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d00a      	beq.n	801ed2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ed14:	4b20      	ldr	r3, [pc, #128]	; (801ed98 <udp_input+0x208>)
 801ed16:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ed1a:	4925      	ldr	r1, [pc, #148]	; (801edb0 <udp_input+0x220>)
 801ed1c:	4820      	ldr	r0, [pc, #128]	; (801eda0 <udp_input+0x210>)
 801ed1e:	f005 fd3f 	bl	80247a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ed22:	6878      	ldr	r0, [r7, #4]
 801ed24:	f7f9 f9de 	bl	80180e4 <pbuf_free>
      goto end;
 801ed28:	e032      	b.n	801ed90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	d012      	beq.n	801ed56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed32:	699b      	ldr	r3, [r3, #24]
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	d00a      	beq.n	801ed4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed3a:	699c      	ldr	r4, [r3, #24]
 801ed3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed3e:	69d8      	ldr	r0, [r3, #28]
 801ed40:	8a3b      	ldrh	r3, [r7, #16]
 801ed42:	9300      	str	r3, [sp, #0]
 801ed44:	4b1b      	ldr	r3, [pc, #108]	; (801edb4 <udp_input+0x224>)
 801ed46:	687a      	ldr	r2, [r7, #4]
 801ed48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ed4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ed4c:	e021      	b.n	801ed92 <udp_input+0x202>
        pbuf_free(p);
 801ed4e:	6878      	ldr	r0, [r7, #4]
 801ed50:	f7f9 f9c8 	bl	80180e4 <pbuf_free>
        goto end;
 801ed54:	e01c      	b.n	801ed90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ed56:	7cfb      	ldrb	r3, [r7, #19]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d112      	bne.n	801ed82 <udp_input+0x1f2>
 801ed5c:	4b12      	ldr	r3, [pc, #72]	; (801eda8 <udp_input+0x218>)
 801ed5e:	695b      	ldr	r3, [r3, #20]
 801ed60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ed64:	2be0      	cmp	r3, #224	; 0xe0
 801ed66:	d00c      	beq.n	801ed82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ed68:	4b0f      	ldr	r3, [pc, #60]	; (801eda8 <udp_input+0x218>)
 801ed6a:	899b      	ldrh	r3, [r3, #12]
 801ed6c:	3308      	adds	r3, #8
 801ed6e:	b29b      	uxth	r3, r3
 801ed70:	b21b      	sxth	r3, r3
 801ed72:	4619      	mov	r1, r3
 801ed74:	6878      	ldr	r0, [r7, #4]
 801ed76:	f7f9 f9a2 	bl	80180be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ed7a:	2103      	movs	r1, #3
 801ed7c:	6878      	ldr	r0, [r7, #4]
 801ed7e:	f003 fa19 	bl	80221b4 <icmp_dest_unreach>
      pbuf_free(p);
 801ed82:	6878      	ldr	r0, [r7, #4]
 801ed84:	f7f9 f9ae 	bl	80180e4 <pbuf_free>
  return;
 801ed88:	e003      	b.n	801ed92 <udp_input+0x202>
    pbuf_free(p);
 801ed8a:	6878      	ldr	r0, [r7, #4]
 801ed8c:	f7f9 f9aa 	bl	80180e4 <pbuf_free>
  return;
 801ed90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ed92:	372c      	adds	r7, #44	; 0x2c
 801ed94:	46bd      	mov	sp, r7
 801ed96:	bd90      	pop	{r4, r7, pc}
 801ed98:	08028068 	.word	0x08028068
 801ed9c:	0802810c 	.word	0x0802810c
 801eda0:	080280bc 	.word	0x080280bc
 801eda4:	08028124 	.word	0x08028124
 801eda8:	2000cc8c 	.word	0x2000cc8c
 801edac:	200103d8 	.word	0x200103d8
 801edb0:	08028140 	.word	0x08028140
 801edb4:	2000cc9c 	.word	0x2000cc9c

0801edb8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801edb8:	b580      	push	{r7, lr}
 801edba:	b088      	sub	sp, #32
 801edbc:	af02      	add	r7, sp, #8
 801edbe:	60f8      	str	r0, [r7, #12]
 801edc0:	60b9      	str	r1, [r7, #8]
 801edc2:	607a      	str	r2, [r7, #4]
 801edc4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d109      	bne.n	801ede0 <udp_sendto_if+0x28>
 801edcc:	4b2e      	ldr	r3, [pc, #184]	; (801ee88 <udp_sendto_if+0xd0>)
 801edce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801edd2:	492e      	ldr	r1, [pc, #184]	; (801ee8c <udp_sendto_if+0xd4>)
 801edd4:	482e      	ldr	r0, [pc, #184]	; (801ee90 <udp_sendto_if+0xd8>)
 801edd6:	f005 fce3 	bl	80247a0 <iprintf>
 801edda:	f06f 030f 	mvn.w	r3, #15
 801edde:	e04f      	b.n	801ee80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801ede0:	68bb      	ldr	r3, [r7, #8]
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d109      	bne.n	801edfa <udp_sendto_if+0x42>
 801ede6:	4b28      	ldr	r3, [pc, #160]	; (801ee88 <udp_sendto_if+0xd0>)
 801ede8:	f240 2281 	movw	r2, #641	; 0x281
 801edec:	4929      	ldr	r1, [pc, #164]	; (801ee94 <udp_sendto_if+0xdc>)
 801edee:	4828      	ldr	r0, [pc, #160]	; (801ee90 <udp_sendto_if+0xd8>)
 801edf0:	f005 fcd6 	bl	80247a0 <iprintf>
 801edf4:	f06f 030f 	mvn.w	r3, #15
 801edf8:	e042      	b.n	801ee80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d109      	bne.n	801ee14 <udp_sendto_if+0x5c>
 801ee00:	4b21      	ldr	r3, [pc, #132]	; (801ee88 <udp_sendto_if+0xd0>)
 801ee02:	f240 2282 	movw	r2, #642	; 0x282
 801ee06:	4924      	ldr	r1, [pc, #144]	; (801ee98 <udp_sendto_if+0xe0>)
 801ee08:	4821      	ldr	r0, [pc, #132]	; (801ee90 <udp_sendto_if+0xd8>)
 801ee0a:	f005 fcc9 	bl	80247a0 <iprintf>
 801ee0e:	f06f 030f 	mvn.w	r3, #15
 801ee12:	e035      	b.n	801ee80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ee14:	6a3b      	ldr	r3, [r7, #32]
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	d109      	bne.n	801ee2e <udp_sendto_if+0x76>
 801ee1a:	4b1b      	ldr	r3, [pc, #108]	; (801ee88 <udp_sendto_if+0xd0>)
 801ee1c:	f240 2283 	movw	r2, #643	; 0x283
 801ee20:	491e      	ldr	r1, [pc, #120]	; (801ee9c <udp_sendto_if+0xe4>)
 801ee22:	481b      	ldr	r0, [pc, #108]	; (801ee90 <udp_sendto_if+0xd8>)
 801ee24:	f005 fcbc 	bl	80247a0 <iprintf>
 801ee28:	f06f 030f 	mvn.w	r3, #15
 801ee2c:	e028      	b.n	801ee80 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ee2e:	68fb      	ldr	r3, [r7, #12]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d009      	beq.n	801ee48 <udp_sendto_if+0x90>
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d005      	beq.n	801ee48 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ee44:	2be0      	cmp	r3, #224	; 0xe0
 801ee46:	d103      	bne.n	801ee50 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801ee48:	6a3b      	ldr	r3, [r7, #32]
 801ee4a:	3304      	adds	r3, #4
 801ee4c:	617b      	str	r3, [r7, #20]
 801ee4e:	e00b      	b.n	801ee68 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	681a      	ldr	r2, [r3, #0]
 801ee54:	6a3b      	ldr	r3, [r7, #32]
 801ee56:	3304      	adds	r3, #4
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	429a      	cmp	r2, r3
 801ee5c:	d002      	beq.n	801ee64 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801ee5e:	f06f 0303 	mvn.w	r3, #3
 801ee62:	e00d      	b.n	801ee80 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801ee68:	887a      	ldrh	r2, [r7, #2]
 801ee6a:	697b      	ldr	r3, [r7, #20]
 801ee6c:	9301      	str	r3, [sp, #4]
 801ee6e:	6a3b      	ldr	r3, [r7, #32]
 801ee70:	9300      	str	r3, [sp, #0]
 801ee72:	4613      	mov	r3, r2
 801ee74:	687a      	ldr	r2, [r7, #4]
 801ee76:	68b9      	ldr	r1, [r7, #8]
 801ee78:	68f8      	ldr	r0, [r7, #12]
 801ee7a:	f000 f811 	bl	801eea0 <udp_sendto_if_src>
 801ee7e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ee80:	4618      	mov	r0, r3
 801ee82:	3718      	adds	r7, #24
 801ee84:	46bd      	mov	sp, r7
 801ee86:	bd80      	pop	{r7, pc}
 801ee88:	08028068 	.word	0x08028068
 801ee8c:	080281dc 	.word	0x080281dc
 801ee90:	080280bc 	.word	0x080280bc
 801ee94:	080281f8 	.word	0x080281f8
 801ee98:	08028214 	.word	0x08028214
 801ee9c:	08028234 	.word	0x08028234

0801eea0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801eea0:	b580      	push	{r7, lr}
 801eea2:	b08c      	sub	sp, #48	; 0x30
 801eea4:	af04      	add	r7, sp, #16
 801eea6:	60f8      	str	r0, [r7, #12]
 801eea8:	60b9      	str	r1, [r7, #8]
 801eeaa:	607a      	str	r2, [r7, #4]
 801eeac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801eeae:	68fb      	ldr	r3, [r7, #12]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d109      	bne.n	801eec8 <udp_sendto_if_src+0x28>
 801eeb4:	4b65      	ldr	r3, [pc, #404]	; (801f04c <udp_sendto_if_src+0x1ac>)
 801eeb6:	f240 22d1 	movw	r2, #721	; 0x2d1
 801eeba:	4965      	ldr	r1, [pc, #404]	; (801f050 <udp_sendto_if_src+0x1b0>)
 801eebc:	4865      	ldr	r0, [pc, #404]	; (801f054 <udp_sendto_if_src+0x1b4>)
 801eebe:	f005 fc6f 	bl	80247a0 <iprintf>
 801eec2:	f06f 030f 	mvn.w	r3, #15
 801eec6:	e0bc      	b.n	801f042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801eec8:	68bb      	ldr	r3, [r7, #8]
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d109      	bne.n	801eee2 <udp_sendto_if_src+0x42>
 801eece:	4b5f      	ldr	r3, [pc, #380]	; (801f04c <udp_sendto_if_src+0x1ac>)
 801eed0:	f240 22d2 	movw	r2, #722	; 0x2d2
 801eed4:	4960      	ldr	r1, [pc, #384]	; (801f058 <udp_sendto_if_src+0x1b8>)
 801eed6:	485f      	ldr	r0, [pc, #380]	; (801f054 <udp_sendto_if_src+0x1b4>)
 801eed8:	f005 fc62 	bl	80247a0 <iprintf>
 801eedc:	f06f 030f 	mvn.w	r3, #15
 801eee0:	e0af      	b.n	801f042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d109      	bne.n	801eefc <udp_sendto_if_src+0x5c>
 801eee8:	4b58      	ldr	r3, [pc, #352]	; (801f04c <udp_sendto_if_src+0x1ac>)
 801eeea:	f240 22d3 	movw	r2, #723	; 0x2d3
 801eeee:	495b      	ldr	r1, [pc, #364]	; (801f05c <udp_sendto_if_src+0x1bc>)
 801eef0:	4858      	ldr	r0, [pc, #352]	; (801f054 <udp_sendto_if_src+0x1b4>)
 801eef2:	f005 fc55 	bl	80247a0 <iprintf>
 801eef6:	f06f 030f 	mvn.w	r3, #15
 801eefa:	e0a2      	b.n	801f042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d109      	bne.n	801ef16 <udp_sendto_if_src+0x76>
 801ef02:	4b52      	ldr	r3, [pc, #328]	; (801f04c <udp_sendto_if_src+0x1ac>)
 801ef04:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801ef08:	4955      	ldr	r1, [pc, #340]	; (801f060 <udp_sendto_if_src+0x1c0>)
 801ef0a:	4852      	ldr	r0, [pc, #328]	; (801f054 <udp_sendto_if_src+0x1b4>)
 801ef0c:	f005 fc48 	bl	80247a0 <iprintf>
 801ef10:	f06f 030f 	mvn.w	r3, #15
 801ef14:	e095      	b.n	801f042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d109      	bne.n	801ef30 <udp_sendto_if_src+0x90>
 801ef1c:	4b4b      	ldr	r3, [pc, #300]	; (801f04c <udp_sendto_if_src+0x1ac>)
 801ef1e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801ef22:	4950      	ldr	r1, [pc, #320]	; (801f064 <udp_sendto_if_src+0x1c4>)
 801ef24:	484b      	ldr	r0, [pc, #300]	; (801f054 <udp_sendto_if_src+0x1b4>)
 801ef26:	f005 fc3b 	bl	80247a0 <iprintf>
 801ef2a:	f06f 030f 	mvn.w	r3, #15
 801ef2e:	e088      	b.n	801f042 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	8a5b      	ldrh	r3, [r3, #18]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d10f      	bne.n	801ef58 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ef38:	68f9      	ldr	r1, [r7, #12]
 801ef3a:	68fb      	ldr	r3, [r7, #12]
 801ef3c:	8a5b      	ldrh	r3, [r3, #18]
 801ef3e:	461a      	mov	r2, r3
 801ef40:	68f8      	ldr	r0, [r7, #12]
 801ef42:	f000 f893 	bl	801f06c <udp_bind>
 801ef46:	4603      	mov	r3, r0
 801ef48:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801ef4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d002      	beq.n	801ef58 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801ef52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ef56:	e074      	b.n	801f042 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801ef58:	68bb      	ldr	r3, [r7, #8]
 801ef5a:	891b      	ldrh	r3, [r3, #8]
 801ef5c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801ef60:	4293      	cmp	r3, r2
 801ef62:	d902      	bls.n	801ef6a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801ef64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ef68:	e06b      	b.n	801f042 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801ef6a:	2108      	movs	r1, #8
 801ef6c:	68b8      	ldr	r0, [r7, #8]
 801ef6e:	f7f9 f823 	bl	8017fb8 <pbuf_add_header>
 801ef72:	4603      	mov	r3, r0
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d015      	beq.n	801efa4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801ef78:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ef7c:	2108      	movs	r1, #8
 801ef7e:	2022      	movs	r0, #34	; 0x22
 801ef80:	f7f8 fdd0 	bl	8017b24 <pbuf_alloc>
 801ef84:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801ef86:	69fb      	ldr	r3, [r7, #28]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d102      	bne.n	801ef92 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801ef8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ef90:	e057      	b.n	801f042 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801ef92:	68bb      	ldr	r3, [r7, #8]
 801ef94:	891b      	ldrh	r3, [r3, #8]
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d006      	beq.n	801efa8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801ef9a:	68b9      	ldr	r1, [r7, #8]
 801ef9c:	69f8      	ldr	r0, [r7, #28]
 801ef9e:	f7f9 f9c5 	bl	801832c <pbuf_chain>
 801efa2:	e001      	b.n	801efa8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801efa4:	68bb      	ldr	r3, [r7, #8]
 801efa6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801efa8:	69fb      	ldr	r3, [r7, #28]
 801efaa:	895b      	ldrh	r3, [r3, #10]
 801efac:	2b07      	cmp	r3, #7
 801efae:	d806      	bhi.n	801efbe <udp_sendto_if_src+0x11e>
 801efb0:	4b26      	ldr	r3, [pc, #152]	; (801f04c <udp_sendto_if_src+0x1ac>)
 801efb2:	f240 320e 	movw	r2, #782	; 0x30e
 801efb6:	492c      	ldr	r1, [pc, #176]	; (801f068 <udp_sendto_if_src+0x1c8>)
 801efb8:	4826      	ldr	r0, [pc, #152]	; (801f054 <udp_sendto_if_src+0x1b4>)
 801efba:	f005 fbf1 	bl	80247a0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801efbe:	69fb      	ldr	r3, [r7, #28]
 801efc0:	685b      	ldr	r3, [r3, #4]
 801efc2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801efc4:	68fb      	ldr	r3, [r7, #12]
 801efc6:	8a5b      	ldrh	r3, [r3, #18]
 801efc8:	4618      	mov	r0, r3
 801efca:	f7f7 fcbd 	bl	8016948 <lwip_htons>
 801efce:	4603      	mov	r3, r0
 801efd0:	461a      	mov	r2, r3
 801efd2:	697b      	ldr	r3, [r7, #20]
 801efd4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801efd6:	887b      	ldrh	r3, [r7, #2]
 801efd8:	4618      	mov	r0, r3
 801efda:	f7f7 fcb5 	bl	8016948 <lwip_htons>
 801efde:	4603      	mov	r3, r0
 801efe0:	461a      	mov	r2, r3
 801efe2:	697b      	ldr	r3, [r7, #20]
 801efe4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801efe6:	697b      	ldr	r3, [r7, #20]
 801efe8:	2200      	movs	r2, #0
 801efea:	719a      	strb	r2, [r3, #6]
 801efec:	2200      	movs	r2, #0
 801efee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801eff0:	69fb      	ldr	r3, [r7, #28]
 801eff2:	891b      	ldrh	r3, [r3, #8]
 801eff4:	4618      	mov	r0, r3
 801eff6:	f7f7 fca7 	bl	8016948 <lwip_htons>
 801effa:	4603      	mov	r3, r0
 801effc:	461a      	mov	r2, r3
 801effe:	697b      	ldr	r3, [r7, #20]
 801f000:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801f002:	2311      	movs	r3, #17
 801f004:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801f006:	68fb      	ldr	r3, [r7, #12]
 801f008:	7adb      	ldrb	r3, [r3, #11]
 801f00a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	7a9b      	ldrb	r3, [r3, #10]
 801f010:	7cb9      	ldrb	r1, [r7, #18]
 801f012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f014:	9202      	str	r2, [sp, #8]
 801f016:	7cfa      	ldrb	r2, [r7, #19]
 801f018:	9201      	str	r2, [sp, #4]
 801f01a:	9300      	str	r3, [sp, #0]
 801f01c:	460b      	mov	r3, r1
 801f01e:	687a      	ldr	r2, [r7, #4]
 801f020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f022:	69f8      	ldr	r0, [r7, #28]
 801f024:	f003 fb54 	bl	80226d0 <ip4_output_if_src>
 801f028:	4603      	mov	r3, r0
 801f02a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801f02c:	69fa      	ldr	r2, [r7, #28]
 801f02e:	68bb      	ldr	r3, [r7, #8]
 801f030:	429a      	cmp	r2, r3
 801f032:	d004      	beq.n	801f03e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801f034:	69f8      	ldr	r0, [r7, #28]
 801f036:	f7f9 f855 	bl	80180e4 <pbuf_free>
    q = NULL;
 801f03a:	2300      	movs	r3, #0
 801f03c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801f03e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801f042:	4618      	mov	r0, r3
 801f044:	3720      	adds	r7, #32
 801f046:	46bd      	mov	sp, r7
 801f048:	bd80      	pop	{r7, pc}
 801f04a:	bf00      	nop
 801f04c:	08028068 	.word	0x08028068
 801f050:	08028254 	.word	0x08028254
 801f054:	080280bc 	.word	0x080280bc
 801f058:	08028274 	.word	0x08028274
 801f05c:	08028294 	.word	0x08028294
 801f060:	080282b8 	.word	0x080282b8
 801f064:	080282dc 	.word	0x080282dc
 801f068:	08028300 	.word	0x08028300

0801f06c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f06c:	b580      	push	{r7, lr}
 801f06e:	b086      	sub	sp, #24
 801f070:	af00      	add	r7, sp, #0
 801f072:	60f8      	str	r0, [r7, #12]
 801f074:	60b9      	str	r1, [r7, #8]
 801f076:	4613      	mov	r3, r2
 801f078:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f07a:	68bb      	ldr	r3, [r7, #8]
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d101      	bne.n	801f084 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f080:	4b39      	ldr	r3, [pc, #228]	; (801f168 <udp_bind+0xfc>)
 801f082:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f084:	68fb      	ldr	r3, [r7, #12]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d109      	bne.n	801f09e <udp_bind+0x32>
 801f08a:	4b38      	ldr	r3, [pc, #224]	; (801f16c <udp_bind+0x100>)
 801f08c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f090:	4937      	ldr	r1, [pc, #220]	; (801f170 <udp_bind+0x104>)
 801f092:	4838      	ldr	r0, [pc, #224]	; (801f174 <udp_bind+0x108>)
 801f094:	f005 fb84 	bl	80247a0 <iprintf>
 801f098:	f06f 030f 	mvn.w	r3, #15
 801f09c:	e060      	b.n	801f160 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801f09e:	2300      	movs	r3, #0
 801f0a0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f0a2:	4b35      	ldr	r3, [pc, #212]	; (801f178 <udp_bind+0x10c>)
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	617b      	str	r3, [r7, #20]
 801f0a8:	e009      	b.n	801f0be <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f0aa:	68fa      	ldr	r2, [r7, #12]
 801f0ac:	697b      	ldr	r3, [r7, #20]
 801f0ae:	429a      	cmp	r2, r3
 801f0b0:	d102      	bne.n	801f0b8 <udp_bind+0x4c>
      rebind = 1;
 801f0b2:	2301      	movs	r3, #1
 801f0b4:	74fb      	strb	r3, [r7, #19]
      break;
 801f0b6:	e005      	b.n	801f0c4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f0b8:	697b      	ldr	r3, [r7, #20]
 801f0ba:	68db      	ldr	r3, [r3, #12]
 801f0bc:	617b      	str	r3, [r7, #20]
 801f0be:	697b      	ldr	r3, [r7, #20]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d1f2      	bne.n	801f0aa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f0c4:	88fb      	ldrh	r3, [r7, #6]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d109      	bne.n	801f0de <udp_bind+0x72>
    port = udp_new_port();
 801f0ca:	f7ff fcc5 	bl	801ea58 <udp_new_port>
 801f0ce:	4603      	mov	r3, r0
 801f0d0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801f0d2:	88fb      	ldrh	r3, [r7, #6]
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	d12c      	bne.n	801f132 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801f0d8:	f06f 0307 	mvn.w	r3, #7
 801f0dc:	e040      	b.n	801f160 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f0de:	4b26      	ldr	r3, [pc, #152]	; (801f178 <udp_bind+0x10c>)
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	617b      	str	r3, [r7, #20]
 801f0e4:	e022      	b.n	801f12c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801f0e6:	68fa      	ldr	r2, [r7, #12]
 801f0e8:	697b      	ldr	r3, [r7, #20]
 801f0ea:	429a      	cmp	r2, r3
 801f0ec:	d01b      	beq.n	801f126 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801f0ee:	697b      	ldr	r3, [r7, #20]
 801f0f0:	8a5b      	ldrh	r3, [r3, #18]
 801f0f2:	88fa      	ldrh	r2, [r7, #6]
 801f0f4:	429a      	cmp	r2, r3
 801f0f6:	d116      	bne.n	801f126 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f0f8:	697b      	ldr	r3, [r7, #20]
 801f0fa:	681a      	ldr	r2, [r3, #0]
 801f0fc:	68bb      	ldr	r3, [r7, #8]
 801f0fe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801f100:	429a      	cmp	r2, r3
 801f102:	d00d      	beq.n	801f120 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f104:	68bb      	ldr	r3, [r7, #8]
 801f106:	2b00      	cmp	r3, #0
 801f108:	d00a      	beq.n	801f120 <udp_bind+0xb4>
 801f10a:	68bb      	ldr	r3, [r7, #8]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d006      	beq.n	801f120 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f112:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f114:	2b00      	cmp	r3, #0
 801f116:	d003      	beq.n	801f120 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f118:	697b      	ldr	r3, [r7, #20]
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d102      	bne.n	801f126 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801f120:	f06f 0307 	mvn.w	r3, #7
 801f124:	e01c      	b.n	801f160 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f126:	697b      	ldr	r3, [r7, #20]
 801f128:	68db      	ldr	r3, [r3, #12]
 801f12a:	617b      	str	r3, [r7, #20]
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d1d9      	bne.n	801f0e6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f132:	68bb      	ldr	r3, [r7, #8]
 801f134:	2b00      	cmp	r3, #0
 801f136:	d002      	beq.n	801f13e <udp_bind+0xd2>
 801f138:	68bb      	ldr	r3, [r7, #8]
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	e000      	b.n	801f140 <udp_bind+0xd4>
 801f13e:	2300      	movs	r3, #0
 801f140:	68fa      	ldr	r2, [r7, #12]
 801f142:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801f144:	68fb      	ldr	r3, [r7, #12]
 801f146:	88fa      	ldrh	r2, [r7, #6]
 801f148:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801f14a:	7cfb      	ldrb	r3, [r7, #19]
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	d106      	bne.n	801f15e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801f150:	4b09      	ldr	r3, [pc, #36]	; (801f178 <udp_bind+0x10c>)
 801f152:	681a      	ldr	r2, [r3, #0]
 801f154:	68fb      	ldr	r3, [r7, #12]
 801f156:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801f158:	4a07      	ldr	r2, [pc, #28]	; (801f178 <udp_bind+0x10c>)
 801f15a:	68fb      	ldr	r3, [r7, #12]
 801f15c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801f15e:	2300      	movs	r3, #0
}
 801f160:	4618      	mov	r0, r3
 801f162:	3718      	adds	r7, #24
 801f164:	46bd      	mov	sp, r7
 801f166:	bd80      	pop	{r7, pc}
 801f168:	08028fe0 	.word	0x08028fe0
 801f16c:	08028068 	.word	0x08028068
 801f170:	08028330 	.word	0x08028330
 801f174:	080280bc 	.word	0x080280bc
 801f178:	200103d8 	.word	0x200103d8

0801f17c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f17c:	b580      	push	{r7, lr}
 801f17e:	b086      	sub	sp, #24
 801f180:	af00      	add	r7, sp, #0
 801f182:	60f8      	str	r0, [r7, #12]
 801f184:	60b9      	str	r1, [r7, #8]
 801f186:	4613      	mov	r3, r2
 801f188:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	d109      	bne.n	801f1a4 <udp_connect+0x28>
 801f190:	4b2c      	ldr	r3, [pc, #176]	; (801f244 <udp_connect+0xc8>)
 801f192:	f240 4235 	movw	r2, #1077	; 0x435
 801f196:	492c      	ldr	r1, [pc, #176]	; (801f248 <udp_connect+0xcc>)
 801f198:	482c      	ldr	r0, [pc, #176]	; (801f24c <udp_connect+0xd0>)
 801f19a:	f005 fb01 	bl	80247a0 <iprintf>
 801f19e:	f06f 030f 	mvn.w	r3, #15
 801f1a2:	e04b      	b.n	801f23c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801f1a4:	68bb      	ldr	r3, [r7, #8]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d109      	bne.n	801f1be <udp_connect+0x42>
 801f1aa:	4b26      	ldr	r3, [pc, #152]	; (801f244 <udp_connect+0xc8>)
 801f1ac:	f240 4236 	movw	r2, #1078	; 0x436
 801f1b0:	4927      	ldr	r1, [pc, #156]	; (801f250 <udp_connect+0xd4>)
 801f1b2:	4826      	ldr	r0, [pc, #152]	; (801f24c <udp_connect+0xd0>)
 801f1b4:	f005 faf4 	bl	80247a0 <iprintf>
 801f1b8:	f06f 030f 	mvn.w	r3, #15
 801f1bc:	e03e      	b.n	801f23c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	8a5b      	ldrh	r3, [r3, #18]
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d10f      	bne.n	801f1e6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f1c6:	68f9      	ldr	r1, [r7, #12]
 801f1c8:	68fb      	ldr	r3, [r7, #12]
 801f1ca:	8a5b      	ldrh	r3, [r3, #18]
 801f1cc:	461a      	mov	r2, r3
 801f1ce:	68f8      	ldr	r0, [r7, #12]
 801f1d0:	f7ff ff4c 	bl	801f06c <udp_bind>
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801f1d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d002      	beq.n	801f1e6 <udp_connect+0x6a>
      return err;
 801f1e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f1e4:	e02a      	b.n	801f23c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801f1e6:	68bb      	ldr	r3, [r7, #8]
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	d002      	beq.n	801f1f2 <udp_connect+0x76>
 801f1ec:	68bb      	ldr	r3, [r7, #8]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	e000      	b.n	801f1f4 <udp_connect+0x78>
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	68fa      	ldr	r2, [r7, #12]
 801f1f6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	88fa      	ldrh	r2, [r7, #6]
 801f1fc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	7c1b      	ldrb	r3, [r3, #16]
 801f202:	f043 0304 	orr.w	r3, r3, #4
 801f206:	b2da      	uxtb	r2, r3
 801f208:	68fb      	ldr	r3, [r7, #12]
 801f20a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f20c:	4b11      	ldr	r3, [pc, #68]	; (801f254 <udp_connect+0xd8>)
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	617b      	str	r3, [r7, #20]
 801f212:	e008      	b.n	801f226 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801f214:	68fa      	ldr	r2, [r7, #12]
 801f216:	697b      	ldr	r3, [r7, #20]
 801f218:	429a      	cmp	r2, r3
 801f21a:	d101      	bne.n	801f220 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801f21c:	2300      	movs	r3, #0
 801f21e:	e00d      	b.n	801f23c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f220:	697b      	ldr	r3, [r7, #20]
 801f222:	68db      	ldr	r3, [r3, #12]
 801f224:	617b      	str	r3, [r7, #20]
 801f226:	697b      	ldr	r3, [r7, #20]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d1f3      	bne.n	801f214 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801f22c:	4b09      	ldr	r3, [pc, #36]	; (801f254 <udp_connect+0xd8>)
 801f22e:	681a      	ldr	r2, [r3, #0]
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801f234:	4a07      	ldr	r2, [pc, #28]	; (801f254 <udp_connect+0xd8>)
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801f23a:	2300      	movs	r3, #0
}
 801f23c:	4618      	mov	r0, r3
 801f23e:	3718      	adds	r7, #24
 801f240:	46bd      	mov	sp, r7
 801f242:	bd80      	pop	{r7, pc}
 801f244:	08028068 	.word	0x08028068
 801f248:	08028348 	.word	0x08028348
 801f24c:	080280bc 	.word	0x080280bc
 801f250:	08028364 	.word	0x08028364
 801f254:	200103d8 	.word	0x200103d8

0801f258 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801f258:	b580      	push	{r7, lr}
 801f25a:	b084      	sub	sp, #16
 801f25c:	af00      	add	r7, sp, #0
 801f25e:	60f8      	str	r0, [r7, #12]
 801f260:	60b9      	str	r1, [r7, #8]
 801f262:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	2b00      	cmp	r3, #0
 801f268:	d107      	bne.n	801f27a <udp_recv+0x22>
 801f26a:	4b08      	ldr	r3, [pc, #32]	; (801f28c <udp_recv+0x34>)
 801f26c:	f240 428a 	movw	r2, #1162	; 0x48a
 801f270:	4907      	ldr	r1, [pc, #28]	; (801f290 <udp_recv+0x38>)
 801f272:	4808      	ldr	r0, [pc, #32]	; (801f294 <udp_recv+0x3c>)
 801f274:	f005 fa94 	bl	80247a0 <iprintf>
 801f278:	e005      	b.n	801f286 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801f27a:	68fb      	ldr	r3, [r7, #12]
 801f27c:	68ba      	ldr	r2, [r7, #8]
 801f27e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801f280:	68fb      	ldr	r3, [r7, #12]
 801f282:	687a      	ldr	r2, [r7, #4]
 801f284:	61da      	str	r2, [r3, #28]
}
 801f286:	3710      	adds	r7, #16
 801f288:	46bd      	mov	sp, r7
 801f28a:	bd80      	pop	{r7, pc}
 801f28c:	08028068 	.word	0x08028068
 801f290:	0802839c 	.word	0x0802839c
 801f294:	080280bc 	.word	0x080280bc

0801f298 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801f298:	b580      	push	{r7, lr}
 801f29a:	b084      	sub	sp, #16
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d107      	bne.n	801f2b6 <udp_remove+0x1e>
 801f2a6:	4b19      	ldr	r3, [pc, #100]	; (801f30c <udp_remove+0x74>)
 801f2a8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f2ac:	4918      	ldr	r1, [pc, #96]	; (801f310 <udp_remove+0x78>)
 801f2ae:	4819      	ldr	r0, [pc, #100]	; (801f314 <udp_remove+0x7c>)
 801f2b0:	f005 fa76 	bl	80247a0 <iprintf>
 801f2b4:	e026      	b.n	801f304 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f2b6:	4b18      	ldr	r3, [pc, #96]	; (801f318 <udp_remove+0x80>)
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	687a      	ldr	r2, [r7, #4]
 801f2bc:	429a      	cmp	r2, r3
 801f2be:	d105      	bne.n	801f2cc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801f2c0:	4b15      	ldr	r3, [pc, #84]	; (801f318 <udp_remove+0x80>)
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	68db      	ldr	r3, [r3, #12]
 801f2c6:	4a14      	ldr	r2, [pc, #80]	; (801f318 <udp_remove+0x80>)
 801f2c8:	6013      	str	r3, [r2, #0]
 801f2ca:	e017      	b.n	801f2fc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f2cc:	4b12      	ldr	r3, [pc, #72]	; (801f318 <udp_remove+0x80>)
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	60fb      	str	r3, [r7, #12]
 801f2d2:	e010      	b.n	801f2f6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f2d4:	68fb      	ldr	r3, [r7, #12]
 801f2d6:	68db      	ldr	r3, [r3, #12]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d009      	beq.n	801f2f0 <udp_remove+0x58>
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	68db      	ldr	r3, [r3, #12]
 801f2e0:	687a      	ldr	r2, [r7, #4]
 801f2e2:	429a      	cmp	r2, r3
 801f2e4:	d104      	bne.n	801f2f0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	68da      	ldr	r2, [r3, #12]
 801f2ea:	68fb      	ldr	r3, [r7, #12]
 801f2ec:	60da      	str	r2, [r3, #12]
        break;
 801f2ee:	e005      	b.n	801f2fc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	68db      	ldr	r3, [r3, #12]
 801f2f4:	60fb      	str	r3, [r7, #12]
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d1eb      	bne.n	801f2d4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f2fc:	6879      	ldr	r1, [r7, #4]
 801f2fe:	2000      	movs	r0, #0
 801f300:	f7f8 f82a 	bl	8017358 <memp_free>
}
 801f304:	3710      	adds	r7, #16
 801f306:	46bd      	mov	sp, r7
 801f308:	bd80      	pop	{r7, pc}
 801f30a:	bf00      	nop
 801f30c:	08028068 	.word	0x08028068
 801f310:	080283b4 	.word	0x080283b4
 801f314:	080280bc 	.word	0x080280bc
 801f318:	200103d8 	.word	0x200103d8

0801f31c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f31c:	b580      	push	{r7, lr}
 801f31e:	b082      	sub	sp, #8
 801f320:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f322:	2000      	movs	r0, #0
 801f324:	f7f7 ffc6 	bl	80172b4 <memp_malloc>
 801f328:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d007      	beq.n	801f340 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f330:	2220      	movs	r2, #32
 801f332:	2100      	movs	r1, #0
 801f334:	6878      	ldr	r0, [r7, #4]
 801f336:	f005 f983 	bl	8024640 <memset>
    pcb->ttl = UDP_TTL;
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	22ff      	movs	r2, #255	; 0xff
 801f33e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801f340:	687b      	ldr	r3, [r7, #4]
}
 801f342:	4618      	mov	r0, r3
 801f344:	3708      	adds	r7, #8
 801f346:	46bd      	mov	sp, r7
 801f348:	bd80      	pop	{r7, pc}

0801f34a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801f34a:	b580      	push	{r7, lr}
 801f34c:	b084      	sub	sp, #16
 801f34e:	af00      	add	r7, sp, #0
 801f350:	4603      	mov	r3, r0
 801f352:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801f354:	f7ff ffe2 	bl	801f31c <udp_new>
 801f358:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801f35a:	68fb      	ldr	r3, [r7, #12]
}
 801f35c:	4618      	mov	r0, r3
 801f35e:	3710      	adds	r7, #16
 801f360:	46bd      	mov	sp, r7
 801f362:	bd80      	pop	{r7, pc}

0801f364 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801f364:	b480      	push	{r7}
 801f366:	b085      	sub	sp, #20
 801f368:	af00      	add	r7, sp, #0
 801f36a:	6078      	str	r0, [r7, #4]
 801f36c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	2b00      	cmp	r3, #0
 801f372:	d01e      	beq.n	801f3b2 <udp_netif_ip_addr_changed+0x4e>
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d01a      	beq.n	801f3b2 <udp_netif_ip_addr_changed+0x4e>
 801f37c:	683b      	ldr	r3, [r7, #0]
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d017      	beq.n	801f3b2 <udp_netif_ip_addr_changed+0x4e>
 801f382:	683b      	ldr	r3, [r7, #0]
 801f384:	681b      	ldr	r3, [r3, #0]
 801f386:	2b00      	cmp	r3, #0
 801f388:	d013      	beq.n	801f3b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f38a:	4b0d      	ldr	r3, [pc, #52]	; (801f3c0 <udp_netif_ip_addr_changed+0x5c>)
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	60fb      	str	r3, [r7, #12]
 801f390:	e00c      	b.n	801f3ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f392:	68fb      	ldr	r3, [r7, #12]
 801f394:	681a      	ldr	r2, [r3, #0]
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	681b      	ldr	r3, [r3, #0]
 801f39a:	429a      	cmp	r2, r3
 801f39c:	d103      	bne.n	801f3a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f39e:	683b      	ldr	r3, [r7, #0]
 801f3a0:	681a      	ldr	r2, [r3, #0]
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f3a6:	68fb      	ldr	r3, [r7, #12]
 801f3a8:	68db      	ldr	r3, [r3, #12]
 801f3aa:	60fb      	str	r3, [r7, #12]
 801f3ac:	68fb      	ldr	r3, [r7, #12]
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	d1ef      	bne.n	801f392 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801f3b2:	bf00      	nop
 801f3b4:	3714      	adds	r7, #20
 801f3b6:	46bd      	mov	sp, r7
 801f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3bc:	4770      	bx	lr
 801f3be:	bf00      	nop
 801f3c0:	200103d8 	.word	0x200103d8

0801f3c4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801f3c8:	4b20      	ldr	r3, [pc, #128]	; (801f44c <dhcp_inc_pcb_refcount+0x88>)
 801f3ca:	781b      	ldrb	r3, [r3, #0]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d133      	bne.n	801f438 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801f3d0:	4b1f      	ldr	r3, [pc, #124]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d005      	beq.n	801f3e4 <dhcp_inc_pcb_refcount+0x20>
 801f3d8:	4b1e      	ldr	r3, [pc, #120]	; (801f454 <dhcp_inc_pcb_refcount+0x90>)
 801f3da:	22e5      	movs	r2, #229	; 0xe5
 801f3dc:	491e      	ldr	r1, [pc, #120]	; (801f458 <dhcp_inc_pcb_refcount+0x94>)
 801f3de:	481f      	ldr	r0, [pc, #124]	; (801f45c <dhcp_inc_pcb_refcount+0x98>)
 801f3e0:	f005 f9de 	bl	80247a0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801f3e4:	f7ff ff9a 	bl	801f31c <udp_new>
 801f3e8:	4602      	mov	r2, r0
 801f3ea:	4b19      	ldr	r3, [pc, #100]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f3ec:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801f3ee:	4b18      	ldr	r3, [pc, #96]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d102      	bne.n	801f3fc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801f3f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f3fa:	e024      	b.n	801f446 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801f3fc:	4b14      	ldr	r3, [pc, #80]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	7a5a      	ldrb	r2, [r3, #9]
 801f402:	4b13      	ldr	r3, [pc, #76]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f404:	681b      	ldr	r3, [r3, #0]
 801f406:	f042 0220 	orr.w	r2, r2, #32
 801f40a:	b2d2      	uxtb	r2, r2
 801f40c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801f40e:	4b10      	ldr	r3, [pc, #64]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	2244      	movs	r2, #68	; 0x44
 801f414:	4912      	ldr	r1, [pc, #72]	; (801f460 <dhcp_inc_pcb_refcount+0x9c>)
 801f416:	4618      	mov	r0, r3
 801f418:	f7ff fe28 	bl	801f06c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801f41c:	4b0c      	ldr	r3, [pc, #48]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	2243      	movs	r2, #67	; 0x43
 801f422:	490f      	ldr	r1, [pc, #60]	; (801f460 <dhcp_inc_pcb_refcount+0x9c>)
 801f424:	4618      	mov	r0, r3
 801f426:	f7ff fea9 	bl	801f17c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801f42a:	4b09      	ldr	r3, [pc, #36]	; (801f450 <dhcp_inc_pcb_refcount+0x8c>)
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	2200      	movs	r2, #0
 801f430:	490c      	ldr	r1, [pc, #48]	; (801f464 <dhcp_inc_pcb_refcount+0xa0>)
 801f432:	4618      	mov	r0, r3
 801f434:	f7ff ff10 	bl	801f258 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801f438:	4b04      	ldr	r3, [pc, #16]	; (801f44c <dhcp_inc_pcb_refcount+0x88>)
 801f43a:	781b      	ldrb	r3, [r3, #0]
 801f43c:	3301      	adds	r3, #1
 801f43e:	b2da      	uxtb	r2, r3
 801f440:	4b02      	ldr	r3, [pc, #8]	; (801f44c <dhcp_inc_pcb_refcount+0x88>)
 801f442:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801f444:	2300      	movs	r3, #0
}
 801f446:	4618      	mov	r0, r3
 801f448:	bd80      	pop	{r7, pc}
 801f44a:	bf00      	nop
 801f44c:	20009008 	.word	0x20009008
 801f450:	20009004 	.word	0x20009004
 801f454:	080283cc 	.word	0x080283cc
 801f458:	08028404 	.word	0x08028404
 801f45c:	0802842c 	.word	0x0802842c
 801f460:	08028fe0 	.word	0x08028fe0
 801f464:	08020d21 	.word	0x08020d21

0801f468 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801f468:	b580      	push	{r7, lr}
 801f46a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801f46c:	4b0e      	ldr	r3, [pc, #56]	; (801f4a8 <dhcp_dec_pcb_refcount+0x40>)
 801f46e:	781b      	ldrb	r3, [r3, #0]
 801f470:	2b00      	cmp	r3, #0
 801f472:	d105      	bne.n	801f480 <dhcp_dec_pcb_refcount+0x18>
 801f474:	4b0d      	ldr	r3, [pc, #52]	; (801f4ac <dhcp_dec_pcb_refcount+0x44>)
 801f476:	22ff      	movs	r2, #255	; 0xff
 801f478:	490d      	ldr	r1, [pc, #52]	; (801f4b0 <dhcp_dec_pcb_refcount+0x48>)
 801f47a:	480e      	ldr	r0, [pc, #56]	; (801f4b4 <dhcp_dec_pcb_refcount+0x4c>)
 801f47c:	f005 f990 	bl	80247a0 <iprintf>
  dhcp_pcb_refcount--;
 801f480:	4b09      	ldr	r3, [pc, #36]	; (801f4a8 <dhcp_dec_pcb_refcount+0x40>)
 801f482:	781b      	ldrb	r3, [r3, #0]
 801f484:	3b01      	subs	r3, #1
 801f486:	b2da      	uxtb	r2, r3
 801f488:	4b07      	ldr	r3, [pc, #28]	; (801f4a8 <dhcp_dec_pcb_refcount+0x40>)
 801f48a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801f48c:	4b06      	ldr	r3, [pc, #24]	; (801f4a8 <dhcp_dec_pcb_refcount+0x40>)
 801f48e:	781b      	ldrb	r3, [r3, #0]
 801f490:	2b00      	cmp	r3, #0
 801f492:	d107      	bne.n	801f4a4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801f494:	4b08      	ldr	r3, [pc, #32]	; (801f4b8 <dhcp_dec_pcb_refcount+0x50>)
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	4618      	mov	r0, r3
 801f49a:	f7ff fefd 	bl	801f298 <udp_remove>
    dhcp_pcb = NULL;
 801f49e:	4b06      	ldr	r3, [pc, #24]	; (801f4b8 <dhcp_dec_pcb_refcount+0x50>)
 801f4a0:	2200      	movs	r2, #0
 801f4a2:	601a      	str	r2, [r3, #0]
  }
}
 801f4a4:	bf00      	nop
 801f4a6:	bd80      	pop	{r7, pc}
 801f4a8:	20009008 	.word	0x20009008
 801f4ac:	080283cc 	.word	0x080283cc
 801f4b0:	08028454 	.word	0x08028454
 801f4b4:	0802842c 	.word	0x0802842c
 801f4b8:	20009004 	.word	0x20009004

0801f4bc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b084      	sub	sp, #16
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f4c8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801f4ca:	210c      	movs	r1, #12
 801f4cc:	68f8      	ldr	r0, [r7, #12]
 801f4ce:	f001 f869 	bl	80205a4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801f4d2:	4b06      	ldr	r3, [pc, #24]	; (801f4ec <dhcp_handle_nak+0x30>)
 801f4d4:	4a05      	ldr	r2, [pc, #20]	; (801f4ec <dhcp_handle_nak+0x30>)
 801f4d6:	4905      	ldr	r1, [pc, #20]	; (801f4ec <dhcp_handle_nak+0x30>)
 801f4d8:	6878      	ldr	r0, [r7, #4]
 801f4da:	f7f8 f8e9 	bl	80176b0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801f4de:	6878      	ldr	r0, [r7, #4]
 801f4e0:	f000 fc5c 	bl	801fd9c <dhcp_discover>
}
 801f4e4:	bf00      	nop
 801f4e6:	3710      	adds	r7, #16
 801f4e8:	46bd      	mov	sp, r7
 801f4ea:	bd80      	pop	{r7, pc}
 801f4ec:	08028fe0 	.word	0x08028fe0

0801f4f0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801f4f0:	b580      	push	{r7, lr}
 801f4f2:	b084      	sub	sp, #16
 801f4f4:	af00      	add	r7, sp, #0
 801f4f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f4fc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801f4fe:	2108      	movs	r1, #8
 801f500:	68f8      	ldr	r0, [r7, #12]
 801f502:	f001 f84f 	bl	80205a4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801f506:	68fb      	ldr	r3, [r7, #12]
 801f508:	331c      	adds	r3, #28
 801f50a:	2200      	movs	r2, #0
 801f50c:	4619      	mov	r1, r3
 801f50e:	6878      	ldr	r0, [r7, #4]
 801f510:	f002 fb4e 	bl	8021bb0 <etharp_query>
 801f514:	4603      	mov	r3, r0
 801f516:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801f518:	68fb      	ldr	r3, [r7, #12]
 801f51a:	799b      	ldrb	r3, [r3, #6]
 801f51c:	2bff      	cmp	r3, #255	; 0xff
 801f51e:	d005      	beq.n	801f52c <dhcp_check+0x3c>
    dhcp->tries++;
 801f520:	68fb      	ldr	r3, [r7, #12]
 801f522:	799b      	ldrb	r3, [r3, #6]
 801f524:	3301      	adds	r3, #1
 801f526:	b2da      	uxtb	r2, r3
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801f52c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801f530:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f532:	893b      	ldrh	r3, [r7, #8]
 801f534:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801f538:	4a06      	ldr	r2, [pc, #24]	; (801f554 <dhcp_check+0x64>)
 801f53a:	fb82 1203 	smull	r1, r2, r2, r3
 801f53e:	1152      	asrs	r2, r2, #5
 801f540:	17db      	asrs	r3, r3, #31
 801f542:	1ad3      	subs	r3, r2, r3
 801f544:	b29a      	uxth	r2, r3
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801f54a:	bf00      	nop
 801f54c:	3710      	adds	r7, #16
 801f54e:	46bd      	mov	sp, r7
 801f550:	bd80      	pop	{r7, pc}
 801f552:	bf00      	nop
 801f554:	10624dd3 	.word	0x10624dd3

0801f558 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801f558:	b580      	push	{r7, lr}
 801f55a:	b084      	sub	sp, #16
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	6078      	str	r0, [r7, #4]
 801f560:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f566:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801f568:	4b0c      	ldr	r3, [pc, #48]	; (801f59c <dhcp_handle_offer+0x44>)
 801f56a:	789b      	ldrb	r3, [r3, #2]
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	d011      	beq.n	801f594 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	2200      	movs	r2, #0
 801f574:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801f576:	4b0a      	ldr	r3, [pc, #40]	; (801f5a0 <dhcp_handle_offer+0x48>)
 801f578:	689b      	ldr	r3, [r3, #8]
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7f7 f9f9 	bl	8016972 <lwip_htonl>
 801f580:	4602      	mov	r2, r0
 801f582:	68fb      	ldr	r3, [r7, #12]
 801f584:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801f586:	683b      	ldr	r3, [r7, #0]
 801f588:	691a      	ldr	r2, [r3, #16]
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801f58e:	6878      	ldr	r0, [r7, #4]
 801f590:	f000 f808 	bl	801f5a4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801f594:	bf00      	nop
 801f596:	3710      	adds	r7, #16
 801f598:	46bd      	mov	sp, r7
 801f59a:	bd80      	pop	{r7, pc}
 801f59c:	200103dc 	.word	0x200103dc
 801f5a0:	200103e4 	.word	0x200103e4

0801f5a4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801f5a4:	b5b0      	push	{r4, r5, r7, lr}
 801f5a6:	b08a      	sub	sp, #40	; 0x28
 801f5a8:	af02      	add	r7, sp, #8
 801f5aa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d109      	bne.n	801f5c6 <dhcp_select+0x22>
 801f5b2:	4b71      	ldr	r3, [pc, #452]	; (801f778 <dhcp_select+0x1d4>)
 801f5b4:	f240 1277 	movw	r2, #375	; 0x177
 801f5b8:	4970      	ldr	r1, [pc, #448]	; (801f77c <dhcp_select+0x1d8>)
 801f5ba:	4871      	ldr	r0, [pc, #452]	; (801f780 <dhcp_select+0x1dc>)
 801f5bc:	f005 f8f0 	bl	80247a0 <iprintf>
 801f5c0:	f06f 030f 	mvn.w	r3, #15
 801f5c4:	e0d3      	b.n	801f76e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f5ca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801f5cc:	69bb      	ldr	r3, [r7, #24]
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d109      	bne.n	801f5e6 <dhcp_select+0x42>
 801f5d2:	4b69      	ldr	r3, [pc, #420]	; (801f778 <dhcp_select+0x1d4>)
 801f5d4:	f240 1279 	movw	r2, #377	; 0x179
 801f5d8:	496a      	ldr	r1, [pc, #424]	; (801f784 <dhcp_select+0x1e0>)
 801f5da:	4869      	ldr	r0, [pc, #420]	; (801f780 <dhcp_select+0x1dc>)
 801f5dc:	f005 f8e0 	bl	80247a0 <iprintf>
 801f5e0:	f06f 0305 	mvn.w	r3, #5
 801f5e4:	e0c3      	b.n	801f76e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801f5e6:	2101      	movs	r1, #1
 801f5e8:	69b8      	ldr	r0, [r7, #24]
 801f5ea:	f000 ffdb 	bl	80205a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801f5ee:	f107 030c 	add.w	r3, r7, #12
 801f5f2:	2203      	movs	r2, #3
 801f5f4:	69b9      	ldr	r1, [r7, #24]
 801f5f6:	6878      	ldr	r0, [r7, #4]
 801f5f8:	f001 fc5e 	bl	8020eb8 <dhcp_create_msg>
 801f5fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801f5fe:	697b      	ldr	r3, [r7, #20]
 801f600:	2b00      	cmp	r3, #0
 801f602:	f000 8085 	beq.w	801f710 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801f606:	697b      	ldr	r3, [r7, #20]
 801f608:	685b      	ldr	r3, [r3, #4]
 801f60a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f60c:	89b8      	ldrh	r0, [r7, #12]
 801f60e:	693b      	ldr	r3, [r7, #16]
 801f610:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f614:	2302      	movs	r3, #2
 801f616:	2239      	movs	r2, #57	; 0x39
 801f618:	f000 ffde 	bl	80205d8 <dhcp_option>
 801f61c:	4603      	mov	r3, r0
 801f61e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f620:	89b8      	ldrh	r0, [r7, #12]
 801f622:	693b      	ldr	r3, [r7, #16]
 801f624:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801f62c:	461a      	mov	r2, r3
 801f62e:	f001 f82d 	bl	802068c <dhcp_option_short>
 801f632:	4603      	mov	r3, r0
 801f634:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801f636:	89b8      	ldrh	r0, [r7, #12]
 801f638:	693b      	ldr	r3, [r7, #16]
 801f63a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f63e:	2304      	movs	r3, #4
 801f640:	2232      	movs	r2, #50	; 0x32
 801f642:	f000 ffc9 	bl	80205d8 <dhcp_option>
 801f646:	4603      	mov	r3, r0
 801f648:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f64a:	89bc      	ldrh	r4, [r7, #12]
 801f64c:	693b      	ldr	r3, [r7, #16]
 801f64e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801f652:	69bb      	ldr	r3, [r7, #24]
 801f654:	69db      	ldr	r3, [r3, #28]
 801f656:	4618      	mov	r0, r3
 801f658:	f7f7 f98b 	bl	8016972 <lwip_htonl>
 801f65c:	4603      	mov	r3, r0
 801f65e:	461a      	mov	r2, r3
 801f660:	4629      	mov	r1, r5
 801f662:	4620      	mov	r0, r4
 801f664:	f001 f844 	bl	80206f0 <dhcp_option_long>
 801f668:	4603      	mov	r3, r0
 801f66a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801f66c:	89b8      	ldrh	r0, [r7, #12]
 801f66e:	693b      	ldr	r3, [r7, #16]
 801f670:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f674:	2304      	movs	r3, #4
 801f676:	2236      	movs	r2, #54	; 0x36
 801f678:	f000 ffae 	bl	80205d8 <dhcp_option>
 801f67c:	4603      	mov	r3, r0
 801f67e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801f680:	89bc      	ldrh	r4, [r7, #12]
 801f682:	693b      	ldr	r3, [r7, #16]
 801f684:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801f688:	69bb      	ldr	r3, [r7, #24]
 801f68a:	699b      	ldr	r3, [r3, #24]
 801f68c:	4618      	mov	r0, r3
 801f68e:	f7f7 f970 	bl	8016972 <lwip_htonl>
 801f692:	4603      	mov	r3, r0
 801f694:	461a      	mov	r2, r3
 801f696:	4629      	mov	r1, r5
 801f698:	4620      	mov	r0, r4
 801f69a:	f001 f829 	bl	80206f0 <dhcp_option_long>
 801f69e:	4603      	mov	r3, r0
 801f6a0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f6a2:	89b8      	ldrh	r0, [r7, #12]
 801f6a4:	693b      	ldr	r3, [r7, #16]
 801f6a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f6aa:	2303      	movs	r3, #3
 801f6ac:	2237      	movs	r2, #55	; 0x37
 801f6ae:	f000 ff93 	bl	80205d8 <dhcp_option>
 801f6b2:	4603      	mov	r3, r0
 801f6b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f6b6:	2300      	movs	r3, #0
 801f6b8:	77bb      	strb	r3, [r7, #30]
 801f6ba:	e00e      	b.n	801f6da <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f6bc:	89b8      	ldrh	r0, [r7, #12]
 801f6be:	693b      	ldr	r3, [r7, #16]
 801f6c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f6c4:	7fbb      	ldrb	r3, [r7, #30]
 801f6c6:	4a30      	ldr	r2, [pc, #192]	; (801f788 <dhcp_select+0x1e4>)
 801f6c8:	5cd3      	ldrb	r3, [r2, r3]
 801f6ca:	461a      	mov	r2, r3
 801f6cc:	f000 ffb8 	bl	8020640 <dhcp_option_byte>
 801f6d0:	4603      	mov	r3, r0
 801f6d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f6d4:	7fbb      	ldrb	r3, [r7, #30]
 801f6d6:	3301      	adds	r3, #1
 801f6d8:	77bb      	strb	r3, [r7, #30]
 801f6da:	7fbb      	ldrb	r3, [r7, #30]
 801f6dc:	2b02      	cmp	r3, #2
 801f6de:	d9ed      	bls.n	801f6bc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f6e0:	89b8      	ldrh	r0, [r7, #12]
 801f6e2:	693b      	ldr	r3, [r7, #16]
 801f6e4:	33f0      	adds	r3, #240	; 0xf0
 801f6e6:	697a      	ldr	r2, [r7, #20]
 801f6e8:	4619      	mov	r1, r3
 801f6ea:	f001 fcbb 	bl	8021064 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801f6ee:	4b27      	ldr	r3, [pc, #156]	; (801f78c <dhcp_select+0x1e8>)
 801f6f0:	6818      	ldr	r0, [r3, #0]
 801f6f2:	4b27      	ldr	r3, [pc, #156]	; (801f790 <dhcp_select+0x1ec>)
 801f6f4:	9301      	str	r3, [sp, #4]
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	9300      	str	r3, [sp, #0]
 801f6fa:	2343      	movs	r3, #67	; 0x43
 801f6fc:	4a25      	ldr	r2, [pc, #148]	; (801f794 <dhcp_select+0x1f0>)
 801f6fe:	6979      	ldr	r1, [r7, #20]
 801f700:	f7ff fbce 	bl	801eea0 <udp_sendto_if_src>
 801f704:	4603      	mov	r3, r0
 801f706:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801f708:	6978      	ldr	r0, [r7, #20]
 801f70a:	f7f8 fceb 	bl	80180e4 <pbuf_free>
 801f70e:	e001      	b.n	801f714 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801f710:	23ff      	movs	r3, #255	; 0xff
 801f712:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801f714:	69bb      	ldr	r3, [r7, #24]
 801f716:	799b      	ldrb	r3, [r3, #6]
 801f718:	2bff      	cmp	r3, #255	; 0xff
 801f71a:	d005      	beq.n	801f728 <dhcp_select+0x184>
    dhcp->tries++;
 801f71c:	69bb      	ldr	r3, [r7, #24]
 801f71e:	799b      	ldrb	r3, [r3, #6]
 801f720:	3301      	adds	r3, #1
 801f722:	b2da      	uxtb	r2, r3
 801f724:	69bb      	ldr	r3, [r7, #24]
 801f726:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801f728:	69bb      	ldr	r3, [r7, #24]
 801f72a:	799b      	ldrb	r3, [r3, #6]
 801f72c:	2b05      	cmp	r3, #5
 801f72e:	d80d      	bhi.n	801f74c <dhcp_select+0x1a8>
 801f730:	69bb      	ldr	r3, [r7, #24]
 801f732:	799b      	ldrb	r3, [r3, #6]
 801f734:	461a      	mov	r2, r3
 801f736:	2301      	movs	r3, #1
 801f738:	4093      	lsls	r3, r2
 801f73a:	b29b      	uxth	r3, r3
 801f73c:	461a      	mov	r2, r3
 801f73e:	0152      	lsls	r2, r2, #5
 801f740:	1ad2      	subs	r2, r2, r3
 801f742:	0092      	lsls	r2, r2, #2
 801f744:	4413      	add	r3, r2
 801f746:	00db      	lsls	r3, r3, #3
 801f748:	b29b      	uxth	r3, r3
 801f74a:	e001      	b.n	801f750 <dhcp_select+0x1ac>
 801f74c:	f64e 2360 	movw	r3, #60000	; 0xea60
 801f750:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f752:	89fb      	ldrh	r3, [r7, #14]
 801f754:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801f758:	4a0f      	ldr	r2, [pc, #60]	; (801f798 <dhcp_select+0x1f4>)
 801f75a:	fb82 1203 	smull	r1, r2, r2, r3
 801f75e:	1152      	asrs	r2, r2, #5
 801f760:	17db      	asrs	r3, r3, #31
 801f762:	1ad3      	subs	r3, r2, r3
 801f764:	b29a      	uxth	r2, r3
 801f766:	69bb      	ldr	r3, [r7, #24]
 801f768:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801f76a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f76e:	4618      	mov	r0, r3
 801f770:	3720      	adds	r7, #32
 801f772:	46bd      	mov	sp, r7
 801f774:	bdb0      	pop	{r4, r5, r7, pc}
 801f776:	bf00      	nop
 801f778:	080283cc 	.word	0x080283cc
 801f77c:	08028478 	.word	0x08028478
 801f780:	0802842c 	.word	0x0802842c
 801f784:	08028494 	.word	0x08028494
 801f788:	20000040 	.word	0x20000040
 801f78c:	20009004 	.word	0x20009004
 801f790:	08028fe0 	.word	0x08028fe0
 801f794:	08028fe4 	.word	0x08028fe4
 801f798:	10624dd3 	.word	0x10624dd3

0801f79c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801f79c:	b580      	push	{r7, lr}
 801f79e:	b082      	sub	sp, #8
 801f7a0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801f7a2:	4b27      	ldr	r3, [pc, #156]	; (801f840 <dhcp_coarse_tmr+0xa4>)
 801f7a4:	681b      	ldr	r3, [r3, #0]
 801f7a6:	607b      	str	r3, [r7, #4]
 801f7a8:	e042      	b.n	801f830 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f7ae:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801f7b0:	683b      	ldr	r3, [r7, #0]
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d039      	beq.n	801f82a <dhcp_coarse_tmr+0x8e>
 801f7b6:	683b      	ldr	r3, [r7, #0]
 801f7b8:	795b      	ldrb	r3, [r3, #5]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d035      	beq.n	801f82a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801f7be:	683b      	ldr	r3, [r7, #0]
 801f7c0:	8a9b      	ldrh	r3, [r3, #20]
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d012      	beq.n	801f7ec <dhcp_coarse_tmr+0x50>
 801f7c6:	683b      	ldr	r3, [r7, #0]
 801f7c8:	8a5b      	ldrh	r3, [r3, #18]
 801f7ca:	3301      	adds	r3, #1
 801f7cc:	b29a      	uxth	r2, r3
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	825a      	strh	r2, [r3, #18]
 801f7d2:	683b      	ldr	r3, [r7, #0]
 801f7d4:	8a5a      	ldrh	r2, [r3, #18]
 801f7d6:	683b      	ldr	r3, [r7, #0]
 801f7d8:	8a9b      	ldrh	r3, [r3, #20]
 801f7da:	429a      	cmp	r2, r3
 801f7dc:	d106      	bne.n	801f7ec <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801f7de:	6878      	ldr	r0, [r7, #4]
 801f7e0:	f000 fe46 	bl	8020470 <dhcp_release_and_stop>
        dhcp_start(netif);
 801f7e4:	6878      	ldr	r0, [r7, #4]
 801f7e6:	f000 f96b 	bl	801fac0 <dhcp_start>
 801f7ea:	e01e      	b.n	801f82a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801f7ec:	683b      	ldr	r3, [r7, #0]
 801f7ee:	8a1b      	ldrh	r3, [r3, #16]
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	d00b      	beq.n	801f80c <dhcp_coarse_tmr+0x70>
 801f7f4:	683b      	ldr	r3, [r7, #0]
 801f7f6:	8a1b      	ldrh	r3, [r3, #16]
 801f7f8:	1e5a      	subs	r2, r3, #1
 801f7fa:	b291      	uxth	r1, r2
 801f7fc:	683a      	ldr	r2, [r7, #0]
 801f7fe:	8211      	strh	r1, [r2, #16]
 801f800:	2b01      	cmp	r3, #1
 801f802:	d103      	bne.n	801f80c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801f804:	6878      	ldr	r0, [r7, #4]
 801f806:	f000 f8c7 	bl	801f998 <dhcp_t2_timeout>
 801f80a:	e00e      	b.n	801f82a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801f80c:	683b      	ldr	r3, [r7, #0]
 801f80e:	89db      	ldrh	r3, [r3, #14]
 801f810:	2b00      	cmp	r3, #0
 801f812:	d00a      	beq.n	801f82a <dhcp_coarse_tmr+0x8e>
 801f814:	683b      	ldr	r3, [r7, #0]
 801f816:	89db      	ldrh	r3, [r3, #14]
 801f818:	1e5a      	subs	r2, r3, #1
 801f81a:	b291      	uxth	r1, r2
 801f81c:	683a      	ldr	r2, [r7, #0]
 801f81e:	81d1      	strh	r1, [r2, #14]
 801f820:	2b01      	cmp	r3, #1
 801f822:	d102      	bne.n	801f82a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801f824:	6878      	ldr	r0, [r7, #4]
 801f826:	f000 f888 	bl	801f93a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	607b      	str	r3, [r7, #4]
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d1b9      	bne.n	801f7aa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801f836:	bf00      	nop
 801f838:	3708      	adds	r7, #8
 801f83a:	46bd      	mov	sp, r7
 801f83c:	bd80      	pop	{r7, pc}
 801f83e:	bf00      	nop
 801f840:	200103b0 	.word	0x200103b0

0801f844 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801f844:	b580      	push	{r7, lr}
 801f846:	b082      	sub	sp, #8
 801f848:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801f84a:	4b16      	ldr	r3, [pc, #88]	; (801f8a4 <dhcp_fine_tmr+0x60>)
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	607b      	str	r3, [r7, #4]
 801f850:	e020      	b.n	801f894 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f856:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801f858:	683b      	ldr	r3, [r7, #0]
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	d017      	beq.n	801f88e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801f85e:	683b      	ldr	r3, [r7, #0]
 801f860:	891b      	ldrh	r3, [r3, #8]
 801f862:	2b01      	cmp	r3, #1
 801f864:	d906      	bls.n	801f874 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801f866:	683b      	ldr	r3, [r7, #0]
 801f868:	891b      	ldrh	r3, [r3, #8]
 801f86a:	3b01      	subs	r3, #1
 801f86c:	b29a      	uxth	r2, r3
 801f86e:	683b      	ldr	r3, [r7, #0]
 801f870:	811a      	strh	r2, [r3, #8]
 801f872:	e00c      	b.n	801f88e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801f874:	683b      	ldr	r3, [r7, #0]
 801f876:	891b      	ldrh	r3, [r3, #8]
 801f878:	2b01      	cmp	r3, #1
 801f87a:	d108      	bne.n	801f88e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801f87c:	683b      	ldr	r3, [r7, #0]
 801f87e:	891b      	ldrh	r3, [r3, #8]
 801f880:	3b01      	subs	r3, #1
 801f882:	b29a      	uxth	r2, r3
 801f884:	683b      	ldr	r3, [r7, #0]
 801f886:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801f888:	6878      	ldr	r0, [r7, #4]
 801f88a:	f000 f80d 	bl	801f8a8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	607b      	str	r3, [r7, #4]
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	2b00      	cmp	r3, #0
 801f898:	d1db      	bne.n	801f852 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801f89a:	bf00      	nop
 801f89c:	3708      	adds	r7, #8
 801f89e:	46bd      	mov	sp, r7
 801f8a0:	bd80      	pop	{r7, pc}
 801f8a2:	bf00      	nop
 801f8a4:	200103b0 	.word	0x200103b0

0801f8a8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801f8a8:	b580      	push	{r7, lr}
 801f8aa:	b084      	sub	sp, #16
 801f8ac:	af00      	add	r7, sp, #0
 801f8ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f8b4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	795b      	ldrb	r3, [r3, #5]
 801f8ba:	2b0c      	cmp	r3, #12
 801f8bc:	d003      	beq.n	801f8c6 <dhcp_timeout+0x1e>
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	795b      	ldrb	r3, [r3, #5]
 801f8c2:	2b06      	cmp	r3, #6
 801f8c4:	d103      	bne.n	801f8ce <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801f8c6:	6878      	ldr	r0, [r7, #4]
 801f8c8:	f000 fa68 	bl	801fd9c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801f8cc:	e031      	b.n	801f932 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	795b      	ldrb	r3, [r3, #5]
 801f8d2:	2b01      	cmp	r3, #1
 801f8d4:	d10e      	bne.n	801f8f4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801f8d6:	68fb      	ldr	r3, [r7, #12]
 801f8d8:	799b      	ldrb	r3, [r3, #6]
 801f8da:	2b05      	cmp	r3, #5
 801f8dc:	d803      	bhi.n	801f8e6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801f8de:	6878      	ldr	r0, [r7, #4]
 801f8e0:	f7ff fe60 	bl	801f5a4 <dhcp_select>
}
 801f8e4:	e025      	b.n	801f932 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801f8e6:	6878      	ldr	r0, [r7, #4]
 801f8e8:	f000 fdc2 	bl	8020470 <dhcp_release_and_stop>
      dhcp_start(netif);
 801f8ec:	6878      	ldr	r0, [r7, #4]
 801f8ee:	f000 f8e7 	bl	801fac0 <dhcp_start>
}
 801f8f2:	e01e      	b.n	801f932 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	795b      	ldrb	r3, [r3, #5]
 801f8f8:	2b08      	cmp	r3, #8
 801f8fa:	d10b      	bne.n	801f914 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	799b      	ldrb	r3, [r3, #6]
 801f900:	2b01      	cmp	r3, #1
 801f902:	d803      	bhi.n	801f90c <dhcp_timeout+0x64>
      dhcp_check(netif);
 801f904:	6878      	ldr	r0, [r7, #4]
 801f906:	f7ff fdf3 	bl	801f4f0 <dhcp_check>
}
 801f90a:	e012      	b.n	801f932 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801f90c:	6878      	ldr	r0, [r7, #4]
 801f90e:	f000 fae7 	bl	801fee0 <dhcp_bind>
}
 801f912:	e00e      	b.n	801f932 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801f914:	68fb      	ldr	r3, [r7, #12]
 801f916:	795b      	ldrb	r3, [r3, #5]
 801f918:	2b03      	cmp	r3, #3
 801f91a:	d10a      	bne.n	801f932 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801f91c:	68fb      	ldr	r3, [r7, #12]
 801f91e:	799b      	ldrb	r3, [r3, #6]
 801f920:	2b01      	cmp	r3, #1
 801f922:	d803      	bhi.n	801f92c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801f924:	6878      	ldr	r0, [r7, #4]
 801f926:	f000 fced 	bl	8020304 <dhcp_reboot>
}
 801f92a:	e002      	b.n	801f932 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801f92c:	6878      	ldr	r0, [r7, #4]
 801f92e:	f000 fa35 	bl	801fd9c <dhcp_discover>
}
 801f932:	bf00      	nop
 801f934:	3710      	adds	r7, #16
 801f936:	46bd      	mov	sp, r7
 801f938:	bd80      	pop	{r7, pc}

0801f93a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801f93a:	b580      	push	{r7, lr}
 801f93c:	b084      	sub	sp, #16
 801f93e:	af00      	add	r7, sp, #0
 801f940:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f946:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	795b      	ldrb	r3, [r3, #5]
 801f94c:	2b01      	cmp	r3, #1
 801f94e:	d007      	beq.n	801f960 <dhcp_t1_timeout+0x26>
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	795b      	ldrb	r3, [r3, #5]
 801f954:	2b0a      	cmp	r3, #10
 801f956:	d003      	beq.n	801f960 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801f958:	68fb      	ldr	r3, [r7, #12]
 801f95a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801f95c:	2b05      	cmp	r3, #5
 801f95e:	d117      	bne.n	801f990 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801f960:	6878      	ldr	r0, [r7, #4]
 801f962:	f000 fb97 	bl	8020094 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801f966:	68fb      	ldr	r3, [r7, #12]
 801f968:	899b      	ldrh	r3, [r3, #12]
 801f96a:	461a      	mov	r2, r3
 801f96c:	68fb      	ldr	r3, [r7, #12]
 801f96e:	8a5b      	ldrh	r3, [r3, #18]
 801f970:	1ad3      	subs	r3, r2, r3
 801f972:	2b01      	cmp	r3, #1
 801f974:	dd0c      	ble.n	801f990 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	899b      	ldrh	r3, [r3, #12]
 801f97a:	461a      	mov	r2, r3
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	8a5b      	ldrh	r3, [r3, #18]
 801f980:	1ad3      	subs	r3, r2, r3
 801f982:	2b00      	cmp	r3, #0
 801f984:	da00      	bge.n	801f988 <dhcp_t1_timeout+0x4e>
 801f986:	3301      	adds	r3, #1
 801f988:	105b      	asrs	r3, r3, #1
 801f98a:	b29a      	uxth	r2, r3
 801f98c:	68fb      	ldr	r3, [r7, #12]
 801f98e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801f990:	bf00      	nop
 801f992:	3710      	adds	r7, #16
 801f994:	46bd      	mov	sp, r7
 801f996:	bd80      	pop	{r7, pc}

0801f998 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801f998:	b580      	push	{r7, lr}
 801f99a:	b084      	sub	sp, #16
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801f9a6:	68fb      	ldr	r3, [r7, #12]
 801f9a8:	795b      	ldrb	r3, [r3, #5]
 801f9aa:	2b01      	cmp	r3, #1
 801f9ac:	d00b      	beq.n	801f9c6 <dhcp_t2_timeout+0x2e>
 801f9ae:	68fb      	ldr	r3, [r7, #12]
 801f9b0:	795b      	ldrb	r3, [r3, #5]
 801f9b2:	2b0a      	cmp	r3, #10
 801f9b4:	d007      	beq.n	801f9c6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801f9ba:	2b05      	cmp	r3, #5
 801f9bc:	d003      	beq.n	801f9c6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	795b      	ldrb	r3, [r3, #5]
 801f9c2:	2b04      	cmp	r3, #4
 801f9c4:	d117      	bne.n	801f9f6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801f9c6:	6878      	ldr	r0, [r7, #4]
 801f9c8:	f000 fc00 	bl	80201cc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801f9cc:	68fb      	ldr	r3, [r7, #12]
 801f9ce:	8a9b      	ldrh	r3, [r3, #20]
 801f9d0:	461a      	mov	r2, r3
 801f9d2:	68fb      	ldr	r3, [r7, #12]
 801f9d4:	8a5b      	ldrh	r3, [r3, #18]
 801f9d6:	1ad3      	subs	r3, r2, r3
 801f9d8:	2b01      	cmp	r3, #1
 801f9da:	dd0c      	ble.n	801f9f6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801f9dc:	68fb      	ldr	r3, [r7, #12]
 801f9de:	8a9b      	ldrh	r3, [r3, #20]
 801f9e0:	461a      	mov	r2, r3
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	8a5b      	ldrh	r3, [r3, #18]
 801f9e6:	1ad3      	subs	r3, r2, r3
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	da00      	bge.n	801f9ee <dhcp_t2_timeout+0x56>
 801f9ec:	3301      	adds	r3, #1
 801f9ee:	105b      	asrs	r3, r3, #1
 801f9f0:	b29a      	uxth	r2, r3
 801f9f2:	68fb      	ldr	r3, [r7, #12]
 801f9f4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801f9f6:	bf00      	nop
 801f9f8:	3710      	adds	r7, #16
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	bd80      	pop	{r7, pc}
	...

0801fa00 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b084      	sub	sp, #16
 801fa04:	af00      	add	r7, sp, #0
 801fa06:	6078      	str	r0, [r7, #4]
 801fa08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa0e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801fa10:	68fb      	ldr	r3, [r7, #12]
 801fa12:	2200      	movs	r2, #0
 801fa14:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	2200      	movs	r2, #0
 801fa1a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801fa1c:	4b26      	ldr	r3, [pc, #152]	; (801fab8 <dhcp_handle_ack+0xb8>)
 801fa1e:	78db      	ldrb	r3, [r3, #3]
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d003      	beq.n	801fa2c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801fa24:	4b25      	ldr	r3, [pc, #148]	; (801fabc <dhcp_handle_ack+0xbc>)
 801fa26:	68da      	ldr	r2, [r3, #12]
 801fa28:	68fb      	ldr	r3, [r7, #12]
 801fa2a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801fa2c:	4b22      	ldr	r3, [pc, #136]	; (801fab8 <dhcp_handle_ack+0xb8>)
 801fa2e:	791b      	ldrb	r3, [r3, #4]
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d004      	beq.n	801fa3e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801fa34:	4b21      	ldr	r3, [pc, #132]	; (801fabc <dhcp_handle_ack+0xbc>)
 801fa36:	691a      	ldr	r2, [r3, #16]
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	62da      	str	r2, [r3, #44]	; 0x2c
 801fa3c:	e004      	b.n	801fa48 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801fa3e:	68fb      	ldr	r3, [r7, #12]
 801fa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa42:	085a      	lsrs	r2, r3, #1
 801fa44:	68fb      	ldr	r3, [r7, #12]
 801fa46:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801fa48:	4b1b      	ldr	r3, [pc, #108]	; (801fab8 <dhcp_handle_ack+0xb8>)
 801fa4a:	795b      	ldrb	r3, [r3, #5]
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	d004      	beq.n	801fa5a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801fa50:	4b1a      	ldr	r3, [pc, #104]	; (801fabc <dhcp_handle_ack+0xbc>)
 801fa52:	695a      	ldr	r2, [r3, #20]
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	631a      	str	r2, [r3, #48]	; 0x30
 801fa58:	e007      	b.n	801fa6a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801fa5a:	68fb      	ldr	r3, [r7, #12]
 801fa5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801fa5e:	4613      	mov	r3, r2
 801fa60:	00db      	lsls	r3, r3, #3
 801fa62:	1a9b      	subs	r3, r3, r2
 801fa64:	08da      	lsrs	r2, r3, #3
 801fa66:	68fb      	ldr	r3, [r7, #12]
 801fa68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801fa6a:	683b      	ldr	r3, [r7, #0]
 801fa6c:	691a      	ldr	r2, [r3, #16]
 801fa6e:	68fb      	ldr	r3, [r7, #12]
 801fa70:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801fa72:	4b11      	ldr	r3, [pc, #68]	; (801fab8 <dhcp_handle_ack+0xb8>)
 801fa74:	799b      	ldrb	r3, [r3, #6]
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d00b      	beq.n	801fa92 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801fa7a:	4b10      	ldr	r3, [pc, #64]	; (801fabc <dhcp_handle_ack+0xbc>)
 801fa7c:	699b      	ldr	r3, [r3, #24]
 801fa7e:	4618      	mov	r0, r3
 801fa80:	f7f6 ff77 	bl	8016972 <lwip_htonl>
 801fa84:	4602      	mov	r2, r0
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	2201      	movs	r2, #1
 801fa8e:	71da      	strb	r2, [r3, #7]
 801fa90:	e002      	b.n	801fa98 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	2200      	movs	r2, #0
 801fa96:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801fa98:	4b07      	ldr	r3, [pc, #28]	; (801fab8 <dhcp_handle_ack+0xb8>)
 801fa9a:	79db      	ldrb	r3, [r3, #7]
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	d007      	beq.n	801fab0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801faa0:	4b06      	ldr	r3, [pc, #24]	; (801fabc <dhcp_handle_ack+0xbc>)
 801faa2:	69db      	ldr	r3, [r3, #28]
 801faa4:	4618      	mov	r0, r3
 801faa6:	f7f6 ff64 	bl	8016972 <lwip_htonl>
 801faaa:	4602      	mov	r2, r0
 801faac:	68fb      	ldr	r3, [r7, #12]
 801faae:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801fab0:	bf00      	nop
 801fab2:	3710      	adds	r7, #16
 801fab4:	46bd      	mov	sp, r7
 801fab6:	bd80      	pop	{r7, pc}
 801fab8:	200103dc 	.word	0x200103dc
 801fabc:	200103e4 	.word	0x200103e4

0801fac0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b084      	sub	sp, #16
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	2b00      	cmp	r3, #0
 801facc:	d109      	bne.n	801fae2 <dhcp_start+0x22>
 801face:	4b37      	ldr	r3, [pc, #220]	; (801fbac <dhcp_start+0xec>)
 801fad0:	f240 22e7 	movw	r2, #743	; 0x2e7
 801fad4:	4936      	ldr	r1, [pc, #216]	; (801fbb0 <dhcp_start+0xf0>)
 801fad6:	4837      	ldr	r0, [pc, #220]	; (801fbb4 <dhcp_start+0xf4>)
 801fad8:	f004 fe62 	bl	80247a0 <iprintf>
 801fadc:	f06f 030f 	mvn.w	r3, #15
 801fae0:	e060      	b.n	801fba4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801fae8:	f003 0301 	and.w	r3, r3, #1
 801faec:	2b00      	cmp	r3, #0
 801faee:	d109      	bne.n	801fb04 <dhcp_start+0x44>
 801faf0:	4b2e      	ldr	r3, [pc, #184]	; (801fbac <dhcp_start+0xec>)
 801faf2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801faf6:	4930      	ldr	r1, [pc, #192]	; (801fbb8 <dhcp_start+0xf8>)
 801faf8:	482e      	ldr	r0, [pc, #184]	; (801fbb4 <dhcp_start+0xf4>)
 801fafa:	f004 fe51 	bl	80247a0 <iprintf>
 801fafe:	f06f 030f 	mvn.w	r3, #15
 801fb02:	e04f      	b.n	801fba4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb08:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801fb0e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801fb12:	d202      	bcs.n	801fb1a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801fb14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb18:	e044      	b.n	801fba4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d10d      	bne.n	801fb3c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801fb20:	2034      	movs	r0, #52	; 0x34
 801fb22:	f7f7 fa45 	bl	8016fb0 <mem_malloc>
 801fb26:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801fb28:	68fb      	ldr	r3, [r7, #12]
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	d102      	bne.n	801fb34 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801fb2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb32:	e037      	b.n	801fba4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	68fa      	ldr	r2, [r7, #12]
 801fb38:	629a      	str	r2, [r3, #40]	; 0x28
 801fb3a:	e005      	b.n	801fb48 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	791b      	ldrb	r3, [r3, #4]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d001      	beq.n	801fb48 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801fb44:	f7ff fc90 	bl	801f468 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801fb48:	2234      	movs	r2, #52	; 0x34
 801fb4a:	2100      	movs	r1, #0
 801fb4c:	68f8      	ldr	r0, [r7, #12]
 801fb4e:	f004 fd77 	bl	8024640 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801fb52:	f7ff fc37 	bl	801f3c4 <dhcp_inc_pcb_refcount>
 801fb56:	4603      	mov	r3, r0
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d002      	beq.n	801fb62 <dhcp_start+0xa2>
    return ERR_MEM;
 801fb5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb60:	e020      	b.n	801fba4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801fb62:	68fb      	ldr	r3, [r7, #12]
 801fb64:	2201      	movs	r2, #1
 801fb66:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801fb6e:	f003 0304 	and.w	r3, r3, #4
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d105      	bne.n	801fb82 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801fb76:	2102      	movs	r1, #2
 801fb78:	68f8      	ldr	r0, [r7, #12]
 801fb7a:	f000 fd13 	bl	80205a4 <dhcp_set_state>
    return ERR_OK;
 801fb7e:	2300      	movs	r3, #0
 801fb80:	e010      	b.n	801fba4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801fb82:	6878      	ldr	r0, [r7, #4]
 801fb84:	f000 f90a 	bl	801fd9c <dhcp_discover>
 801fb88:	4603      	mov	r3, r0
 801fb8a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801fb8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	d005      	beq.n	801fba0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801fb94:	6878      	ldr	r0, [r7, #4]
 801fb96:	f000 fc6b 	bl	8020470 <dhcp_release_and_stop>
    return ERR_MEM;
 801fb9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb9e:	e001      	b.n	801fba4 <dhcp_start+0xe4>
  }
  return result;
 801fba0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801fba4:	4618      	mov	r0, r3
 801fba6:	3710      	adds	r7, #16
 801fba8:	46bd      	mov	sp, r7
 801fbaa:	bd80      	pop	{r7, pc}
 801fbac:	080283cc 	.word	0x080283cc
 801fbb0:	080284b0 	.word	0x080284b0
 801fbb4:	0802842c 	.word	0x0802842c
 801fbb8:	080284f4 	.word	0x080284f4

0801fbbc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801fbbc:	b580      	push	{r7, lr}
 801fbbe:	b084      	sub	sp, #16
 801fbc0:	af00      	add	r7, sp, #0
 801fbc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fbc4:	687b      	ldr	r3, [r7, #4]
 801fbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fbc8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d037      	beq.n	801fc40 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 801fbd0:	68fb      	ldr	r3, [r7, #12]
 801fbd2:	795b      	ldrb	r3, [r3, #5]
 801fbd4:	2b0a      	cmp	r3, #10
 801fbd6:	d820      	bhi.n	801fc1a <dhcp_network_changed+0x5e>
 801fbd8:	a201      	add	r2, pc, #4	; (adr r2, 801fbe0 <dhcp_network_changed+0x24>)
 801fbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbde:	bf00      	nop
 801fbe0:	0801fc45 	.word	0x0801fc45
 801fbe4:	0801fc1b 	.word	0x0801fc1b
 801fbe8:	0801fc1b 	.word	0x0801fc1b
 801fbec:	0801fc0d 	.word	0x0801fc0d
 801fbf0:	0801fc0d 	.word	0x0801fc0d
 801fbf4:	0801fc0d 	.word	0x0801fc0d
 801fbf8:	0801fc1b 	.word	0x0801fc1b
 801fbfc:	0801fc1b 	.word	0x0801fc1b
 801fc00:	0801fc1b 	.word	0x0801fc1b
 801fc04:	0801fc1b 	.word	0x0801fc1b
 801fc08:	0801fc0d 	.word	0x0801fc0d
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	2200      	movs	r2, #0
 801fc10:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801fc12:	6878      	ldr	r0, [r7, #4]
 801fc14:	f000 fb76 	bl	8020304 <dhcp_reboot>
      break;
 801fc18:	e015      	b.n	801fc46 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801fc1a:	68fb      	ldr	r3, [r7, #12]
 801fc1c:	795b      	ldrb	r3, [r3, #5]
 801fc1e:	2b0c      	cmp	r3, #12
 801fc20:	d906      	bls.n	801fc30 <dhcp_network_changed+0x74>
 801fc22:	4b0a      	ldr	r3, [pc, #40]	; (801fc4c <dhcp_network_changed+0x90>)
 801fc24:	f240 326d 	movw	r2, #877	; 0x36d
 801fc28:	4909      	ldr	r1, [pc, #36]	; (801fc50 <dhcp_network_changed+0x94>)
 801fc2a:	480a      	ldr	r0, [pc, #40]	; (801fc54 <dhcp_network_changed+0x98>)
 801fc2c:	f004 fdb8 	bl	80247a0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	2200      	movs	r2, #0
 801fc34:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801fc36:	6878      	ldr	r0, [r7, #4]
 801fc38:	f000 f8b0 	bl	801fd9c <dhcp_discover>
      break;
 801fc3c:	bf00      	nop
 801fc3e:	e002      	b.n	801fc46 <dhcp_network_changed+0x8a>
    return;
 801fc40:	bf00      	nop
 801fc42:	e000      	b.n	801fc46 <dhcp_network_changed+0x8a>
      break;
 801fc44:	bf00      	nop
  }
}
 801fc46:	3710      	adds	r7, #16
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bd80      	pop	{r7, pc}
 801fc4c:	080283cc 	.word	0x080283cc
 801fc50:	08028518 	.word	0x08028518
 801fc54:	0802842c 	.word	0x0802842c

0801fc58 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801fc58:	b580      	push	{r7, lr}
 801fc5a:	b084      	sub	sp, #16
 801fc5c:	af00      	add	r7, sp, #0
 801fc5e:	6078      	str	r0, [r7, #4]
 801fc60:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d107      	bne.n	801fc78 <dhcp_arp_reply+0x20>
 801fc68:	4b0e      	ldr	r3, [pc, #56]	; (801fca4 <dhcp_arp_reply+0x4c>)
 801fc6a:	f240 328b 	movw	r2, #907	; 0x38b
 801fc6e:	490e      	ldr	r1, [pc, #56]	; (801fca8 <dhcp_arp_reply+0x50>)
 801fc70:	480e      	ldr	r0, [pc, #56]	; (801fcac <dhcp_arp_reply+0x54>)
 801fc72:	f004 fd95 	bl	80247a0 <iprintf>
 801fc76:	e012      	b.n	801fc9e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801fc7e:	68fb      	ldr	r3, [r7, #12]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d00c      	beq.n	801fc9e <dhcp_arp_reply+0x46>
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	795b      	ldrb	r3, [r3, #5]
 801fc88:	2b08      	cmp	r3, #8
 801fc8a:	d108      	bne.n	801fc9e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801fc8c:	683b      	ldr	r3, [r7, #0]
 801fc8e:	681a      	ldr	r2, [r3, #0]
 801fc90:	68fb      	ldr	r3, [r7, #12]
 801fc92:	69db      	ldr	r3, [r3, #28]
 801fc94:	429a      	cmp	r2, r3
 801fc96:	d102      	bne.n	801fc9e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801fc98:	6878      	ldr	r0, [r7, #4]
 801fc9a:	f000 f809 	bl	801fcb0 <dhcp_decline>
    }
  }
}
 801fc9e:	3710      	adds	r7, #16
 801fca0:	46bd      	mov	sp, r7
 801fca2:	bd80      	pop	{r7, pc}
 801fca4:	080283cc 	.word	0x080283cc
 801fca8:	080284b0 	.word	0x080284b0
 801fcac:	0802842c 	.word	0x0802842c

0801fcb0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801fcb0:	b5b0      	push	{r4, r5, r7, lr}
 801fcb2:	b08a      	sub	sp, #40	; 0x28
 801fcb4:	af02      	add	r7, sp, #8
 801fcb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fcbc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801fcbe:	210c      	movs	r1, #12
 801fcc0:	69b8      	ldr	r0, [r7, #24]
 801fcc2:	f000 fc6f 	bl	80205a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801fcc6:	f107 030c 	add.w	r3, r7, #12
 801fcca:	2204      	movs	r2, #4
 801fccc:	69b9      	ldr	r1, [r7, #24]
 801fcce:	6878      	ldr	r0, [r7, #4]
 801fcd0:	f001 f8f2 	bl	8020eb8 <dhcp_create_msg>
 801fcd4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801fcd6:	697b      	ldr	r3, [r7, #20]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d035      	beq.n	801fd48 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801fcdc:	697b      	ldr	r3, [r7, #20]
 801fcde:	685b      	ldr	r3, [r3, #4]
 801fce0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801fce2:	89b8      	ldrh	r0, [r7, #12]
 801fce4:	693b      	ldr	r3, [r7, #16]
 801fce6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801fcea:	2304      	movs	r3, #4
 801fcec:	2232      	movs	r2, #50	; 0x32
 801fcee:	f000 fc73 	bl	80205d8 <dhcp_option>
 801fcf2:	4603      	mov	r3, r0
 801fcf4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fcf6:	89bc      	ldrh	r4, [r7, #12]
 801fcf8:	693b      	ldr	r3, [r7, #16]
 801fcfa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801fcfe:	69bb      	ldr	r3, [r7, #24]
 801fd00:	69db      	ldr	r3, [r3, #28]
 801fd02:	4618      	mov	r0, r3
 801fd04:	f7f6 fe35 	bl	8016972 <lwip_htonl>
 801fd08:	4603      	mov	r3, r0
 801fd0a:	461a      	mov	r2, r3
 801fd0c:	4629      	mov	r1, r5
 801fd0e:	4620      	mov	r0, r4
 801fd10:	f000 fcee 	bl	80206f0 <dhcp_option_long>
 801fd14:	4603      	mov	r3, r0
 801fd16:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801fd18:	89b8      	ldrh	r0, [r7, #12]
 801fd1a:	693b      	ldr	r3, [r7, #16]
 801fd1c:	33f0      	adds	r3, #240	; 0xf0
 801fd1e:	697a      	ldr	r2, [r7, #20]
 801fd20:	4619      	mov	r1, r3
 801fd22:	f001 f99f 	bl	8021064 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fd26:	4b19      	ldr	r3, [pc, #100]	; (801fd8c <dhcp_decline+0xdc>)
 801fd28:	6818      	ldr	r0, [r3, #0]
 801fd2a:	4b19      	ldr	r3, [pc, #100]	; (801fd90 <dhcp_decline+0xe0>)
 801fd2c:	9301      	str	r3, [sp, #4]
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	9300      	str	r3, [sp, #0]
 801fd32:	2343      	movs	r3, #67	; 0x43
 801fd34:	4a17      	ldr	r2, [pc, #92]	; (801fd94 <dhcp_decline+0xe4>)
 801fd36:	6979      	ldr	r1, [r7, #20]
 801fd38:	f7ff f8b2 	bl	801eea0 <udp_sendto_if_src>
 801fd3c:	4603      	mov	r3, r0
 801fd3e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801fd40:	6978      	ldr	r0, [r7, #20]
 801fd42:	f7f8 f9cf 	bl	80180e4 <pbuf_free>
 801fd46:	e001      	b.n	801fd4c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801fd48:	23ff      	movs	r3, #255	; 0xff
 801fd4a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801fd4c:	69bb      	ldr	r3, [r7, #24]
 801fd4e:	799b      	ldrb	r3, [r3, #6]
 801fd50:	2bff      	cmp	r3, #255	; 0xff
 801fd52:	d005      	beq.n	801fd60 <dhcp_decline+0xb0>
    dhcp->tries++;
 801fd54:	69bb      	ldr	r3, [r7, #24]
 801fd56:	799b      	ldrb	r3, [r3, #6]
 801fd58:	3301      	adds	r3, #1
 801fd5a:	b2da      	uxtb	r2, r3
 801fd5c:	69bb      	ldr	r3, [r7, #24]
 801fd5e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801fd60:	f242 7310 	movw	r3, #10000	; 0x2710
 801fd64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fd66:	89fb      	ldrh	r3, [r7, #14]
 801fd68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fd6c:	4a0a      	ldr	r2, [pc, #40]	; (801fd98 <dhcp_decline+0xe8>)
 801fd6e:	fb82 1203 	smull	r1, r2, r2, r3
 801fd72:	1152      	asrs	r2, r2, #5
 801fd74:	17db      	asrs	r3, r3, #31
 801fd76:	1ad3      	subs	r3, r2, r3
 801fd78:	b29a      	uxth	r2, r3
 801fd7a:	69bb      	ldr	r3, [r7, #24]
 801fd7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801fd7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801fd82:	4618      	mov	r0, r3
 801fd84:	3720      	adds	r7, #32
 801fd86:	46bd      	mov	sp, r7
 801fd88:	bdb0      	pop	{r4, r5, r7, pc}
 801fd8a:	bf00      	nop
 801fd8c:	20009004 	.word	0x20009004
 801fd90:	08028fe0 	.word	0x08028fe0
 801fd94:	08028fe4 	.word	0x08028fe4
 801fd98:	10624dd3 	.word	0x10624dd3

0801fd9c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801fd9c:	b580      	push	{r7, lr}
 801fd9e:	b08a      	sub	sp, #40	; 0x28
 801fda0:	af02      	add	r7, sp, #8
 801fda2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fda8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801fdaa:	2300      	movs	r3, #0
 801fdac:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801fdae:	69bb      	ldr	r3, [r7, #24]
 801fdb0:	2200      	movs	r2, #0
 801fdb2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801fdb4:	2106      	movs	r1, #6
 801fdb6:	69b8      	ldr	r0, [r7, #24]
 801fdb8:	f000 fbf4 	bl	80205a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801fdbc:	f107 0308 	add.w	r3, r7, #8
 801fdc0:	2201      	movs	r2, #1
 801fdc2:	69b9      	ldr	r1, [r7, #24]
 801fdc4:	6878      	ldr	r0, [r7, #4]
 801fdc6:	f001 f877 	bl	8020eb8 <dhcp_create_msg>
 801fdca:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801fdcc:	693b      	ldr	r3, [r7, #16]
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d04b      	beq.n	801fe6a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801fdd2:	693b      	ldr	r3, [r7, #16]
 801fdd4:	685b      	ldr	r3, [r3, #4]
 801fdd6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fdd8:	8938      	ldrh	r0, [r7, #8]
 801fdda:	68fb      	ldr	r3, [r7, #12]
 801fddc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801fde0:	2302      	movs	r3, #2
 801fde2:	2239      	movs	r2, #57	; 0x39
 801fde4:	f000 fbf8 	bl	80205d8 <dhcp_option>
 801fde8:	4603      	mov	r3, r0
 801fdea:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fdec:	8938      	ldrh	r0, [r7, #8]
 801fdee:	68fb      	ldr	r3, [r7, #12]
 801fdf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801fdf8:	461a      	mov	r2, r3
 801fdfa:	f000 fc47 	bl	802068c <dhcp_option_short>
 801fdfe:	4603      	mov	r3, r0
 801fe00:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fe02:	8938      	ldrh	r0, [r7, #8]
 801fe04:	68fb      	ldr	r3, [r7, #12]
 801fe06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801fe0a:	2303      	movs	r3, #3
 801fe0c:	2237      	movs	r2, #55	; 0x37
 801fe0e:	f000 fbe3 	bl	80205d8 <dhcp_option>
 801fe12:	4603      	mov	r3, r0
 801fe14:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fe16:	2300      	movs	r3, #0
 801fe18:	77fb      	strb	r3, [r7, #31]
 801fe1a:	e00e      	b.n	801fe3a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fe1c:	8938      	ldrh	r0, [r7, #8]
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801fe24:	7ffb      	ldrb	r3, [r7, #31]
 801fe26:	4a29      	ldr	r2, [pc, #164]	; (801fecc <dhcp_discover+0x130>)
 801fe28:	5cd3      	ldrb	r3, [r2, r3]
 801fe2a:	461a      	mov	r2, r3
 801fe2c:	f000 fc08 	bl	8020640 <dhcp_option_byte>
 801fe30:	4603      	mov	r3, r0
 801fe32:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fe34:	7ffb      	ldrb	r3, [r7, #31]
 801fe36:	3301      	adds	r3, #1
 801fe38:	77fb      	strb	r3, [r7, #31]
 801fe3a:	7ffb      	ldrb	r3, [r7, #31]
 801fe3c:	2b02      	cmp	r3, #2
 801fe3e:	d9ed      	bls.n	801fe1c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801fe40:	8938      	ldrh	r0, [r7, #8]
 801fe42:	68fb      	ldr	r3, [r7, #12]
 801fe44:	33f0      	adds	r3, #240	; 0xf0
 801fe46:	693a      	ldr	r2, [r7, #16]
 801fe48:	4619      	mov	r1, r3
 801fe4a:	f001 f90b 	bl	8021064 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fe4e:	4b20      	ldr	r3, [pc, #128]	; (801fed0 <dhcp_discover+0x134>)
 801fe50:	6818      	ldr	r0, [r3, #0]
 801fe52:	4b20      	ldr	r3, [pc, #128]	; (801fed4 <dhcp_discover+0x138>)
 801fe54:	9301      	str	r3, [sp, #4]
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	9300      	str	r3, [sp, #0]
 801fe5a:	2343      	movs	r3, #67	; 0x43
 801fe5c:	4a1e      	ldr	r2, [pc, #120]	; (801fed8 <dhcp_discover+0x13c>)
 801fe5e:	6939      	ldr	r1, [r7, #16]
 801fe60:	f7ff f81e 	bl	801eea0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801fe64:	6938      	ldr	r0, [r7, #16]
 801fe66:	f7f8 f93d 	bl	80180e4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801fe6a:	69bb      	ldr	r3, [r7, #24]
 801fe6c:	799b      	ldrb	r3, [r3, #6]
 801fe6e:	2bff      	cmp	r3, #255	; 0xff
 801fe70:	d005      	beq.n	801fe7e <dhcp_discover+0xe2>
    dhcp->tries++;
 801fe72:	69bb      	ldr	r3, [r7, #24]
 801fe74:	799b      	ldrb	r3, [r3, #6]
 801fe76:	3301      	adds	r3, #1
 801fe78:	b2da      	uxtb	r2, r3
 801fe7a:	69bb      	ldr	r3, [r7, #24]
 801fe7c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe7e:	69bb      	ldr	r3, [r7, #24]
 801fe80:	799b      	ldrb	r3, [r3, #6]
 801fe82:	2b05      	cmp	r3, #5
 801fe84:	d80d      	bhi.n	801fea2 <dhcp_discover+0x106>
 801fe86:	69bb      	ldr	r3, [r7, #24]
 801fe88:	799b      	ldrb	r3, [r3, #6]
 801fe8a:	461a      	mov	r2, r3
 801fe8c:	2301      	movs	r3, #1
 801fe8e:	4093      	lsls	r3, r2
 801fe90:	b29b      	uxth	r3, r3
 801fe92:	461a      	mov	r2, r3
 801fe94:	0152      	lsls	r2, r2, #5
 801fe96:	1ad2      	subs	r2, r2, r3
 801fe98:	0092      	lsls	r2, r2, #2
 801fe9a:	4413      	add	r3, r2
 801fe9c:	00db      	lsls	r3, r3, #3
 801fe9e:	b29b      	uxth	r3, r3
 801fea0:	e001      	b.n	801fea6 <dhcp_discover+0x10a>
 801fea2:	f64e 2360 	movw	r3, #60000	; 0xea60
 801fea6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fea8:	897b      	ldrh	r3, [r7, #10]
 801feaa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801feae:	4a0b      	ldr	r2, [pc, #44]	; (801fedc <dhcp_discover+0x140>)
 801feb0:	fb82 1203 	smull	r1, r2, r2, r3
 801feb4:	1152      	asrs	r2, r2, #5
 801feb6:	17db      	asrs	r3, r3, #31
 801feb8:	1ad3      	subs	r3, r2, r3
 801feba:	b29a      	uxth	r2, r3
 801febc:	69bb      	ldr	r3, [r7, #24]
 801febe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801fec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fec4:	4618      	mov	r0, r3
 801fec6:	3720      	adds	r7, #32
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}
 801fecc:	20000040 	.word	0x20000040
 801fed0:	20009004 	.word	0x20009004
 801fed4:	08028fe0 	.word	0x08028fe0
 801fed8:	08028fe4 	.word	0x08028fe4
 801fedc:	10624dd3 	.word	0x10624dd3

0801fee0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801fee0:	b580      	push	{r7, lr}
 801fee2:	b088      	sub	sp, #32
 801fee4:	af00      	add	r7, sp, #0
 801fee6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	2b00      	cmp	r3, #0
 801feec:	d107      	bne.n	801fefe <dhcp_bind+0x1e>
 801feee:	4b64      	ldr	r3, [pc, #400]	; (8020080 <dhcp_bind+0x1a0>)
 801fef0:	f240 4215 	movw	r2, #1045	; 0x415
 801fef4:	4963      	ldr	r1, [pc, #396]	; (8020084 <dhcp_bind+0x1a4>)
 801fef6:	4864      	ldr	r0, [pc, #400]	; (8020088 <dhcp_bind+0x1a8>)
 801fef8:	f004 fc52 	bl	80247a0 <iprintf>
 801fefc:	e0bc      	b.n	8020078 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff02:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801ff04:	69bb      	ldr	r3, [r7, #24]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d107      	bne.n	801ff1a <dhcp_bind+0x3a>
 801ff0a:	4b5d      	ldr	r3, [pc, #372]	; (8020080 <dhcp_bind+0x1a0>)
 801ff0c:	f240 4217 	movw	r2, #1047	; 0x417
 801ff10:	495e      	ldr	r1, [pc, #376]	; (802008c <dhcp_bind+0x1ac>)
 801ff12:	485d      	ldr	r0, [pc, #372]	; (8020088 <dhcp_bind+0x1a8>)
 801ff14:	f004 fc44 	bl	80247a0 <iprintf>
 801ff18:	e0ae      	b.n	8020078 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801ff1a:	69bb      	ldr	r3, [r7, #24]
 801ff1c:	2200      	movs	r2, #0
 801ff1e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ff20:	69bb      	ldr	r3, [r7, #24]
 801ff22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ff28:	d019      	beq.n	801ff5e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ff2a:	69bb      	ldr	r3, [r7, #24]
 801ff2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff2e:	331e      	adds	r3, #30
 801ff30:	4a57      	ldr	r2, [pc, #348]	; (8020090 <dhcp_bind+0x1b0>)
 801ff32:	fba2 2303 	umull	r2, r3, r2, r3
 801ff36:	095b      	lsrs	r3, r3, #5
 801ff38:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ff3a:	69fb      	ldr	r3, [r7, #28]
 801ff3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ff40:	d302      	bcc.n	801ff48 <dhcp_bind+0x68>
      timeout = 0xffff;
 801ff42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ff46:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801ff48:	69fb      	ldr	r3, [r7, #28]
 801ff4a:	b29a      	uxth	r2, r3
 801ff4c:	69bb      	ldr	r3, [r7, #24]
 801ff4e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801ff50:	69bb      	ldr	r3, [r7, #24]
 801ff52:	8a9b      	ldrh	r3, [r3, #20]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d102      	bne.n	801ff5e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801ff58:	69bb      	ldr	r3, [r7, #24]
 801ff5a:	2201      	movs	r2, #1
 801ff5c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801ff5e:	69bb      	ldr	r3, [r7, #24]
 801ff60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ff66:	d01d      	beq.n	801ffa4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ff68:	69bb      	ldr	r3, [r7, #24]
 801ff6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff6c:	331e      	adds	r3, #30
 801ff6e:	4a48      	ldr	r2, [pc, #288]	; (8020090 <dhcp_bind+0x1b0>)
 801ff70:	fba2 2303 	umull	r2, r3, r2, r3
 801ff74:	095b      	lsrs	r3, r3, #5
 801ff76:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ff78:	69fb      	ldr	r3, [r7, #28]
 801ff7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ff7e:	d302      	bcc.n	801ff86 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801ff80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ff84:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801ff86:	69fb      	ldr	r3, [r7, #28]
 801ff88:	b29a      	uxth	r2, r3
 801ff8a:	69bb      	ldr	r3, [r7, #24]
 801ff8c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801ff8e:	69bb      	ldr	r3, [r7, #24]
 801ff90:	895b      	ldrh	r3, [r3, #10]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d102      	bne.n	801ff9c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801ff96:	69bb      	ldr	r3, [r7, #24]
 801ff98:	2201      	movs	r2, #1
 801ff9a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801ff9c:	69bb      	ldr	r3, [r7, #24]
 801ff9e:	895a      	ldrh	r2, [r3, #10]
 801ffa0:	69bb      	ldr	r3, [r7, #24]
 801ffa2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801ffa4:	69bb      	ldr	r3, [r7, #24]
 801ffa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ffa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ffac:	d01d      	beq.n	801ffea <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ffae:	69bb      	ldr	r3, [r7, #24]
 801ffb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ffb2:	331e      	adds	r3, #30
 801ffb4:	4a36      	ldr	r2, [pc, #216]	; (8020090 <dhcp_bind+0x1b0>)
 801ffb6:	fba2 2303 	umull	r2, r3, r2, r3
 801ffba:	095b      	lsrs	r3, r3, #5
 801ffbc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801ffbe:	69fb      	ldr	r3, [r7, #28]
 801ffc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ffc4:	d302      	bcc.n	801ffcc <dhcp_bind+0xec>
      timeout = 0xffff;
 801ffc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ffca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801ffcc:	69fb      	ldr	r3, [r7, #28]
 801ffce:	b29a      	uxth	r2, r3
 801ffd0:	69bb      	ldr	r3, [r7, #24]
 801ffd2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801ffd4:	69bb      	ldr	r3, [r7, #24]
 801ffd6:	899b      	ldrh	r3, [r3, #12]
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	d102      	bne.n	801ffe2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801ffdc:	69bb      	ldr	r3, [r7, #24]
 801ffde:	2201      	movs	r2, #1
 801ffe0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801ffe2:	69bb      	ldr	r3, [r7, #24]
 801ffe4:	899a      	ldrh	r2, [r3, #12]
 801ffe6:	69bb      	ldr	r3, [r7, #24]
 801ffe8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801ffea:	69bb      	ldr	r3, [r7, #24]
 801ffec:	895a      	ldrh	r2, [r3, #10]
 801ffee:	69bb      	ldr	r3, [r7, #24]
 801fff0:	899b      	ldrh	r3, [r3, #12]
 801fff2:	429a      	cmp	r2, r3
 801fff4:	d306      	bcc.n	8020004 <dhcp_bind+0x124>
 801fff6:	69bb      	ldr	r3, [r7, #24]
 801fff8:	899b      	ldrh	r3, [r3, #12]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d002      	beq.n	8020004 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801fffe:	69bb      	ldr	r3, [r7, #24]
 8020000:	2200      	movs	r2, #0
 8020002:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8020004:	69bb      	ldr	r3, [r7, #24]
 8020006:	79db      	ldrb	r3, [r3, #7]
 8020008:	2b00      	cmp	r3, #0
 802000a:	d003      	beq.n	8020014 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 802000c:	69bb      	ldr	r3, [r7, #24]
 802000e:	6a1b      	ldr	r3, [r3, #32]
 8020010:	613b      	str	r3, [r7, #16]
 8020012:	e014      	b.n	802003e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8020014:	69bb      	ldr	r3, [r7, #24]
 8020016:	331c      	adds	r3, #28
 8020018:	781b      	ldrb	r3, [r3, #0]
 802001a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 802001c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020020:	2b00      	cmp	r3, #0
 8020022:	db02      	blt.n	802002a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8020024:	23ff      	movs	r3, #255	; 0xff
 8020026:	613b      	str	r3, [r7, #16]
 8020028:	e009      	b.n	802003e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 802002a:	7dfb      	ldrb	r3, [r7, #23]
 802002c:	2bbf      	cmp	r3, #191	; 0xbf
 802002e:	d903      	bls.n	8020038 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8020030:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8020034:	613b      	str	r3, [r7, #16]
 8020036:	e002      	b.n	802003e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8020038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802003c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802003e:	69bb      	ldr	r3, [r7, #24]
 8020040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020042:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8020044:	68fb      	ldr	r3, [r7, #12]
 8020046:	2b00      	cmp	r3, #0
 8020048:	d108      	bne.n	802005c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 802004a:	69bb      	ldr	r3, [r7, #24]
 802004c:	69da      	ldr	r2, [r3, #28]
 802004e:	693b      	ldr	r3, [r7, #16]
 8020050:	4013      	ands	r3, r2
 8020052:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802005a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 802005c:	210a      	movs	r1, #10
 802005e:	69b8      	ldr	r0, [r7, #24]
 8020060:	f000 faa0 	bl	80205a4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8020064:	69bb      	ldr	r3, [r7, #24]
 8020066:	f103 011c 	add.w	r1, r3, #28
 802006a:	f107 030c 	add.w	r3, r7, #12
 802006e:	f107 0210 	add.w	r2, r7, #16
 8020072:	6878      	ldr	r0, [r7, #4]
 8020074:	f7f7 fb1c 	bl	80176b0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8020078:	3720      	adds	r7, #32
 802007a:	46bd      	mov	sp, r7
 802007c:	bd80      	pop	{r7, pc}
 802007e:	bf00      	nop
 8020080:	080283cc 	.word	0x080283cc
 8020084:	0802852c 	.word	0x0802852c
 8020088:	0802842c 	.word	0x0802842c
 802008c:	08028548 	.word	0x08028548
 8020090:	88888889 	.word	0x88888889

08020094 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8020094:	b580      	push	{r7, lr}
 8020096:	b08a      	sub	sp, #40	; 0x28
 8020098:	af02      	add	r7, sp, #8
 802009a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200a0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80200a2:	2105      	movs	r1, #5
 80200a4:	69b8      	ldr	r0, [r7, #24]
 80200a6:	f000 fa7d 	bl	80205a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80200aa:	f107 030c 	add.w	r3, r7, #12
 80200ae:	2203      	movs	r2, #3
 80200b0:	69b9      	ldr	r1, [r7, #24]
 80200b2:	6878      	ldr	r0, [r7, #4]
 80200b4:	f000 ff00 	bl	8020eb8 <dhcp_create_msg>
 80200b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80200ba:	697b      	ldr	r3, [r7, #20]
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d04e      	beq.n	802015e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80200c0:	697b      	ldr	r3, [r7, #20]
 80200c2:	685b      	ldr	r3, [r3, #4]
 80200c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80200c6:	89b8      	ldrh	r0, [r7, #12]
 80200c8:	693b      	ldr	r3, [r7, #16]
 80200ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80200ce:	2302      	movs	r3, #2
 80200d0:	2239      	movs	r2, #57	; 0x39
 80200d2:	f000 fa81 	bl	80205d8 <dhcp_option>
 80200d6:	4603      	mov	r3, r0
 80200d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80200da:	89b8      	ldrh	r0, [r7, #12]
 80200dc:	693b      	ldr	r3, [r7, #16]
 80200de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80200e6:	461a      	mov	r2, r3
 80200e8:	f000 fad0 	bl	802068c <dhcp_option_short>
 80200ec:	4603      	mov	r3, r0
 80200ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80200f0:	89b8      	ldrh	r0, [r7, #12]
 80200f2:	693b      	ldr	r3, [r7, #16]
 80200f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80200f8:	2303      	movs	r3, #3
 80200fa:	2237      	movs	r2, #55	; 0x37
 80200fc:	f000 fa6c 	bl	80205d8 <dhcp_option>
 8020100:	4603      	mov	r3, r0
 8020102:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020104:	2300      	movs	r3, #0
 8020106:	77bb      	strb	r3, [r7, #30]
 8020108:	e00e      	b.n	8020128 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802010a:	89b8      	ldrh	r0, [r7, #12]
 802010c:	693b      	ldr	r3, [r7, #16]
 802010e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020112:	7fbb      	ldrb	r3, [r7, #30]
 8020114:	4a2a      	ldr	r2, [pc, #168]	; (80201c0 <dhcp_renew+0x12c>)
 8020116:	5cd3      	ldrb	r3, [r2, r3]
 8020118:	461a      	mov	r2, r3
 802011a:	f000 fa91 	bl	8020640 <dhcp_option_byte>
 802011e:	4603      	mov	r3, r0
 8020120:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020122:	7fbb      	ldrb	r3, [r7, #30]
 8020124:	3301      	adds	r3, #1
 8020126:	77bb      	strb	r3, [r7, #30]
 8020128:	7fbb      	ldrb	r3, [r7, #30]
 802012a:	2b02      	cmp	r3, #2
 802012c:	d9ed      	bls.n	802010a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802012e:	89b8      	ldrh	r0, [r7, #12]
 8020130:	693b      	ldr	r3, [r7, #16]
 8020132:	33f0      	adds	r3, #240	; 0xf0
 8020134:	697a      	ldr	r2, [r7, #20]
 8020136:	4619      	mov	r1, r3
 8020138:	f000 ff94 	bl	8021064 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802013c:	4b21      	ldr	r3, [pc, #132]	; (80201c4 <dhcp_renew+0x130>)
 802013e:	6818      	ldr	r0, [r3, #0]
 8020140:	69bb      	ldr	r3, [r7, #24]
 8020142:	f103 0218 	add.w	r2, r3, #24
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	9300      	str	r3, [sp, #0]
 802014a:	2343      	movs	r3, #67	; 0x43
 802014c:	6979      	ldr	r1, [r7, #20]
 802014e:	f7fe fe33 	bl	801edb8 <udp_sendto_if>
 8020152:	4603      	mov	r3, r0
 8020154:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020156:	6978      	ldr	r0, [r7, #20]
 8020158:	f7f7 ffc4 	bl	80180e4 <pbuf_free>
 802015c:	e001      	b.n	8020162 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802015e:	23ff      	movs	r3, #255	; 0xff
 8020160:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020162:	69bb      	ldr	r3, [r7, #24]
 8020164:	799b      	ldrb	r3, [r3, #6]
 8020166:	2bff      	cmp	r3, #255	; 0xff
 8020168:	d005      	beq.n	8020176 <dhcp_renew+0xe2>
    dhcp->tries++;
 802016a:	69bb      	ldr	r3, [r7, #24]
 802016c:	799b      	ldrb	r3, [r3, #6]
 802016e:	3301      	adds	r3, #1
 8020170:	b2da      	uxtb	r2, r3
 8020172:	69bb      	ldr	r3, [r7, #24]
 8020174:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8020176:	69bb      	ldr	r3, [r7, #24]
 8020178:	799b      	ldrb	r3, [r3, #6]
 802017a:	2b09      	cmp	r3, #9
 802017c:	d80a      	bhi.n	8020194 <dhcp_renew+0x100>
 802017e:	69bb      	ldr	r3, [r7, #24]
 8020180:	799b      	ldrb	r3, [r3, #6]
 8020182:	b29b      	uxth	r3, r3
 8020184:	461a      	mov	r2, r3
 8020186:	0152      	lsls	r2, r2, #5
 8020188:	1ad2      	subs	r2, r2, r3
 802018a:	0092      	lsls	r2, r2, #2
 802018c:	4413      	add	r3, r2
 802018e:	011b      	lsls	r3, r3, #4
 8020190:	b29b      	uxth	r3, r3
 8020192:	e001      	b.n	8020198 <dhcp_renew+0x104>
 8020194:	f644 6320 	movw	r3, #20000	; 0x4e20
 8020198:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802019a:	89fb      	ldrh	r3, [r7, #14]
 802019c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80201a0:	4a09      	ldr	r2, [pc, #36]	; (80201c8 <dhcp_renew+0x134>)
 80201a2:	fb82 1203 	smull	r1, r2, r2, r3
 80201a6:	1152      	asrs	r2, r2, #5
 80201a8:	17db      	asrs	r3, r3, #31
 80201aa:	1ad3      	subs	r3, r2, r3
 80201ac:	b29a      	uxth	r2, r3
 80201ae:	69bb      	ldr	r3, [r7, #24]
 80201b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80201b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80201b6:	4618      	mov	r0, r3
 80201b8:	3720      	adds	r7, #32
 80201ba:	46bd      	mov	sp, r7
 80201bc:	bd80      	pop	{r7, pc}
 80201be:	bf00      	nop
 80201c0:	20000040 	.word	0x20000040
 80201c4:	20009004 	.word	0x20009004
 80201c8:	10624dd3 	.word	0x10624dd3

080201cc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b08a      	sub	sp, #40	; 0x28
 80201d0:	af02      	add	r7, sp, #8
 80201d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80201d8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80201da:	2104      	movs	r1, #4
 80201dc:	69b8      	ldr	r0, [r7, #24]
 80201de:	f000 f9e1 	bl	80205a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80201e2:	f107 030c 	add.w	r3, r7, #12
 80201e6:	2203      	movs	r2, #3
 80201e8:	69b9      	ldr	r1, [r7, #24]
 80201ea:	6878      	ldr	r0, [r7, #4]
 80201ec:	f000 fe64 	bl	8020eb8 <dhcp_create_msg>
 80201f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80201f2:	697b      	ldr	r3, [r7, #20]
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d04c      	beq.n	8020292 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80201f8:	697b      	ldr	r3, [r7, #20]
 80201fa:	685b      	ldr	r3, [r3, #4]
 80201fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80201fe:	89b8      	ldrh	r0, [r7, #12]
 8020200:	693b      	ldr	r3, [r7, #16]
 8020202:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020206:	2302      	movs	r3, #2
 8020208:	2239      	movs	r2, #57	; 0x39
 802020a:	f000 f9e5 	bl	80205d8 <dhcp_option>
 802020e:	4603      	mov	r3, r0
 8020210:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020212:	89b8      	ldrh	r0, [r7, #12]
 8020214:	693b      	ldr	r3, [r7, #16]
 8020216:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802021e:	461a      	mov	r2, r3
 8020220:	f000 fa34 	bl	802068c <dhcp_option_short>
 8020224:	4603      	mov	r3, r0
 8020226:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020228:	89b8      	ldrh	r0, [r7, #12]
 802022a:	693b      	ldr	r3, [r7, #16]
 802022c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020230:	2303      	movs	r3, #3
 8020232:	2237      	movs	r2, #55	; 0x37
 8020234:	f000 f9d0 	bl	80205d8 <dhcp_option>
 8020238:	4603      	mov	r3, r0
 802023a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802023c:	2300      	movs	r3, #0
 802023e:	77bb      	strb	r3, [r7, #30]
 8020240:	e00e      	b.n	8020260 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020242:	89b8      	ldrh	r0, [r7, #12]
 8020244:	693b      	ldr	r3, [r7, #16]
 8020246:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802024a:	7fbb      	ldrb	r3, [r7, #30]
 802024c:	4a29      	ldr	r2, [pc, #164]	; (80202f4 <dhcp_rebind+0x128>)
 802024e:	5cd3      	ldrb	r3, [r2, r3]
 8020250:	461a      	mov	r2, r3
 8020252:	f000 f9f5 	bl	8020640 <dhcp_option_byte>
 8020256:	4603      	mov	r3, r0
 8020258:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802025a:	7fbb      	ldrb	r3, [r7, #30]
 802025c:	3301      	adds	r3, #1
 802025e:	77bb      	strb	r3, [r7, #30]
 8020260:	7fbb      	ldrb	r3, [r7, #30]
 8020262:	2b02      	cmp	r3, #2
 8020264:	d9ed      	bls.n	8020242 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020266:	89b8      	ldrh	r0, [r7, #12]
 8020268:	693b      	ldr	r3, [r7, #16]
 802026a:	33f0      	adds	r3, #240	; 0xf0
 802026c:	697a      	ldr	r2, [r7, #20]
 802026e:	4619      	mov	r1, r3
 8020270:	f000 fef8 	bl	8021064 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020274:	4b20      	ldr	r3, [pc, #128]	; (80202f8 <dhcp_rebind+0x12c>)
 8020276:	6818      	ldr	r0, [r3, #0]
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	9300      	str	r3, [sp, #0]
 802027c:	2343      	movs	r3, #67	; 0x43
 802027e:	4a1f      	ldr	r2, [pc, #124]	; (80202fc <dhcp_rebind+0x130>)
 8020280:	6979      	ldr	r1, [r7, #20]
 8020282:	f7fe fd99 	bl	801edb8 <udp_sendto_if>
 8020286:	4603      	mov	r3, r0
 8020288:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 802028a:	6978      	ldr	r0, [r7, #20]
 802028c:	f7f7 ff2a 	bl	80180e4 <pbuf_free>
 8020290:	e001      	b.n	8020296 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020292:	23ff      	movs	r3, #255	; 0xff
 8020294:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020296:	69bb      	ldr	r3, [r7, #24]
 8020298:	799b      	ldrb	r3, [r3, #6]
 802029a:	2bff      	cmp	r3, #255	; 0xff
 802029c:	d005      	beq.n	80202aa <dhcp_rebind+0xde>
    dhcp->tries++;
 802029e:	69bb      	ldr	r3, [r7, #24]
 80202a0:	799b      	ldrb	r3, [r3, #6]
 80202a2:	3301      	adds	r3, #1
 80202a4:	b2da      	uxtb	r2, r3
 80202a6:	69bb      	ldr	r3, [r7, #24]
 80202a8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80202aa:	69bb      	ldr	r3, [r7, #24]
 80202ac:	799b      	ldrb	r3, [r3, #6]
 80202ae:	2b09      	cmp	r3, #9
 80202b0:	d80a      	bhi.n	80202c8 <dhcp_rebind+0xfc>
 80202b2:	69bb      	ldr	r3, [r7, #24]
 80202b4:	799b      	ldrb	r3, [r3, #6]
 80202b6:	b29b      	uxth	r3, r3
 80202b8:	461a      	mov	r2, r3
 80202ba:	0152      	lsls	r2, r2, #5
 80202bc:	1ad2      	subs	r2, r2, r3
 80202be:	0092      	lsls	r2, r2, #2
 80202c0:	4413      	add	r3, r2
 80202c2:	00db      	lsls	r3, r3, #3
 80202c4:	b29b      	uxth	r3, r3
 80202c6:	e001      	b.n	80202cc <dhcp_rebind+0x100>
 80202c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80202cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80202ce:	89fb      	ldrh	r3, [r7, #14]
 80202d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80202d4:	4a0a      	ldr	r2, [pc, #40]	; (8020300 <dhcp_rebind+0x134>)
 80202d6:	fb82 1203 	smull	r1, r2, r2, r3
 80202da:	1152      	asrs	r2, r2, #5
 80202dc:	17db      	asrs	r3, r3, #31
 80202de:	1ad3      	subs	r3, r2, r3
 80202e0:	b29a      	uxth	r2, r3
 80202e2:	69bb      	ldr	r3, [r7, #24]
 80202e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80202e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80202ea:	4618      	mov	r0, r3
 80202ec:	3720      	adds	r7, #32
 80202ee:	46bd      	mov	sp, r7
 80202f0:	bd80      	pop	{r7, pc}
 80202f2:	bf00      	nop
 80202f4:	20000040 	.word	0x20000040
 80202f8:	20009004 	.word	0x20009004
 80202fc:	08028fe4 	.word	0x08028fe4
 8020300:	10624dd3 	.word	0x10624dd3

08020304 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8020304:	b5b0      	push	{r4, r5, r7, lr}
 8020306:	b08a      	sub	sp, #40	; 0x28
 8020308:	af02      	add	r7, sp, #8
 802030a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020310:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8020312:	2103      	movs	r1, #3
 8020314:	69b8      	ldr	r0, [r7, #24]
 8020316:	f000 f945 	bl	80205a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802031a:	f107 030c 	add.w	r3, r7, #12
 802031e:	2203      	movs	r2, #3
 8020320:	69b9      	ldr	r1, [r7, #24]
 8020322:	6878      	ldr	r0, [r7, #4]
 8020324:	f000 fdc8 	bl	8020eb8 <dhcp_create_msg>
 8020328:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802032a:	697b      	ldr	r3, [r7, #20]
 802032c:	2b00      	cmp	r3, #0
 802032e:	d066      	beq.n	80203fe <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020330:	697b      	ldr	r3, [r7, #20]
 8020332:	685b      	ldr	r3, [r3, #4]
 8020334:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020336:	89b8      	ldrh	r0, [r7, #12]
 8020338:	693b      	ldr	r3, [r7, #16]
 802033a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802033e:	2302      	movs	r3, #2
 8020340:	2239      	movs	r2, #57	; 0x39
 8020342:	f000 f949 	bl	80205d8 <dhcp_option>
 8020346:	4603      	mov	r3, r0
 8020348:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 802034a:	89b8      	ldrh	r0, [r7, #12]
 802034c:	693b      	ldr	r3, [r7, #16]
 802034e:	33f0      	adds	r3, #240	; 0xf0
 8020350:	f44f 7210 	mov.w	r2, #576	; 0x240
 8020354:	4619      	mov	r1, r3
 8020356:	f000 f999 	bl	802068c <dhcp_option_short>
 802035a:	4603      	mov	r3, r0
 802035c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802035e:	89b8      	ldrh	r0, [r7, #12]
 8020360:	693b      	ldr	r3, [r7, #16]
 8020362:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020366:	2304      	movs	r3, #4
 8020368:	2232      	movs	r2, #50	; 0x32
 802036a:	f000 f935 	bl	80205d8 <dhcp_option>
 802036e:	4603      	mov	r3, r0
 8020370:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020372:	89bc      	ldrh	r4, [r7, #12]
 8020374:	693b      	ldr	r3, [r7, #16]
 8020376:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 802037a:	69bb      	ldr	r3, [r7, #24]
 802037c:	69db      	ldr	r3, [r3, #28]
 802037e:	4618      	mov	r0, r3
 8020380:	f7f6 faf7 	bl	8016972 <lwip_htonl>
 8020384:	4603      	mov	r3, r0
 8020386:	461a      	mov	r2, r3
 8020388:	4629      	mov	r1, r5
 802038a:	4620      	mov	r0, r4
 802038c:	f000 f9b0 	bl	80206f0 <dhcp_option_long>
 8020390:	4603      	mov	r3, r0
 8020392:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020394:	89b8      	ldrh	r0, [r7, #12]
 8020396:	693b      	ldr	r3, [r7, #16]
 8020398:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802039c:	2303      	movs	r3, #3
 802039e:	2237      	movs	r2, #55	; 0x37
 80203a0:	f000 f91a 	bl	80205d8 <dhcp_option>
 80203a4:	4603      	mov	r3, r0
 80203a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80203a8:	2300      	movs	r3, #0
 80203aa:	77bb      	strb	r3, [r7, #30]
 80203ac:	e00e      	b.n	80203cc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80203ae:	89b8      	ldrh	r0, [r7, #12]
 80203b0:	693b      	ldr	r3, [r7, #16]
 80203b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80203b6:	7fbb      	ldrb	r3, [r7, #30]
 80203b8:	4a29      	ldr	r2, [pc, #164]	; (8020460 <dhcp_reboot+0x15c>)
 80203ba:	5cd3      	ldrb	r3, [r2, r3]
 80203bc:	461a      	mov	r2, r3
 80203be:	f000 f93f 	bl	8020640 <dhcp_option_byte>
 80203c2:	4603      	mov	r3, r0
 80203c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80203c6:	7fbb      	ldrb	r3, [r7, #30]
 80203c8:	3301      	adds	r3, #1
 80203ca:	77bb      	strb	r3, [r7, #30]
 80203cc:	7fbb      	ldrb	r3, [r7, #30]
 80203ce:	2b02      	cmp	r3, #2
 80203d0:	d9ed      	bls.n	80203ae <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80203d2:	89b8      	ldrh	r0, [r7, #12]
 80203d4:	693b      	ldr	r3, [r7, #16]
 80203d6:	33f0      	adds	r3, #240	; 0xf0
 80203d8:	697a      	ldr	r2, [r7, #20]
 80203da:	4619      	mov	r1, r3
 80203dc:	f000 fe42 	bl	8021064 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80203e0:	4b20      	ldr	r3, [pc, #128]	; (8020464 <dhcp_reboot+0x160>)
 80203e2:	6818      	ldr	r0, [r3, #0]
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	9300      	str	r3, [sp, #0]
 80203e8:	2343      	movs	r3, #67	; 0x43
 80203ea:	4a1f      	ldr	r2, [pc, #124]	; (8020468 <dhcp_reboot+0x164>)
 80203ec:	6979      	ldr	r1, [r7, #20]
 80203ee:	f7fe fce3 	bl	801edb8 <udp_sendto_if>
 80203f2:	4603      	mov	r3, r0
 80203f4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80203f6:	6978      	ldr	r0, [r7, #20]
 80203f8:	f7f7 fe74 	bl	80180e4 <pbuf_free>
 80203fc:	e001      	b.n	8020402 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80203fe:	23ff      	movs	r3, #255	; 0xff
 8020400:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020402:	69bb      	ldr	r3, [r7, #24]
 8020404:	799b      	ldrb	r3, [r3, #6]
 8020406:	2bff      	cmp	r3, #255	; 0xff
 8020408:	d005      	beq.n	8020416 <dhcp_reboot+0x112>
    dhcp->tries++;
 802040a:	69bb      	ldr	r3, [r7, #24]
 802040c:	799b      	ldrb	r3, [r3, #6]
 802040e:	3301      	adds	r3, #1
 8020410:	b2da      	uxtb	r2, r3
 8020412:	69bb      	ldr	r3, [r7, #24]
 8020414:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020416:	69bb      	ldr	r3, [r7, #24]
 8020418:	799b      	ldrb	r3, [r3, #6]
 802041a:	2b09      	cmp	r3, #9
 802041c:	d80a      	bhi.n	8020434 <dhcp_reboot+0x130>
 802041e:	69bb      	ldr	r3, [r7, #24]
 8020420:	799b      	ldrb	r3, [r3, #6]
 8020422:	b29b      	uxth	r3, r3
 8020424:	461a      	mov	r2, r3
 8020426:	0152      	lsls	r2, r2, #5
 8020428:	1ad2      	subs	r2, r2, r3
 802042a:	0092      	lsls	r2, r2, #2
 802042c:	4413      	add	r3, r2
 802042e:	00db      	lsls	r3, r3, #3
 8020430:	b29b      	uxth	r3, r3
 8020432:	e001      	b.n	8020438 <dhcp_reboot+0x134>
 8020434:	f242 7310 	movw	r3, #10000	; 0x2710
 8020438:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802043a:	89fb      	ldrh	r3, [r7, #14]
 802043c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020440:	4a0a      	ldr	r2, [pc, #40]	; (802046c <dhcp_reboot+0x168>)
 8020442:	fb82 1203 	smull	r1, r2, r2, r3
 8020446:	1152      	asrs	r2, r2, #5
 8020448:	17db      	asrs	r3, r3, #31
 802044a:	1ad3      	subs	r3, r2, r3
 802044c:	b29a      	uxth	r2, r3
 802044e:	69bb      	ldr	r3, [r7, #24]
 8020450:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020452:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020456:	4618      	mov	r0, r3
 8020458:	3720      	adds	r7, #32
 802045a:	46bd      	mov	sp, r7
 802045c:	bdb0      	pop	{r4, r5, r7, pc}
 802045e:	bf00      	nop
 8020460:	20000040 	.word	0x20000040
 8020464:	20009004 	.word	0x20009004
 8020468:	08028fe4 	.word	0x08028fe4
 802046c:	10624dd3 	.word	0x10624dd3

08020470 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8020470:	b5b0      	push	{r4, r5, r7, lr}
 8020472:	b08a      	sub	sp, #40	; 0x28
 8020474:	af02      	add	r7, sp, #8
 8020476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802047c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 802047e:	69fb      	ldr	r3, [r7, #28]
 8020480:	2b00      	cmp	r3, #0
 8020482:	f000 8084 	beq.w	802058e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8020486:	69fb      	ldr	r3, [r7, #28]
 8020488:	795b      	ldrb	r3, [r3, #5]
 802048a:	2b00      	cmp	r3, #0
 802048c:	f000 8081 	beq.w	8020592 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8020490:	69fb      	ldr	r3, [r7, #28]
 8020492:	699b      	ldr	r3, [r3, #24]
 8020494:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8020496:	69fb      	ldr	r3, [r7, #28]
 8020498:	2200      	movs	r2, #0
 802049a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 802049c:	69fb      	ldr	r3, [r7, #28]
 802049e:	2200      	movs	r2, #0
 80204a0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80204a2:	69fb      	ldr	r3, [r7, #28]
 80204a4:	2200      	movs	r2, #0
 80204a6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80204a8:	69fb      	ldr	r3, [r7, #28]
 80204aa:	2200      	movs	r2, #0
 80204ac:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80204ae:	69fb      	ldr	r3, [r7, #28]
 80204b0:	2200      	movs	r2, #0
 80204b2:	631a      	str	r2, [r3, #48]	; 0x30
 80204b4:	69fb      	ldr	r3, [r7, #28]
 80204b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80204b8:	69fb      	ldr	r3, [r7, #28]
 80204ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80204bc:	69fb      	ldr	r3, [r7, #28]
 80204be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204c0:	69fb      	ldr	r3, [r7, #28]
 80204c2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80204c4:	69fb      	ldr	r3, [r7, #28]
 80204c6:	2200      	movs	r2, #0
 80204c8:	829a      	strh	r2, [r3, #20]
 80204ca:	69fb      	ldr	r3, [r7, #28]
 80204cc:	8a9a      	ldrh	r2, [r3, #20]
 80204ce:	69fb      	ldr	r3, [r7, #28]
 80204d0:	825a      	strh	r2, [r3, #18]
 80204d2:	69fb      	ldr	r3, [r7, #28]
 80204d4:	8a5a      	ldrh	r2, [r3, #18]
 80204d6:	69fb      	ldr	r3, [r7, #28]
 80204d8:	821a      	strh	r2, [r3, #16]
 80204da:	69fb      	ldr	r3, [r7, #28]
 80204dc:	8a1a      	ldrh	r2, [r3, #16]
 80204de:	69fb      	ldr	r3, [r7, #28]
 80204e0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80204e2:	6878      	ldr	r0, [r7, #4]
 80204e4:	f000 fdec 	bl	80210c0 <dhcp_supplied_address>
 80204e8:	4603      	mov	r3, r0
 80204ea:	2b00      	cmp	r3, #0
 80204ec:	d03b      	beq.n	8020566 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80204ee:	f107 030e 	add.w	r3, r7, #14
 80204f2:	2207      	movs	r2, #7
 80204f4:	69f9      	ldr	r1, [r7, #28]
 80204f6:	6878      	ldr	r0, [r7, #4]
 80204f8:	f000 fcde 	bl	8020eb8 <dhcp_create_msg>
 80204fc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80204fe:	69bb      	ldr	r3, [r7, #24]
 8020500:	2b00      	cmp	r3, #0
 8020502:	d030      	beq.n	8020566 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020504:	69bb      	ldr	r3, [r7, #24]
 8020506:	685b      	ldr	r3, [r3, #4]
 8020508:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 802050a:	89f8      	ldrh	r0, [r7, #14]
 802050c:	697b      	ldr	r3, [r7, #20]
 802050e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020512:	2304      	movs	r3, #4
 8020514:	2236      	movs	r2, #54	; 0x36
 8020516:	f000 f85f 	bl	80205d8 <dhcp_option>
 802051a:	4603      	mov	r3, r0
 802051c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802051e:	89fc      	ldrh	r4, [r7, #14]
 8020520:	697b      	ldr	r3, [r7, #20]
 8020522:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020526:	693b      	ldr	r3, [r7, #16]
 8020528:	4618      	mov	r0, r3
 802052a:	f7f6 fa22 	bl	8016972 <lwip_htonl>
 802052e:	4603      	mov	r3, r0
 8020530:	461a      	mov	r2, r3
 8020532:	4629      	mov	r1, r5
 8020534:	4620      	mov	r0, r4
 8020536:	f000 f8db 	bl	80206f0 <dhcp_option_long>
 802053a:	4603      	mov	r3, r0
 802053c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802053e:	89f8      	ldrh	r0, [r7, #14]
 8020540:	697b      	ldr	r3, [r7, #20]
 8020542:	33f0      	adds	r3, #240	; 0xf0
 8020544:	69ba      	ldr	r2, [r7, #24]
 8020546:	4619      	mov	r1, r3
 8020548:	f000 fd8c 	bl	8021064 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802054c:	4b13      	ldr	r3, [pc, #76]	; (802059c <dhcp_release_and_stop+0x12c>)
 802054e:	6818      	ldr	r0, [r3, #0]
 8020550:	f107 0210 	add.w	r2, r7, #16
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	9300      	str	r3, [sp, #0]
 8020558:	2343      	movs	r3, #67	; 0x43
 802055a:	69b9      	ldr	r1, [r7, #24]
 802055c:	f7fe fc2c 	bl	801edb8 <udp_sendto_if>
      pbuf_free(p_out);
 8020560:	69b8      	ldr	r0, [r7, #24]
 8020562:	f7f7 fdbf 	bl	80180e4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020566:	4b0e      	ldr	r3, [pc, #56]	; (80205a0 <dhcp_release_and_stop+0x130>)
 8020568:	4a0d      	ldr	r2, [pc, #52]	; (80205a0 <dhcp_release_and_stop+0x130>)
 802056a:	490d      	ldr	r1, [pc, #52]	; (80205a0 <dhcp_release_and_stop+0x130>)
 802056c:	6878      	ldr	r0, [r7, #4]
 802056e:	f7f7 f89f 	bl	80176b0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8020572:	2100      	movs	r1, #0
 8020574:	69f8      	ldr	r0, [r7, #28]
 8020576:	f000 f815 	bl	80205a4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 802057a:	69fb      	ldr	r3, [r7, #28]
 802057c:	791b      	ldrb	r3, [r3, #4]
 802057e:	2b00      	cmp	r3, #0
 8020580:	d008      	beq.n	8020594 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8020582:	f7fe ff71 	bl	801f468 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8020586:	69fb      	ldr	r3, [r7, #28]
 8020588:	2200      	movs	r2, #0
 802058a:	711a      	strb	r2, [r3, #4]
 802058c:	e002      	b.n	8020594 <dhcp_release_and_stop+0x124>
    return;
 802058e:	bf00      	nop
 8020590:	e000      	b.n	8020594 <dhcp_release_and_stop+0x124>
    return;
 8020592:	bf00      	nop
  }
}
 8020594:	3720      	adds	r7, #32
 8020596:	46bd      	mov	sp, r7
 8020598:	bdb0      	pop	{r4, r5, r7, pc}
 802059a:	bf00      	nop
 802059c:	20009004 	.word	0x20009004
 80205a0:	08028fe0 	.word	0x08028fe0

080205a4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80205a4:	b480      	push	{r7}
 80205a6:	b083      	sub	sp, #12
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	6078      	str	r0, [r7, #4]
 80205ac:	460b      	mov	r3, r1
 80205ae:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	795b      	ldrb	r3, [r3, #5]
 80205b4:	78fa      	ldrb	r2, [r7, #3]
 80205b6:	429a      	cmp	r2, r3
 80205b8:	d008      	beq.n	80205cc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	78fa      	ldrb	r2, [r7, #3]
 80205be:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	2200      	movs	r2, #0
 80205c4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	2200      	movs	r2, #0
 80205ca:	811a      	strh	r2, [r3, #8]
  }
}
 80205cc:	bf00      	nop
 80205ce:	370c      	adds	r7, #12
 80205d0:	46bd      	mov	sp, r7
 80205d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d6:	4770      	bx	lr

080205d8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80205d8:	b580      	push	{r7, lr}
 80205da:	b082      	sub	sp, #8
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6039      	str	r1, [r7, #0]
 80205e0:	4611      	mov	r1, r2
 80205e2:	461a      	mov	r2, r3
 80205e4:	4603      	mov	r3, r0
 80205e6:	80fb      	strh	r3, [r7, #6]
 80205e8:	460b      	mov	r3, r1
 80205ea:	717b      	strb	r3, [r7, #5]
 80205ec:	4613      	mov	r3, r2
 80205ee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80205f0:	88fa      	ldrh	r2, [r7, #6]
 80205f2:	793b      	ldrb	r3, [r7, #4]
 80205f4:	4413      	add	r3, r2
 80205f6:	3302      	adds	r3, #2
 80205f8:	2b44      	cmp	r3, #68	; 0x44
 80205fa:	d906      	bls.n	802060a <dhcp_option+0x32>
 80205fc:	4b0d      	ldr	r3, [pc, #52]	; (8020634 <dhcp_option+0x5c>)
 80205fe:	f240 529a 	movw	r2, #1434	; 0x59a
 8020602:	490d      	ldr	r1, [pc, #52]	; (8020638 <dhcp_option+0x60>)
 8020604:	480d      	ldr	r0, [pc, #52]	; (802063c <dhcp_option+0x64>)
 8020606:	f004 f8cb 	bl	80247a0 <iprintf>
  options[options_out_len++] = option_type;
 802060a:	88fb      	ldrh	r3, [r7, #6]
 802060c:	1c5a      	adds	r2, r3, #1
 802060e:	80fa      	strh	r2, [r7, #6]
 8020610:	461a      	mov	r2, r3
 8020612:	683b      	ldr	r3, [r7, #0]
 8020614:	4413      	add	r3, r2
 8020616:	797a      	ldrb	r2, [r7, #5]
 8020618:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 802061a:	88fb      	ldrh	r3, [r7, #6]
 802061c:	1c5a      	adds	r2, r3, #1
 802061e:	80fa      	strh	r2, [r7, #6]
 8020620:	461a      	mov	r2, r3
 8020622:	683b      	ldr	r3, [r7, #0]
 8020624:	4413      	add	r3, r2
 8020626:	793a      	ldrb	r2, [r7, #4]
 8020628:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 802062a:	88fb      	ldrh	r3, [r7, #6]
}
 802062c:	4618      	mov	r0, r3
 802062e:	3708      	adds	r7, #8
 8020630:	46bd      	mov	sp, r7
 8020632:	bd80      	pop	{r7, pc}
 8020634:	080283cc 	.word	0x080283cc
 8020638:	08028560 	.word	0x08028560
 802063c:	0802842c 	.word	0x0802842c

08020640 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8020640:	b580      	push	{r7, lr}
 8020642:	b082      	sub	sp, #8
 8020644:	af00      	add	r7, sp, #0
 8020646:	4603      	mov	r3, r0
 8020648:	6039      	str	r1, [r7, #0]
 802064a:	80fb      	strh	r3, [r7, #6]
 802064c:	4613      	mov	r3, r2
 802064e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020650:	88fb      	ldrh	r3, [r7, #6]
 8020652:	2b43      	cmp	r3, #67	; 0x43
 8020654:	d906      	bls.n	8020664 <dhcp_option_byte+0x24>
 8020656:	4b0a      	ldr	r3, [pc, #40]	; (8020680 <dhcp_option_byte+0x40>)
 8020658:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802065c:	4909      	ldr	r1, [pc, #36]	; (8020684 <dhcp_option_byte+0x44>)
 802065e:	480a      	ldr	r0, [pc, #40]	; (8020688 <dhcp_option_byte+0x48>)
 8020660:	f004 f89e 	bl	80247a0 <iprintf>
  options[options_out_len++] = value;
 8020664:	88fb      	ldrh	r3, [r7, #6]
 8020666:	1c5a      	adds	r2, r3, #1
 8020668:	80fa      	strh	r2, [r7, #6]
 802066a:	461a      	mov	r2, r3
 802066c:	683b      	ldr	r3, [r7, #0]
 802066e:	4413      	add	r3, r2
 8020670:	797a      	ldrb	r2, [r7, #5]
 8020672:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8020674:	88fb      	ldrh	r3, [r7, #6]
}
 8020676:	4618      	mov	r0, r3
 8020678:	3708      	adds	r7, #8
 802067a:	46bd      	mov	sp, r7
 802067c:	bd80      	pop	{r7, pc}
 802067e:	bf00      	nop
 8020680:	080283cc 	.word	0x080283cc
 8020684:	080285a4 	.word	0x080285a4
 8020688:	0802842c 	.word	0x0802842c

0802068c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 802068c:	b580      	push	{r7, lr}
 802068e:	b082      	sub	sp, #8
 8020690:	af00      	add	r7, sp, #0
 8020692:	4603      	mov	r3, r0
 8020694:	6039      	str	r1, [r7, #0]
 8020696:	80fb      	strh	r3, [r7, #6]
 8020698:	4613      	mov	r3, r2
 802069a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802069c:	88fb      	ldrh	r3, [r7, #6]
 802069e:	3302      	adds	r3, #2
 80206a0:	2b44      	cmp	r3, #68	; 0x44
 80206a2:	d906      	bls.n	80206b2 <dhcp_option_short+0x26>
 80206a4:	4b0f      	ldr	r3, [pc, #60]	; (80206e4 <dhcp_option_short+0x58>)
 80206a6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80206aa:	490f      	ldr	r1, [pc, #60]	; (80206e8 <dhcp_option_short+0x5c>)
 80206ac:	480f      	ldr	r0, [pc, #60]	; (80206ec <dhcp_option_short+0x60>)
 80206ae:	f004 f877 	bl	80247a0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80206b2:	88bb      	ldrh	r3, [r7, #4]
 80206b4:	0a1b      	lsrs	r3, r3, #8
 80206b6:	b29a      	uxth	r2, r3
 80206b8:	88fb      	ldrh	r3, [r7, #6]
 80206ba:	1c59      	adds	r1, r3, #1
 80206bc:	80f9      	strh	r1, [r7, #6]
 80206be:	4619      	mov	r1, r3
 80206c0:	683b      	ldr	r3, [r7, #0]
 80206c2:	440b      	add	r3, r1
 80206c4:	b2d2      	uxtb	r2, r2
 80206c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80206c8:	88fb      	ldrh	r3, [r7, #6]
 80206ca:	1c5a      	adds	r2, r3, #1
 80206cc:	80fa      	strh	r2, [r7, #6]
 80206ce:	461a      	mov	r2, r3
 80206d0:	683b      	ldr	r3, [r7, #0]
 80206d2:	4413      	add	r3, r2
 80206d4:	88ba      	ldrh	r2, [r7, #4]
 80206d6:	b2d2      	uxtb	r2, r2
 80206d8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80206da:	88fb      	ldrh	r3, [r7, #6]
}
 80206dc:	4618      	mov	r0, r3
 80206de:	3708      	adds	r7, #8
 80206e0:	46bd      	mov	sp, r7
 80206e2:	bd80      	pop	{r7, pc}
 80206e4:	080283cc 	.word	0x080283cc
 80206e8:	080285dc 	.word	0x080285dc
 80206ec:	0802842c 	.word	0x0802842c

080206f0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80206f0:	b580      	push	{r7, lr}
 80206f2:	b084      	sub	sp, #16
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	4603      	mov	r3, r0
 80206f8:	60b9      	str	r1, [r7, #8]
 80206fa:	607a      	str	r2, [r7, #4]
 80206fc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80206fe:	89fb      	ldrh	r3, [r7, #14]
 8020700:	3304      	adds	r3, #4
 8020702:	2b44      	cmp	r3, #68	; 0x44
 8020704:	d906      	bls.n	8020714 <dhcp_option_long+0x24>
 8020706:	4b19      	ldr	r3, [pc, #100]	; (802076c <dhcp_option_long+0x7c>)
 8020708:	f240 52b7 	movw	r2, #1463	; 0x5b7
 802070c:	4918      	ldr	r1, [pc, #96]	; (8020770 <dhcp_option_long+0x80>)
 802070e:	4819      	ldr	r0, [pc, #100]	; (8020774 <dhcp_option_long+0x84>)
 8020710:	f004 f846 	bl	80247a0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	0e1a      	lsrs	r2, r3, #24
 8020718:	89fb      	ldrh	r3, [r7, #14]
 802071a:	1c59      	adds	r1, r3, #1
 802071c:	81f9      	strh	r1, [r7, #14]
 802071e:	4619      	mov	r1, r3
 8020720:	68bb      	ldr	r3, [r7, #8]
 8020722:	440b      	add	r3, r1
 8020724:	b2d2      	uxtb	r2, r2
 8020726:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	0c1a      	lsrs	r2, r3, #16
 802072c:	89fb      	ldrh	r3, [r7, #14]
 802072e:	1c59      	adds	r1, r3, #1
 8020730:	81f9      	strh	r1, [r7, #14]
 8020732:	4619      	mov	r1, r3
 8020734:	68bb      	ldr	r3, [r7, #8]
 8020736:	440b      	add	r3, r1
 8020738:	b2d2      	uxtb	r2, r2
 802073a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	0a1a      	lsrs	r2, r3, #8
 8020740:	89fb      	ldrh	r3, [r7, #14]
 8020742:	1c59      	adds	r1, r3, #1
 8020744:	81f9      	strh	r1, [r7, #14]
 8020746:	4619      	mov	r1, r3
 8020748:	68bb      	ldr	r3, [r7, #8]
 802074a:	440b      	add	r3, r1
 802074c:	b2d2      	uxtb	r2, r2
 802074e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8020750:	89fb      	ldrh	r3, [r7, #14]
 8020752:	1c5a      	adds	r2, r3, #1
 8020754:	81fa      	strh	r2, [r7, #14]
 8020756:	461a      	mov	r2, r3
 8020758:	68bb      	ldr	r3, [r7, #8]
 802075a:	4413      	add	r3, r2
 802075c:	687a      	ldr	r2, [r7, #4]
 802075e:	b2d2      	uxtb	r2, r2
 8020760:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8020762:	89fb      	ldrh	r3, [r7, #14]
}
 8020764:	4618      	mov	r0, r3
 8020766:	3710      	adds	r7, #16
 8020768:	46bd      	mov	sp, r7
 802076a:	bd80      	pop	{r7, pc}
 802076c:	080283cc 	.word	0x080283cc
 8020770:	08028618 	.word	0x08028618
 8020774:	0802842c 	.word	0x0802842c

08020778 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8020778:	b580      	push	{r7, lr}
 802077a:	b090      	sub	sp, #64	; 0x40
 802077c:	af00      	add	r7, sp, #0
 802077e:	6078      	str	r0, [r7, #4]
 8020780:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8020782:	2300      	movs	r3, #0
 8020784:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8020786:	2300      	movs	r3, #0
 8020788:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 802078a:	2208      	movs	r2, #8
 802078c:	2100      	movs	r1, #0
 802078e:	48be      	ldr	r0, [pc, #760]	; (8020a88 <dhcp_parse_reply+0x310>)
 8020790:	f003 ff56 	bl	8024640 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	895b      	ldrh	r3, [r3, #10]
 8020798:	2b2b      	cmp	r3, #43	; 0x2b
 802079a:	d802      	bhi.n	80207a2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 802079c:	f06f 0301 	mvn.w	r3, #1
 80207a0:	e2a8      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	685b      	ldr	r3, [r3, #4]
 80207a6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80207a8:	23f0      	movs	r3, #240	; 0xf0
 80207aa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	891b      	ldrh	r3, [r3, #8]
 80207b0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80207b6:	e00c      	b.n	80207d2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80207b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207ba:	895b      	ldrh	r3, [r3, #10]
 80207bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80207be:	1ad3      	subs	r3, r2, r3
 80207c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80207c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207c4:	895b      	ldrh	r3, [r3, #10]
 80207c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80207c8:	1ad3      	subs	r3, r2, r3
 80207ca:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80207cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207ce:	681b      	ldr	r3, [r3, #0]
 80207d0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80207d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	d004      	beq.n	80207e2 <dhcp_parse_reply+0x6a>
 80207d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207da:	895b      	ldrh	r3, [r3, #10]
 80207dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80207de:	429a      	cmp	r2, r3
 80207e0:	d2ea      	bcs.n	80207b8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80207e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d102      	bne.n	80207ee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80207e8:	f06f 0301 	mvn.w	r3, #1
 80207ec:	e282      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80207ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80207f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80207f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80207f4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80207f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207f8:	685b      	ldr	r3, [r3, #4]
 80207fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80207fc:	e23a      	b.n	8020c74 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80207fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020802:	4413      	add	r3, r2
 8020804:	781b      	ldrb	r3, [r3, #0]
 8020806:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8020808:	2300      	movs	r3, #0
 802080a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 802080e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020812:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8020814:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020816:	3302      	adds	r3, #2
 8020818:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 802081a:	8bfa      	ldrh	r2, [r7, #30]
 802081c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802081e:	429a      	cmp	r2, r3
 8020820:	d202      	bcs.n	8020828 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8020822:	f06f 0301 	mvn.w	r3, #1
 8020826:	e265      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8020828:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802082a:	3301      	adds	r3, #1
 802082c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802082e:	8952      	ldrh	r2, [r2, #10]
 8020830:	4293      	cmp	r3, r2
 8020832:	da07      	bge.n	8020844 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8020834:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020836:	3301      	adds	r3, #1
 8020838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802083a:	4413      	add	r3, r2
 802083c:	781b      	ldrb	r3, [r3, #0]
 802083e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020842:	e00b      	b.n	802085c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8020844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020846:	681b      	ldr	r3, [r3, #0]
 8020848:	2b00      	cmp	r3, #0
 802084a:	d004      	beq.n	8020856 <dhcp_parse_reply+0xde>
 802084c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	685b      	ldr	r3, [r3, #4]
 8020852:	781b      	ldrb	r3, [r3, #0]
 8020854:	e000      	b.n	8020858 <dhcp_parse_reply+0xe0>
 8020856:	2300      	movs	r3, #0
 8020858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 802085c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8020864:	7dfb      	ldrb	r3, [r7, #23]
 8020866:	2b3b      	cmp	r3, #59	; 0x3b
 8020868:	f200 812d 	bhi.w	8020ac6 <dhcp_parse_reply+0x34e>
 802086c:	a201      	add	r2, pc, #4	; (adr r2, 8020874 <dhcp_parse_reply+0xfc>)
 802086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020872:	bf00      	nop
 8020874:	08020965 	.word	0x08020965
 8020878:	08020975 	.word	0x08020975
 802087c:	08020ac7 	.word	0x08020ac7
 8020880:	08020997 	.word	0x08020997
 8020884:	08020ac7 	.word	0x08020ac7
 8020888:	08020ac7 	.word	0x08020ac7
 802088c:	08020ac7 	.word	0x08020ac7
 8020890:	08020ac7 	.word	0x08020ac7
 8020894:	08020ac7 	.word	0x08020ac7
 8020898:	08020ac7 	.word	0x08020ac7
 802089c:	08020ac7 	.word	0x08020ac7
 80208a0:	08020ac7 	.word	0x08020ac7
 80208a4:	08020ac7 	.word	0x08020ac7
 80208a8:	08020ac7 	.word	0x08020ac7
 80208ac:	08020ac7 	.word	0x08020ac7
 80208b0:	08020ac7 	.word	0x08020ac7
 80208b4:	08020ac7 	.word	0x08020ac7
 80208b8:	08020ac7 	.word	0x08020ac7
 80208bc:	08020ac7 	.word	0x08020ac7
 80208c0:	08020ac7 	.word	0x08020ac7
 80208c4:	08020ac7 	.word	0x08020ac7
 80208c8:	08020ac7 	.word	0x08020ac7
 80208cc:	08020ac7 	.word	0x08020ac7
 80208d0:	08020ac7 	.word	0x08020ac7
 80208d4:	08020ac7 	.word	0x08020ac7
 80208d8:	08020ac7 	.word	0x08020ac7
 80208dc:	08020ac7 	.word	0x08020ac7
 80208e0:	08020ac7 	.word	0x08020ac7
 80208e4:	08020ac7 	.word	0x08020ac7
 80208e8:	08020ac7 	.word	0x08020ac7
 80208ec:	08020ac7 	.word	0x08020ac7
 80208f0:	08020ac7 	.word	0x08020ac7
 80208f4:	08020ac7 	.word	0x08020ac7
 80208f8:	08020ac7 	.word	0x08020ac7
 80208fc:	08020ac7 	.word	0x08020ac7
 8020900:	08020ac7 	.word	0x08020ac7
 8020904:	08020ac7 	.word	0x08020ac7
 8020908:	08020ac7 	.word	0x08020ac7
 802090c:	08020ac7 	.word	0x08020ac7
 8020910:	08020ac7 	.word	0x08020ac7
 8020914:	08020ac7 	.word	0x08020ac7
 8020918:	08020ac7 	.word	0x08020ac7
 802091c:	08020ac7 	.word	0x08020ac7
 8020920:	08020ac7 	.word	0x08020ac7
 8020924:	08020ac7 	.word	0x08020ac7
 8020928:	08020ac7 	.word	0x08020ac7
 802092c:	08020ac7 	.word	0x08020ac7
 8020930:	08020ac7 	.word	0x08020ac7
 8020934:	08020ac7 	.word	0x08020ac7
 8020938:	08020ac7 	.word	0x08020ac7
 802093c:	08020ac7 	.word	0x08020ac7
 8020940:	080209c3 	.word	0x080209c3
 8020944:	080209e5 	.word	0x080209e5
 8020948:	08020a21 	.word	0x08020a21
 802094c:	08020a43 	.word	0x08020a43
 8020950:	08020ac7 	.word	0x08020ac7
 8020954:	08020ac7 	.word	0x08020ac7
 8020958:	08020ac7 	.word	0x08020ac7
 802095c:	08020a65 	.word	0x08020a65
 8020960:	08020aa5 	.word	0x08020aa5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802096a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802096e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8020972:	e0ac      	b.n	8020ace <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020978:	2b04      	cmp	r3, #4
 802097a:	d009      	beq.n	8020990 <dhcp_parse_reply+0x218>
 802097c:	4b43      	ldr	r3, [pc, #268]	; (8020a8c <dhcp_parse_reply+0x314>)
 802097e:	f240 622e 	movw	r2, #1582	; 0x62e
 8020982:	4943      	ldr	r1, [pc, #268]	; (8020a90 <dhcp_parse_reply+0x318>)
 8020984:	4843      	ldr	r0, [pc, #268]	; (8020a94 <dhcp_parse_reply+0x31c>)
 8020986:	f003 ff0b 	bl	80247a0 <iprintf>
 802098a:	f06f 0305 	mvn.w	r3, #5
 802098e:	e1b1      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8020990:	2306      	movs	r3, #6
 8020992:	623b      	str	r3, [r7, #32]
        break;
 8020994:	e09b      	b.n	8020ace <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8020996:	2304      	movs	r3, #4
 8020998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 802099c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80209a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80209a4:	429a      	cmp	r2, r3
 80209a6:	d209      	bcs.n	80209bc <dhcp_parse_reply+0x244>
 80209a8:	4b38      	ldr	r3, [pc, #224]	; (8020a8c <dhcp_parse_reply+0x314>)
 80209aa:	f240 6233 	movw	r2, #1587	; 0x633
 80209ae:	493a      	ldr	r1, [pc, #232]	; (8020a98 <dhcp_parse_reply+0x320>)
 80209b0:	4838      	ldr	r0, [pc, #224]	; (8020a94 <dhcp_parse_reply+0x31c>)
 80209b2:	f003 fef5 	bl	80247a0 <iprintf>
 80209b6:	f06f 0305 	mvn.w	r3, #5
 80209ba:	e19b      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80209bc:	2307      	movs	r3, #7
 80209be:	623b      	str	r3, [r7, #32]
        break;
 80209c0:	e085      	b.n	8020ace <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80209c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80209c6:	2b04      	cmp	r3, #4
 80209c8:	d009      	beq.n	80209de <dhcp_parse_reply+0x266>
 80209ca:	4b30      	ldr	r3, [pc, #192]	; (8020a8c <dhcp_parse_reply+0x314>)
 80209cc:	f240 6241 	movw	r2, #1601	; 0x641
 80209d0:	492f      	ldr	r1, [pc, #188]	; (8020a90 <dhcp_parse_reply+0x318>)
 80209d2:	4830      	ldr	r0, [pc, #192]	; (8020a94 <dhcp_parse_reply+0x31c>)
 80209d4:	f003 fee4 	bl	80247a0 <iprintf>
 80209d8:	f06f 0305 	mvn.w	r3, #5
 80209dc:	e18a      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80209de:	2303      	movs	r3, #3
 80209e0:	623b      	str	r3, [r7, #32]
        break;
 80209e2:	e074      	b.n	8020ace <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80209e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80209e8:	2b01      	cmp	r3, #1
 80209ea:	d009      	beq.n	8020a00 <dhcp_parse_reply+0x288>
 80209ec:	4b27      	ldr	r3, [pc, #156]	; (8020a8c <dhcp_parse_reply+0x314>)
 80209ee:	f240 624f 	movw	r2, #1615	; 0x64f
 80209f2:	492a      	ldr	r1, [pc, #168]	; (8020a9c <dhcp_parse_reply+0x324>)
 80209f4:	4827      	ldr	r0, [pc, #156]	; (8020a94 <dhcp_parse_reply+0x31c>)
 80209f6:	f003 fed3 	bl	80247a0 <iprintf>
 80209fa:	f06f 0305 	mvn.w	r3, #5
 80209fe:	e179      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8020a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8020a02:	2bf0      	cmp	r3, #240	; 0xf0
 8020a04:	d009      	beq.n	8020a1a <dhcp_parse_reply+0x2a2>
 8020a06:	4b21      	ldr	r3, [pc, #132]	; (8020a8c <dhcp_parse_reply+0x314>)
 8020a08:	f240 6251 	movw	r2, #1617	; 0x651
 8020a0c:	4924      	ldr	r1, [pc, #144]	; (8020aa0 <dhcp_parse_reply+0x328>)
 8020a0e:	4821      	ldr	r0, [pc, #132]	; (8020a94 <dhcp_parse_reply+0x31c>)
 8020a10:	f003 fec6 	bl	80247a0 <iprintf>
 8020a14:	f06f 0305 	mvn.w	r3, #5
 8020a18:	e16c      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	623b      	str	r3, [r7, #32]
        break;
 8020a1e:	e056      	b.n	8020ace <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020a24:	2b01      	cmp	r3, #1
 8020a26:	d009      	beq.n	8020a3c <dhcp_parse_reply+0x2c4>
 8020a28:	4b18      	ldr	r3, [pc, #96]	; (8020a8c <dhcp_parse_reply+0x314>)
 8020a2a:	f240 6255 	movw	r2, #1621	; 0x655
 8020a2e:	491b      	ldr	r1, [pc, #108]	; (8020a9c <dhcp_parse_reply+0x324>)
 8020a30:	4818      	ldr	r0, [pc, #96]	; (8020a94 <dhcp_parse_reply+0x31c>)
 8020a32:	f003 feb5 	bl	80247a0 <iprintf>
 8020a36:	f06f 0305 	mvn.w	r3, #5
 8020a3a:	e15b      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8020a3c:	2301      	movs	r3, #1
 8020a3e:	623b      	str	r3, [r7, #32]
        break;
 8020a40:	e045      	b.n	8020ace <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020a46:	2b04      	cmp	r3, #4
 8020a48:	d009      	beq.n	8020a5e <dhcp_parse_reply+0x2e6>
 8020a4a:	4b10      	ldr	r3, [pc, #64]	; (8020a8c <dhcp_parse_reply+0x314>)
 8020a4c:	f240 6259 	movw	r2, #1625	; 0x659
 8020a50:	490f      	ldr	r1, [pc, #60]	; (8020a90 <dhcp_parse_reply+0x318>)
 8020a52:	4810      	ldr	r0, [pc, #64]	; (8020a94 <dhcp_parse_reply+0x31c>)
 8020a54:	f003 fea4 	bl	80247a0 <iprintf>
 8020a58:	f06f 0305 	mvn.w	r3, #5
 8020a5c:	e14a      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8020a5e:	2302      	movs	r3, #2
 8020a60:	623b      	str	r3, [r7, #32]
        break;
 8020a62:	e034      	b.n	8020ace <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020a68:	2b04      	cmp	r3, #4
 8020a6a:	d009      	beq.n	8020a80 <dhcp_parse_reply+0x308>
 8020a6c:	4b07      	ldr	r3, [pc, #28]	; (8020a8c <dhcp_parse_reply+0x314>)
 8020a6e:	f240 625d 	movw	r2, #1629	; 0x65d
 8020a72:	4907      	ldr	r1, [pc, #28]	; (8020a90 <dhcp_parse_reply+0x318>)
 8020a74:	4807      	ldr	r0, [pc, #28]	; (8020a94 <dhcp_parse_reply+0x31c>)
 8020a76:	f003 fe93 	bl	80247a0 <iprintf>
 8020a7a:	f06f 0305 	mvn.w	r3, #5
 8020a7e:	e139      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8020a80:	2304      	movs	r3, #4
 8020a82:	623b      	str	r3, [r7, #32]
        break;
 8020a84:	e023      	b.n	8020ace <dhcp_parse_reply+0x356>
 8020a86:	bf00      	nop
 8020a88:	200103dc 	.word	0x200103dc
 8020a8c:	080283cc 	.word	0x080283cc
 8020a90:	08028654 	.word	0x08028654
 8020a94:	0802842c 	.word	0x0802842c
 8020a98:	08028660 	.word	0x08028660
 8020a9c:	08028674 	.word	0x08028674
 8020aa0:	08028680 	.word	0x08028680
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020aa8:	2b04      	cmp	r3, #4
 8020aaa:	d009      	beq.n	8020ac0 <dhcp_parse_reply+0x348>
 8020aac:	4b93      	ldr	r3, [pc, #588]	; (8020cfc <dhcp_parse_reply+0x584>)
 8020aae:	f240 6261 	movw	r2, #1633	; 0x661
 8020ab2:	4993      	ldr	r1, [pc, #588]	; (8020d00 <dhcp_parse_reply+0x588>)
 8020ab4:	4893      	ldr	r0, [pc, #588]	; (8020d04 <dhcp_parse_reply+0x58c>)
 8020ab6:	f003 fe73 	bl	80247a0 <iprintf>
 8020aba:	f06f 0305 	mvn.w	r3, #5
 8020abe:	e119      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8020ac0:	2305      	movs	r3, #5
 8020ac2:	623b      	str	r3, [r7, #32]
        break;
 8020ac4:	e003      	b.n	8020ace <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8020ac6:	2300      	movs	r3, #0
 8020ac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8020acc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8020ace:	7dfb      	ldrb	r3, [r7, #23]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d103      	bne.n	8020adc <dhcp_parse_reply+0x364>
      offset++;
 8020ad4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020ad6:	3301      	adds	r3, #1
 8020ad8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8020ada:	e0a1      	b.n	8020c20 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8020adc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8020ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020ae2:	4413      	add	r3, r2
 8020ae4:	3302      	adds	r3, #2
 8020ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020aea:	db02      	blt.n	8020af2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8020aec:	f06f 0301 	mvn.w	r3, #1
 8020af0:	e100      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8020af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020af6:	b29a      	uxth	r2, r3
 8020af8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020afa:	4413      	add	r3, r2
 8020afc:	b29b      	uxth	r3, r3
 8020afe:	3302      	adds	r3, #2
 8020b00:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8020b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	f000 808a 	beq.w	8020c20 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8020b10:	6a3b      	ldr	r3, [r7, #32]
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	db02      	blt.n	8020b1c <dhcp_parse_reply+0x3a4>
 8020b16:	6a3b      	ldr	r3, [r7, #32]
 8020b18:	2b07      	cmp	r3, #7
 8020b1a:	dd06      	ble.n	8020b2a <dhcp_parse_reply+0x3b2>
 8020b1c:	4b77      	ldr	r3, [pc, #476]	; (8020cfc <dhcp_parse_reply+0x584>)
 8020b1e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8020b22:	4979      	ldr	r1, [pc, #484]	; (8020d08 <dhcp_parse_reply+0x590>)
 8020b24:	4877      	ldr	r0, [pc, #476]	; (8020d04 <dhcp_parse_reply+0x58c>)
 8020b26:	f003 fe3b 	bl	80247a0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8020b2a:	4a78      	ldr	r2, [pc, #480]	; (8020d0c <dhcp_parse_reply+0x594>)
 8020b2c:	6a3b      	ldr	r3, [r7, #32]
 8020b2e:	4413      	add	r3, r2
 8020b30:	781b      	ldrb	r3, [r3, #0]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d174      	bne.n	8020c20 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8020b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020b3a:	2b04      	cmp	r3, #4
 8020b3c:	bf28      	it	cs
 8020b3e:	2304      	movcs	r3, #4
 8020b40:	b2db      	uxtb	r3, r3
 8020b42:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020b44:	8bfb      	ldrh	r3, [r7, #30]
 8020b46:	8aba      	ldrh	r2, [r7, #20]
 8020b48:	f107 0108 	add.w	r1, r7, #8
 8020b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020b4e:	f7f7 fccf 	bl	80184f0 <pbuf_copy_partial>
 8020b52:	4603      	mov	r3, r0
 8020b54:	461a      	mov	r2, r3
 8020b56:	8abb      	ldrh	r3, [r7, #20]
 8020b58:	4293      	cmp	r3, r2
 8020b5a:	d002      	beq.n	8020b62 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8020b5c:	f06f 0301 	mvn.w	r3, #1
 8020b60:	e0c8      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8020b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020b66:	2b04      	cmp	r3, #4
 8020b68:	d933      	bls.n	8020bd2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020b6e:	f003 0303 	and.w	r3, r3, #3
 8020b72:	b2db      	uxtb	r3, r3
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	d009      	beq.n	8020b8c <dhcp_parse_reply+0x414>
 8020b78:	4b60      	ldr	r3, [pc, #384]	; (8020cfc <dhcp_parse_reply+0x584>)
 8020b7a:	f240 6281 	movw	r2, #1665	; 0x681
 8020b7e:	4964      	ldr	r1, [pc, #400]	; (8020d10 <dhcp_parse_reply+0x598>)
 8020b80:	4860      	ldr	r0, [pc, #384]	; (8020d04 <dhcp_parse_reply+0x58c>)
 8020b82:	f003 fe0d 	bl	80247a0 <iprintf>
 8020b86:	f06f 0305 	mvn.w	r3, #5
 8020b8a:	e0b3      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8020b8c:	4a5f      	ldr	r2, [pc, #380]	; (8020d0c <dhcp_parse_reply+0x594>)
 8020b8e:	6a3b      	ldr	r3, [r7, #32]
 8020b90:	4413      	add	r3, r2
 8020b92:	2201      	movs	r2, #1
 8020b94:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020b96:	68bb      	ldr	r3, [r7, #8]
 8020b98:	4618      	mov	r0, r3
 8020b9a:	f7f5 feea 	bl	8016972 <lwip_htonl>
 8020b9e:	4601      	mov	r1, r0
 8020ba0:	4a5c      	ldr	r2, [pc, #368]	; (8020d14 <dhcp_parse_reply+0x59c>)
 8020ba2:	6a3b      	ldr	r3, [r7, #32]
 8020ba4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8020ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020bac:	3b04      	subs	r3, #4
 8020bae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8020bb2:	8bfb      	ldrh	r3, [r7, #30]
 8020bb4:	3304      	adds	r3, #4
 8020bb6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8020bb8:	8a7a      	ldrh	r2, [r7, #18]
 8020bba:	8bfb      	ldrh	r3, [r7, #30]
 8020bbc:	429a      	cmp	r2, r3
 8020bbe:	d202      	bcs.n	8020bc6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8020bc0:	f06f 0301 	mvn.w	r3, #1
 8020bc4:	e096      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8020bc6:	8a7b      	ldrh	r3, [r7, #18]
 8020bc8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8020bca:	6a3b      	ldr	r3, [r7, #32]
 8020bcc:	3301      	adds	r3, #1
 8020bce:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8020bd0:	e79e      	b.n	8020b10 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8020bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020bd6:	2b04      	cmp	r3, #4
 8020bd8:	d106      	bne.n	8020be8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8020bda:	68bb      	ldr	r3, [r7, #8]
 8020bdc:	4618      	mov	r0, r3
 8020bde:	f7f5 fec8 	bl	8016972 <lwip_htonl>
 8020be2:	4603      	mov	r3, r0
 8020be4:	60bb      	str	r3, [r7, #8]
 8020be6:	e011      	b.n	8020c0c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8020be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020bec:	2b01      	cmp	r3, #1
 8020bee:	d009      	beq.n	8020c04 <dhcp_parse_reply+0x48c>
 8020bf0:	4b42      	ldr	r3, [pc, #264]	; (8020cfc <dhcp_parse_reply+0x584>)
 8020bf2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8020bf6:	4948      	ldr	r1, [pc, #288]	; (8020d18 <dhcp_parse_reply+0x5a0>)
 8020bf8:	4842      	ldr	r0, [pc, #264]	; (8020d04 <dhcp_parse_reply+0x58c>)
 8020bfa:	f003 fdd1 	bl	80247a0 <iprintf>
 8020bfe:	f06f 0305 	mvn.w	r3, #5
 8020c02:	e077      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8020c04:	f107 0308 	add.w	r3, r7, #8
 8020c08:	781b      	ldrb	r3, [r3, #0]
 8020c0a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8020c0c:	4a3f      	ldr	r2, [pc, #252]	; (8020d0c <dhcp_parse_reply+0x594>)
 8020c0e:	6a3b      	ldr	r3, [r7, #32]
 8020c10:	4413      	add	r3, r2
 8020c12:	2201      	movs	r2, #1
 8020c14:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020c16:	68ba      	ldr	r2, [r7, #8]
 8020c18:	493e      	ldr	r1, [pc, #248]	; (8020d14 <dhcp_parse_reply+0x59c>)
 8020c1a:	6a3b      	ldr	r3, [r7, #32]
 8020c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8020c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c22:	895b      	ldrh	r3, [r3, #10]
 8020c24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8020c26:	429a      	cmp	r2, r3
 8020c28:	d324      	bcc.n	8020c74 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8020c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c2c:	895b      	ldrh	r3, [r3, #10]
 8020c2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8020c30:	1ad3      	subs	r3, r2, r3
 8020c32:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8020c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c36:	895b      	ldrh	r3, [r3, #10]
 8020c38:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8020c3a:	1ad3      	subs	r3, r2, r3
 8020c3c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8020c3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8020c40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8020c42:	429a      	cmp	r2, r3
 8020c44:	d213      	bcs.n	8020c6e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8020c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c48:	681b      	ldr	r3, [r3, #0]
 8020c4a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	d109      	bne.n	8020c66 <dhcp_parse_reply+0x4ee>
 8020c52:	4b2a      	ldr	r3, [pc, #168]	; (8020cfc <dhcp_parse_reply+0x584>)
 8020c54:	f240 629d 	movw	r2, #1693	; 0x69d
 8020c58:	4930      	ldr	r1, [pc, #192]	; (8020d1c <dhcp_parse_reply+0x5a4>)
 8020c5a:	482a      	ldr	r0, [pc, #168]	; (8020d04 <dhcp_parse_reply+0x58c>)
 8020c5c:	f003 fda0 	bl	80247a0 <iprintf>
 8020c60:	f06f 0305 	mvn.w	r3, #5
 8020c64:	e046      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8020c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c68:	685b      	ldr	r3, [r3, #4]
 8020c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020c6c:	e002      	b.n	8020c74 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8020c6e:	f06f 0301 	mvn.w	r3, #1
 8020c72:	e03f      	b.n	8020cf4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d00a      	beq.n	8020c90 <dhcp_parse_reply+0x518>
 8020c7a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8020c7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8020c7e:	429a      	cmp	r2, r3
 8020c80:	d206      	bcs.n	8020c90 <dhcp_parse_reply+0x518>
 8020c82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020c86:	4413      	add	r3, r2
 8020c88:	781b      	ldrb	r3, [r3, #0]
 8020c8a:	2bff      	cmp	r3, #255	; 0xff
 8020c8c:	f47f adb7 	bne.w	80207fe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8020c90:	4b1e      	ldr	r3, [pc, #120]	; (8020d0c <dhcp_parse_reply+0x594>)
 8020c92:	781b      	ldrb	r3, [r3, #0]
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d018      	beq.n	8020cca <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020c98:	4b1e      	ldr	r3, [pc, #120]	; (8020d14 <dhcp_parse_reply+0x59c>)
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020c9e:	4b1b      	ldr	r3, [pc, #108]	; (8020d0c <dhcp_parse_reply+0x594>)
 8020ca0:	2200      	movs	r2, #0
 8020ca2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	2b01      	cmp	r3, #1
 8020ca8:	d102      	bne.n	8020cb0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8020caa:	2301      	movs	r3, #1
 8020cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020cae:	e00c      	b.n	8020cca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8020cb0:	68fb      	ldr	r3, [r7, #12]
 8020cb2:	2b02      	cmp	r3, #2
 8020cb4:	d102      	bne.n	8020cbc <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8020cb6:	2301      	movs	r3, #1
 8020cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8020cba:	e006      	b.n	8020cca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8020cbc:	68fb      	ldr	r3, [r7, #12]
 8020cbe:	2b03      	cmp	r3, #3
 8020cc0:	d103      	bne.n	8020cca <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8020cc2:	2301      	movs	r3, #1
 8020cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8020cc6:	2301      	movs	r3, #1
 8020cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8020cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d006      	beq.n	8020cde <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8020cd4:	236c      	movs	r3, #108	; 0x6c
 8020cd6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8020cd8:	23ec      	movs	r3, #236	; 0xec
 8020cda:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8020cdc:	e569      	b.n	80207b2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8020cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d006      	beq.n	8020cf2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8020ce4:	2300      	movs	r3, #0
 8020ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8020ce8:	232c      	movs	r3, #44	; 0x2c
 8020cea:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8020cec:	236c      	movs	r3, #108	; 0x6c
 8020cee:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8020cf0:	e55f      	b.n	80207b2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8020cf2:	2300      	movs	r3, #0
}
 8020cf4:	4618      	mov	r0, r3
 8020cf6:	3740      	adds	r7, #64	; 0x40
 8020cf8:	46bd      	mov	sp, r7
 8020cfa:	bd80      	pop	{r7, pc}
 8020cfc:	080283cc 	.word	0x080283cc
 8020d00:	08028654 	.word	0x08028654
 8020d04:	0802842c 	.word	0x0802842c
 8020d08:	08028698 	.word	0x08028698
 8020d0c:	200103dc 	.word	0x200103dc
 8020d10:	080286ac 	.word	0x080286ac
 8020d14:	200103e4 	.word	0x200103e4
 8020d18:	080286c4 	.word	0x080286c4
 8020d1c:	080286d8 	.word	0x080286d8

08020d20 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8020d20:	b580      	push	{r7, lr}
 8020d22:	b08a      	sub	sp, #40	; 0x28
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	60f8      	str	r0, [r7, #12]
 8020d28:	60b9      	str	r1, [r7, #8]
 8020d2a:	607a      	str	r2, [r7, #4]
 8020d2c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8020d2e:	4b5f      	ldr	r3, [pc, #380]	; (8020eac <dhcp_recv+0x18c>)
 8020d30:	685b      	ldr	r3, [r3, #4]
 8020d32:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020d34:	6a3b      	ldr	r3, [r7, #32]
 8020d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020d38:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	685b      	ldr	r3, [r3, #4]
 8020d3e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8020d40:	69fb      	ldr	r3, [r7, #28]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	f000 809d 	beq.w	8020e82 <dhcp_recv+0x162>
 8020d48:	69fb      	ldr	r3, [r7, #28]
 8020d4a:	791b      	ldrb	r3, [r3, #4]
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	f000 8098 	beq.w	8020e82 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	895b      	ldrh	r3, [r3, #10]
 8020d56:	2b2b      	cmp	r3, #43	; 0x2b
 8020d58:	f240 8095 	bls.w	8020e86 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8020d5c:	69bb      	ldr	r3, [r7, #24]
 8020d5e:	781b      	ldrb	r3, [r3, #0]
 8020d60:	2b02      	cmp	r3, #2
 8020d62:	f040 8092 	bne.w	8020e8a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020d66:	2300      	movs	r3, #0
 8020d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020d6c:	e012      	b.n	8020d94 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020d72:	6a3a      	ldr	r2, [r7, #32]
 8020d74:	4413      	add	r3, r2
 8020d76:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8020d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020d7e:	69b9      	ldr	r1, [r7, #24]
 8020d80:	440b      	add	r3, r1
 8020d82:	7f1b      	ldrb	r3, [r3, #28]
 8020d84:	429a      	cmp	r2, r3
 8020d86:	f040 8082 	bne.w	8020e8e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020d8e:	3301      	adds	r3, #1
 8020d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020d94:	6a3b      	ldr	r3, [r7, #32]
 8020d96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020d9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8020d9e:	429a      	cmp	r2, r3
 8020da0:	d203      	bcs.n	8020daa <dhcp_recv+0x8a>
 8020da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020da6:	2b05      	cmp	r3, #5
 8020da8:	d9e1      	bls.n	8020d6e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8020daa:	69bb      	ldr	r3, [r7, #24]
 8020dac:	685b      	ldr	r3, [r3, #4]
 8020dae:	4618      	mov	r0, r3
 8020db0:	f7f5 fddf 	bl	8016972 <lwip_htonl>
 8020db4:	4602      	mov	r2, r0
 8020db6:	69fb      	ldr	r3, [r7, #28]
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	429a      	cmp	r2, r3
 8020dbc:	d169      	bne.n	8020e92 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8020dbe:	69f9      	ldr	r1, [r7, #28]
 8020dc0:	6878      	ldr	r0, [r7, #4]
 8020dc2:	f7ff fcd9 	bl	8020778 <dhcp_parse_reply>
 8020dc6:	4603      	mov	r3, r0
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d164      	bne.n	8020e96 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8020dcc:	4b38      	ldr	r3, [pc, #224]	; (8020eb0 <dhcp_recv+0x190>)
 8020dce:	785b      	ldrb	r3, [r3, #1]
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d062      	beq.n	8020e9a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	685b      	ldr	r3, [r3, #4]
 8020dd8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8020dda:	4b36      	ldr	r3, [pc, #216]	; (8020eb4 <dhcp_recv+0x194>)
 8020ddc:	685b      	ldr	r3, [r3, #4]
 8020dde:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8020de0:	7cfb      	ldrb	r3, [r7, #19]
 8020de2:	2b05      	cmp	r3, #5
 8020de4:	d12a      	bne.n	8020e3c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020de6:	69fb      	ldr	r3, [r7, #28]
 8020de8:	795b      	ldrb	r3, [r3, #5]
 8020dea:	2b01      	cmp	r3, #1
 8020dec:	d112      	bne.n	8020e14 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8020dee:	6979      	ldr	r1, [r7, #20]
 8020df0:	6a38      	ldr	r0, [r7, #32]
 8020df2:	f7fe fe05 	bl	801fa00 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8020df6:	6a3b      	ldr	r3, [r7, #32]
 8020df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8020dfc:	f003 0308 	and.w	r3, r3, #8
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	d003      	beq.n	8020e0c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8020e04:	6a38      	ldr	r0, [r7, #32]
 8020e06:	f7fe fb73 	bl	801f4f0 <dhcp_check>
 8020e0a:	e047      	b.n	8020e9c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8020e0c:	6a38      	ldr	r0, [r7, #32]
 8020e0e:	f7ff f867 	bl	801fee0 <dhcp_bind>
 8020e12:	e043      	b.n	8020e9c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8020e14:	69fb      	ldr	r3, [r7, #28]
 8020e16:	795b      	ldrb	r3, [r3, #5]
 8020e18:	2b03      	cmp	r3, #3
 8020e1a:	d007      	beq.n	8020e2c <dhcp_recv+0x10c>
 8020e1c:	69fb      	ldr	r3, [r7, #28]
 8020e1e:	795b      	ldrb	r3, [r3, #5]
 8020e20:	2b04      	cmp	r3, #4
 8020e22:	d003      	beq.n	8020e2c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8020e24:	69fb      	ldr	r3, [r7, #28]
 8020e26:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8020e28:	2b05      	cmp	r3, #5
 8020e2a:	d137      	bne.n	8020e9c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8020e2c:	6979      	ldr	r1, [r7, #20]
 8020e2e:	6a38      	ldr	r0, [r7, #32]
 8020e30:	f7fe fde6 	bl	801fa00 <dhcp_handle_ack>
      dhcp_bind(netif);
 8020e34:	6a38      	ldr	r0, [r7, #32]
 8020e36:	f7ff f853 	bl	801fee0 <dhcp_bind>
 8020e3a:	e02f      	b.n	8020e9c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8020e3c:	7cfb      	ldrb	r3, [r7, #19]
 8020e3e:	2b06      	cmp	r3, #6
 8020e40:	d113      	bne.n	8020e6a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8020e42:	69fb      	ldr	r3, [r7, #28]
 8020e44:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8020e46:	2b03      	cmp	r3, #3
 8020e48:	d00b      	beq.n	8020e62 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8020e4a:	69fb      	ldr	r3, [r7, #28]
 8020e4c:	795b      	ldrb	r3, [r3, #5]
 8020e4e:	2b01      	cmp	r3, #1
 8020e50:	d007      	beq.n	8020e62 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8020e52:	69fb      	ldr	r3, [r7, #28]
 8020e54:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8020e56:	2b04      	cmp	r3, #4
 8020e58:	d003      	beq.n	8020e62 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8020e5a:	69fb      	ldr	r3, [r7, #28]
 8020e5c:	795b      	ldrb	r3, [r3, #5]
 8020e5e:	2b05      	cmp	r3, #5
 8020e60:	d103      	bne.n	8020e6a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8020e62:	6a38      	ldr	r0, [r7, #32]
 8020e64:	f7fe fb2a 	bl	801f4bc <dhcp_handle_nak>
 8020e68:	e018      	b.n	8020e9c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8020e6a:	7cfb      	ldrb	r3, [r7, #19]
 8020e6c:	2b02      	cmp	r3, #2
 8020e6e:	d108      	bne.n	8020e82 <dhcp_recv+0x162>
 8020e70:	69fb      	ldr	r3, [r7, #28]
 8020e72:	795b      	ldrb	r3, [r3, #5]
 8020e74:	2b06      	cmp	r3, #6
 8020e76:	d104      	bne.n	8020e82 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8020e78:	6979      	ldr	r1, [r7, #20]
 8020e7a:	6a38      	ldr	r0, [r7, #32]
 8020e7c:	f7fe fb6c 	bl	801f558 <dhcp_handle_offer>
 8020e80:	e00c      	b.n	8020e9c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8020e82:	bf00      	nop
 8020e84:	e00a      	b.n	8020e9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8020e86:	bf00      	nop
 8020e88:	e008      	b.n	8020e9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8020e8a:	bf00      	nop
 8020e8c:	e006      	b.n	8020e9c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8020e8e:	bf00      	nop
 8020e90:	e004      	b.n	8020e9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8020e92:	bf00      	nop
 8020e94:	e002      	b.n	8020e9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8020e96:	bf00      	nop
 8020e98:	e000      	b.n	8020e9c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8020e9a:	bf00      	nop
  pbuf_free(p);
 8020e9c:	6878      	ldr	r0, [r7, #4]
 8020e9e:	f7f7 f921 	bl	80180e4 <pbuf_free>
}
 8020ea2:	bf00      	nop
 8020ea4:	3728      	adds	r7, #40	; 0x28
 8020ea6:	46bd      	mov	sp, r7
 8020ea8:	bd80      	pop	{r7, pc}
 8020eaa:	bf00      	nop
 8020eac:	2000cc8c 	.word	0x2000cc8c
 8020eb0:	200103dc 	.word	0x200103dc
 8020eb4:	200103e4 	.word	0x200103e4

08020eb8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8020eb8:	b580      	push	{r7, lr}
 8020eba:	b088      	sub	sp, #32
 8020ebc:	af00      	add	r7, sp, #0
 8020ebe:	60f8      	str	r0, [r7, #12]
 8020ec0:	60b9      	str	r1, [r7, #8]
 8020ec2:	603b      	str	r3, [r7, #0]
 8020ec4:	4613      	mov	r3, r2
 8020ec6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8020ec8:	68fb      	ldr	r3, [r7, #12]
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d108      	bne.n	8020ee0 <dhcp_create_msg+0x28>
 8020ece:	4b5f      	ldr	r3, [pc, #380]	; (802104c <dhcp_create_msg+0x194>)
 8020ed0:	f240 7269 	movw	r2, #1897	; 0x769
 8020ed4:	495e      	ldr	r1, [pc, #376]	; (8021050 <dhcp_create_msg+0x198>)
 8020ed6:	485f      	ldr	r0, [pc, #380]	; (8021054 <dhcp_create_msg+0x19c>)
 8020ed8:	f003 fc62 	bl	80247a0 <iprintf>
 8020edc:	2300      	movs	r3, #0
 8020ede:	e0b1      	b.n	8021044 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8020ee0:	68bb      	ldr	r3, [r7, #8]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d108      	bne.n	8020ef8 <dhcp_create_msg+0x40>
 8020ee6:	4b59      	ldr	r3, [pc, #356]	; (802104c <dhcp_create_msg+0x194>)
 8020ee8:	f240 726a 	movw	r2, #1898	; 0x76a
 8020eec:	495a      	ldr	r1, [pc, #360]	; (8021058 <dhcp_create_msg+0x1a0>)
 8020eee:	4859      	ldr	r0, [pc, #356]	; (8021054 <dhcp_create_msg+0x19c>)
 8020ef0:	f003 fc56 	bl	80247a0 <iprintf>
 8020ef4:	2300      	movs	r3, #0
 8020ef6:	e0a5      	b.n	8021044 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8020ef8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020efc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8020f00:	2036      	movs	r0, #54	; 0x36
 8020f02:	f7f6 fe0f 	bl	8017b24 <pbuf_alloc>
 8020f06:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8020f08:	69bb      	ldr	r3, [r7, #24]
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	d101      	bne.n	8020f12 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8020f0e:	2300      	movs	r3, #0
 8020f10:	e098      	b.n	8021044 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8020f12:	69bb      	ldr	r3, [r7, #24]
 8020f14:	895b      	ldrh	r3, [r3, #10]
 8020f16:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8020f1a:	d206      	bcs.n	8020f2a <dhcp_create_msg+0x72>
 8020f1c:	4b4b      	ldr	r3, [pc, #300]	; (802104c <dhcp_create_msg+0x194>)
 8020f1e:	f240 7272 	movw	r2, #1906	; 0x772
 8020f22:	494e      	ldr	r1, [pc, #312]	; (802105c <dhcp_create_msg+0x1a4>)
 8020f24:	484b      	ldr	r0, [pc, #300]	; (8021054 <dhcp_create_msg+0x19c>)
 8020f26:	f003 fc3b 	bl	80247a0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8020f2a:	79fb      	ldrb	r3, [r7, #7]
 8020f2c:	2b03      	cmp	r3, #3
 8020f2e:	d103      	bne.n	8020f38 <dhcp_create_msg+0x80>
 8020f30:	68bb      	ldr	r3, [r7, #8]
 8020f32:	795b      	ldrb	r3, [r3, #5]
 8020f34:	2b03      	cmp	r3, #3
 8020f36:	d10d      	bne.n	8020f54 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8020f38:	68bb      	ldr	r3, [r7, #8]
 8020f3a:	799b      	ldrb	r3, [r3, #6]
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d105      	bne.n	8020f4c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8020f40:	f003 fcaa 	bl	8024898 <rand>
 8020f44:	4603      	mov	r3, r0
 8020f46:	461a      	mov	r2, r3
 8020f48:	4b45      	ldr	r3, [pc, #276]	; (8021060 <dhcp_create_msg+0x1a8>)
 8020f4a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8020f4c:	4b44      	ldr	r3, [pc, #272]	; (8021060 <dhcp_create_msg+0x1a8>)
 8020f4e:	681a      	ldr	r2, [r3, #0]
 8020f50:	68bb      	ldr	r3, [r7, #8]
 8020f52:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8020f54:	69bb      	ldr	r3, [r7, #24]
 8020f56:	685b      	ldr	r3, [r3, #4]
 8020f58:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8020f5a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8020f5e:	2100      	movs	r1, #0
 8020f60:	6978      	ldr	r0, [r7, #20]
 8020f62:	f003 fb6d 	bl	8024640 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8020f66:	697b      	ldr	r3, [r7, #20]
 8020f68:	2201      	movs	r2, #1
 8020f6a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8020f6c:	697b      	ldr	r3, [r7, #20]
 8020f6e:	2201      	movs	r2, #1
 8020f70:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8020f78:	697b      	ldr	r3, [r7, #20]
 8020f7a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020f7c:	68bb      	ldr	r3, [r7, #8]
 8020f7e:	681b      	ldr	r3, [r3, #0]
 8020f80:	4618      	mov	r0, r3
 8020f82:	f7f5 fcf6 	bl	8016972 <lwip_htonl>
 8020f86:	4602      	mov	r2, r0
 8020f88:	697b      	ldr	r3, [r7, #20]
 8020f8a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020f8c:	79fb      	ldrb	r3, [r7, #7]
 8020f8e:	2b08      	cmp	r3, #8
 8020f90:	d010      	beq.n	8020fb4 <dhcp_create_msg+0xfc>
 8020f92:	79fb      	ldrb	r3, [r7, #7]
 8020f94:	2b04      	cmp	r3, #4
 8020f96:	d00d      	beq.n	8020fb4 <dhcp_create_msg+0xfc>
 8020f98:	79fb      	ldrb	r3, [r7, #7]
 8020f9a:	2b07      	cmp	r3, #7
 8020f9c:	d00a      	beq.n	8020fb4 <dhcp_create_msg+0xfc>
 8020f9e:	79fb      	ldrb	r3, [r7, #7]
 8020fa0:	2b03      	cmp	r3, #3
 8020fa2:	d10c      	bne.n	8020fbe <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8020fa4:	68bb      	ldr	r3, [r7, #8]
 8020fa6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8020fa8:	2b05      	cmp	r3, #5
 8020faa:	d003      	beq.n	8020fb4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8020fac:	68bb      	ldr	r3, [r7, #8]
 8020fae:	795b      	ldrb	r3, [r3, #5]
 8020fb0:	2b04      	cmp	r3, #4
 8020fb2:	d104      	bne.n	8020fbe <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8020fb4:	68fb      	ldr	r3, [r7, #12]
 8020fb6:	3304      	adds	r3, #4
 8020fb8:	681a      	ldr	r2, [r3, #0]
 8020fba:	697b      	ldr	r3, [r7, #20]
 8020fbc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fbe:	2300      	movs	r3, #0
 8020fc0:	83fb      	strh	r3, [r7, #30]
 8020fc2:	e00c      	b.n	8020fde <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020fc4:	8bfa      	ldrh	r2, [r7, #30]
 8020fc6:	8bfb      	ldrh	r3, [r7, #30]
 8020fc8:	68f9      	ldr	r1, [r7, #12]
 8020fca:	440a      	add	r2, r1
 8020fcc:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 8020fd0:	697a      	ldr	r2, [r7, #20]
 8020fd2:	4413      	add	r3, r2
 8020fd4:	460a      	mov	r2, r1
 8020fd6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fd8:	8bfb      	ldrh	r3, [r7, #30]
 8020fda:	3301      	adds	r3, #1
 8020fdc:	83fb      	strh	r3, [r7, #30]
 8020fde:	8bfb      	ldrh	r3, [r7, #30]
 8020fe0:	2b05      	cmp	r3, #5
 8020fe2:	d9ef      	bls.n	8020fc4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020fe4:	697b      	ldr	r3, [r7, #20]
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8020fec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8020ff0:	2200      	movs	r2, #0
 8020ff2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8020ff6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8021000:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8021004:	2200      	movs	r2, #0
 8021006:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 802100a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 802100e:	697b      	ldr	r3, [r7, #20]
 8021010:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021014:	2301      	movs	r3, #1
 8021016:	2235      	movs	r2, #53	; 0x35
 8021018:	2000      	movs	r0, #0
 802101a:	f7ff fadd 	bl	80205d8 <dhcp_option>
 802101e:	4603      	mov	r3, r0
 8021020:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8021022:	697b      	ldr	r3, [r7, #20]
 8021024:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021028:	79fa      	ldrb	r2, [r7, #7]
 802102a:	8a7b      	ldrh	r3, [r7, #18]
 802102c:	4618      	mov	r0, r3
 802102e:	f7ff fb07 	bl	8020640 <dhcp_option_byte>
 8021032:	4603      	mov	r3, r0
 8021034:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8021036:	683b      	ldr	r3, [r7, #0]
 8021038:	2b00      	cmp	r3, #0
 802103a:	d002      	beq.n	8021042 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 802103c:	683b      	ldr	r3, [r7, #0]
 802103e:	8a7a      	ldrh	r2, [r7, #18]
 8021040:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8021042:	69bb      	ldr	r3, [r7, #24]
}
 8021044:	4618      	mov	r0, r3
 8021046:	3720      	adds	r7, #32
 8021048:	46bd      	mov	sp, r7
 802104a:	bd80      	pop	{r7, pc}
 802104c:	080283cc 	.word	0x080283cc
 8021050:	080286ec 	.word	0x080286ec
 8021054:	0802842c 	.word	0x0802842c
 8021058:	0802870c 	.word	0x0802870c
 802105c:	0802872c 	.word	0x0802872c
 8021060:	2000900c 	.word	0x2000900c

08021064 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8021064:	b580      	push	{r7, lr}
 8021066:	b084      	sub	sp, #16
 8021068:	af00      	add	r7, sp, #0
 802106a:	4603      	mov	r3, r0
 802106c:	60b9      	str	r1, [r7, #8]
 802106e:	607a      	str	r2, [r7, #4]
 8021070:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8021072:	89fb      	ldrh	r3, [r7, #14]
 8021074:	1c5a      	adds	r2, r3, #1
 8021076:	81fa      	strh	r2, [r7, #14]
 8021078:	461a      	mov	r2, r3
 802107a:	68bb      	ldr	r3, [r7, #8]
 802107c:	4413      	add	r3, r2
 802107e:	22ff      	movs	r2, #255	; 0xff
 8021080:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021082:	e007      	b.n	8021094 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8021084:	89fb      	ldrh	r3, [r7, #14]
 8021086:	1c5a      	adds	r2, r3, #1
 8021088:	81fa      	strh	r2, [r7, #14]
 802108a:	461a      	mov	r2, r3
 802108c:	68bb      	ldr	r3, [r7, #8]
 802108e:	4413      	add	r3, r2
 8021090:	2200      	movs	r2, #0
 8021092:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021094:	89fb      	ldrh	r3, [r7, #14]
 8021096:	2b43      	cmp	r3, #67	; 0x43
 8021098:	d904      	bls.n	80210a4 <dhcp_option_trailer+0x40>
 802109a:	89fb      	ldrh	r3, [r7, #14]
 802109c:	f003 0303 	and.w	r3, r3, #3
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d002      	beq.n	80210aa <dhcp_option_trailer+0x46>
 80210a4:	89fb      	ldrh	r3, [r7, #14]
 80210a6:	2b43      	cmp	r3, #67	; 0x43
 80210a8:	d9ec      	bls.n	8021084 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80210aa:	89fb      	ldrh	r3, [r7, #14]
 80210ac:	33f0      	adds	r3, #240	; 0xf0
 80210ae:	b29b      	uxth	r3, r3
 80210b0:	4619      	mov	r1, r3
 80210b2:	6878      	ldr	r0, [r7, #4]
 80210b4:	f7f6 fe90 	bl	8017dd8 <pbuf_realloc>
}
 80210b8:	bf00      	nop
 80210ba:	3710      	adds	r7, #16
 80210bc:	46bd      	mov	sp, r7
 80210be:	bd80      	pop	{r7, pc}

080210c0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80210c0:	b480      	push	{r7}
 80210c2:	b085      	sub	sp, #20
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d017      	beq.n	80210fe <dhcp_supplied_address+0x3e>
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d013      	beq.n	80210fe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80210da:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	795b      	ldrb	r3, [r3, #5]
 80210e0:	2b0a      	cmp	r3, #10
 80210e2:	d007      	beq.n	80210f4 <dhcp_supplied_address+0x34>
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	795b      	ldrb	r3, [r3, #5]
 80210e8:	2b05      	cmp	r3, #5
 80210ea:	d003      	beq.n	80210f4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80210ec:	68fb      	ldr	r3, [r7, #12]
 80210ee:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80210f0:	2b04      	cmp	r3, #4
 80210f2:	d101      	bne.n	80210f8 <dhcp_supplied_address+0x38>
 80210f4:	2301      	movs	r3, #1
 80210f6:	e000      	b.n	80210fa <dhcp_supplied_address+0x3a>
 80210f8:	2300      	movs	r3, #0
 80210fa:	b2db      	uxtb	r3, r3
 80210fc:	e000      	b.n	8021100 <dhcp_supplied_address+0x40>
  }
  return 0;
 80210fe:	2300      	movs	r3, #0
}
 8021100:	4618      	mov	r0, r3
 8021102:	3714      	adds	r7, #20
 8021104:	46bd      	mov	sp, r7
 8021106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802110a:	4770      	bx	lr

0802110c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802110c:	b580      	push	{r7, lr}
 802110e:	b082      	sub	sp, #8
 8021110:	af00      	add	r7, sp, #0
 8021112:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8021114:	4915      	ldr	r1, [pc, #84]	; (802116c <etharp_free_entry+0x60>)
 8021116:	687a      	ldr	r2, [r7, #4]
 8021118:	4613      	mov	r3, r2
 802111a:	005b      	lsls	r3, r3, #1
 802111c:	4413      	add	r3, r2
 802111e:	00db      	lsls	r3, r3, #3
 8021120:	440b      	add	r3, r1
 8021122:	681b      	ldr	r3, [r3, #0]
 8021124:	2b00      	cmp	r3, #0
 8021126:	d013      	beq.n	8021150 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8021128:	4910      	ldr	r1, [pc, #64]	; (802116c <etharp_free_entry+0x60>)
 802112a:	687a      	ldr	r2, [r7, #4]
 802112c:	4613      	mov	r3, r2
 802112e:	005b      	lsls	r3, r3, #1
 8021130:	4413      	add	r3, r2
 8021132:	00db      	lsls	r3, r3, #3
 8021134:	440b      	add	r3, r1
 8021136:	681b      	ldr	r3, [r3, #0]
 8021138:	4618      	mov	r0, r3
 802113a:	f7f6 ffd3 	bl	80180e4 <pbuf_free>
    arp_table[i].q = NULL;
 802113e:	490b      	ldr	r1, [pc, #44]	; (802116c <etharp_free_entry+0x60>)
 8021140:	687a      	ldr	r2, [r7, #4]
 8021142:	4613      	mov	r3, r2
 8021144:	005b      	lsls	r3, r3, #1
 8021146:	4413      	add	r3, r2
 8021148:	00db      	lsls	r3, r3, #3
 802114a:	440b      	add	r3, r1
 802114c:	2200      	movs	r2, #0
 802114e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021150:	4906      	ldr	r1, [pc, #24]	; (802116c <etharp_free_entry+0x60>)
 8021152:	687a      	ldr	r2, [r7, #4]
 8021154:	4613      	mov	r3, r2
 8021156:	005b      	lsls	r3, r3, #1
 8021158:	4413      	add	r3, r2
 802115a:	00db      	lsls	r3, r3, #3
 802115c:	440b      	add	r3, r1
 802115e:	3314      	adds	r3, #20
 8021160:	2200      	movs	r2, #0
 8021162:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021164:	bf00      	nop
 8021166:	3708      	adds	r7, #8
 8021168:	46bd      	mov	sp, r7
 802116a:	bd80      	pop	{r7, pc}
 802116c:	20009010 	.word	0x20009010

08021170 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8021170:	b580      	push	{r7, lr}
 8021172:	b082      	sub	sp, #8
 8021174:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021176:	2300      	movs	r3, #0
 8021178:	607b      	str	r3, [r7, #4]
 802117a:	e096      	b.n	80212aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 802117c:	494f      	ldr	r1, [pc, #316]	; (80212bc <etharp_tmr+0x14c>)
 802117e:	687a      	ldr	r2, [r7, #4]
 8021180:	4613      	mov	r3, r2
 8021182:	005b      	lsls	r3, r3, #1
 8021184:	4413      	add	r3, r2
 8021186:	00db      	lsls	r3, r3, #3
 8021188:	440b      	add	r3, r1
 802118a:	3314      	adds	r3, #20
 802118c:	781b      	ldrb	r3, [r3, #0]
 802118e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8021190:	78fb      	ldrb	r3, [r7, #3]
 8021192:	2b00      	cmp	r3, #0
 8021194:	f000 8086 	beq.w	80212a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8021198:	4948      	ldr	r1, [pc, #288]	; (80212bc <etharp_tmr+0x14c>)
 802119a:	687a      	ldr	r2, [r7, #4]
 802119c:	4613      	mov	r3, r2
 802119e:	005b      	lsls	r3, r3, #1
 80211a0:	4413      	add	r3, r2
 80211a2:	00db      	lsls	r3, r3, #3
 80211a4:	440b      	add	r3, r1
 80211a6:	3312      	adds	r3, #18
 80211a8:	881b      	ldrh	r3, [r3, #0]
 80211aa:	3301      	adds	r3, #1
 80211ac:	b298      	uxth	r0, r3
 80211ae:	4943      	ldr	r1, [pc, #268]	; (80212bc <etharp_tmr+0x14c>)
 80211b0:	687a      	ldr	r2, [r7, #4]
 80211b2:	4613      	mov	r3, r2
 80211b4:	005b      	lsls	r3, r3, #1
 80211b6:	4413      	add	r3, r2
 80211b8:	00db      	lsls	r3, r3, #3
 80211ba:	440b      	add	r3, r1
 80211bc:	3312      	adds	r3, #18
 80211be:	4602      	mov	r2, r0
 80211c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80211c2:	493e      	ldr	r1, [pc, #248]	; (80212bc <etharp_tmr+0x14c>)
 80211c4:	687a      	ldr	r2, [r7, #4]
 80211c6:	4613      	mov	r3, r2
 80211c8:	005b      	lsls	r3, r3, #1
 80211ca:	4413      	add	r3, r2
 80211cc:	00db      	lsls	r3, r3, #3
 80211ce:	440b      	add	r3, r1
 80211d0:	3312      	adds	r3, #18
 80211d2:	881b      	ldrh	r3, [r3, #0]
 80211d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80211d8:	d215      	bcs.n	8021206 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80211da:	4938      	ldr	r1, [pc, #224]	; (80212bc <etharp_tmr+0x14c>)
 80211dc:	687a      	ldr	r2, [r7, #4]
 80211de:	4613      	mov	r3, r2
 80211e0:	005b      	lsls	r3, r3, #1
 80211e2:	4413      	add	r3, r2
 80211e4:	00db      	lsls	r3, r3, #3
 80211e6:	440b      	add	r3, r1
 80211e8:	3314      	adds	r3, #20
 80211ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80211ec:	2b01      	cmp	r3, #1
 80211ee:	d10e      	bne.n	802120e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80211f0:	4932      	ldr	r1, [pc, #200]	; (80212bc <etharp_tmr+0x14c>)
 80211f2:	687a      	ldr	r2, [r7, #4]
 80211f4:	4613      	mov	r3, r2
 80211f6:	005b      	lsls	r3, r3, #1
 80211f8:	4413      	add	r3, r2
 80211fa:	00db      	lsls	r3, r3, #3
 80211fc:	440b      	add	r3, r1
 80211fe:	3312      	adds	r3, #18
 8021200:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021202:	2b04      	cmp	r3, #4
 8021204:	d903      	bls.n	802120e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8021206:	6878      	ldr	r0, [r7, #4]
 8021208:	f7ff ff80 	bl	802110c <etharp_free_entry>
 802120c:	e04a      	b.n	80212a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 802120e:	492b      	ldr	r1, [pc, #172]	; (80212bc <etharp_tmr+0x14c>)
 8021210:	687a      	ldr	r2, [r7, #4]
 8021212:	4613      	mov	r3, r2
 8021214:	005b      	lsls	r3, r3, #1
 8021216:	4413      	add	r3, r2
 8021218:	00db      	lsls	r3, r3, #3
 802121a:	440b      	add	r3, r1
 802121c:	3314      	adds	r3, #20
 802121e:	781b      	ldrb	r3, [r3, #0]
 8021220:	2b03      	cmp	r3, #3
 8021222:	d10a      	bne.n	802123a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8021224:	4925      	ldr	r1, [pc, #148]	; (80212bc <etharp_tmr+0x14c>)
 8021226:	687a      	ldr	r2, [r7, #4]
 8021228:	4613      	mov	r3, r2
 802122a:	005b      	lsls	r3, r3, #1
 802122c:	4413      	add	r3, r2
 802122e:	00db      	lsls	r3, r3, #3
 8021230:	440b      	add	r3, r1
 8021232:	3314      	adds	r3, #20
 8021234:	2204      	movs	r2, #4
 8021236:	701a      	strb	r2, [r3, #0]
 8021238:	e034      	b.n	80212a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802123a:	4920      	ldr	r1, [pc, #128]	; (80212bc <etharp_tmr+0x14c>)
 802123c:	687a      	ldr	r2, [r7, #4]
 802123e:	4613      	mov	r3, r2
 8021240:	005b      	lsls	r3, r3, #1
 8021242:	4413      	add	r3, r2
 8021244:	00db      	lsls	r3, r3, #3
 8021246:	440b      	add	r3, r1
 8021248:	3314      	adds	r3, #20
 802124a:	781b      	ldrb	r3, [r3, #0]
 802124c:	2b04      	cmp	r3, #4
 802124e:	d10a      	bne.n	8021266 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021250:	491a      	ldr	r1, [pc, #104]	; (80212bc <etharp_tmr+0x14c>)
 8021252:	687a      	ldr	r2, [r7, #4]
 8021254:	4613      	mov	r3, r2
 8021256:	005b      	lsls	r3, r3, #1
 8021258:	4413      	add	r3, r2
 802125a:	00db      	lsls	r3, r3, #3
 802125c:	440b      	add	r3, r1
 802125e:	3314      	adds	r3, #20
 8021260:	2202      	movs	r2, #2
 8021262:	701a      	strb	r2, [r3, #0]
 8021264:	e01e      	b.n	80212a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021266:	4915      	ldr	r1, [pc, #84]	; (80212bc <etharp_tmr+0x14c>)
 8021268:	687a      	ldr	r2, [r7, #4]
 802126a:	4613      	mov	r3, r2
 802126c:	005b      	lsls	r3, r3, #1
 802126e:	4413      	add	r3, r2
 8021270:	00db      	lsls	r3, r3, #3
 8021272:	440b      	add	r3, r1
 8021274:	3314      	adds	r3, #20
 8021276:	781b      	ldrb	r3, [r3, #0]
 8021278:	2b01      	cmp	r3, #1
 802127a:	d113      	bne.n	80212a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802127c:	490f      	ldr	r1, [pc, #60]	; (80212bc <etharp_tmr+0x14c>)
 802127e:	687a      	ldr	r2, [r7, #4]
 8021280:	4613      	mov	r3, r2
 8021282:	005b      	lsls	r3, r3, #1
 8021284:	4413      	add	r3, r2
 8021286:	00db      	lsls	r3, r3, #3
 8021288:	440b      	add	r3, r1
 802128a:	3308      	adds	r3, #8
 802128c:	6818      	ldr	r0, [r3, #0]
 802128e:	687a      	ldr	r2, [r7, #4]
 8021290:	4613      	mov	r3, r2
 8021292:	005b      	lsls	r3, r3, #1
 8021294:	4413      	add	r3, r2
 8021296:	00db      	lsls	r3, r3, #3
 8021298:	4a08      	ldr	r2, [pc, #32]	; (80212bc <etharp_tmr+0x14c>)
 802129a:	4413      	add	r3, r2
 802129c:	3304      	adds	r3, #4
 802129e:	4619      	mov	r1, r3
 80212a0:	f000 fe72 	bl	8021f88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	3301      	adds	r3, #1
 80212a8:	607b      	str	r3, [r7, #4]
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	2b09      	cmp	r3, #9
 80212ae:	f77f af65 	ble.w	802117c <etharp_tmr+0xc>
      }
    }
  }
}
 80212b2:	bf00      	nop
 80212b4:	3708      	adds	r7, #8
 80212b6:	46bd      	mov	sp, r7
 80212b8:	bd80      	pop	{r7, pc}
 80212ba:	bf00      	nop
 80212bc:	20009010 	.word	0x20009010

080212c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80212c0:	b580      	push	{r7, lr}
 80212c2:	b08a      	sub	sp, #40	; 0x28
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	60f8      	str	r0, [r7, #12]
 80212c8:	460b      	mov	r3, r1
 80212ca:	607a      	str	r2, [r7, #4]
 80212cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80212ce:	230a      	movs	r3, #10
 80212d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80212d2:	230a      	movs	r3, #10
 80212d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80212d6:	230a      	movs	r3, #10
 80212d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80212da:	2300      	movs	r3, #0
 80212dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80212de:	230a      	movs	r3, #10
 80212e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80212e2:	2300      	movs	r3, #0
 80212e4:	83bb      	strh	r3, [r7, #28]
 80212e6:	2300      	movs	r3, #0
 80212e8:	837b      	strh	r3, [r7, #26]
 80212ea:	2300      	movs	r3, #0
 80212ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80212ee:	2300      	movs	r3, #0
 80212f0:	843b      	strh	r3, [r7, #32]
 80212f2:	e0ae      	b.n	8021452 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80212f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80212f8:	49a6      	ldr	r1, [pc, #664]	; (8021594 <etharp_find_entry+0x2d4>)
 80212fa:	4613      	mov	r3, r2
 80212fc:	005b      	lsls	r3, r3, #1
 80212fe:	4413      	add	r3, r2
 8021300:	00db      	lsls	r3, r3, #3
 8021302:	440b      	add	r3, r1
 8021304:	3314      	adds	r3, #20
 8021306:	781b      	ldrb	r3, [r3, #0]
 8021308:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802130a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802130e:	2b0a      	cmp	r3, #10
 8021310:	d105      	bne.n	802131e <etharp_find_entry+0x5e>
 8021312:	7dfb      	ldrb	r3, [r7, #23]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d102      	bne.n	802131e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8021318:	8c3b      	ldrh	r3, [r7, #32]
 802131a:	847b      	strh	r3, [r7, #34]	; 0x22
 802131c:	e095      	b.n	802144a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 802131e:	7dfb      	ldrb	r3, [r7, #23]
 8021320:	2b00      	cmp	r3, #0
 8021322:	f000 8092 	beq.w	802144a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8021326:	7dfb      	ldrb	r3, [r7, #23]
 8021328:	2b01      	cmp	r3, #1
 802132a:	d009      	beq.n	8021340 <etharp_find_entry+0x80>
 802132c:	7dfb      	ldrb	r3, [r7, #23]
 802132e:	2b01      	cmp	r3, #1
 8021330:	d806      	bhi.n	8021340 <etharp_find_entry+0x80>
 8021332:	4b99      	ldr	r3, [pc, #612]	; (8021598 <etharp_find_entry+0x2d8>)
 8021334:	f44f 7292 	mov.w	r2, #292	; 0x124
 8021338:	4998      	ldr	r1, [pc, #608]	; (802159c <etharp_find_entry+0x2dc>)
 802133a:	4899      	ldr	r0, [pc, #612]	; (80215a0 <etharp_find_entry+0x2e0>)
 802133c:	f003 fa30 	bl	80247a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021340:	68fb      	ldr	r3, [r7, #12]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d020      	beq.n	8021388 <etharp_find_entry+0xc8>
 8021346:	68fb      	ldr	r3, [r7, #12]
 8021348:	6819      	ldr	r1, [r3, #0]
 802134a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802134e:	4891      	ldr	r0, [pc, #580]	; (8021594 <etharp_find_entry+0x2d4>)
 8021350:	4613      	mov	r3, r2
 8021352:	005b      	lsls	r3, r3, #1
 8021354:	4413      	add	r3, r2
 8021356:	00db      	lsls	r3, r3, #3
 8021358:	4403      	add	r3, r0
 802135a:	3304      	adds	r3, #4
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	4299      	cmp	r1, r3
 8021360:	d112      	bne.n	8021388 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d00c      	beq.n	8021382 <etharp_find_entry+0xc2>
 8021368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802136c:	4989      	ldr	r1, [pc, #548]	; (8021594 <etharp_find_entry+0x2d4>)
 802136e:	4613      	mov	r3, r2
 8021370:	005b      	lsls	r3, r3, #1
 8021372:	4413      	add	r3, r2
 8021374:	00db      	lsls	r3, r3, #3
 8021376:	440b      	add	r3, r1
 8021378:	3308      	adds	r3, #8
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	687a      	ldr	r2, [r7, #4]
 802137e:	429a      	cmp	r2, r3
 8021380:	d102      	bne.n	8021388 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8021382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021386:	e100      	b.n	802158a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8021388:	7dfb      	ldrb	r3, [r7, #23]
 802138a:	2b01      	cmp	r3, #1
 802138c:	d140      	bne.n	8021410 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802138e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021392:	4980      	ldr	r1, [pc, #512]	; (8021594 <etharp_find_entry+0x2d4>)
 8021394:	4613      	mov	r3, r2
 8021396:	005b      	lsls	r3, r3, #1
 8021398:	4413      	add	r3, r2
 802139a:	00db      	lsls	r3, r3, #3
 802139c:	440b      	add	r3, r1
 802139e:	681b      	ldr	r3, [r3, #0]
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d01a      	beq.n	80213da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80213a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80213a8:	497a      	ldr	r1, [pc, #488]	; (8021594 <etharp_find_entry+0x2d4>)
 80213aa:	4613      	mov	r3, r2
 80213ac:	005b      	lsls	r3, r3, #1
 80213ae:	4413      	add	r3, r2
 80213b0:	00db      	lsls	r3, r3, #3
 80213b2:	440b      	add	r3, r1
 80213b4:	3312      	adds	r3, #18
 80213b6:	881b      	ldrh	r3, [r3, #0]
 80213b8:	8bba      	ldrh	r2, [r7, #28]
 80213ba:	429a      	cmp	r2, r3
 80213bc:	d845      	bhi.n	802144a <etharp_find_entry+0x18a>
            old_queue = i;
 80213be:	8c3b      	ldrh	r3, [r7, #32]
 80213c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80213c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80213c6:	4973      	ldr	r1, [pc, #460]	; (8021594 <etharp_find_entry+0x2d4>)
 80213c8:	4613      	mov	r3, r2
 80213ca:	005b      	lsls	r3, r3, #1
 80213cc:	4413      	add	r3, r2
 80213ce:	00db      	lsls	r3, r3, #3
 80213d0:	440b      	add	r3, r1
 80213d2:	3312      	adds	r3, #18
 80213d4:	881b      	ldrh	r3, [r3, #0]
 80213d6:	83bb      	strh	r3, [r7, #28]
 80213d8:	e037      	b.n	802144a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80213da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80213de:	496d      	ldr	r1, [pc, #436]	; (8021594 <etharp_find_entry+0x2d4>)
 80213e0:	4613      	mov	r3, r2
 80213e2:	005b      	lsls	r3, r3, #1
 80213e4:	4413      	add	r3, r2
 80213e6:	00db      	lsls	r3, r3, #3
 80213e8:	440b      	add	r3, r1
 80213ea:	3312      	adds	r3, #18
 80213ec:	881b      	ldrh	r3, [r3, #0]
 80213ee:	8b7a      	ldrh	r2, [r7, #26]
 80213f0:	429a      	cmp	r2, r3
 80213f2:	d82a      	bhi.n	802144a <etharp_find_entry+0x18a>
            old_pending = i;
 80213f4:	8c3b      	ldrh	r3, [r7, #32]
 80213f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80213f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80213fc:	4965      	ldr	r1, [pc, #404]	; (8021594 <etharp_find_entry+0x2d4>)
 80213fe:	4613      	mov	r3, r2
 8021400:	005b      	lsls	r3, r3, #1
 8021402:	4413      	add	r3, r2
 8021404:	00db      	lsls	r3, r3, #3
 8021406:	440b      	add	r3, r1
 8021408:	3312      	adds	r3, #18
 802140a:	881b      	ldrh	r3, [r3, #0]
 802140c:	837b      	strh	r3, [r7, #26]
 802140e:	e01c      	b.n	802144a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8021410:	7dfb      	ldrb	r3, [r7, #23]
 8021412:	2b01      	cmp	r3, #1
 8021414:	d919      	bls.n	802144a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021416:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802141a:	495e      	ldr	r1, [pc, #376]	; (8021594 <etharp_find_entry+0x2d4>)
 802141c:	4613      	mov	r3, r2
 802141e:	005b      	lsls	r3, r3, #1
 8021420:	4413      	add	r3, r2
 8021422:	00db      	lsls	r3, r3, #3
 8021424:	440b      	add	r3, r1
 8021426:	3312      	adds	r3, #18
 8021428:	881b      	ldrh	r3, [r3, #0]
 802142a:	8b3a      	ldrh	r2, [r7, #24]
 802142c:	429a      	cmp	r2, r3
 802142e:	d80c      	bhi.n	802144a <etharp_find_entry+0x18a>
            old_stable = i;
 8021430:	8c3b      	ldrh	r3, [r7, #32]
 8021432:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8021434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021438:	4956      	ldr	r1, [pc, #344]	; (8021594 <etharp_find_entry+0x2d4>)
 802143a:	4613      	mov	r3, r2
 802143c:	005b      	lsls	r3, r3, #1
 802143e:	4413      	add	r3, r2
 8021440:	00db      	lsls	r3, r3, #3
 8021442:	440b      	add	r3, r1
 8021444:	3312      	adds	r3, #18
 8021446:	881b      	ldrh	r3, [r3, #0]
 8021448:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802144a:	8c3b      	ldrh	r3, [r7, #32]
 802144c:	3301      	adds	r3, #1
 802144e:	b29b      	uxth	r3, r3
 8021450:	843b      	strh	r3, [r7, #32]
 8021452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021456:	2b09      	cmp	r3, #9
 8021458:	f77f af4c 	ble.w	80212f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 802145c:	7afb      	ldrb	r3, [r7, #11]
 802145e:	f003 0302 	and.w	r3, r3, #2
 8021462:	2b00      	cmp	r3, #0
 8021464:	d108      	bne.n	8021478 <etharp_find_entry+0x1b8>
 8021466:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802146a:	2b0a      	cmp	r3, #10
 802146c:	d107      	bne.n	802147e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802146e:	7afb      	ldrb	r3, [r7, #11]
 8021470:	f003 0301 	and.w	r3, r3, #1
 8021474:	2b00      	cmp	r3, #0
 8021476:	d102      	bne.n	802147e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8021478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802147c:	e085      	b.n	802158a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802147e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021482:	2b09      	cmp	r3, #9
 8021484:	dc02      	bgt.n	802148c <etharp_find_entry+0x1cc>
    i = empty;
 8021486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021488:	843b      	strh	r3, [r7, #32]
 802148a:	e039      	b.n	8021500 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802148c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8021490:	2b09      	cmp	r3, #9
 8021492:	dc14      	bgt.n	80214be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8021494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021496:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021498:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802149c:	493d      	ldr	r1, [pc, #244]	; (8021594 <etharp_find_entry+0x2d4>)
 802149e:	4613      	mov	r3, r2
 80214a0:	005b      	lsls	r3, r3, #1
 80214a2:	4413      	add	r3, r2
 80214a4:	00db      	lsls	r3, r3, #3
 80214a6:	440b      	add	r3, r1
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d018      	beq.n	80214e0 <etharp_find_entry+0x220>
 80214ae:	4b3a      	ldr	r3, [pc, #232]	; (8021598 <etharp_find_entry+0x2d8>)
 80214b0:	f240 126d 	movw	r2, #365	; 0x16d
 80214b4:	493b      	ldr	r1, [pc, #236]	; (80215a4 <etharp_find_entry+0x2e4>)
 80214b6:	483a      	ldr	r0, [pc, #232]	; (80215a0 <etharp_find_entry+0x2e0>)
 80214b8:	f003 f972 	bl	80247a0 <iprintf>
 80214bc:	e010      	b.n	80214e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80214be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80214c2:	2b09      	cmp	r3, #9
 80214c4:	dc02      	bgt.n	80214cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80214c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80214c8:	843b      	strh	r3, [r7, #32]
 80214ca:	e009      	b.n	80214e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80214cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80214d0:	2b09      	cmp	r3, #9
 80214d2:	dc02      	bgt.n	80214da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80214d4:	8bfb      	ldrh	r3, [r7, #30]
 80214d6:	843b      	strh	r3, [r7, #32]
 80214d8:	e002      	b.n	80214e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80214da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80214de:	e054      	b.n	802158a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80214e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80214e4:	2b09      	cmp	r3, #9
 80214e6:	dd06      	ble.n	80214f6 <etharp_find_entry+0x236>
 80214e8:	4b2b      	ldr	r3, [pc, #172]	; (8021598 <etharp_find_entry+0x2d8>)
 80214ea:	f240 127f 	movw	r2, #383	; 0x17f
 80214ee:	492e      	ldr	r1, [pc, #184]	; (80215a8 <etharp_find_entry+0x2e8>)
 80214f0:	482b      	ldr	r0, [pc, #172]	; (80215a0 <etharp_find_entry+0x2e0>)
 80214f2:	f003 f955 	bl	80247a0 <iprintf>
    etharp_free_entry(i);
 80214f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80214fa:	4618      	mov	r0, r3
 80214fc:	f7ff fe06 	bl	802110c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021500:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021504:	2b09      	cmp	r3, #9
 8021506:	dd06      	ble.n	8021516 <etharp_find_entry+0x256>
 8021508:	4b23      	ldr	r3, [pc, #140]	; (8021598 <etharp_find_entry+0x2d8>)
 802150a:	f240 1283 	movw	r2, #387	; 0x183
 802150e:	4926      	ldr	r1, [pc, #152]	; (80215a8 <etharp_find_entry+0x2e8>)
 8021510:	4823      	ldr	r0, [pc, #140]	; (80215a0 <etharp_find_entry+0x2e0>)
 8021512:	f003 f945 	bl	80247a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802151a:	491e      	ldr	r1, [pc, #120]	; (8021594 <etharp_find_entry+0x2d4>)
 802151c:	4613      	mov	r3, r2
 802151e:	005b      	lsls	r3, r3, #1
 8021520:	4413      	add	r3, r2
 8021522:	00db      	lsls	r3, r3, #3
 8021524:	440b      	add	r3, r1
 8021526:	3314      	adds	r3, #20
 8021528:	781b      	ldrb	r3, [r3, #0]
 802152a:	2b00      	cmp	r3, #0
 802152c:	d006      	beq.n	802153c <etharp_find_entry+0x27c>
 802152e:	4b1a      	ldr	r3, [pc, #104]	; (8021598 <etharp_find_entry+0x2d8>)
 8021530:	f240 1285 	movw	r2, #389	; 0x185
 8021534:	491d      	ldr	r1, [pc, #116]	; (80215ac <etharp_find_entry+0x2ec>)
 8021536:	481a      	ldr	r0, [pc, #104]	; (80215a0 <etharp_find_entry+0x2e0>)
 8021538:	f003 f932 	bl	80247a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802153c:	68fb      	ldr	r3, [r7, #12]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d00b      	beq.n	802155a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021546:	68fb      	ldr	r3, [r7, #12]
 8021548:	6819      	ldr	r1, [r3, #0]
 802154a:	4812      	ldr	r0, [pc, #72]	; (8021594 <etharp_find_entry+0x2d4>)
 802154c:	4613      	mov	r3, r2
 802154e:	005b      	lsls	r3, r3, #1
 8021550:	4413      	add	r3, r2
 8021552:	00db      	lsls	r3, r3, #3
 8021554:	4403      	add	r3, r0
 8021556:	3304      	adds	r3, #4
 8021558:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802155a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802155e:	490d      	ldr	r1, [pc, #52]	; (8021594 <etharp_find_entry+0x2d4>)
 8021560:	4613      	mov	r3, r2
 8021562:	005b      	lsls	r3, r3, #1
 8021564:	4413      	add	r3, r2
 8021566:	00db      	lsls	r3, r3, #3
 8021568:	440b      	add	r3, r1
 802156a:	3312      	adds	r3, #18
 802156c:	2200      	movs	r2, #0
 802156e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021570:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021574:	4907      	ldr	r1, [pc, #28]	; (8021594 <etharp_find_entry+0x2d4>)
 8021576:	4613      	mov	r3, r2
 8021578:	005b      	lsls	r3, r3, #1
 802157a:	4413      	add	r3, r2
 802157c:	00db      	lsls	r3, r3, #3
 802157e:	440b      	add	r3, r1
 8021580:	3308      	adds	r3, #8
 8021582:	687a      	ldr	r2, [r7, #4]
 8021584:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8021586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802158a:	4618      	mov	r0, r3
 802158c:	3728      	adds	r7, #40	; 0x28
 802158e:	46bd      	mov	sp, r7
 8021590:	bd80      	pop	{r7, pc}
 8021592:	bf00      	nop
 8021594:	20009010 	.word	0x20009010
 8021598:	0802876c 	.word	0x0802876c
 802159c:	080287a4 	.word	0x080287a4
 80215a0:	080287e4 	.word	0x080287e4
 80215a4:	0802880c 	.word	0x0802880c
 80215a8:	08028824 	.word	0x08028824
 80215ac:	08028838 	.word	0x08028838

080215b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80215b0:	b580      	push	{r7, lr}
 80215b2:	b088      	sub	sp, #32
 80215b4:	af02      	add	r7, sp, #8
 80215b6:	60f8      	str	r0, [r7, #12]
 80215b8:	60b9      	str	r1, [r7, #8]
 80215ba:	607a      	str	r2, [r7, #4]
 80215bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80215be:	68fb      	ldr	r3, [r7, #12]
 80215c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80215c4:	2b06      	cmp	r3, #6
 80215c6:	d006      	beq.n	80215d6 <etharp_update_arp_entry+0x26>
 80215c8:	4b48      	ldr	r3, [pc, #288]	; (80216ec <etharp_update_arp_entry+0x13c>)
 80215ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 80215ce:	4948      	ldr	r1, [pc, #288]	; (80216f0 <etharp_update_arp_entry+0x140>)
 80215d0:	4848      	ldr	r0, [pc, #288]	; (80216f4 <etharp_update_arp_entry+0x144>)
 80215d2:	f003 f8e5 	bl	80247a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80215d6:	68bb      	ldr	r3, [r7, #8]
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d012      	beq.n	8021602 <etharp_update_arp_entry+0x52>
 80215dc:	68bb      	ldr	r3, [r7, #8]
 80215de:	681b      	ldr	r3, [r3, #0]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d00e      	beq.n	8021602 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80215e4:	68bb      	ldr	r3, [r7, #8]
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	68f9      	ldr	r1, [r7, #12]
 80215ea:	4618      	mov	r0, r3
 80215ec:	f001 f91e 	bl	802282c <ip4_addr_isbroadcast_u32>
 80215f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d105      	bne.n	8021602 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80215f6:	68bb      	ldr	r3, [r7, #8]
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80215fe:	2be0      	cmp	r3, #224	; 0xe0
 8021600:	d102      	bne.n	8021608 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021602:	f06f 030f 	mvn.w	r3, #15
 8021606:	e06c      	b.n	80216e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8021608:	78fb      	ldrb	r3, [r7, #3]
 802160a:	68fa      	ldr	r2, [r7, #12]
 802160c:	4619      	mov	r1, r3
 802160e:	68b8      	ldr	r0, [r7, #8]
 8021610:	f7ff fe56 	bl	80212c0 <etharp_find_entry>
 8021614:	4603      	mov	r3, r0
 8021616:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8021618:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802161c:	2b00      	cmp	r3, #0
 802161e:	da02      	bge.n	8021626 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8021620:	8afb      	ldrh	r3, [r7, #22]
 8021622:	b25b      	sxtb	r3, r3
 8021624:	e05d      	b.n	80216e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021626:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802162a:	4933      	ldr	r1, [pc, #204]	; (80216f8 <etharp_update_arp_entry+0x148>)
 802162c:	4613      	mov	r3, r2
 802162e:	005b      	lsls	r3, r3, #1
 8021630:	4413      	add	r3, r2
 8021632:	00db      	lsls	r3, r3, #3
 8021634:	440b      	add	r3, r1
 8021636:	3314      	adds	r3, #20
 8021638:	2202      	movs	r2, #2
 802163a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802163c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021640:	492d      	ldr	r1, [pc, #180]	; (80216f8 <etharp_update_arp_entry+0x148>)
 8021642:	4613      	mov	r3, r2
 8021644:	005b      	lsls	r3, r3, #1
 8021646:	4413      	add	r3, r2
 8021648:	00db      	lsls	r3, r3, #3
 802164a:	440b      	add	r3, r1
 802164c:	3308      	adds	r3, #8
 802164e:	68fa      	ldr	r2, [r7, #12]
 8021650:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021652:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021656:	4613      	mov	r3, r2
 8021658:	005b      	lsls	r3, r3, #1
 802165a:	4413      	add	r3, r2
 802165c:	00db      	lsls	r3, r3, #3
 802165e:	3308      	adds	r3, #8
 8021660:	4a25      	ldr	r2, [pc, #148]	; (80216f8 <etharp_update_arp_entry+0x148>)
 8021662:	4413      	add	r3, r2
 8021664:	3304      	adds	r3, #4
 8021666:	2206      	movs	r2, #6
 8021668:	6879      	ldr	r1, [r7, #4]
 802166a:	4618      	mov	r0, r3
 802166c:	f002 ffdd 	bl	802462a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8021670:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021674:	4920      	ldr	r1, [pc, #128]	; (80216f8 <etharp_update_arp_entry+0x148>)
 8021676:	4613      	mov	r3, r2
 8021678:	005b      	lsls	r3, r3, #1
 802167a:	4413      	add	r3, r2
 802167c:	00db      	lsls	r3, r3, #3
 802167e:	440b      	add	r3, r1
 8021680:	3312      	adds	r3, #18
 8021682:	2200      	movs	r2, #0
 8021684:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8021686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802168a:	491b      	ldr	r1, [pc, #108]	; (80216f8 <etharp_update_arp_entry+0x148>)
 802168c:	4613      	mov	r3, r2
 802168e:	005b      	lsls	r3, r3, #1
 8021690:	4413      	add	r3, r2
 8021692:	00db      	lsls	r3, r3, #3
 8021694:	440b      	add	r3, r1
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	2b00      	cmp	r3, #0
 802169a:	d021      	beq.n	80216e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802169c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80216a0:	4915      	ldr	r1, [pc, #84]	; (80216f8 <etharp_update_arp_entry+0x148>)
 80216a2:	4613      	mov	r3, r2
 80216a4:	005b      	lsls	r3, r3, #1
 80216a6:	4413      	add	r3, r2
 80216a8:	00db      	lsls	r3, r3, #3
 80216aa:	440b      	add	r3, r1
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80216b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80216b4:	4910      	ldr	r1, [pc, #64]	; (80216f8 <etharp_update_arp_entry+0x148>)
 80216b6:	4613      	mov	r3, r2
 80216b8:	005b      	lsls	r3, r3, #1
 80216ba:	4413      	add	r3, r2
 80216bc:	00db      	lsls	r3, r3, #3
 80216be:	440b      	add	r3, r1
 80216c0:	2200      	movs	r2, #0
 80216c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80216c4:	68fb      	ldr	r3, [r7, #12]
 80216c6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80216ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80216ce:	9300      	str	r3, [sp, #0]
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	6939      	ldr	r1, [r7, #16]
 80216d4:	68f8      	ldr	r0, [r7, #12]
 80216d6:	f002 f83f 	bl	8023758 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80216da:	6938      	ldr	r0, [r7, #16]
 80216dc:	f7f6 fd02 	bl	80180e4 <pbuf_free>
  }
  return ERR_OK;
 80216e0:	2300      	movs	r3, #0
}
 80216e2:	4618      	mov	r0, r3
 80216e4:	3718      	adds	r7, #24
 80216e6:	46bd      	mov	sp, r7
 80216e8:	bd80      	pop	{r7, pc}
 80216ea:	bf00      	nop
 80216ec:	0802876c 	.word	0x0802876c
 80216f0:	08028864 	.word	0x08028864
 80216f4:	080287e4 	.word	0x080287e4
 80216f8:	20009010 	.word	0x20009010

080216fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80216fc:	b580      	push	{r7, lr}
 80216fe:	b084      	sub	sp, #16
 8021700:	af00      	add	r7, sp, #0
 8021702:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021704:	2300      	movs	r3, #0
 8021706:	60fb      	str	r3, [r7, #12]
 8021708:	e01e      	b.n	8021748 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802170a:	4913      	ldr	r1, [pc, #76]	; (8021758 <etharp_cleanup_netif+0x5c>)
 802170c:	68fa      	ldr	r2, [r7, #12]
 802170e:	4613      	mov	r3, r2
 8021710:	005b      	lsls	r3, r3, #1
 8021712:	4413      	add	r3, r2
 8021714:	00db      	lsls	r3, r3, #3
 8021716:	440b      	add	r3, r1
 8021718:	3314      	adds	r3, #20
 802171a:	781b      	ldrb	r3, [r3, #0]
 802171c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802171e:	7afb      	ldrb	r3, [r7, #11]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d00e      	beq.n	8021742 <etharp_cleanup_netif+0x46>
 8021724:	490c      	ldr	r1, [pc, #48]	; (8021758 <etharp_cleanup_netif+0x5c>)
 8021726:	68fa      	ldr	r2, [r7, #12]
 8021728:	4613      	mov	r3, r2
 802172a:	005b      	lsls	r3, r3, #1
 802172c:	4413      	add	r3, r2
 802172e:	00db      	lsls	r3, r3, #3
 8021730:	440b      	add	r3, r1
 8021732:	3308      	adds	r3, #8
 8021734:	681b      	ldr	r3, [r3, #0]
 8021736:	687a      	ldr	r2, [r7, #4]
 8021738:	429a      	cmp	r2, r3
 802173a:	d102      	bne.n	8021742 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802173c:	68f8      	ldr	r0, [r7, #12]
 802173e:	f7ff fce5 	bl	802110c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021742:	68fb      	ldr	r3, [r7, #12]
 8021744:	3301      	adds	r3, #1
 8021746:	60fb      	str	r3, [r7, #12]
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	2b09      	cmp	r3, #9
 802174c:	dddd      	ble.n	802170a <etharp_cleanup_netif+0xe>
    }
  }
}
 802174e:	bf00      	nop
 8021750:	3710      	adds	r7, #16
 8021752:	46bd      	mov	sp, r7
 8021754:	bd80      	pop	{r7, pc}
 8021756:	bf00      	nop
 8021758:	20009010 	.word	0x20009010

0802175c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802175c:	b5b0      	push	{r4, r5, r7, lr}
 802175e:	b08a      	sub	sp, #40	; 0x28
 8021760:	af04      	add	r7, sp, #16
 8021762:	6078      	str	r0, [r7, #4]
 8021764:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021766:	683b      	ldr	r3, [r7, #0]
 8021768:	2b00      	cmp	r3, #0
 802176a:	d107      	bne.n	802177c <etharp_input+0x20>
 802176c:	4b3f      	ldr	r3, [pc, #252]	; (802186c <etharp_input+0x110>)
 802176e:	f240 228a 	movw	r2, #650	; 0x28a
 8021772:	493f      	ldr	r1, [pc, #252]	; (8021870 <etharp_input+0x114>)
 8021774:	483f      	ldr	r0, [pc, #252]	; (8021874 <etharp_input+0x118>)
 8021776:	f003 f813 	bl	80247a0 <iprintf>
 802177a:	e074      	b.n	8021866 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	685b      	ldr	r3, [r3, #4]
 8021780:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021782:	693b      	ldr	r3, [r7, #16]
 8021784:	881b      	ldrh	r3, [r3, #0]
 8021786:	b29b      	uxth	r3, r3
 8021788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802178c:	d10c      	bne.n	80217a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802178e:	693b      	ldr	r3, [r7, #16]
 8021790:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021792:	2b06      	cmp	r3, #6
 8021794:	d108      	bne.n	80217a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021796:	693b      	ldr	r3, [r7, #16]
 8021798:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802179a:	2b04      	cmp	r3, #4
 802179c:	d104      	bne.n	80217a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802179e:	693b      	ldr	r3, [r7, #16]
 80217a0:	885b      	ldrh	r3, [r3, #2]
 80217a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80217a4:	2b08      	cmp	r3, #8
 80217a6:	d003      	beq.n	80217b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80217a8:	6878      	ldr	r0, [r7, #4]
 80217aa:	f7f6 fc9b 	bl	80180e4 <pbuf_free>
    return;
 80217ae:	e05a      	b.n	8021866 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80217b0:	693b      	ldr	r3, [r7, #16]
 80217b2:	330e      	adds	r3, #14
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80217b8:	693b      	ldr	r3, [r7, #16]
 80217ba:	3318      	adds	r3, #24
 80217bc:	681b      	ldr	r3, [r3, #0]
 80217be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80217c0:	683b      	ldr	r3, [r7, #0]
 80217c2:	3304      	adds	r3, #4
 80217c4:	681b      	ldr	r3, [r3, #0]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d102      	bne.n	80217d0 <etharp_input+0x74>
    for_us = 0;
 80217ca:	2300      	movs	r3, #0
 80217cc:	75fb      	strb	r3, [r7, #23]
 80217ce:	e009      	b.n	80217e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80217d0:	68ba      	ldr	r2, [r7, #8]
 80217d2:	683b      	ldr	r3, [r7, #0]
 80217d4:	3304      	adds	r3, #4
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	429a      	cmp	r2, r3
 80217da:	bf0c      	ite	eq
 80217dc:	2301      	moveq	r3, #1
 80217de:	2300      	movne	r3, #0
 80217e0:	b2db      	uxtb	r3, r3
 80217e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80217e4:	693b      	ldr	r3, [r7, #16]
 80217e6:	f103 0208 	add.w	r2, r3, #8
 80217ea:	7dfb      	ldrb	r3, [r7, #23]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d001      	beq.n	80217f4 <etharp_input+0x98>
 80217f0:	2301      	movs	r3, #1
 80217f2:	e000      	b.n	80217f6 <etharp_input+0x9a>
 80217f4:	2302      	movs	r3, #2
 80217f6:	f107 010c 	add.w	r1, r7, #12
 80217fa:	6838      	ldr	r0, [r7, #0]
 80217fc:	f7ff fed8 	bl	80215b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8021800:	693b      	ldr	r3, [r7, #16]
 8021802:	88db      	ldrh	r3, [r3, #6]
 8021804:	b29b      	uxth	r3, r3
 8021806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802180a:	d003      	beq.n	8021814 <etharp_input+0xb8>
 802180c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021810:	d01e      	beq.n	8021850 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8021812:	e025      	b.n	8021860 <etharp_input+0x104>
      if (for_us) {
 8021814:	7dfb      	ldrb	r3, [r7, #23]
 8021816:	2b00      	cmp	r3, #0
 8021818:	d021      	beq.n	802185e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802181a:	683b      	ldr	r3, [r7, #0]
 802181c:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8021820:	693b      	ldr	r3, [r7, #16]
 8021822:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021826:	683b      	ldr	r3, [r7, #0]
 8021828:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 802182c:	683b      	ldr	r3, [r7, #0]
 802182e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8021830:	693a      	ldr	r2, [r7, #16]
 8021832:	3208      	adds	r2, #8
        etharp_raw(netif,
 8021834:	2102      	movs	r1, #2
 8021836:	9103      	str	r1, [sp, #12]
 8021838:	f107 010c 	add.w	r1, r7, #12
 802183c:	9102      	str	r1, [sp, #8]
 802183e:	9201      	str	r2, [sp, #4]
 8021840:	9300      	str	r3, [sp, #0]
 8021842:	462b      	mov	r3, r5
 8021844:	4622      	mov	r2, r4
 8021846:	4601      	mov	r1, r0
 8021848:	6838      	ldr	r0, [r7, #0]
 802184a:	f000 faef 	bl	8021e2c <etharp_raw>
      break;
 802184e:	e006      	b.n	802185e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8021850:	f107 030c 	add.w	r3, r7, #12
 8021854:	4619      	mov	r1, r3
 8021856:	6838      	ldr	r0, [r7, #0]
 8021858:	f7fe f9fe 	bl	801fc58 <dhcp_arp_reply>
      break;
 802185c:	e000      	b.n	8021860 <etharp_input+0x104>
      break;
 802185e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8021860:	6878      	ldr	r0, [r7, #4]
 8021862:	f7f6 fc3f 	bl	80180e4 <pbuf_free>
}
 8021866:	3718      	adds	r7, #24
 8021868:	46bd      	mov	sp, r7
 802186a:	bdb0      	pop	{r4, r5, r7, pc}
 802186c:	0802876c 	.word	0x0802876c
 8021870:	080288bc 	.word	0x080288bc
 8021874:	080287e4 	.word	0x080287e4

08021878 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8021878:	b580      	push	{r7, lr}
 802187a:	b086      	sub	sp, #24
 802187c:	af02      	add	r7, sp, #8
 802187e:	60f8      	str	r0, [r7, #12]
 8021880:	60b9      	str	r1, [r7, #8]
 8021882:	4613      	mov	r3, r2
 8021884:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021886:	79fa      	ldrb	r2, [r7, #7]
 8021888:	4944      	ldr	r1, [pc, #272]	; (802199c <etharp_output_to_arp_index+0x124>)
 802188a:	4613      	mov	r3, r2
 802188c:	005b      	lsls	r3, r3, #1
 802188e:	4413      	add	r3, r2
 8021890:	00db      	lsls	r3, r3, #3
 8021892:	440b      	add	r3, r1
 8021894:	3314      	adds	r3, #20
 8021896:	781b      	ldrb	r3, [r3, #0]
 8021898:	2b01      	cmp	r3, #1
 802189a:	d806      	bhi.n	80218aa <etharp_output_to_arp_index+0x32>
 802189c:	4b40      	ldr	r3, [pc, #256]	; (80219a0 <etharp_output_to_arp_index+0x128>)
 802189e:	f240 22ef 	movw	r2, #751	; 0x2ef
 80218a2:	4940      	ldr	r1, [pc, #256]	; (80219a4 <etharp_output_to_arp_index+0x12c>)
 80218a4:	4840      	ldr	r0, [pc, #256]	; (80219a8 <etharp_output_to_arp_index+0x130>)
 80218a6:	f002 ff7b 	bl	80247a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80218aa:	79fa      	ldrb	r2, [r7, #7]
 80218ac:	493b      	ldr	r1, [pc, #236]	; (802199c <etharp_output_to_arp_index+0x124>)
 80218ae:	4613      	mov	r3, r2
 80218b0:	005b      	lsls	r3, r3, #1
 80218b2:	4413      	add	r3, r2
 80218b4:	00db      	lsls	r3, r3, #3
 80218b6:	440b      	add	r3, r1
 80218b8:	3314      	adds	r3, #20
 80218ba:	781b      	ldrb	r3, [r3, #0]
 80218bc:	2b02      	cmp	r3, #2
 80218be:	d153      	bne.n	8021968 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80218c0:	79fa      	ldrb	r2, [r7, #7]
 80218c2:	4936      	ldr	r1, [pc, #216]	; (802199c <etharp_output_to_arp_index+0x124>)
 80218c4:	4613      	mov	r3, r2
 80218c6:	005b      	lsls	r3, r3, #1
 80218c8:	4413      	add	r3, r2
 80218ca:	00db      	lsls	r3, r3, #3
 80218cc:	440b      	add	r3, r1
 80218ce:	3312      	adds	r3, #18
 80218d0:	881b      	ldrh	r3, [r3, #0]
 80218d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80218d6:	d919      	bls.n	802190c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80218d8:	79fa      	ldrb	r2, [r7, #7]
 80218da:	4613      	mov	r3, r2
 80218dc:	005b      	lsls	r3, r3, #1
 80218de:	4413      	add	r3, r2
 80218e0:	00db      	lsls	r3, r3, #3
 80218e2:	4a2e      	ldr	r2, [pc, #184]	; (802199c <etharp_output_to_arp_index+0x124>)
 80218e4:	4413      	add	r3, r2
 80218e6:	3304      	adds	r3, #4
 80218e8:	4619      	mov	r1, r3
 80218ea:	68f8      	ldr	r0, [r7, #12]
 80218ec:	f000 fb4c 	bl	8021f88 <etharp_request>
 80218f0:	4603      	mov	r3, r0
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d138      	bne.n	8021968 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80218f6:	79fa      	ldrb	r2, [r7, #7]
 80218f8:	4928      	ldr	r1, [pc, #160]	; (802199c <etharp_output_to_arp_index+0x124>)
 80218fa:	4613      	mov	r3, r2
 80218fc:	005b      	lsls	r3, r3, #1
 80218fe:	4413      	add	r3, r2
 8021900:	00db      	lsls	r3, r3, #3
 8021902:	440b      	add	r3, r1
 8021904:	3314      	adds	r3, #20
 8021906:	2203      	movs	r2, #3
 8021908:	701a      	strb	r2, [r3, #0]
 802190a:	e02d      	b.n	8021968 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802190c:	79fa      	ldrb	r2, [r7, #7]
 802190e:	4923      	ldr	r1, [pc, #140]	; (802199c <etharp_output_to_arp_index+0x124>)
 8021910:	4613      	mov	r3, r2
 8021912:	005b      	lsls	r3, r3, #1
 8021914:	4413      	add	r3, r2
 8021916:	00db      	lsls	r3, r3, #3
 8021918:	440b      	add	r3, r1
 802191a:	3312      	adds	r3, #18
 802191c:	881b      	ldrh	r3, [r3, #0]
 802191e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021922:	d321      	bcc.n	8021968 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021924:	79fa      	ldrb	r2, [r7, #7]
 8021926:	4613      	mov	r3, r2
 8021928:	005b      	lsls	r3, r3, #1
 802192a:	4413      	add	r3, r2
 802192c:	00db      	lsls	r3, r3, #3
 802192e:	4a1b      	ldr	r2, [pc, #108]	; (802199c <etharp_output_to_arp_index+0x124>)
 8021930:	4413      	add	r3, r2
 8021932:	1d19      	adds	r1, r3, #4
 8021934:	79fa      	ldrb	r2, [r7, #7]
 8021936:	4613      	mov	r3, r2
 8021938:	005b      	lsls	r3, r3, #1
 802193a:	4413      	add	r3, r2
 802193c:	00db      	lsls	r3, r3, #3
 802193e:	3308      	adds	r3, #8
 8021940:	4a16      	ldr	r2, [pc, #88]	; (802199c <etharp_output_to_arp_index+0x124>)
 8021942:	4413      	add	r3, r2
 8021944:	3304      	adds	r3, #4
 8021946:	461a      	mov	r2, r3
 8021948:	68f8      	ldr	r0, [r7, #12]
 802194a:	f000 fafb 	bl	8021f44 <etharp_request_dst>
 802194e:	4603      	mov	r3, r0
 8021950:	2b00      	cmp	r3, #0
 8021952:	d109      	bne.n	8021968 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021954:	79fa      	ldrb	r2, [r7, #7]
 8021956:	4911      	ldr	r1, [pc, #68]	; (802199c <etharp_output_to_arp_index+0x124>)
 8021958:	4613      	mov	r3, r2
 802195a:	005b      	lsls	r3, r3, #1
 802195c:	4413      	add	r3, r2
 802195e:	00db      	lsls	r3, r3, #3
 8021960:	440b      	add	r3, r1
 8021962:	3314      	adds	r3, #20
 8021964:	2203      	movs	r2, #3
 8021966:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8021968:	68fb      	ldr	r3, [r7, #12]
 802196a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 802196e:	79fa      	ldrb	r2, [r7, #7]
 8021970:	4613      	mov	r3, r2
 8021972:	005b      	lsls	r3, r3, #1
 8021974:	4413      	add	r3, r2
 8021976:	00db      	lsls	r3, r3, #3
 8021978:	3308      	adds	r3, #8
 802197a:	4a08      	ldr	r2, [pc, #32]	; (802199c <etharp_output_to_arp_index+0x124>)
 802197c:	4413      	add	r3, r2
 802197e:	1d1a      	adds	r2, r3, #4
 8021980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021984:	9300      	str	r3, [sp, #0]
 8021986:	4613      	mov	r3, r2
 8021988:	460a      	mov	r2, r1
 802198a:	68b9      	ldr	r1, [r7, #8]
 802198c:	68f8      	ldr	r0, [r7, #12]
 802198e:	f001 fee3 	bl	8023758 <ethernet_output>
 8021992:	4603      	mov	r3, r0
}
 8021994:	4618      	mov	r0, r3
 8021996:	3710      	adds	r7, #16
 8021998:	46bd      	mov	sp, r7
 802199a:	bd80      	pop	{r7, pc}
 802199c:	20009010 	.word	0x20009010
 80219a0:	0802876c 	.word	0x0802876c
 80219a4:	080288dc 	.word	0x080288dc
 80219a8:	080287e4 	.word	0x080287e4

080219ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80219ac:	b580      	push	{r7, lr}
 80219ae:	b08a      	sub	sp, #40	; 0x28
 80219b0:	af02      	add	r7, sp, #8
 80219b2:	60f8      	str	r0, [r7, #12]
 80219b4:	60b9      	str	r1, [r7, #8]
 80219b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80219b8:	687b      	ldr	r3, [r7, #4]
 80219ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d106      	bne.n	80219d0 <etharp_output+0x24>
 80219c2:	4b73      	ldr	r3, [pc, #460]	; (8021b90 <etharp_output+0x1e4>)
 80219c4:	f240 321e 	movw	r2, #798	; 0x31e
 80219c8:	4972      	ldr	r1, [pc, #456]	; (8021b94 <etharp_output+0x1e8>)
 80219ca:	4873      	ldr	r0, [pc, #460]	; (8021b98 <etharp_output+0x1ec>)
 80219cc:	f002 fee8 	bl	80247a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80219d0:	68bb      	ldr	r3, [r7, #8]
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	d106      	bne.n	80219e4 <etharp_output+0x38>
 80219d6:	4b6e      	ldr	r3, [pc, #440]	; (8021b90 <etharp_output+0x1e4>)
 80219d8:	f240 321f 	movw	r2, #799	; 0x31f
 80219dc:	496f      	ldr	r1, [pc, #444]	; (8021b9c <etharp_output+0x1f0>)
 80219de:	486e      	ldr	r0, [pc, #440]	; (8021b98 <etharp_output+0x1ec>)
 80219e0:	f002 fede 	bl	80247a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	d106      	bne.n	80219f8 <etharp_output+0x4c>
 80219ea:	4b69      	ldr	r3, [pc, #420]	; (8021b90 <etharp_output+0x1e4>)
 80219ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80219f0:	496b      	ldr	r1, [pc, #428]	; (8021ba0 <etharp_output+0x1f4>)
 80219f2:	4869      	ldr	r0, [pc, #420]	; (8021b98 <etharp_output+0x1ec>)
 80219f4:	f002 fed4 	bl	80247a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	68f9      	ldr	r1, [r7, #12]
 80219fe:	4618      	mov	r0, r3
 8021a00:	f000 ff14 	bl	802282c <ip4_addr_isbroadcast_u32>
 8021a04:	4603      	mov	r3, r0
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d002      	beq.n	8021a10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8021a0a:	4b66      	ldr	r3, [pc, #408]	; (8021ba4 <etharp_output+0x1f8>)
 8021a0c:	61fb      	str	r3, [r7, #28]
 8021a0e:	e0af      	b.n	8021b70 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021a18:	2be0      	cmp	r3, #224	; 0xe0
 8021a1a:	d118      	bne.n	8021a4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021a1c:	2301      	movs	r3, #1
 8021a1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8021a20:	2300      	movs	r3, #0
 8021a22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8021a24:	235e      	movs	r3, #94	; 0x5e
 8021a26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	3301      	adds	r3, #1
 8021a2c:	781b      	ldrb	r3, [r3, #0]
 8021a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021a32:	b2db      	uxtb	r3, r3
 8021a34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	3302      	adds	r3, #2
 8021a3a:	781b      	ldrb	r3, [r3, #0]
 8021a3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	3303      	adds	r3, #3
 8021a42:	781b      	ldrb	r3, [r3, #0]
 8021a44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8021a46:	f107 0310 	add.w	r3, r7, #16
 8021a4a:	61fb      	str	r3, [r7, #28]
 8021a4c:	e090      	b.n	8021b70 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	681a      	ldr	r2, [r3, #0]
 8021a52:	68fb      	ldr	r3, [r7, #12]
 8021a54:	3304      	adds	r3, #4
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	405a      	eors	r2, r3
 8021a5a:	68fb      	ldr	r3, [r7, #12]
 8021a5c:	3308      	adds	r3, #8
 8021a5e:	681b      	ldr	r3, [r3, #0]
 8021a60:	4013      	ands	r3, r2
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d012      	beq.n	8021a8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021a6c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8021a70:	4293      	cmp	r3, r2
 8021a72:	d00b      	beq.n	8021a8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8021a74:	68fb      	ldr	r3, [r7, #12]
 8021a76:	330c      	adds	r3, #12
 8021a78:	681b      	ldr	r3, [r3, #0]
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d003      	beq.n	8021a86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8021a7e:	68fb      	ldr	r3, [r7, #12]
 8021a80:	330c      	adds	r3, #12
 8021a82:	61bb      	str	r3, [r7, #24]
 8021a84:	e002      	b.n	8021a8c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8021a86:	f06f 0303 	mvn.w	r3, #3
 8021a8a:	e07d      	b.n	8021b88 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8021a8c:	4b46      	ldr	r3, [pc, #280]	; (8021ba8 <etharp_output+0x1fc>)
 8021a8e:	781b      	ldrb	r3, [r3, #0]
 8021a90:	4619      	mov	r1, r3
 8021a92:	4a46      	ldr	r2, [pc, #280]	; (8021bac <etharp_output+0x200>)
 8021a94:	460b      	mov	r3, r1
 8021a96:	005b      	lsls	r3, r3, #1
 8021a98:	440b      	add	r3, r1
 8021a9a:	00db      	lsls	r3, r3, #3
 8021a9c:	4413      	add	r3, r2
 8021a9e:	3314      	adds	r3, #20
 8021aa0:	781b      	ldrb	r3, [r3, #0]
 8021aa2:	2b01      	cmp	r3, #1
 8021aa4:	d925      	bls.n	8021af2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8021aa6:	4b40      	ldr	r3, [pc, #256]	; (8021ba8 <etharp_output+0x1fc>)
 8021aa8:	781b      	ldrb	r3, [r3, #0]
 8021aaa:	4619      	mov	r1, r3
 8021aac:	4a3f      	ldr	r2, [pc, #252]	; (8021bac <etharp_output+0x200>)
 8021aae:	460b      	mov	r3, r1
 8021ab0:	005b      	lsls	r3, r3, #1
 8021ab2:	440b      	add	r3, r1
 8021ab4:	00db      	lsls	r3, r3, #3
 8021ab6:	4413      	add	r3, r2
 8021ab8:	3308      	adds	r3, #8
 8021aba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8021abc:	68fa      	ldr	r2, [r7, #12]
 8021abe:	429a      	cmp	r2, r3
 8021ac0:	d117      	bne.n	8021af2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8021ac2:	69bb      	ldr	r3, [r7, #24]
 8021ac4:	681a      	ldr	r2, [r3, #0]
 8021ac6:	4b38      	ldr	r3, [pc, #224]	; (8021ba8 <etharp_output+0x1fc>)
 8021ac8:	781b      	ldrb	r3, [r3, #0]
 8021aca:	4618      	mov	r0, r3
 8021acc:	4937      	ldr	r1, [pc, #220]	; (8021bac <etharp_output+0x200>)
 8021ace:	4603      	mov	r3, r0
 8021ad0:	005b      	lsls	r3, r3, #1
 8021ad2:	4403      	add	r3, r0
 8021ad4:	00db      	lsls	r3, r3, #3
 8021ad6:	440b      	add	r3, r1
 8021ad8:	3304      	adds	r3, #4
 8021ada:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8021adc:	429a      	cmp	r2, r3
 8021ade:	d108      	bne.n	8021af2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8021ae0:	4b31      	ldr	r3, [pc, #196]	; (8021ba8 <etharp_output+0x1fc>)
 8021ae2:	781b      	ldrb	r3, [r3, #0]
 8021ae4:	461a      	mov	r2, r3
 8021ae6:	68b9      	ldr	r1, [r7, #8]
 8021ae8:	68f8      	ldr	r0, [r7, #12]
 8021aea:	f7ff fec5 	bl	8021878 <etharp_output_to_arp_index>
 8021aee:	4603      	mov	r3, r0
 8021af0:	e04a      	b.n	8021b88 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021af2:	2300      	movs	r3, #0
 8021af4:	75fb      	strb	r3, [r7, #23]
 8021af6:	e031      	b.n	8021b5c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021af8:	7dfa      	ldrb	r2, [r7, #23]
 8021afa:	492c      	ldr	r1, [pc, #176]	; (8021bac <etharp_output+0x200>)
 8021afc:	4613      	mov	r3, r2
 8021afe:	005b      	lsls	r3, r3, #1
 8021b00:	4413      	add	r3, r2
 8021b02:	00db      	lsls	r3, r3, #3
 8021b04:	440b      	add	r3, r1
 8021b06:	3314      	adds	r3, #20
 8021b08:	781b      	ldrb	r3, [r3, #0]
 8021b0a:	2b01      	cmp	r3, #1
 8021b0c:	d923      	bls.n	8021b56 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8021b0e:	7dfa      	ldrb	r2, [r7, #23]
 8021b10:	4926      	ldr	r1, [pc, #152]	; (8021bac <etharp_output+0x200>)
 8021b12:	4613      	mov	r3, r2
 8021b14:	005b      	lsls	r3, r3, #1
 8021b16:	4413      	add	r3, r2
 8021b18:	00db      	lsls	r3, r3, #3
 8021b1a:	440b      	add	r3, r1
 8021b1c:	3308      	adds	r3, #8
 8021b1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021b20:	68fa      	ldr	r2, [r7, #12]
 8021b22:	429a      	cmp	r2, r3
 8021b24:	d117      	bne.n	8021b56 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8021b26:	69bb      	ldr	r3, [r7, #24]
 8021b28:	6819      	ldr	r1, [r3, #0]
 8021b2a:	7dfa      	ldrb	r2, [r7, #23]
 8021b2c:	481f      	ldr	r0, [pc, #124]	; (8021bac <etharp_output+0x200>)
 8021b2e:	4613      	mov	r3, r2
 8021b30:	005b      	lsls	r3, r3, #1
 8021b32:	4413      	add	r3, r2
 8021b34:	00db      	lsls	r3, r3, #3
 8021b36:	4403      	add	r3, r0
 8021b38:	3304      	adds	r3, #4
 8021b3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8021b3c:	4299      	cmp	r1, r3
 8021b3e:	d10a      	bne.n	8021b56 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8021b40:	4a19      	ldr	r2, [pc, #100]	; (8021ba8 <etharp_output+0x1fc>)
 8021b42:	7dfb      	ldrb	r3, [r7, #23]
 8021b44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8021b46:	7dfb      	ldrb	r3, [r7, #23]
 8021b48:	461a      	mov	r2, r3
 8021b4a:	68b9      	ldr	r1, [r7, #8]
 8021b4c:	68f8      	ldr	r0, [r7, #12]
 8021b4e:	f7ff fe93 	bl	8021878 <etharp_output_to_arp_index>
 8021b52:	4603      	mov	r3, r0
 8021b54:	e018      	b.n	8021b88 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021b56:	7dfb      	ldrb	r3, [r7, #23]
 8021b58:	3301      	adds	r3, #1
 8021b5a:	75fb      	strb	r3, [r7, #23]
 8021b5c:	7dfb      	ldrb	r3, [r7, #23]
 8021b5e:	2b09      	cmp	r3, #9
 8021b60:	d9ca      	bls.n	8021af8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8021b62:	68ba      	ldr	r2, [r7, #8]
 8021b64:	69b9      	ldr	r1, [r7, #24]
 8021b66:	68f8      	ldr	r0, [r7, #12]
 8021b68:	f000 f822 	bl	8021bb0 <etharp_query>
 8021b6c:	4603      	mov	r3, r0
 8021b6e:	e00b      	b.n	8021b88 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8021b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021b7a:	9300      	str	r3, [sp, #0]
 8021b7c:	69fb      	ldr	r3, [r7, #28]
 8021b7e:	68b9      	ldr	r1, [r7, #8]
 8021b80:	68f8      	ldr	r0, [r7, #12]
 8021b82:	f001 fde9 	bl	8023758 <ethernet_output>
 8021b86:	4603      	mov	r3, r0
}
 8021b88:	4618      	mov	r0, r3
 8021b8a:	3720      	adds	r7, #32
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	bd80      	pop	{r7, pc}
 8021b90:	0802876c 	.word	0x0802876c
 8021b94:	080288bc 	.word	0x080288bc
 8021b98:	080287e4 	.word	0x080287e4
 8021b9c:	0802890c 	.word	0x0802890c
 8021ba0:	080288ac 	.word	0x080288ac
 8021ba4:	08028fe8 	.word	0x08028fe8
 8021ba8:	20009100 	.word	0x20009100
 8021bac:	20009010 	.word	0x20009010

08021bb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8021bb0:	b580      	push	{r7, lr}
 8021bb2:	b08c      	sub	sp, #48	; 0x30
 8021bb4:	af02      	add	r7, sp, #8
 8021bb6:	60f8      	str	r0, [r7, #12]
 8021bb8:	60b9      	str	r1, [r7, #8]
 8021bba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021bbc:	68fb      	ldr	r3, [r7, #12]
 8021bbe:	332e      	adds	r3, #46	; 0x2e
 8021bc0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8021bc2:	23ff      	movs	r3, #255	; 0xff
 8021bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8021bc8:	2300      	movs	r3, #0
 8021bca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021bcc:	68bb      	ldr	r3, [r7, #8]
 8021bce:	681b      	ldr	r3, [r3, #0]
 8021bd0:	68f9      	ldr	r1, [r7, #12]
 8021bd2:	4618      	mov	r0, r3
 8021bd4:	f000 fe2a 	bl	802282c <ip4_addr_isbroadcast_u32>
 8021bd8:	4603      	mov	r3, r0
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d10c      	bne.n	8021bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8021bde:	68bb      	ldr	r3, [r7, #8]
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021be6:	2be0      	cmp	r3, #224	; 0xe0
 8021be8:	d006      	beq.n	8021bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8021bea:	68bb      	ldr	r3, [r7, #8]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d003      	beq.n	8021bf8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8021bf0:	68bb      	ldr	r3, [r7, #8]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d102      	bne.n	8021bfe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021bf8:	f06f 030f 	mvn.w	r3, #15
 8021bfc:	e102      	b.n	8021e04 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8021bfe:	68fa      	ldr	r2, [r7, #12]
 8021c00:	2101      	movs	r1, #1
 8021c02:	68b8      	ldr	r0, [r7, #8]
 8021c04:	f7ff fb5c 	bl	80212c0 <etharp_find_entry>
 8021c08:	4603      	mov	r3, r0
 8021c0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8021c0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	da02      	bge.n	8021c1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8021c14:	8a7b      	ldrh	r3, [r7, #18]
 8021c16:	b25b      	sxtb	r3, r3
 8021c18:	e0f4      	b.n	8021e04 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021c1a:	8a7b      	ldrh	r3, [r7, #18]
 8021c1c:	2b7e      	cmp	r3, #126	; 0x7e
 8021c1e:	d906      	bls.n	8021c2e <etharp_query+0x7e>
 8021c20:	4b7a      	ldr	r3, [pc, #488]	; (8021e0c <etharp_query+0x25c>)
 8021c22:	f240 32c1 	movw	r2, #961	; 0x3c1
 8021c26:	497a      	ldr	r1, [pc, #488]	; (8021e10 <etharp_query+0x260>)
 8021c28:	487a      	ldr	r0, [pc, #488]	; (8021e14 <etharp_query+0x264>)
 8021c2a:	f002 fdb9 	bl	80247a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8021c2e:	8a7b      	ldrh	r3, [r7, #18]
 8021c30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8021c32:	7c7a      	ldrb	r2, [r7, #17]
 8021c34:	4978      	ldr	r1, [pc, #480]	; (8021e18 <etharp_query+0x268>)
 8021c36:	4613      	mov	r3, r2
 8021c38:	005b      	lsls	r3, r3, #1
 8021c3a:	4413      	add	r3, r2
 8021c3c:	00db      	lsls	r3, r3, #3
 8021c3e:	440b      	add	r3, r1
 8021c40:	3314      	adds	r3, #20
 8021c42:	781b      	ldrb	r3, [r3, #0]
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	d115      	bne.n	8021c74 <etharp_query+0xc4>
    is_new_entry = 1;
 8021c48:	2301      	movs	r3, #1
 8021c4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021c4c:	7c7a      	ldrb	r2, [r7, #17]
 8021c4e:	4972      	ldr	r1, [pc, #456]	; (8021e18 <etharp_query+0x268>)
 8021c50:	4613      	mov	r3, r2
 8021c52:	005b      	lsls	r3, r3, #1
 8021c54:	4413      	add	r3, r2
 8021c56:	00db      	lsls	r3, r3, #3
 8021c58:	440b      	add	r3, r1
 8021c5a:	3314      	adds	r3, #20
 8021c5c:	2201      	movs	r2, #1
 8021c5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8021c60:	7c7a      	ldrb	r2, [r7, #17]
 8021c62:	496d      	ldr	r1, [pc, #436]	; (8021e18 <etharp_query+0x268>)
 8021c64:	4613      	mov	r3, r2
 8021c66:	005b      	lsls	r3, r3, #1
 8021c68:	4413      	add	r3, r2
 8021c6a:	00db      	lsls	r3, r3, #3
 8021c6c:	440b      	add	r3, r1
 8021c6e:	3308      	adds	r3, #8
 8021c70:	68fa      	ldr	r2, [r7, #12]
 8021c72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8021c74:	7c7a      	ldrb	r2, [r7, #17]
 8021c76:	4968      	ldr	r1, [pc, #416]	; (8021e18 <etharp_query+0x268>)
 8021c78:	4613      	mov	r3, r2
 8021c7a:	005b      	lsls	r3, r3, #1
 8021c7c:	4413      	add	r3, r2
 8021c7e:	00db      	lsls	r3, r3, #3
 8021c80:	440b      	add	r3, r1
 8021c82:	3314      	adds	r3, #20
 8021c84:	781b      	ldrb	r3, [r3, #0]
 8021c86:	2b01      	cmp	r3, #1
 8021c88:	d011      	beq.n	8021cae <etharp_query+0xfe>
 8021c8a:	7c7a      	ldrb	r2, [r7, #17]
 8021c8c:	4962      	ldr	r1, [pc, #392]	; (8021e18 <etharp_query+0x268>)
 8021c8e:	4613      	mov	r3, r2
 8021c90:	005b      	lsls	r3, r3, #1
 8021c92:	4413      	add	r3, r2
 8021c94:	00db      	lsls	r3, r3, #3
 8021c96:	440b      	add	r3, r1
 8021c98:	3314      	adds	r3, #20
 8021c9a:	781b      	ldrb	r3, [r3, #0]
 8021c9c:	2b01      	cmp	r3, #1
 8021c9e:	d806      	bhi.n	8021cae <etharp_query+0xfe>
 8021ca0:	4b5a      	ldr	r3, [pc, #360]	; (8021e0c <etharp_query+0x25c>)
 8021ca2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8021ca6:	495d      	ldr	r1, [pc, #372]	; (8021e1c <etharp_query+0x26c>)
 8021ca8:	485a      	ldr	r0, [pc, #360]	; (8021e14 <etharp_query+0x264>)
 8021caa:	f002 fd79 	bl	80247a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8021cae:	6a3b      	ldr	r3, [r7, #32]
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d102      	bne.n	8021cba <etharp_query+0x10a>
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d10c      	bne.n	8021cd4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8021cba:	68b9      	ldr	r1, [r7, #8]
 8021cbc:	68f8      	ldr	r0, [r7, #12]
 8021cbe:	f000 f963 	bl	8021f88 <etharp_request>
 8021cc2:	4603      	mov	r3, r0
 8021cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	2b00      	cmp	r3, #0
 8021ccc:	d102      	bne.n	8021cd4 <etharp_query+0x124>
      return result;
 8021cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8021cd2:	e097      	b.n	8021e04 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	d106      	bne.n	8021ce8 <etharp_query+0x138>
 8021cda:	4b4c      	ldr	r3, [pc, #304]	; (8021e0c <etharp_query+0x25c>)
 8021cdc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8021ce0:	494f      	ldr	r1, [pc, #316]	; (8021e20 <etharp_query+0x270>)
 8021ce2:	484c      	ldr	r0, [pc, #304]	; (8021e14 <etharp_query+0x264>)
 8021ce4:	f002 fd5c 	bl	80247a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021ce8:	7c7a      	ldrb	r2, [r7, #17]
 8021cea:	494b      	ldr	r1, [pc, #300]	; (8021e18 <etharp_query+0x268>)
 8021cec:	4613      	mov	r3, r2
 8021cee:	005b      	lsls	r3, r3, #1
 8021cf0:	4413      	add	r3, r2
 8021cf2:	00db      	lsls	r3, r3, #3
 8021cf4:	440b      	add	r3, r1
 8021cf6:	3314      	adds	r3, #20
 8021cf8:	781b      	ldrb	r3, [r3, #0]
 8021cfa:	2b01      	cmp	r3, #1
 8021cfc:	d918      	bls.n	8021d30 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8021cfe:	4a49      	ldr	r2, [pc, #292]	; (8021e24 <etharp_query+0x274>)
 8021d00:	7c7b      	ldrb	r3, [r7, #17]
 8021d02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021d04:	7c7a      	ldrb	r2, [r7, #17]
 8021d06:	4613      	mov	r3, r2
 8021d08:	005b      	lsls	r3, r3, #1
 8021d0a:	4413      	add	r3, r2
 8021d0c:	00db      	lsls	r3, r3, #3
 8021d0e:	3308      	adds	r3, #8
 8021d10:	4a41      	ldr	r2, [pc, #260]	; (8021e18 <etharp_query+0x268>)
 8021d12:	4413      	add	r3, r2
 8021d14:	1d1a      	adds	r2, r3, #4
 8021d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021d1a:	9300      	str	r3, [sp, #0]
 8021d1c:	4613      	mov	r3, r2
 8021d1e:	697a      	ldr	r2, [r7, #20]
 8021d20:	6879      	ldr	r1, [r7, #4]
 8021d22:	68f8      	ldr	r0, [r7, #12]
 8021d24:	f001 fd18 	bl	8023758 <ethernet_output>
 8021d28:	4603      	mov	r3, r0
 8021d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021d2e:	e067      	b.n	8021e00 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021d30:	7c7a      	ldrb	r2, [r7, #17]
 8021d32:	4939      	ldr	r1, [pc, #228]	; (8021e18 <etharp_query+0x268>)
 8021d34:	4613      	mov	r3, r2
 8021d36:	005b      	lsls	r3, r3, #1
 8021d38:	4413      	add	r3, r2
 8021d3a:	00db      	lsls	r3, r3, #3
 8021d3c:	440b      	add	r3, r1
 8021d3e:	3314      	adds	r3, #20
 8021d40:	781b      	ldrb	r3, [r3, #0]
 8021d42:	2b01      	cmp	r3, #1
 8021d44:	d15c      	bne.n	8021e00 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8021d46:	2300      	movs	r3, #0
 8021d48:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8021d4e:	e01c      	b.n	8021d8a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8021d50:	69fb      	ldr	r3, [r7, #28]
 8021d52:	895a      	ldrh	r2, [r3, #10]
 8021d54:	69fb      	ldr	r3, [r7, #28]
 8021d56:	891b      	ldrh	r3, [r3, #8]
 8021d58:	429a      	cmp	r2, r3
 8021d5a:	d10a      	bne.n	8021d72 <etharp_query+0x1c2>
 8021d5c:	69fb      	ldr	r3, [r7, #28]
 8021d5e:	681b      	ldr	r3, [r3, #0]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d006      	beq.n	8021d72 <etharp_query+0x1c2>
 8021d64:	4b29      	ldr	r3, [pc, #164]	; (8021e0c <etharp_query+0x25c>)
 8021d66:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8021d6a:	492f      	ldr	r1, [pc, #188]	; (8021e28 <etharp_query+0x278>)
 8021d6c:	4829      	ldr	r0, [pc, #164]	; (8021e14 <etharp_query+0x264>)
 8021d6e:	f002 fd17 	bl	80247a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8021d72:	69fb      	ldr	r3, [r7, #28]
 8021d74:	7b1b      	ldrb	r3, [r3, #12]
 8021d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d002      	beq.n	8021d84 <etharp_query+0x1d4>
        copy_needed = 1;
 8021d7e:	2301      	movs	r3, #1
 8021d80:	61bb      	str	r3, [r7, #24]
        break;
 8021d82:	e005      	b.n	8021d90 <etharp_query+0x1e0>
      }
      p = p->next;
 8021d84:	69fb      	ldr	r3, [r7, #28]
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	61fb      	str	r3, [r7, #28]
    while (p) {
 8021d8a:	69fb      	ldr	r3, [r7, #28]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d1df      	bne.n	8021d50 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8021d90:	69bb      	ldr	r3, [r7, #24]
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	d007      	beq.n	8021da6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8021d96:	687a      	ldr	r2, [r7, #4]
 8021d98:	f44f 7120 	mov.w	r1, #640	; 0x280
 8021d9c:	200e      	movs	r0, #14
 8021d9e:	f7f6 fc19 	bl	80185d4 <pbuf_clone>
 8021da2:	61f8      	str	r0, [r7, #28]
 8021da4:	e004      	b.n	8021db0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8021daa:	69f8      	ldr	r0, [r7, #28]
 8021dac:	f7f6 fa40 	bl	8018230 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8021db0:	69fb      	ldr	r3, [r7, #28]
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	d021      	beq.n	8021dfa <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8021db6:	7c7a      	ldrb	r2, [r7, #17]
 8021db8:	4917      	ldr	r1, [pc, #92]	; (8021e18 <etharp_query+0x268>)
 8021dba:	4613      	mov	r3, r2
 8021dbc:	005b      	lsls	r3, r3, #1
 8021dbe:	4413      	add	r3, r2
 8021dc0:	00db      	lsls	r3, r3, #3
 8021dc2:	440b      	add	r3, r1
 8021dc4:	681b      	ldr	r3, [r3, #0]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d00a      	beq.n	8021de0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8021dca:	7c7a      	ldrb	r2, [r7, #17]
 8021dcc:	4912      	ldr	r1, [pc, #72]	; (8021e18 <etharp_query+0x268>)
 8021dce:	4613      	mov	r3, r2
 8021dd0:	005b      	lsls	r3, r3, #1
 8021dd2:	4413      	add	r3, r2
 8021dd4:	00db      	lsls	r3, r3, #3
 8021dd6:	440b      	add	r3, r1
 8021dd8:	681b      	ldr	r3, [r3, #0]
 8021dda:	4618      	mov	r0, r3
 8021ddc:	f7f6 f982 	bl	80180e4 <pbuf_free>
      }
      arp_table[i].q = p;
 8021de0:	7c7a      	ldrb	r2, [r7, #17]
 8021de2:	490d      	ldr	r1, [pc, #52]	; (8021e18 <etharp_query+0x268>)
 8021de4:	4613      	mov	r3, r2
 8021de6:	005b      	lsls	r3, r3, #1
 8021de8:	4413      	add	r3, r2
 8021dea:	00db      	lsls	r3, r3, #3
 8021dec:	440b      	add	r3, r1
 8021dee:	69fa      	ldr	r2, [r7, #28]
 8021df0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8021df2:	2300      	movs	r3, #0
 8021df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021df8:	e002      	b.n	8021e00 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8021dfa:	23ff      	movs	r3, #255	; 0xff
 8021dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8021e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8021e04:	4618      	mov	r0, r3
 8021e06:	3728      	adds	r7, #40	; 0x28
 8021e08:	46bd      	mov	sp, r7
 8021e0a:	bd80      	pop	{r7, pc}
 8021e0c:	0802876c 	.word	0x0802876c
 8021e10:	08028918 	.word	0x08028918
 8021e14:	080287e4 	.word	0x080287e4
 8021e18:	20009010 	.word	0x20009010
 8021e1c:	08028928 	.word	0x08028928
 8021e20:	0802890c 	.word	0x0802890c
 8021e24:	20009100 	.word	0x20009100
 8021e28:	08028950 	.word	0x08028950

08021e2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8021e2c:	b580      	push	{r7, lr}
 8021e2e:	b08a      	sub	sp, #40	; 0x28
 8021e30:	af02      	add	r7, sp, #8
 8021e32:	60f8      	str	r0, [r7, #12]
 8021e34:	60b9      	str	r1, [r7, #8]
 8021e36:	607a      	str	r2, [r7, #4]
 8021e38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021e3e:	68fb      	ldr	r3, [r7, #12]
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d106      	bne.n	8021e52 <etharp_raw+0x26>
 8021e44:	4b3a      	ldr	r3, [pc, #232]	; (8021f30 <etharp_raw+0x104>)
 8021e46:	f240 4257 	movw	r2, #1111	; 0x457
 8021e4a:	493a      	ldr	r1, [pc, #232]	; (8021f34 <etharp_raw+0x108>)
 8021e4c:	483a      	ldr	r0, [pc, #232]	; (8021f38 <etharp_raw+0x10c>)
 8021e4e:	f002 fca7 	bl	80247a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8021e52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021e56:	211c      	movs	r1, #28
 8021e58:	200e      	movs	r0, #14
 8021e5a:	f7f5 fe63 	bl	8017b24 <pbuf_alloc>
 8021e5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8021e60:	69bb      	ldr	r3, [r7, #24]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d102      	bne.n	8021e6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8021e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e6a:	e05d      	b.n	8021f28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021e6c:	69bb      	ldr	r3, [r7, #24]
 8021e6e:	895b      	ldrh	r3, [r3, #10]
 8021e70:	2b1b      	cmp	r3, #27
 8021e72:	d806      	bhi.n	8021e82 <etharp_raw+0x56>
 8021e74:	4b2e      	ldr	r3, [pc, #184]	; (8021f30 <etharp_raw+0x104>)
 8021e76:	f240 4263 	movw	r2, #1123	; 0x463
 8021e7a:	4930      	ldr	r1, [pc, #192]	; (8021f3c <etharp_raw+0x110>)
 8021e7c:	482e      	ldr	r0, [pc, #184]	; (8021f38 <etharp_raw+0x10c>)
 8021e7e:	f002 fc8f 	bl	80247a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8021e82:	69bb      	ldr	r3, [r7, #24]
 8021e84:	685b      	ldr	r3, [r3, #4]
 8021e86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8021e88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	f7f4 fd5c 	bl	8016948 <lwip_htons>
 8021e90:	4603      	mov	r3, r0
 8021e92:	461a      	mov	r2, r3
 8021e94:	697b      	ldr	r3, [r7, #20]
 8021e96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8021e98:	68fb      	ldr	r3, [r7, #12]
 8021e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e9e:	2b06      	cmp	r3, #6
 8021ea0:	d006      	beq.n	8021eb0 <etharp_raw+0x84>
 8021ea2:	4b23      	ldr	r3, [pc, #140]	; (8021f30 <etharp_raw+0x104>)
 8021ea4:	f240 426a 	movw	r2, #1130	; 0x46a
 8021ea8:	4925      	ldr	r1, [pc, #148]	; (8021f40 <etharp_raw+0x114>)
 8021eaa:	4823      	ldr	r0, [pc, #140]	; (8021f38 <etharp_raw+0x10c>)
 8021eac:	f002 fc78 	bl	80247a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021eb0:	697b      	ldr	r3, [r7, #20]
 8021eb2:	3308      	adds	r3, #8
 8021eb4:	2206      	movs	r2, #6
 8021eb6:	6839      	ldr	r1, [r7, #0]
 8021eb8:	4618      	mov	r0, r3
 8021eba:	f002 fbb6 	bl	802462a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8021ebe:	697b      	ldr	r3, [r7, #20]
 8021ec0:	3312      	adds	r3, #18
 8021ec2:	2206      	movs	r2, #6
 8021ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021ec6:	4618      	mov	r0, r3
 8021ec8:	f002 fbaf 	bl	802462a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8021ecc:	697b      	ldr	r3, [r7, #20]
 8021ece:	330e      	adds	r3, #14
 8021ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021ed2:	6812      	ldr	r2, [r2, #0]
 8021ed4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021ed6:	697b      	ldr	r3, [r7, #20]
 8021ed8:	3318      	adds	r3, #24
 8021eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021edc:	6812      	ldr	r2, [r2, #0]
 8021ede:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021ee0:	697b      	ldr	r3, [r7, #20]
 8021ee2:	2200      	movs	r2, #0
 8021ee4:	701a      	strb	r2, [r3, #0]
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	f042 0201 	orr.w	r2, r2, #1
 8021eec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021eee:	697b      	ldr	r3, [r7, #20]
 8021ef0:	2200      	movs	r2, #0
 8021ef2:	f042 0208 	orr.w	r2, r2, #8
 8021ef6:	709a      	strb	r2, [r3, #2]
 8021ef8:	2200      	movs	r2, #0
 8021efa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8021efc:	697b      	ldr	r3, [r7, #20]
 8021efe:	2206      	movs	r2, #6
 8021f00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021f02:	697b      	ldr	r3, [r7, #20]
 8021f04:	2204      	movs	r2, #4
 8021f06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021f08:	f640 0306 	movw	r3, #2054	; 0x806
 8021f0c:	9300      	str	r3, [sp, #0]
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	68ba      	ldr	r2, [r7, #8]
 8021f12:	69b9      	ldr	r1, [r7, #24]
 8021f14:	68f8      	ldr	r0, [r7, #12]
 8021f16:	f001 fc1f 	bl	8023758 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8021f1a:	69b8      	ldr	r0, [r7, #24]
 8021f1c:	f7f6 f8e2 	bl	80180e4 <pbuf_free>
  p = NULL;
 8021f20:	2300      	movs	r3, #0
 8021f22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8021f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021f28:	4618      	mov	r0, r3
 8021f2a:	3720      	adds	r7, #32
 8021f2c:	46bd      	mov	sp, r7
 8021f2e:	bd80      	pop	{r7, pc}
 8021f30:	0802876c 	.word	0x0802876c
 8021f34:	080288bc 	.word	0x080288bc
 8021f38:	080287e4 	.word	0x080287e4
 8021f3c:	0802896c 	.word	0x0802896c
 8021f40:	080289a0 	.word	0x080289a0

08021f44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8021f44:	b580      	push	{r7, lr}
 8021f46:	b088      	sub	sp, #32
 8021f48:	af04      	add	r7, sp, #16
 8021f4a:	60f8      	str	r0, [r7, #12]
 8021f4c:	60b9      	str	r1, [r7, #8]
 8021f4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8021f5c:	68fb      	ldr	r3, [r7, #12]
 8021f5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f60:	2201      	movs	r2, #1
 8021f62:	9203      	str	r2, [sp, #12]
 8021f64:	68ba      	ldr	r2, [r7, #8]
 8021f66:	9202      	str	r2, [sp, #8]
 8021f68:	4a06      	ldr	r2, [pc, #24]	; (8021f84 <etharp_request_dst+0x40>)
 8021f6a:	9201      	str	r2, [sp, #4]
 8021f6c:	9300      	str	r3, [sp, #0]
 8021f6e:	4603      	mov	r3, r0
 8021f70:	687a      	ldr	r2, [r7, #4]
 8021f72:	68f8      	ldr	r0, [r7, #12]
 8021f74:	f7ff ff5a 	bl	8021e2c <etharp_raw>
 8021f78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8021f7a:	4618      	mov	r0, r3
 8021f7c:	3710      	adds	r7, #16
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	bd80      	pop	{r7, pc}
 8021f82:	bf00      	nop
 8021f84:	08028ff0 	.word	0x08028ff0

08021f88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8021f88:	b580      	push	{r7, lr}
 8021f8a:	b082      	sub	sp, #8
 8021f8c:	af00      	add	r7, sp, #0
 8021f8e:	6078      	str	r0, [r7, #4]
 8021f90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8021f92:	4a05      	ldr	r2, [pc, #20]	; (8021fa8 <etharp_request+0x20>)
 8021f94:	6839      	ldr	r1, [r7, #0]
 8021f96:	6878      	ldr	r0, [r7, #4]
 8021f98:	f7ff ffd4 	bl	8021f44 <etharp_request_dst>
 8021f9c:	4603      	mov	r3, r0
}
 8021f9e:	4618      	mov	r0, r3
 8021fa0:	3708      	adds	r7, #8
 8021fa2:	46bd      	mov	sp, r7
 8021fa4:	bd80      	pop	{r7, pc}
 8021fa6:	bf00      	nop
 8021fa8:	08028fe8 	.word	0x08028fe8

08021fac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8021fac:	b580      	push	{r7, lr}
 8021fae:	b08e      	sub	sp, #56	; 0x38
 8021fb0:	af04      	add	r7, sp, #16
 8021fb2:	6078      	str	r0, [r7, #4]
 8021fb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8021fb6:	4b79      	ldr	r3, [pc, #484]	; (802219c <icmp_input+0x1f0>)
 8021fb8:	689b      	ldr	r3, [r3, #8]
 8021fba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8021fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fbe:	781b      	ldrb	r3, [r3, #0]
 8021fc0:	f003 030f 	and.w	r3, r3, #15
 8021fc4:	b2db      	uxtb	r3, r3
 8021fc6:	009b      	lsls	r3, r3, #2
 8021fc8:	b2db      	uxtb	r3, r3
 8021fca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8021fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021fce:	2b13      	cmp	r3, #19
 8021fd0:	f240 80cd 	bls.w	802216e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	895b      	ldrh	r3, [r3, #10]
 8021fd8:	2b03      	cmp	r3, #3
 8021fda:	f240 80ca 	bls.w	8022172 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	685b      	ldr	r3, [r3, #4]
 8021fe2:	781b      	ldrb	r3, [r3, #0]
 8021fe4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8021fe8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8021fec:	2b00      	cmp	r3, #0
 8021fee:	f000 80b7 	beq.w	8022160 <icmp_input+0x1b4>
 8021ff2:	2b08      	cmp	r3, #8
 8021ff4:	f040 80b7 	bne.w	8022166 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8021ff8:	4b69      	ldr	r3, [pc, #420]	; (80221a0 <icmp_input+0x1f4>)
 8021ffa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021ffc:	4b67      	ldr	r3, [pc, #412]	; (802219c <icmp_input+0x1f0>)
 8021ffe:	695b      	ldr	r3, [r3, #20]
 8022000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022004:	2be0      	cmp	r3, #224	; 0xe0
 8022006:	f000 80bb 	beq.w	8022180 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802200a:	4b64      	ldr	r3, [pc, #400]	; (802219c <icmp_input+0x1f0>)
 802200c:	695a      	ldr	r2, [r3, #20]
 802200e:	4b63      	ldr	r3, [pc, #396]	; (802219c <icmp_input+0x1f0>)
 8022010:	681b      	ldr	r3, [r3, #0]
 8022012:	4619      	mov	r1, r3
 8022014:	4610      	mov	r0, r2
 8022016:	f000 fc09 	bl	802282c <ip4_addr_isbroadcast_u32>
 802201a:	4603      	mov	r3, r0
 802201c:	2b00      	cmp	r3, #0
 802201e:	f040 80b1 	bne.w	8022184 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	891b      	ldrh	r3, [r3, #8]
 8022026:	2b07      	cmp	r3, #7
 8022028:	f240 80a5 	bls.w	8022176 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802202c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802202e:	330e      	adds	r3, #14
 8022030:	4619      	mov	r1, r3
 8022032:	6878      	ldr	r0, [r7, #4]
 8022034:	f7f5 ffc0 	bl	8017fb8 <pbuf_add_header>
 8022038:	4603      	mov	r3, r0
 802203a:	2b00      	cmp	r3, #0
 802203c:	d04b      	beq.n	80220d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802203e:	687b      	ldr	r3, [r7, #4]
 8022040:	891a      	ldrh	r2, [r3, #8]
 8022042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022044:	4413      	add	r3, r2
 8022046:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8022048:	687b      	ldr	r3, [r7, #4]
 802204a:	891b      	ldrh	r3, [r3, #8]
 802204c:	8b7a      	ldrh	r2, [r7, #26]
 802204e:	429a      	cmp	r2, r3
 8022050:	f0c0 809a 	bcc.w	8022188 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022054:	8b7b      	ldrh	r3, [r7, #26]
 8022056:	f44f 7220 	mov.w	r2, #640	; 0x280
 802205a:	4619      	mov	r1, r3
 802205c:	200e      	movs	r0, #14
 802205e:	f7f5 fd61 	bl	8017b24 <pbuf_alloc>
 8022062:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8022064:	697b      	ldr	r3, [r7, #20]
 8022066:	2b00      	cmp	r3, #0
 8022068:	f000 8090 	beq.w	802218c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 802206c:	697b      	ldr	r3, [r7, #20]
 802206e:	895b      	ldrh	r3, [r3, #10]
 8022070:	461a      	mov	r2, r3
 8022072:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022074:	3308      	adds	r3, #8
 8022076:	429a      	cmp	r2, r3
 8022078:	d203      	bcs.n	8022082 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802207a:	6978      	ldr	r0, [r7, #20]
 802207c:	f7f6 f832 	bl	80180e4 <pbuf_free>
          goto icmperr;
 8022080:	e085      	b.n	802218e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8022082:	697b      	ldr	r3, [r7, #20]
 8022084:	685b      	ldr	r3, [r3, #4]
 8022086:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802208a:	4618      	mov	r0, r3
 802208c:	f002 facd 	bl	802462a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8022090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022092:	4619      	mov	r1, r3
 8022094:	6978      	ldr	r0, [r7, #20]
 8022096:	f7f5 ff9f 	bl	8017fd8 <pbuf_remove_header>
 802209a:	4603      	mov	r3, r0
 802209c:	2b00      	cmp	r3, #0
 802209e:	d009      	beq.n	80220b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80220a0:	4b40      	ldr	r3, [pc, #256]	; (80221a4 <icmp_input+0x1f8>)
 80220a2:	22b6      	movs	r2, #182	; 0xb6
 80220a4:	4940      	ldr	r1, [pc, #256]	; (80221a8 <icmp_input+0x1fc>)
 80220a6:	4841      	ldr	r0, [pc, #260]	; (80221ac <icmp_input+0x200>)
 80220a8:	f002 fb7a 	bl	80247a0 <iprintf>
          pbuf_free(r);
 80220ac:	6978      	ldr	r0, [r7, #20]
 80220ae:	f7f6 f819 	bl	80180e4 <pbuf_free>
          goto icmperr;
 80220b2:	e06c      	b.n	802218e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80220b4:	6879      	ldr	r1, [r7, #4]
 80220b6:	6978      	ldr	r0, [r7, #20]
 80220b8:	f7f6 f948 	bl	801834c <pbuf_copy>
 80220bc:	4603      	mov	r3, r0
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d003      	beq.n	80220ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80220c2:	6978      	ldr	r0, [r7, #20]
 80220c4:	f7f6 f80e 	bl	80180e4 <pbuf_free>
          goto icmperr;
 80220c8:	e061      	b.n	802218e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80220ca:	6878      	ldr	r0, [r7, #4]
 80220cc:	f7f6 f80a 	bl	80180e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80220d0:	697b      	ldr	r3, [r7, #20]
 80220d2:	607b      	str	r3, [r7, #4]
 80220d4:	e00f      	b.n	80220f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80220d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80220d8:	330e      	adds	r3, #14
 80220da:	4619      	mov	r1, r3
 80220dc:	6878      	ldr	r0, [r7, #4]
 80220de:	f7f5 ff7b 	bl	8017fd8 <pbuf_remove_header>
 80220e2:	4603      	mov	r3, r0
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	d006      	beq.n	80220f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80220e8:	4b2e      	ldr	r3, [pc, #184]	; (80221a4 <icmp_input+0x1f8>)
 80220ea:	22c7      	movs	r2, #199	; 0xc7
 80220ec:	4930      	ldr	r1, [pc, #192]	; (80221b0 <icmp_input+0x204>)
 80220ee:	482f      	ldr	r0, [pc, #188]	; (80221ac <icmp_input+0x200>)
 80220f0:	f002 fb56 	bl	80247a0 <iprintf>
          goto icmperr;
 80220f4:	e04b      	b.n	802218e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	685b      	ldr	r3, [r3, #4]
 80220fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80220fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80220fe:	4619      	mov	r1, r3
 8022100:	6878      	ldr	r0, [r7, #4]
 8022102:	f7f5 ff59 	bl	8017fb8 <pbuf_add_header>
 8022106:	4603      	mov	r3, r0
 8022108:	2b00      	cmp	r3, #0
 802210a:	d12b      	bne.n	8022164 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	685b      	ldr	r3, [r3, #4]
 8022110:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8022112:	69fb      	ldr	r3, [r7, #28]
 8022114:	681a      	ldr	r2, [r3, #0]
 8022116:	68fb      	ldr	r3, [r7, #12]
 8022118:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802211a:	4b20      	ldr	r3, [pc, #128]	; (802219c <icmp_input+0x1f0>)
 802211c:	691a      	ldr	r2, [r3, #16]
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8022122:	693b      	ldr	r3, [r7, #16]
 8022124:	2200      	movs	r2, #0
 8022126:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8022128:	693b      	ldr	r3, [r7, #16]
 802212a:	2200      	movs	r2, #0
 802212c:	709a      	strb	r2, [r3, #2]
 802212e:	2200      	movs	r2, #0
 8022130:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022132:	68fb      	ldr	r3, [r7, #12]
 8022134:	22ff      	movs	r2, #255	; 0xff
 8022136:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	2200      	movs	r2, #0
 802213c:	729a      	strb	r2, [r3, #10]
 802213e:	2200      	movs	r2, #0
 8022140:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022142:	683b      	ldr	r3, [r7, #0]
 8022144:	9302      	str	r3, [sp, #8]
 8022146:	2301      	movs	r3, #1
 8022148:	9301      	str	r3, [sp, #4]
 802214a:	2300      	movs	r3, #0
 802214c:	9300      	str	r3, [sp, #0]
 802214e:	23ff      	movs	r3, #255	; 0xff
 8022150:	2200      	movs	r2, #0
 8022152:	69f9      	ldr	r1, [r7, #28]
 8022154:	6878      	ldr	r0, [r7, #4]
 8022156:	f000 fa91 	bl	802267c <ip4_output_if>
 802215a:	4603      	mov	r3, r0
 802215c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802215e:	e001      	b.n	8022164 <icmp_input+0x1b8>
      break;
 8022160:	bf00      	nop
 8022162:	e000      	b.n	8022166 <icmp_input+0x1ba>
      break;
 8022164:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8022166:	6878      	ldr	r0, [r7, #4]
 8022168:	f7f5 ffbc 	bl	80180e4 <pbuf_free>
  return;
 802216c:	e013      	b.n	8022196 <icmp_input+0x1ea>
    goto lenerr;
 802216e:	bf00      	nop
 8022170:	e002      	b.n	8022178 <icmp_input+0x1cc>
    goto lenerr;
 8022172:	bf00      	nop
 8022174:	e000      	b.n	8022178 <icmp_input+0x1cc>
        goto lenerr;
 8022176:	bf00      	nop
lenerr:
  pbuf_free(p);
 8022178:	6878      	ldr	r0, [r7, #4]
 802217a:	f7f5 ffb3 	bl	80180e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802217e:	e00a      	b.n	8022196 <icmp_input+0x1ea>
        goto icmperr;
 8022180:	bf00      	nop
 8022182:	e004      	b.n	802218e <icmp_input+0x1e2>
        goto icmperr;
 8022184:	bf00      	nop
 8022186:	e002      	b.n	802218e <icmp_input+0x1e2>
          goto icmperr;
 8022188:	bf00      	nop
 802218a:	e000      	b.n	802218e <icmp_input+0x1e2>
          goto icmperr;
 802218c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802218e:	6878      	ldr	r0, [r7, #4]
 8022190:	f7f5 ffa8 	bl	80180e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8022194:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8022196:	3728      	adds	r7, #40	; 0x28
 8022198:	46bd      	mov	sp, r7
 802219a:	bd80      	pop	{r7, pc}
 802219c:	2000cc8c 	.word	0x2000cc8c
 80221a0:	2000cca0 	.word	0x2000cca0
 80221a4:	080289e4 	.word	0x080289e4
 80221a8:	08028a1c 	.word	0x08028a1c
 80221ac:	08028a54 	.word	0x08028a54
 80221b0:	08028a7c 	.word	0x08028a7c

080221b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	b082      	sub	sp, #8
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
 80221bc:	460b      	mov	r3, r1
 80221be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80221c0:	78fb      	ldrb	r3, [r7, #3]
 80221c2:	461a      	mov	r2, r3
 80221c4:	2103      	movs	r1, #3
 80221c6:	6878      	ldr	r0, [r7, #4]
 80221c8:	f000 f814 	bl	80221f4 <icmp_send_response>
}
 80221cc:	bf00      	nop
 80221ce:	3708      	adds	r7, #8
 80221d0:	46bd      	mov	sp, r7
 80221d2:	bd80      	pop	{r7, pc}

080221d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80221d4:	b580      	push	{r7, lr}
 80221d6:	b082      	sub	sp, #8
 80221d8:	af00      	add	r7, sp, #0
 80221da:	6078      	str	r0, [r7, #4]
 80221dc:	460b      	mov	r3, r1
 80221de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80221e0:	78fb      	ldrb	r3, [r7, #3]
 80221e2:	461a      	mov	r2, r3
 80221e4:	210b      	movs	r1, #11
 80221e6:	6878      	ldr	r0, [r7, #4]
 80221e8:	f000 f804 	bl	80221f4 <icmp_send_response>
}
 80221ec:	bf00      	nop
 80221ee:	3708      	adds	r7, #8
 80221f0:	46bd      	mov	sp, r7
 80221f2:	bd80      	pop	{r7, pc}

080221f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80221f4:	b580      	push	{r7, lr}
 80221f6:	b08c      	sub	sp, #48	; 0x30
 80221f8:	af04      	add	r7, sp, #16
 80221fa:	6078      	str	r0, [r7, #4]
 80221fc:	460b      	mov	r3, r1
 80221fe:	70fb      	strb	r3, [r7, #3]
 8022200:	4613      	mov	r3, r2
 8022202:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8022204:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022208:	2124      	movs	r1, #36	; 0x24
 802220a:	2022      	movs	r0, #34	; 0x22
 802220c:	f7f5 fc8a 	bl	8017b24 <pbuf_alloc>
 8022210:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8022212:	69fb      	ldr	r3, [r7, #28]
 8022214:	2b00      	cmp	r3, #0
 8022216:	d04c      	beq.n	80222b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8022218:	69fb      	ldr	r3, [r7, #28]
 802221a:	895b      	ldrh	r3, [r3, #10]
 802221c:	2b23      	cmp	r3, #35	; 0x23
 802221e:	d806      	bhi.n	802222e <icmp_send_response+0x3a>
 8022220:	4b26      	ldr	r3, [pc, #152]	; (80222bc <icmp_send_response+0xc8>)
 8022222:	f240 1269 	movw	r2, #361	; 0x169
 8022226:	4926      	ldr	r1, [pc, #152]	; (80222c0 <icmp_send_response+0xcc>)
 8022228:	4826      	ldr	r0, [pc, #152]	; (80222c4 <icmp_send_response+0xd0>)
 802222a:	f002 fab9 	bl	80247a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	685b      	ldr	r3, [r3, #4]
 8022232:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8022234:	69fb      	ldr	r3, [r7, #28]
 8022236:	685b      	ldr	r3, [r3, #4]
 8022238:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802223a:	697b      	ldr	r3, [r7, #20]
 802223c:	78fa      	ldrb	r2, [r7, #3]
 802223e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8022240:	697b      	ldr	r3, [r7, #20]
 8022242:	78ba      	ldrb	r2, [r7, #2]
 8022244:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8022246:	697b      	ldr	r3, [r7, #20]
 8022248:	2200      	movs	r2, #0
 802224a:	711a      	strb	r2, [r3, #4]
 802224c:	2200      	movs	r2, #0
 802224e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8022250:	697b      	ldr	r3, [r7, #20]
 8022252:	2200      	movs	r2, #0
 8022254:	719a      	strb	r2, [r3, #6]
 8022256:	2200      	movs	r2, #0
 8022258:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802225a:	69fb      	ldr	r3, [r7, #28]
 802225c:	685b      	ldr	r3, [r3, #4]
 802225e:	f103 0008 	add.w	r0, r3, #8
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	685b      	ldr	r3, [r3, #4]
 8022266:	221c      	movs	r2, #28
 8022268:	4619      	mov	r1, r3
 802226a:	f002 f9de 	bl	802462a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802226e:	69bb      	ldr	r3, [r7, #24]
 8022270:	68db      	ldr	r3, [r3, #12]
 8022272:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8022274:	f107 030c 	add.w	r3, r7, #12
 8022278:	4618      	mov	r0, r3
 802227a:	f000 f825 	bl	80222c8 <ip4_route>
 802227e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8022280:	693b      	ldr	r3, [r7, #16]
 8022282:	2b00      	cmp	r3, #0
 8022284:	d011      	beq.n	80222aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8022286:	697b      	ldr	r3, [r7, #20]
 8022288:	2200      	movs	r2, #0
 802228a:	709a      	strb	r2, [r3, #2]
 802228c:	2200      	movs	r2, #0
 802228e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8022290:	f107 020c 	add.w	r2, r7, #12
 8022294:	693b      	ldr	r3, [r7, #16]
 8022296:	9302      	str	r3, [sp, #8]
 8022298:	2301      	movs	r3, #1
 802229a:	9301      	str	r3, [sp, #4]
 802229c:	2300      	movs	r3, #0
 802229e:	9300      	str	r3, [sp, #0]
 80222a0:	23ff      	movs	r3, #255	; 0xff
 80222a2:	2100      	movs	r1, #0
 80222a4:	69f8      	ldr	r0, [r7, #28]
 80222a6:	f000 f9e9 	bl	802267c <ip4_output_if>
  }
  pbuf_free(q);
 80222aa:	69f8      	ldr	r0, [r7, #28]
 80222ac:	f7f5 ff1a 	bl	80180e4 <pbuf_free>
 80222b0:	e000      	b.n	80222b4 <icmp_send_response+0xc0>
    return;
 80222b2:	bf00      	nop
}
 80222b4:	3720      	adds	r7, #32
 80222b6:	46bd      	mov	sp, r7
 80222b8:	bd80      	pop	{r7, pc}
 80222ba:	bf00      	nop
 80222bc:	080289e4 	.word	0x080289e4
 80222c0:	08028ab0 	.word	0x08028ab0
 80222c4:	08028a54 	.word	0x08028a54

080222c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80222c8:	b480      	push	{r7}
 80222ca:	b085      	sub	sp, #20
 80222cc:	af00      	add	r7, sp, #0
 80222ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80222d0:	4b33      	ldr	r3, [pc, #204]	; (80223a0 <ip4_route+0xd8>)
 80222d2:	681b      	ldr	r3, [r3, #0]
 80222d4:	60fb      	str	r3, [r7, #12]
 80222d6:	e036      	b.n	8022346 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80222de:	f003 0301 	and.w	r3, r3, #1
 80222e2:	b2db      	uxtb	r3, r3
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	d02b      	beq.n	8022340 <ip4_route+0x78>
 80222e8:	68fb      	ldr	r3, [r7, #12]
 80222ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80222ee:	089b      	lsrs	r3, r3, #2
 80222f0:	f003 0301 	and.w	r3, r3, #1
 80222f4:	b2db      	uxtb	r3, r3
 80222f6:	2b00      	cmp	r3, #0
 80222f8:	d022      	beq.n	8022340 <ip4_route+0x78>
 80222fa:	68fb      	ldr	r3, [r7, #12]
 80222fc:	3304      	adds	r3, #4
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	2b00      	cmp	r3, #0
 8022302:	d01d      	beq.n	8022340 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	681a      	ldr	r2, [r3, #0]
 8022308:	68fb      	ldr	r3, [r7, #12]
 802230a:	3304      	adds	r3, #4
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	405a      	eors	r2, r3
 8022310:	68fb      	ldr	r3, [r7, #12]
 8022312:	3308      	adds	r3, #8
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	4013      	ands	r3, r2
 8022318:	2b00      	cmp	r3, #0
 802231a:	d101      	bne.n	8022320 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	e038      	b.n	8022392 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022320:	68fb      	ldr	r3, [r7, #12]
 8022322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022326:	f003 0302 	and.w	r3, r3, #2
 802232a:	2b00      	cmp	r3, #0
 802232c:	d108      	bne.n	8022340 <ip4_route+0x78>
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	681a      	ldr	r2, [r3, #0]
 8022332:	68fb      	ldr	r3, [r7, #12]
 8022334:	330c      	adds	r3, #12
 8022336:	681b      	ldr	r3, [r3, #0]
 8022338:	429a      	cmp	r2, r3
 802233a:	d101      	bne.n	8022340 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802233c:	68fb      	ldr	r3, [r7, #12]
 802233e:	e028      	b.n	8022392 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8022340:	68fb      	ldr	r3, [r7, #12]
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	60fb      	str	r3, [r7, #12]
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	2b00      	cmp	r3, #0
 802234a:	d1c5      	bne.n	80222d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802234c:	4b15      	ldr	r3, [pc, #84]	; (80223a4 <ip4_route+0xdc>)
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	2b00      	cmp	r3, #0
 8022352:	d01a      	beq.n	802238a <ip4_route+0xc2>
 8022354:	4b13      	ldr	r3, [pc, #76]	; (80223a4 <ip4_route+0xdc>)
 8022356:	681b      	ldr	r3, [r3, #0]
 8022358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802235c:	f003 0301 	and.w	r3, r3, #1
 8022360:	2b00      	cmp	r3, #0
 8022362:	d012      	beq.n	802238a <ip4_route+0xc2>
 8022364:	4b0f      	ldr	r3, [pc, #60]	; (80223a4 <ip4_route+0xdc>)
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802236c:	f003 0304 	and.w	r3, r3, #4
 8022370:	2b00      	cmp	r3, #0
 8022372:	d00a      	beq.n	802238a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022374:	4b0b      	ldr	r3, [pc, #44]	; (80223a4 <ip4_route+0xdc>)
 8022376:	681b      	ldr	r3, [r3, #0]
 8022378:	3304      	adds	r3, #4
 802237a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802237c:	2b00      	cmp	r3, #0
 802237e:	d004      	beq.n	802238a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	681b      	ldr	r3, [r3, #0]
 8022384:	b2db      	uxtb	r3, r3
 8022386:	2b7f      	cmp	r3, #127	; 0x7f
 8022388:	d101      	bne.n	802238e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802238a:	2300      	movs	r3, #0
 802238c:	e001      	b.n	8022392 <ip4_route+0xca>
  }

  return netif_default;
 802238e:	4b05      	ldr	r3, [pc, #20]	; (80223a4 <ip4_route+0xdc>)
 8022390:	681b      	ldr	r3, [r3, #0]
}
 8022392:	4618      	mov	r0, r3
 8022394:	3714      	adds	r7, #20
 8022396:	46bd      	mov	sp, r7
 8022398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239c:	4770      	bx	lr
 802239e:	bf00      	nop
 80223a0:	200103b0 	.word	0x200103b0
 80223a4:	200103b4 	.word	0x200103b4

080223a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80223a8:	b580      	push	{r7, lr}
 80223aa:	b082      	sub	sp, #8
 80223ac:	af00      	add	r7, sp, #0
 80223ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80223b6:	f003 0301 	and.w	r3, r3, #1
 80223ba:	b2db      	uxtb	r3, r3
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d016      	beq.n	80223ee <ip4_input_accept+0x46>
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	3304      	adds	r3, #4
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	d011      	beq.n	80223ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80223ca:	4b0b      	ldr	r3, [pc, #44]	; (80223f8 <ip4_input_accept+0x50>)
 80223cc:	695a      	ldr	r2, [r3, #20]
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	3304      	adds	r3, #4
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	429a      	cmp	r2, r3
 80223d6:	d008      	beq.n	80223ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80223d8:	4b07      	ldr	r3, [pc, #28]	; (80223f8 <ip4_input_accept+0x50>)
 80223da:	695b      	ldr	r3, [r3, #20]
 80223dc:	6879      	ldr	r1, [r7, #4]
 80223de:	4618      	mov	r0, r3
 80223e0:	f000 fa24 	bl	802282c <ip4_addr_isbroadcast_u32>
 80223e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d001      	beq.n	80223ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80223ea:	2301      	movs	r3, #1
 80223ec:	e000      	b.n	80223f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80223ee:	2300      	movs	r3, #0
}
 80223f0:	4618      	mov	r0, r3
 80223f2:	3708      	adds	r7, #8
 80223f4:	46bd      	mov	sp, r7
 80223f6:	bd80      	pop	{r7, pc}
 80223f8:	2000cc8c 	.word	0x2000cc8c

080223fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80223fc:	b580      	push	{r7, lr}
 80223fe:	b088      	sub	sp, #32
 8022400:	af00      	add	r7, sp, #0
 8022402:	6078      	str	r0, [r7, #4]
 8022404:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8022406:	2301      	movs	r3, #1
 8022408:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	685b      	ldr	r3, [r3, #4]
 802240e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8022410:	69fb      	ldr	r3, [r7, #28]
 8022412:	781b      	ldrb	r3, [r3, #0]
 8022414:	091b      	lsrs	r3, r3, #4
 8022416:	b2db      	uxtb	r3, r3
 8022418:	2b04      	cmp	r3, #4
 802241a:	d004      	beq.n	8022426 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 802241c:	6878      	ldr	r0, [r7, #4]
 802241e:	f7f5 fe61 	bl	80180e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8022422:	2300      	movs	r3, #0
 8022424:	e121      	b.n	802266a <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022426:	69fb      	ldr	r3, [r7, #28]
 8022428:	781b      	ldrb	r3, [r3, #0]
 802242a:	f003 030f 	and.w	r3, r3, #15
 802242e:	b2db      	uxtb	r3, r3
 8022430:	009b      	lsls	r3, r3, #2
 8022432:	b2db      	uxtb	r3, r3
 8022434:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022436:	69fb      	ldr	r3, [r7, #28]
 8022438:	885b      	ldrh	r3, [r3, #2]
 802243a:	b29b      	uxth	r3, r3
 802243c:	4618      	mov	r0, r3
 802243e:	f7f4 fa83 	bl	8016948 <lwip_htons>
 8022442:	4603      	mov	r3, r0
 8022444:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	891b      	ldrh	r3, [r3, #8]
 802244a:	8a3a      	ldrh	r2, [r7, #16]
 802244c:	429a      	cmp	r2, r3
 802244e:	d204      	bcs.n	802245a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8022450:	8a3b      	ldrh	r3, [r7, #16]
 8022452:	4619      	mov	r1, r3
 8022454:	6878      	ldr	r0, [r7, #4]
 8022456:	f7f5 fcbf 	bl	8017dd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	895b      	ldrh	r3, [r3, #10]
 802245e:	8a7a      	ldrh	r2, [r7, #18]
 8022460:	429a      	cmp	r2, r3
 8022462:	d807      	bhi.n	8022474 <ip4_input+0x78>
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	891b      	ldrh	r3, [r3, #8]
 8022468:	8a3a      	ldrh	r2, [r7, #16]
 802246a:	429a      	cmp	r2, r3
 802246c:	d802      	bhi.n	8022474 <ip4_input+0x78>
 802246e:	8a7b      	ldrh	r3, [r7, #18]
 8022470:	2b13      	cmp	r3, #19
 8022472:	d804      	bhi.n	802247e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8022474:	6878      	ldr	r0, [r7, #4]
 8022476:	f7f5 fe35 	bl	80180e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802247a:	2300      	movs	r3, #0
 802247c:	e0f5      	b.n	802266a <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802247e:	69fb      	ldr	r3, [r7, #28]
 8022480:	691b      	ldr	r3, [r3, #16]
 8022482:	4a7c      	ldr	r2, [pc, #496]	; (8022674 <ip4_input+0x278>)
 8022484:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022486:	69fb      	ldr	r3, [r7, #28]
 8022488:	68db      	ldr	r3, [r3, #12]
 802248a:	4a7a      	ldr	r2, [pc, #488]	; (8022674 <ip4_input+0x278>)
 802248c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802248e:	4b79      	ldr	r3, [pc, #484]	; (8022674 <ip4_input+0x278>)
 8022490:	695b      	ldr	r3, [r3, #20]
 8022492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022496:	2be0      	cmp	r3, #224	; 0xe0
 8022498:	d112      	bne.n	80224c0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802249a:	683b      	ldr	r3, [r7, #0]
 802249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80224a0:	f003 0301 	and.w	r3, r3, #1
 80224a4:	b2db      	uxtb	r3, r3
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d007      	beq.n	80224ba <ip4_input+0xbe>
 80224aa:	683b      	ldr	r3, [r7, #0]
 80224ac:	3304      	adds	r3, #4
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d002      	beq.n	80224ba <ip4_input+0xbe>
      netif = inp;
 80224b4:	683b      	ldr	r3, [r7, #0]
 80224b6:	61bb      	str	r3, [r7, #24]
 80224b8:	e02a      	b.n	8022510 <ip4_input+0x114>
    } else {
      netif = NULL;
 80224ba:	2300      	movs	r3, #0
 80224bc:	61bb      	str	r3, [r7, #24]
 80224be:	e027      	b.n	8022510 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80224c0:	6838      	ldr	r0, [r7, #0]
 80224c2:	f7ff ff71 	bl	80223a8 <ip4_input_accept>
 80224c6:	4603      	mov	r3, r0
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d002      	beq.n	80224d2 <ip4_input+0xd6>
      netif = inp;
 80224cc:	683b      	ldr	r3, [r7, #0]
 80224ce:	61bb      	str	r3, [r7, #24]
 80224d0:	e01e      	b.n	8022510 <ip4_input+0x114>
    } else {
      netif = NULL;
 80224d2:	2300      	movs	r3, #0
 80224d4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80224d6:	4b67      	ldr	r3, [pc, #412]	; (8022674 <ip4_input+0x278>)
 80224d8:	695b      	ldr	r3, [r3, #20]
 80224da:	b2db      	uxtb	r3, r3
 80224dc:	2b7f      	cmp	r3, #127	; 0x7f
 80224de:	d017      	beq.n	8022510 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80224e0:	4b65      	ldr	r3, [pc, #404]	; (8022678 <ip4_input+0x27c>)
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	61bb      	str	r3, [r7, #24]
 80224e6:	e00e      	b.n	8022506 <ip4_input+0x10a>
          if (netif == inp) {
 80224e8:	69ba      	ldr	r2, [r7, #24]
 80224ea:	683b      	ldr	r3, [r7, #0]
 80224ec:	429a      	cmp	r2, r3
 80224ee:	d006      	beq.n	80224fe <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80224f0:	69b8      	ldr	r0, [r7, #24]
 80224f2:	f7ff ff59 	bl	80223a8 <ip4_input_accept>
 80224f6:	4603      	mov	r3, r0
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d108      	bne.n	802250e <ip4_input+0x112>
 80224fc:	e000      	b.n	8022500 <ip4_input+0x104>
            continue;
 80224fe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8022500:	69bb      	ldr	r3, [r7, #24]
 8022502:	681b      	ldr	r3, [r3, #0]
 8022504:	61bb      	str	r3, [r7, #24]
 8022506:	69bb      	ldr	r3, [r7, #24]
 8022508:	2b00      	cmp	r3, #0
 802250a:	d1ed      	bne.n	80224e8 <ip4_input+0xec>
 802250c:	e000      	b.n	8022510 <ip4_input+0x114>
            break;
 802250e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8022510:	69bb      	ldr	r3, [r7, #24]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d111      	bne.n	802253a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8022516:	69fb      	ldr	r3, [r7, #28]
 8022518:	7a5b      	ldrb	r3, [r3, #9]
 802251a:	2b11      	cmp	r3, #17
 802251c:	d10d      	bne.n	802253a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 802251e:	8a7b      	ldrh	r3, [r7, #18]
 8022520:	69fa      	ldr	r2, [r7, #28]
 8022522:	4413      	add	r3, r2
 8022524:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8022526:	68fb      	ldr	r3, [r7, #12]
 8022528:	885b      	ldrh	r3, [r3, #2]
 802252a:	b29b      	uxth	r3, r3
 802252c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022530:	d103      	bne.n	802253a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8022532:	683b      	ldr	r3, [r7, #0]
 8022534:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8022536:	2300      	movs	r3, #0
 8022538:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 802253a:	697b      	ldr	r3, [r7, #20]
 802253c:	2b00      	cmp	r3, #0
 802253e:	d017      	beq.n	8022570 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022540:	4b4c      	ldr	r3, [pc, #304]	; (8022674 <ip4_input+0x278>)
 8022542:	691b      	ldr	r3, [r3, #16]
 8022544:	2b00      	cmp	r3, #0
 8022546:	d013      	beq.n	8022570 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022548:	4b4a      	ldr	r3, [pc, #296]	; (8022674 <ip4_input+0x278>)
 802254a:	691b      	ldr	r3, [r3, #16]
 802254c:	6839      	ldr	r1, [r7, #0]
 802254e:	4618      	mov	r0, r3
 8022550:	f000 f96c 	bl	802282c <ip4_addr_isbroadcast_u32>
 8022554:	4603      	mov	r3, r0
 8022556:	2b00      	cmp	r3, #0
 8022558:	d105      	bne.n	8022566 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802255a:	4b46      	ldr	r3, [pc, #280]	; (8022674 <ip4_input+0x278>)
 802255c:	691b      	ldr	r3, [r3, #16]
 802255e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022562:	2be0      	cmp	r3, #224	; 0xe0
 8022564:	d104      	bne.n	8022570 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8022566:	6878      	ldr	r0, [r7, #4]
 8022568:	f7f5 fdbc 	bl	80180e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 802256c:	2300      	movs	r3, #0
 802256e:	e07c      	b.n	802266a <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8022570:	69bb      	ldr	r3, [r7, #24]
 8022572:	2b00      	cmp	r3, #0
 8022574:	d104      	bne.n	8022580 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8022576:	6878      	ldr	r0, [r7, #4]
 8022578:	f7f5 fdb4 	bl	80180e4 <pbuf_free>
    return ERR_OK;
 802257c:	2300      	movs	r3, #0
 802257e:	e074      	b.n	802266a <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022580:	69fb      	ldr	r3, [r7, #28]
 8022582:	88db      	ldrh	r3, [r3, #6]
 8022584:	b29b      	uxth	r3, r3
 8022586:	461a      	mov	r2, r3
 8022588:	f64f 733f 	movw	r3, #65343	; 0xff3f
 802258c:	4013      	ands	r3, r2
 802258e:	2b00      	cmp	r3, #0
 8022590:	d00b      	beq.n	80225aa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022592:	6878      	ldr	r0, [r7, #4]
 8022594:	f000 fd22 	bl	8022fdc <ip4_reass>
 8022598:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	2b00      	cmp	r3, #0
 802259e:	d101      	bne.n	80225a4 <ip4_input+0x1a8>
      return ERR_OK;
 80225a0:	2300      	movs	r3, #0
 80225a2:	e062      	b.n	802266a <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	685b      	ldr	r3, [r3, #4]
 80225a8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80225aa:	4a32      	ldr	r2, [pc, #200]	; (8022674 <ip4_input+0x278>)
 80225ac:	69bb      	ldr	r3, [r7, #24]
 80225ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80225b0:	4a30      	ldr	r2, [pc, #192]	; (8022674 <ip4_input+0x278>)
 80225b2:	683b      	ldr	r3, [r7, #0]
 80225b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80225b6:	4a2f      	ldr	r2, [pc, #188]	; (8022674 <ip4_input+0x278>)
 80225b8:	69fb      	ldr	r3, [r7, #28]
 80225ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80225bc:	69fb      	ldr	r3, [r7, #28]
 80225be:	781b      	ldrb	r3, [r3, #0]
 80225c0:	f003 030f 	and.w	r3, r3, #15
 80225c4:	b2db      	uxtb	r3, r3
 80225c6:	009b      	lsls	r3, r3, #2
 80225c8:	b2db      	uxtb	r3, r3
 80225ca:	b29a      	uxth	r2, r3
 80225cc:	4b29      	ldr	r3, [pc, #164]	; (8022674 <ip4_input+0x278>)
 80225ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80225d0:	8a7b      	ldrh	r3, [r7, #18]
 80225d2:	4619      	mov	r1, r3
 80225d4:	6878      	ldr	r0, [r7, #4]
 80225d6:	f7f5 fcff 	bl	8017fd8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80225da:	69fb      	ldr	r3, [r7, #28]
 80225dc:	7a5b      	ldrb	r3, [r3, #9]
 80225de:	2b06      	cmp	r3, #6
 80225e0:	d009      	beq.n	80225f6 <ip4_input+0x1fa>
 80225e2:	2b11      	cmp	r3, #17
 80225e4:	d002      	beq.n	80225ec <ip4_input+0x1f0>
 80225e6:	2b01      	cmp	r3, #1
 80225e8:	d00a      	beq.n	8022600 <ip4_input+0x204>
 80225ea:	e00e      	b.n	802260a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80225ec:	6839      	ldr	r1, [r7, #0]
 80225ee:	6878      	ldr	r0, [r7, #4]
 80225f0:	f7fc face 	bl	801eb90 <udp_input>
        break;
 80225f4:	e026      	b.n	8022644 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80225f6:	6839      	ldr	r1, [r7, #0]
 80225f8:	6878      	ldr	r0, [r7, #4]
 80225fa:	f7f7 fe7b 	bl	801a2f4 <tcp_input>
        break;
 80225fe:	e021      	b.n	8022644 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8022600:	6839      	ldr	r1, [r7, #0]
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	f7ff fcd2 	bl	8021fac <icmp_input>
        break;
 8022608:	e01c      	b.n	8022644 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802260a:	4b1a      	ldr	r3, [pc, #104]	; (8022674 <ip4_input+0x278>)
 802260c:	695b      	ldr	r3, [r3, #20]
 802260e:	69b9      	ldr	r1, [r7, #24]
 8022610:	4618      	mov	r0, r3
 8022612:	f000 f90b 	bl	802282c <ip4_addr_isbroadcast_u32>
 8022616:	4603      	mov	r3, r0
 8022618:	2b00      	cmp	r3, #0
 802261a:	d10f      	bne.n	802263c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802261c:	4b15      	ldr	r3, [pc, #84]	; (8022674 <ip4_input+0x278>)
 802261e:	695b      	ldr	r3, [r3, #20]
 8022620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022624:	2be0      	cmp	r3, #224	; 0xe0
 8022626:	d009      	beq.n	802263c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8022628:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802262c:	4619      	mov	r1, r3
 802262e:	6878      	ldr	r0, [r7, #4]
 8022630:	f7f5 fd45 	bl	80180be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022634:	2102      	movs	r1, #2
 8022636:	6878      	ldr	r0, [r7, #4]
 8022638:	f7ff fdbc 	bl	80221b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802263c:	6878      	ldr	r0, [r7, #4]
 802263e:	f7f5 fd51 	bl	80180e4 <pbuf_free>
        break;
 8022642:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022644:	4b0b      	ldr	r3, [pc, #44]	; (8022674 <ip4_input+0x278>)
 8022646:	2200      	movs	r2, #0
 8022648:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802264a:	4b0a      	ldr	r3, [pc, #40]	; (8022674 <ip4_input+0x278>)
 802264c:	2200      	movs	r2, #0
 802264e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8022650:	4b08      	ldr	r3, [pc, #32]	; (8022674 <ip4_input+0x278>)
 8022652:	2200      	movs	r2, #0
 8022654:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022656:	4b07      	ldr	r3, [pc, #28]	; (8022674 <ip4_input+0x278>)
 8022658:	2200      	movs	r2, #0
 802265a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 802265c:	4b05      	ldr	r3, [pc, #20]	; (8022674 <ip4_input+0x278>)
 802265e:	2200      	movs	r2, #0
 8022660:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022662:	4b04      	ldr	r3, [pc, #16]	; (8022674 <ip4_input+0x278>)
 8022664:	2200      	movs	r2, #0
 8022666:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8022668:	2300      	movs	r3, #0
}
 802266a:	4618      	mov	r0, r3
 802266c:	3720      	adds	r7, #32
 802266e:	46bd      	mov	sp, r7
 8022670:	bd80      	pop	{r7, pc}
 8022672:	bf00      	nop
 8022674:	2000cc8c 	.word	0x2000cc8c
 8022678:	200103b0 	.word	0x200103b0

0802267c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 802267c:	b580      	push	{r7, lr}
 802267e:	b08a      	sub	sp, #40	; 0x28
 8022680:	af04      	add	r7, sp, #16
 8022682:	60f8      	str	r0, [r7, #12]
 8022684:	60b9      	str	r1, [r7, #8]
 8022686:	607a      	str	r2, [r7, #4]
 8022688:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802268a:	68bb      	ldr	r3, [r7, #8]
 802268c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	2b00      	cmp	r3, #0
 8022692:	d009      	beq.n	80226a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8022694:	68bb      	ldr	r3, [r7, #8]
 8022696:	2b00      	cmp	r3, #0
 8022698:	d003      	beq.n	80226a2 <ip4_output_if+0x26>
 802269a:	68bb      	ldr	r3, [r7, #8]
 802269c:	681b      	ldr	r3, [r3, #0]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d102      	bne.n	80226a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80226a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80226a4:	3304      	adds	r3, #4
 80226a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80226a8:	78fa      	ldrb	r2, [r7, #3]
 80226aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80226ac:	9302      	str	r3, [sp, #8]
 80226ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80226b2:	9301      	str	r3, [sp, #4]
 80226b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80226b8:	9300      	str	r3, [sp, #0]
 80226ba:	4613      	mov	r3, r2
 80226bc:	687a      	ldr	r2, [r7, #4]
 80226be:	6979      	ldr	r1, [r7, #20]
 80226c0:	68f8      	ldr	r0, [r7, #12]
 80226c2:	f000 f805 	bl	80226d0 <ip4_output_if_src>
 80226c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80226c8:	4618      	mov	r0, r3
 80226ca:	3718      	adds	r7, #24
 80226cc:	46bd      	mov	sp, r7
 80226ce:	bd80      	pop	{r7, pc}

080226d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80226d0:	b580      	push	{r7, lr}
 80226d2:	b088      	sub	sp, #32
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	60f8      	str	r0, [r7, #12]
 80226d8:	60b9      	str	r1, [r7, #8]
 80226da:	607a      	str	r2, [r7, #4]
 80226dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80226de:	68fb      	ldr	r3, [r7, #12]
 80226e0:	7b9b      	ldrb	r3, [r3, #14]
 80226e2:	2b01      	cmp	r3, #1
 80226e4:	d006      	beq.n	80226f4 <ip4_output_if_src+0x24>
 80226e6:	4b4b      	ldr	r3, [pc, #300]	; (8022814 <ip4_output_if_src+0x144>)
 80226e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80226ec:	494a      	ldr	r1, [pc, #296]	; (8022818 <ip4_output_if_src+0x148>)
 80226ee:	484b      	ldr	r0, [pc, #300]	; (802281c <ip4_output_if_src+0x14c>)
 80226f0:	f002 f856 	bl	80247a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d060      	beq.n	80227bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80226fa:	2314      	movs	r3, #20
 80226fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80226fe:	2114      	movs	r1, #20
 8022700:	68f8      	ldr	r0, [r7, #12]
 8022702:	f7f5 fc59 	bl	8017fb8 <pbuf_add_header>
 8022706:	4603      	mov	r3, r0
 8022708:	2b00      	cmp	r3, #0
 802270a:	d002      	beq.n	8022712 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802270c:	f06f 0301 	mvn.w	r3, #1
 8022710:	e07c      	b.n	802280c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	685b      	ldr	r3, [r3, #4]
 8022716:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022718:	68fb      	ldr	r3, [r7, #12]
 802271a:	895b      	ldrh	r3, [r3, #10]
 802271c:	2b13      	cmp	r3, #19
 802271e:	d806      	bhi.n	802272e <ip4_output_if_src+0x5e>
 8022720:	4b3c      	ldr	r3, [pc, #240]	; (8022814 <ip4_output_if_src+0x144>)
 8022722:	f240 3289 	movw	r2, #905	; 0x389
 8022726:	493e      	ldr	r1, [pc, #248]	; (8022820 <ip4_output_if_src+0x150>)
 8022728:	483c      	ldr	r0, [pc, #240]	; (802281c <ip4_output_if_src+0x14c>)
 802272a:	f002 f839 	bl	80247a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802272e:	69fb      	ldr	r3, [r7, #28]
 8022730:	78fa      	ldrb	r2, [r7, #3]
 8022732:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8022734:	69fb      	ldr	r3, [r7, #28]
 8022736:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802273a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	681a      	ldr	r2, [r3, #0]
 8022740:	69fb      	ldr	r3, [r7, #28]
 8022742:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022744:	8b7b      	ldrh	r3, [r7, #26]
 8022746:	089b      	lsrs	r3, r3, #2
 8022748:	b29b      	uxth	r3, r3
 802274a:	b2db      	uxtb	r3, r3
 802274c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022750:	b2da      	uxtb	r2, r3
 8022752:	69fb      	ldr	r3, [r7, #28]
 8022754:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8022756:	69fb      	ldr	r3, [r7, #28]
 8022758:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802275c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802275e:	68fb      	ldr	r3, [r7, #12]
 8022760:	891b      	ldrh	r3, [r3, #8]
 8022762:	4618      	mov	r0, r3
 8022764:	f7f4 f8f0 	bl	8016948 <lwip_htons>
 8022768:	4603      	mov	r3, r0
 802276a:	461a      	mov	r2, r3
 802276c:	69fb      	ldr	r3, [r7, #28]
 802276e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8022770:	69fb      	ldr	r3, [r7, #28]
 8022772:	2200      	movs	r2, #0
 8022774:	719a      	strb	r2, [r3, #6]
 8022776:	2200      	movs	r2, #0
 8022778:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802277a:	4b2a      	ldr	r3, [pc, #168]	; (8022824 <ip4_output_if_src+0x154>)
 802277c:	881b      	ldrh	r3, [r3, #0]
 802277e:	4618      	mov	r0, r3
 8022780:	f7f4 f8e2 	bl	8016948 <lwip_htons>
 8022784:	4603      	mov	r3, r0
 8022786:	461a      	mov	r2, r3
 8022788:	69fb      	ldr	r3, [r7, #28]
 802278a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802278c:	4b25      	ldr	r3, [pc, #148]	; (8022824 <ip4_output_if_src+0x154>)
 802278e:	881b      	ldrh	r3, [r3, #0]
 8022790:	3301      	adds	r3, #1
 8022792:	b29a      	uxth	r2, r3
 8022794:	4b23      	ldr	r3, [pc, #140]	; (8022824 <ip4_output_if_src+0x154>)
 8022796:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8022798:	68bb      	ldr	r3, [r7, #8]
 802279a:	2b00      	cmp	r3, #0
 802279c:	d104      	bne.n	80227a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802279e:	4b22      	ldr	r3, [pc, #136]	; (8022828 <ip4_output_if_src+0x158>)
 80227a0:	681a      	ldr	r2, [r3, #0]
 80227a2:	69fb      	ldr	r3, [r7, #28]
 80227a4:	60da      	str	r2, [r3, #12]
 80227a6:	e003      	b.n	80227b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80227a8:	68bb      	ldr	r3, [r7, #8]
 80227aa:	681a      	ldr	r2, [r3, #0]
 80227ac:	69fb      	ldr	r3, [r7, #28]
 80227ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80227b0:	69fb      	ldr	r3, [r7, #28]
 80227b2:	2200      	movs	r2, #0
 80227b4:	729a      	strb	r2, [r3, #10]
 80227b6:	2200      	movs	r2, #0
 80227b8:	72da      	strb	r2, [r3, #11]
 80227ba:	e00f      	b.n	80227dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80227bc:	68fb      	ldr	r3, [r7, #12]
 80227be:	895b      	ldrh	r3, [r3, #10]
 80227c0:	2b13      	cmp	r3, #19
 80227c2:	d802      	bhi.n	80227ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80227c4:	f06f 0301 	mvn.w	r3, #1
 80227c8:	e020      	b.n	802280c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80227ca:	68fb      	ldr	r3, [r7, #12]
 80227cc:	685b      	ldr	r3, [r3, #4]
 80227ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80227d0:	69fb      	ldr	r3, [r7, #28]
 80227d2:	691b      	ldr	r3, [r3, #16]
 80227d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80227d6:	f107 0314 	add.w	r3, r7, #20
 80227da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80227dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d00c      	beq.n	80227fe <ip4_output_if_src+0x12e>
 80227e4:	68fb      	ldr	r3, [r7, #12]
 80227e6:	891a      	ldrh	r2, [r3, #8]
 80227e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80227ec:	429a      	cmp	r2, r3
 80227ee:	d906      	bls.n	80227fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80227f0:	687a      	ldr	r2, [r7, #4]
 80227f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80227f4:	68f8      	ldr	r0, [r7, #12]
 80227f6:	f000 fddd 	bl	80233b4 <ip4_frag>
 80227fa:	4603      	mov	r3, r0
 80227fc:	e006      	b.n	802280c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80227fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022800:	695b      	ldr	r3, [r3, #20]
 8022802:	687a      	ldr	r2, [r7, #4]
 8022804:	68f9      	ldr	r1, [r7, #12]
 8022806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022808:	4798      	blx	r3
 802280a:	4603      	mov	r3, r0
}
 802280c:	4618      	mov	r0, r3
 802280e:	3720      	adds	r7, #32
 8022810:	46bd      	mov	sp, r7
 8022812:	bd80      	pop	{r7, pc}
 8022814:	08028adc 	.word	0x08028adc
 8022818:	08028b10 	.word	0x08028b10
 802281c:	08028b1c 	.word	0x08028b1c
 8022820:	08028b44 	.word	0x08028b44
 8022824:	20009102 	.word	0x20009102
 8022828:	08028fe0 	.word	0x08028fe0

0802282c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 802282c:	b480      	push	{r7}
 802282e:	b085      	sub	sp, #20
 8022830:	af00      	add	r7, sp, #0
 8022832:	6078      	str	r0, [r7, #4]
 8022834:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022840:	d002      	beq.n	8022848 <ip4_addr_isbroadcast_u32+0x1c>
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	2b00      	cmp	r3, #0
 8022846:	d101      	bne.n	802284c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8022848:	2301      	movs	r3, #1
 802284a:	e02a      	b.n	80228a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 802284c:	683b      	ldr	r3, [r7, #0]
 802284e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022852:	f003 0302 	and.w	r3, r3, #2
 8022856:	2b00      	cmp	r3, #0
 8022858:	d101      	bne.n	802285e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802285a:	2300      	movs	r3, #0
 802285c:	e021      	b.n	80228a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802285e:	683b      	ldr	r3, [r7, #0]
 8022860:	3304      	adds	r3, #4
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	687a      	ldr	r2, [r7, #4]
 8022866:	429a      	cmp	r2, r3
 8022868:	d101      	bne.n	802286e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802286a:	2300      	movs	r3, #0
 802286c:	e019      	b.n	80228a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802286e:	68fa      	ldr	r2, [r7, #12]
 8022870:	683b      	ldr	r3, [r7, #0]
 8022872:	3304      	adds	r3, #4
 8022874:	681b      	ldr	r3, [r3, #0]
 8022876:	405a      	eors	r2, r3
 8022878:	683b      	ldr	r3, [r7, #0]
 802287a:	3308      	adds	r3, #8
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	4013      	ands	r3, r2
 8022880:	2b00      	cmp	r3, #0
 8022882:	d10d      	bne.n	80228a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022884:	683b      	ldr	r3, [r7, #0]
 8022886:	3308      	adds	r3, #8
 8022888:	681b      	ldr	r3, [r3, #0]
 802288a:	43da      	mvns	r2, r3
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8022890:	683b      	ldr	r3, [r7, #0]
 8022892:	3308      	adds	r3, #8
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022898:	429a      	cmp	r2, r3
 802289a:	d101      	bne.n	80228a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 802289c:	2301      	movs	r3, #1
 802289e:	e000      	b.n	80228a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80228a0:	2300      	movs	r3, #0
  }
}
 80228a2:	4618      	mov	r0, r3
 80228a4:	3714      	adds	r7, #20
 80228a6:	46bd      	mov	sp, r7
 80228a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228ac:	4770      	bx	lr
	...

080228b0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b082      	sub	sp, #8
 80228b4:	af00      	add	r7, sp, #0
 80228b6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80228b8:	2210      	movs	r2, #16
 80228ba:	4904      	ldr	r1, [pc, #16]	; (80228cc <ip4addr_ntoa+0x1c>)
 80228bc:	6878      	ldr	r0, [r7, #4]
 80228be:	f000 f807 	bl	80228d0 <ip4addr_ntoa_r>
 80228c2:	4603      	mov	r3, r0
}
 80228c4:	4618      	mov	r0, r3
 80228c6:	3708      	adds	r7, #8
 80228c8:	46bd      	mov	sp, r7
 80228ca:	bd80      	pop	{r7, pc}
 80228cc:	20009104 	.word	0x20009104

080228d0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80228d0:	b480      	push	{r7}
 80228d2:	b08d      	sub	sp, #52	; 0x34
 80228d4:	af00      	add	r7, sp, #0
 80228d6:	60f8      	str	r0, [r7, #12]
 80228d8:	60b9      	str	r1, [r7, #8]
 80228da:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80228dc:	2300      	movs	r3, #0
 80228de:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80228e0:	68fb      	ldr	r3, [r7, #12]
 80228e2:	681b      	ldr	r3, [r3, #0]
 80228e4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80228e6:	68bb      	ldr	r3, [r7, #8]
 80228e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80228ea:	f107 0318 	add.w	r3, r7, #24
 80228ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80228f0:	2300      	movs	r3, #0
 80228f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80228f6:	e059      	b.n	80229ac <ip4addr_ntoa_r+0xdc>
    i = 0;
 80228f8:	2300      	movs	r3, #0
 80228fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80228fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022900:	781a      	ldrb	r2, [r3, #0]
 8022902:	4b33      	ldr	r3, [pc, #204]	; (80229d0 <ip4addr_ntoa_r+0x100>)
 8022904:	fba3 1302 	umull	r1, r3, r3, r2
 8022908:	08d9      	lsrs	r1, r3, #3
 802290a:	460b      	mov	r3, r1
 802290c:	009b      	lsls	r3, r3, #2
 802290e:	440b      	add	r3, r1
 8022910:	005b      	lsls	r3, r3, #1
 8022912:	1ad3      	subs	r3, r2, r3
 8022914:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8022916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022918:	781b      	ldrb	r3, [r3, #0]
 802291a:	4a2d      	ldr	r2, [pc, #180]	; (80229d0 <ip4addr_ntoa_r+0x100>)
 802291c:	fba2 2303 	umull	r2, r3, r2, r3
 8022920:	08db      	lsrs	r3, r3, #3
 8022922:	b2da      	uxtb	r2, r3
 8022924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022926:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8022928:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802292c:	1c5a      	adds	r2, r3, #1
 802292e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8022932:	4619      	mov	r1, r3
 8022934:	7ffb      	ldrb	r3, [r7, #31]
 8022936:	3330      	adds	r3, #48	; 0x30
 8022938:	b2da      	uxtb	r2, r3
 802293a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802293e:	440b      	add	r3, r1
 8022940:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8022944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022946:	781b      	ldrb	r3, [r3, #0]
 8022948:	2b00      	cmp	r3, #0
 802294a:	d1d8      	bne.n	80228fe <ip4addr_ntoa_r+0x2e>
    while (i--) {
 802294c:	e012      	b.n	8022974 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 802294e:	6a3b      	ldr	r3, [r7, #32]
 8022950:	1c5a      	adds	r2, r3, #1
 8022952:	623a      	str	r2, [r7, #32]
 8022954:	687a      	ldr	r2, [r7, #4]
 8022956:	429a      	cmp	r2, r3
 8022958:	dc01      	bgt.n	802295e <ip4addr_ntoa_r+0x8e>
        return NULL;
 802295a:	2300      	movs	r3, #0
 802295c:	e031      	b.n	80229c2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 802295e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8022962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022964:	1c59      	adds	r1, r3, #1
 8022966:	62f9      	str	r1, [r7, #44]	; 0x2c
 8022968:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802296c:	440a      	add	r2, r1
 802296e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8022972:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8022974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022978:	1e5a      	subs	r2, r3, #1
 802297a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802297e:	2b00      	cmp	r3, #0
 8022980:	d1e5      	bne.n	802294e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8022982:	6a3b      	ldr	r3, [r7, #32]
 8022984:	1c5a      	adds	r2, r3, #1
 8022986:	623a      	str	r2, [r7, #32]
 8022988:	687a      	ldr	r2, [r7, #4]
 802298a:	429a      	cmp	r2, r3
 802298c:	dc01      	bgt.n	8022992 <ip4addr_ntoa_r+0xc2>
      return NULL;
 802298e:	2300      	movs	r3, #0
 8022990:	e017      	b.n	80229c2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8022992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022994:	1c5a      	adds	r2, r3, #1
 8022996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022998:	222e      	movs	r2, #46	; 0x2e
 802299a:	701a      	strb	r2, [r3, #0]
    ap++;
 802299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802299e:	3301      	adds	r3, #1
 80229a0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80229a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80229a6:	3301      	adds	r3, #1
 80229a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80229ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80229b0:	2b03      	cmp	r3, #3
 80229b2:	d9a1      	bls.n	80228f8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80229b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229b6:	3b01      	subs	r3, #1
 80229b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80229ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229bc:	2200      	movs	r2, #0
 80229be:	701a      	strb	r2, [r3, #0]
  return buf;
 80229c0:	68bb      	ldr	r3, [r7, #8]
}
 80229c2:	4618      	mov	r0, r3
 80229c4:	3734      	adds	r7, #52	; 0x34
 80229c6:	46bd      	mov	sp, r7
 80229c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229cc:	4770      	bx	lr
 80229ce:	bf00      	nop
 80229d0:	cccccccd 	.word	0xcccccccd

080229d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80229d4:	b580      	push	{r7, lr}
 80229d6:	b084      	sub	sp, #16
 80229d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80229da:	2300      	movs	r3, #0
 80229dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80229de:	4b12      	ldr	r3, [pc, #72]	; (8022a28 <ip_reass_tmr+0x54>)
 80229e0:	681b      	ldr	r3, [r3, #0]
 80229e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80229e4:	e018      	b.n	8022a18 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80229e6:	68fb      	ldr	r3, [r7, #12]
 80229e8:	7fdb      	ldrb	r3, [r3, #31]
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d00b      	beq.n	8022a06 <ip_reass_tmr+0x32>
      r->timer--;
 80229ee:	68fb      	ldr	r3, [r7, #12]
 80229f0:	7fdb      	ldrb	r3, [r3, #31]
 80229f2:	3b01      	subs	r3, #1
 80229f4:	b2da      	uxtb	r2, r3
 80229f6:	68fb      	ldr	r3, [r7, #12]
 80229f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80229fa:	68fb      	ldr	r3, [r7, #12]
 80229fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	60fb      	str	r3, [r7, #12]
 8022a04:	e008      	b.n	8022a18 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8022a06:	68fb      	ldr	r3, [r7, #12]
 8022a08:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8022a0a:	68fb      	ldr	r3, [r7, #12]
 8022a0c:	681b      	ldr	r3, [r3, #0]
 8022a0e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8022a10:	68b9      	ldr	r1, [r7, #8]
 8022a12:	6878      	ldr	r0, [r7, #4]
 8022a14:	f000 f80a 	bl	8022a2c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8022a18:	68fb      	ldr	r3, [r7, #12]
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d1e3      	bne.n	80229e6 <ip_reass_tmr+0x12>
    }
  }
}
 8022a1e:	bf00      	nop
 8022a20:	3710      	adds	r7, #16
 8022a22:	46bd      	mov	sp, r7
 8022a24:	bd80      	pop	{r7, pc}
 8022a26:	bf00      	nop
 8022a28:	20009114 	.word	0x20009114

08022a2c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8022a2c:	b580      	push	{r7, lr}
 8022a2e:	b088      	sub	sp, #32
 8022a30:	af00      	add	r7, sp, #0
 8022a32:	6078      	str	r0, [r7, #4]
 8022a34:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8022a36:	2300      	movs	r3, #0
 8022a38:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022a3a:	683a      	ldr	r2, [r7, #0]
 8022a3c:	687b      	ldr	r3, [r7, #4]
 8022a3e:	429a      	cmp	r2, r3
 8022a40:	d105      	bne.n	8022a4e <ip_reass_free_complete_datagram+0x22>
 8022a42:	4b45      	ldr	r3, [pc, #276]	; (8022b58 <ip_reass_free_complete_datagram+0x12c>)
 8022a44:	22ab      	movs	r2, #171	; 0xab
 8022a46:	4945      	ldr	r1, [pc, #276]	; (8022b5c <ip_reass_free_complete_datagram+0x130>)
 8022a48:	4845      	ldr	r0, [pc, #276]	; (8022b60 <ip_reass_free_complete_datagram+0x134>)
 8022a4a:	f001 fea9 	bl	80247a0 <iprintf>
  if (prev != NULL) {
 8022a4e:	683b      	ldr	r3, [r7, #0]
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	d00a      	beq.n	8022a6a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8022a54:	683b      	ldr	r3, [r7, #0]
 8022a56:	681b      	ldr	r3, [r3, #0]
 8022a58:	687a      	ldr	r2, [r7, #4]
 8022a5a:	429a      	cmp	r2, r3
 8022a5c:	d005      	beq.n	8022a6a <ip_reass_free_complete_datagram+0x3e>
 8022a5e:	4b3e      	ldr	r3, [pc, #248]	; (8022b58 <ip_reass_free_complete_datagram+0x12c>)
 8022a60:	22ad      	movs	r2, #173	; 0xad
 8022a62:	4940      	ldr	r1, [pc, #256]	; (8022b64 <ip_reass_free_complete_datagram+0x138>)
 8022a64:	483e      	ldr	r0, [pc, #248]	; (8022b60 <ip_reass_free_complete_datagram+0x134>)
 8022a66:	f001 fe9b 	bl	80247a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	685b      	ldr	r3, [r3, #4]
 8022a6e:	685b      	ldr	r3, [r3, #4]
 8022a70:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8022a72:	697b      	ldr	r3, [r7, #20]
 8022a74:	889b      	ldrh	r3, [r3, #4]
 8022a76:	b29b      	uxth	r3, r3
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	d12a      	bne.n	8022ad2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	685b      	ldr	r3, [r3, #4]
 8022a80:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8022a82:	697b      	ldr	r3, [r7, #20]
 8022a84:	681a      	ldr	r2, [r3, #0]
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022a8a:	69bb      	ldr	r3, [r7, #24]
 8022a8c:	6858      	ldr	r0, [r3, #4]
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	3308      	adds	r3, #8
 8022a92:	2214      	movs	r2, #20
 8022a94:	4619      	mov	r1, r3
 8022a96:	f001 fdc8 	bl	802462a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022a9a:	2101      	movs	r1, #1
 8022a9c:	69b8      	ldr	r0, [r7, #24]
 8022a9e:	f7ff fb99 	bl	80221d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8022aa2:	69b8      	ldr	r0, [r7, #24]
 8022aa4:	f7f5 fbac 	bl	8018200 <pbuf_clen>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022aac:	8bfa      	ldrh	r2, [r7, #30]
 8022aae:	8a7b      	ldrh	r3, [r7, #18]
 8022ab0:	4413      	add	r3, r2
 8022ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022ab6:	db05      	blt.n	8022ac4 <ip_reass_free_complete_datagram+0x98>
 8022ab8:	4b27      	ldr	r3, [pc, #156]	; (8022b58 <ip_reass_free_complete_datagram+0x12c>)
 8022aba:	22bc      	movs	r2, #188	; 0xbc
 8022abc:	492a      	ldr	r1, [pc, #168]	; (8022b68 <ip_reass_free_complete_datagram+0x13c>)
 8022abe:	4828      	ldr	r0, [pc, #160]	; (8022b60 <ip_reass_free_complete_datagram+0x134>)
 8022ac0:	f001 fe6e 	bl	80247a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022ac4:	8bfa      	ldrh	r2, [r7, #30]
 8022ac6:	8a7b      	ldrh	r3, [r7, #18]
 8022ac8:	4413      	add	r3, r2
 8022aca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8022acc:	69b8      	ldr	r0, [r7, #24]
 8022ace:	f7f5 fb09 	bl	80180e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	685b      	ldr	r3, [r3, #4]
 8022ad6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8022ad8:	e01f      	b.n	8022b1a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8022ada:	69bb      	ldr	r3, [r7, #24]
 8022adc:	685b      	ldr	r3, [r3, #4]
 8022ade:	617b      	str	r3, [r7, #20]
    pcur = p;
 8022ae0:	69bb      	ldr	r3, [r7, #24]
 8022ae2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8022ae4:	697b      	ldr	r3, [r7, #20]
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8022aea:	68f8      	ldr	r0, [r7, #12]
 8022aec:	f7f5 fb88 	bl	8018200 <pbuf_clen>
 8022af0:	4603      	mov	r3, r0
 8022af2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022af4:	8bfa      	ldrh	r2, [r7, #30]
 8022af6:	8a7b      	ldrh	r3, [r7, #18]
 8022af8:	4413      	add	r3, r2
 8022afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022afe:	db05      	blt.n	8022b0c <ip_reass_free_complete_datagram+0xe0>
 8022b00:	4b15      	ldr	r3, [pc, #84]	; (8022b58 <ip_reass_free_complete_datagram+0x12c>)
 8022b02:	22cc      	movs	r2, #204	; 0xcc
 8022b04:	4918      	ldr	r1, [pc, #96]	; (8022b68 <ip_reass_free_complete_datagram+0x13c>)
 8022b06:	4816      	ldr	r0, [pc, #88]	; (8022b60 <ip_reass_free_complete_datagram+0x134>)
 8022b08:	f001 fe4a 	bl	80247a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022b0c:	8bfa      	ldrh	r2, [r7, #30]
 8022b0e:	8a7b      	ldrh	r3, [r7, #18]
 8022b10:	4413      	add	r3, r2
 8022b12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8022b14:	68f8      	ldr	r0, [r7, #12]
 8022b16:	f7f5 fae5 	bl	80180e4 <pbuf_free>
  while (p != NULL) {
 8022b1a:	69bb      	ldr	r3, [r7, #24]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d1dc      	bne.n	8022ada <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8022b20:	6839      	ldr	r1, [r7, #0]
 8022b22:	6878      	ldr	r0, [r7, #4]
 8022b24:	f000 f8c2 	bl	8022cac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022b28:	4b10      	ldr	r3, [pc, #64]	; (8022b6c <ip_reass_free_complete_datagram+0x140>)
 8022b2a:	881b      	ldrh	r3, [r3, #0]
 8022b2c:	8bfa      	ldrh	r2, [r7, #30]
 8022b2e:	429a      	cmp	r2, r3
 8022b30:	d905      	bls.n	8022b3e <ip_reass_free_complete_datagram+0x112>
 8022b32:	4b09      	ldr	r3, [pc, #36]	; (8022b58 <ip_reass_free_complete_datagram+0x12c>)
 8022b34:	22d2      	movs	r2, #210	; 0xd2
 8022b36:	490e      	ldr	r1, [pc, #56]	; (8022b70 <ip_reass_free_complete_datagram+0x144>)
 8022b38:	4809      	ldr	r0, [pc, #36]	; (8022b60 <ip_reass_free_complete_datagram+0x134>)
 8022b3a:	f001 fe31 	bl	80247a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022b3e:	4b0b      	ldr	r3, [pc, #44]	; (8022b6c <ip_reass_free_complete_datagram+0x140>)
 8022b40:	881a      	ldrh	r2, [r3, #0]
 8022b42:	8bfb      	ldrh	r3, [r7, #30]
 8022b44:	1ad3      	subs	r3, r2, r3
 8022b46:	b29a      	uxth	r2, r3
 8022b48:	4b08      	ldr	r3, [pc, #32]	; (8022b6c <ip_reass_free_complete_datagram+0x140>)
 8022b4a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8022b4c:	8bfb      	ldrh	r3, [r7, #30]
}
 8022b4e:	4618      	mov	r0, r3
 8022b50:	3720      	adds	r7, #32
 8022b52:	46bd      	mov	sp, r7
 8022b54:	bd80      	pop	{r7, pc}
 8022b56:	bf00      	nop
 8022b58:	08028b74 	.word	0x08028b74
 8022b5c:	08028bb0 	.word	0x08028bb0
 8022b60:	08028bbc 	.word	0x08028bbc
 8022b64:	08028be4 	.word	0x08028be4
 8022b68:	08028bf8 	.word	0x08028bf8
 8022b6c:	20009118 	.word	0x20009118
 8022b70:	08028c18 	.word	0x08028c18

08022b74 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8022b74:	b580      	push	{r7, lr}
 8022b76:	b08a      	sub	sp, #40	; 0x28
 8022b78:	af00      	add	r7, sp, #0
 8022b7a:	6078      	str	r0, [r7, #4]
 8022b7c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8022b7e:	2300      	movs	r3, #0
 8022b80:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8022b82:	2300      	movs	r3, #0
 8022b84:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8022b86:	2300      	movs	r3, #0
 8022b88:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8022b8a:	2300      	movs	r3, #0
 8022b8c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8022b8e:	2300      	movs	r3, #0
 8022b90:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8022b92:	4b28      	ldr	r3, [pc, #160]	; (8022c34 <ip_reass_remove_oldest_datagram+0xc0>)
 8022b94:	681b      	ldr	r3, [r3, #0]
 8022b96:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8022b98:	e030      	b.n	8022bfc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b9c:	695a      	ldr	r2, [r3, #20]
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	68db      	ldr	r3, [r3, #12]
 8022ba2:	429a      	cmp	r2, r3
 8022ba4:	d10c      	bne.n	8022bc0 <ip_reass_remove_oldest_datagram+0x4c>
 8022ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ba8:	699a      	ldr	r2, [r3, #24]
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	691b      	ldr	r3, [r3, #16]
 8022bae:	429a      	cmp	r2, r3
 8022bb0:	d106      	bne.n	8022bc0 <ip_reass_remove_oldest_datagram+0x4c>
 8022bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bb4:	899a      	ldrh	r2, [r3, #12]
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	889b      	ldrh	r3, [r3, #4]
 8022bba:	b29b      	uxth	r3, r3
 8022bbc:	429a      	cmp	r2, r3
 8022bbe:	d014      	beq.n	8022bea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8022bc0:	693b      	ldr	r3, [r7, #16]
 8022bc2:	3301      	adds	r3, #1
 8022bc4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8022bc6:	6a3b      	ldr	r3, [r7, #32]
 8022bc8:	2b00      	cmp	r3, #0
 8022bca:	d104      	bne.n	8022bd6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8022bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8022bd0:	69fb      	ldr	r3, [r7, #28]
 8022bd2:	61bb      	str	r3, [r7, #24]
 8022bd4:	e009      	b.n	8022bea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8022bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bd8:	7fda      	ldrb	r2, [r3, #31]
 8022bda:	6a3b      	ldr	r3, [r7, #32]
 8022bdc:	7fdb      	ldrb	r3, [r3, #31]
 8022bde:	429a      	cmp	r2, r3
 8022be0:	d803      	bhi.n	8022bea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8022be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022be4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8022be6:	69fb      	ldr	r3, [r7, #28]
 8022be8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8022bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bec:	681b      	ldr	r3, [r3, #0]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d001      	beq.n	8022bf6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8022bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bf4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8022bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8022bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bfe:	2b00      	cmp	r3, #0
 8022c00:	d1cb      	bne.n	8022b9a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8022c02:	6a3b      	ldr	r3, [r7, #32]
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d008      	beq.n	8022c1a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8022c08:	69b9      	ldr	r1, [r7, #24]
 8022c0a:	6a38      	ldr	r0, [r7, #32]
 8022c0c:	f7ff ff0e 	bl	8022a2c <ip_reass_free_complete_datagram>
 8022c10:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8022c12:	697a      	ldr	r2, [r7, #20]
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	4413      	add	r3, r2
 8022c18:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8022c1a:	697a      	ldr	r2, [r7, #20]
 8022c1c:	683b      	ldr	r3, [r7, #0]
 8022c1e:	429a      	cmp	r2, r3
 8022c20:	da02      	bge.n	8022c28 <ip_reass_remove_oldest_datagram+0xb4>
 8022c22:	693b      	ldr	r3, [r7, #16]
 8022c24:	2b01      	cmp	r3, #1
 8022c26:	dcac      	bgt.n	8022b82 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8022c28:	697b      	ldr	r3, [r7, #20]
}
 8022c2a:	4618      	mov	r0, r3
 8022c2c:	3728      	adds	r7, #40	; 0x28
 8022c2e:	46bd      	mov	sp, r7
 8022c30:	bd80      	pop	{r7, pc}
 8022c32:	bf00      	nop
 8022c34:	20009114 	.word	0x20009114

08022c38 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8022c38:	b580      	push	{r7, lr}
 8022c3a:	b084      	sub	sp, #16
 8022c3c:	af00      	add	r7, sp, #0
 8022c3e:	6078      	str	r0, [r7, #4]
 8022c40:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022c42:	2004      	movs	r0, #4
 8022c44:	f7f4 fb36 	bl	80172b4 <memp_malloc>
 8022c48:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8022c4a:	68fb      	ldr	r3, [r7, #12]
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	d110      	bne.n	8022c72 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8022c50:	6839      	ldr	r1, [r7, #0]
 8022c52:	6878      	ldr	r0, [r7, #4]
 8022c54:	f7ff ff8e 	bl	8022b74 <ip_reass_remove_oldest_datagram>
 8022c58:	4602      	mov	r2, r0
 8022c5a:	683b      	ldr	r3, [r7, #0]
 8022c5c:	4293      	cmp	r3, r2
 8022c5e:	dc03      	bgt.n	8022c68 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022c60:	2004      	movs	r0, #4
 8022c62:	f7f4 fb27 	bl	80172b4 <memp_malloc>
 8022c66:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d101      	bne.n	8022c72 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8022c6e:	2300      	movs	r3, #0
 8022c70:	e016      	b.n	8022ca0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8022c72:	2220      	movs	r2, #32
 8022c74:	2100      	movs	r1, #0
 8022c76:	68f8      	ldr	r0, [r7, #12]
 8022c78:	f001 fce2 	bl	8024640 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8022c7c:	68fb      	ldr	r3, [r7, #12]
 8022c7e:	220f      	movs	r2, #15
 8022c80:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8022c82:	4b09      	ldr	r3, [pc, #36]	; (8022ca8 <ip_reass_enqueue_new_datagram+0x70>)
 8022c84:	681a      	ldr	r2, [r3, #0]
 8022c86:	68fb      	ldr	r3, [r7, #12]
 8022c88:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8022c8a:	4a07      	ldr	r2, [pc, #28]	; (8022ca8 <ip_reass_enqueue_new_datagram+0x70>)
 8022c8c:	68fb      	ldr	r3, [r7, #12]
 8022c8e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8022c90:	68fb      	ldr	r3, [r7, #12]
 8022c92:	3308      	adds	r3, #8
 8022c94:	2214      	movs	r2, #20
 8022c96:	6879      	ldr	r1, [r7, #4]
 8022c98:	4618      	mov	r0, r3
 8022c9a:	f001 fcc6 	bl	802462a <memcpy>
  return ipr;
 8022c9e:	68fb      	ldr	r3, [r7, #12]
}
 8022ca0:	4618      	mov	r0, r3
 8022ca2:	3710      	adds	r7, #16
 8022ca4:	46bd      	mov	sp, r7
 8022ca6:	bd80      	pop	{r7, pc}
 8022ca8:	20009114 	.word	0x20009114

08022cac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8022cac:	b580      	push	{r7, lr}
 8022cae:	b082      	sub	sp, #8
 8022cb0:	af00      	add	r7, sp, #0
 8022cb2:	6078      	str	r0, [r7, #4]
 8022cb4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8022cb6:	4b10      	ldr	r3, [pc, #64]	; (8022cf8 <ip_reass_dequeue_datagram+0x4c>)
 8022cb8:	681b      	ldr	r3, [r3, #0]
 8022cba:	687a      	ldr	r2, [r7, #4]
 8022cbc:	429a      	cmp	r2, r3
 8022cbe:	d104      	bne.n	8022cca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	681b      	ldr	r3, [r3, #0]
 8022cc4:	4a0c      	ldr	r2, [pc, #48]	; (8022cf8 <ip_reass_dequeue_datagram+0x4c>)
 8022cc6:	6013      	str	r3, [r2, #0]
 8022cc8:	e00d      	b.n	8022ce6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022cca:	683b      	ldr	r3, [r7, #0]
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d106      	bne.n	8022cde <ip_reass_dequeue_datagram+0x32>
 8022cd0:	4b0a      	ldr	r3, [pc, #40]	; (8022cfc <ip_reass_dequeue_datagram+0x50>)
 8022cd2:	f240 1245 	movw	r2, #325	; 0x145
 8022cd6:	490a      	ldr	r1, [pc, #40]	; (8022d00 <ip_reass_dequeue_datagram+0x54>)
 8022cd8:	480a      	ldr	r0, [pc, #40]	; (8022d04 <ip_reass_dequeue_datagram+0x58>)
 8022cda:	f001 fd61 	bl	80247a0 <iprintf>
    prev->next = ipr->next;
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	681a      	ldr	r2, [r3, #0]
 8022ce2:	683b      	ldr	r3, [r7, #0]
 8022ce4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8022ce6:	6879      	ldr	r1, [r7, #4]
 8022ce8:	2004      	movs	r0, #4
 8022cea:	f7f4 fb35 	bl	8017358 <memp_free>
}
 8022cee:	bf00      	nop
 8022cf0:	3708      	adds	r7, #8
 8022cf2:	46bd      	mov	sp, r7
 8022cf4:	bd80      	pop	{r7, pc}
 8022cf6:	bf00      	nop
 8022cf8:	20009114 	.word	0x20009114
 8022cfc:	08028b74 	.word	0x08028b74
 8022d00:	08028c3c 	.word	0x08028c3c
 8022d04:	08028bbc 	.word	0x08028bbc

08022d08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b08c      	sub	sp, #48	; 0x30
 8022d0c:	af00      	add	r7, sp, #0
 8022d0e:	60f8      	str	r0, [r7, #12]
 8022d10:	60b9      	str	r1, [r7, #8]
 8022d12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8022d14:	2300      	movs	r3, #0
 8022d16:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8022d18:	2301      	movs	r3, #1
 8022d1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8022d1c:	68bb      	ldr	r3, [r7, #8]
 8022d1e:	685b      	ldr	r3, [r3, #4]
 8022d20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022d22:	69fb      	ldr	r3, [r7, #28]
 8022d24:	885b      	ldrh	r3, [r3, #2]
 8022d26:	b29b      	uxth	r3, r3
 8022d28:	4618      	mov	r0, r3
 8022d2a:	f7f3 fe0d 	bl	8016948 <lwip_htons>
 8022d2e:	4603      	mov	r3, r0
 8022d30:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8022d32:	69fb      	ldr	r3, [r7, #28]
 8022d34:	781b      	ldrb	r3, [r3, #0]
 8022d36:	f003 030f 	and.w	r3, r3, #15
 8022d3a:	b2db      	uxtb	r3, r3
 8022d3c:	009b      	lsls	r3, r3, #2
 8022d3e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8022d40:	7e7b      	ldrb	r3, [r7, #25]
 8022d42:	b29b      	uxth	r3, r3
 8022d44:	8b7a      	ldrh	r2, [r7, #26]
 8022d46:	429a      	cmp	r2, r3
 8022d48:	d202      	bcs.n	8022d50 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022d4e:	e135      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8022d50:	7e7b      	ldrb	r3, [r7, #25]
 8022d52:	b29b      	uxth	r3, r3
 8022d54:	8b7a      	ldrh	r2, [r7, #26]
 8022d56:	1ad3      	subs	r3, r2, r3
 8022d58:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022d5a:	69fb      	ldr	r3, [r7, #28]
 8022d5c:	88db      	ldrh	r3, [r3, #6]
 8022d5e:	b29b      	uxth	r3, r3
 8022d60:	4618      	mov	r0, r3
 8022d62:	f7f3 fdf1 	bl	8016948 <lwip_htons>
 8022d66:	4603      	mov	r3, r0
 8022d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022d6c:	b29b      	uxth	r3, r3
 8022d6e:	00db      	lsls	r3, r3, #3
 8022d70:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022d72:	68bb      	ldr	r3, [r7, #8]
 8022d74:	685b      	ldr	r3, [r3, #4]
 8022d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8022d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d7a:	2200      	movs	r2, #0
 8022d7c:	701a      	strb	r2, [r3, #0]
 8022d7e:	2200      	movs	r2, #0
 8022d80:	705a      	strb	r2, [r3, #1]
 8022d82:	2200      	movs	r2, #0
 8022d84:	709a      	strb	r2, [r3, #2]
 8022d86:	2200      	movs	r2, #0
 8022d88:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8022d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d8c:	8afa      	ldrh	r2, [r7, #22]
 8022d8e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8022d90:	8afa      	ldrh	r2, [r7, #22]
 8022d92:	8b7b      	ldrh	r3, [r7, #26]
 8022d94:	4413      	add	r3, r2
 8022d96:	b29a      	uxth	r2, r3
 8022d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d9a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8022d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d9e:	88db      	ldrh	r3, [r3, #6]
 8022da0:	b29b      	uxth	r3, r3
 8022da2:	8afa      	ldrh	r2, [r7, #22]
 8022da4:	429a      	cmp	r2, r3
 8022da6:	d902      	bls.n	8022dae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022dac:	e106      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8022dae:	68fb      	ldr	r3, [r7, #12]
 8022db0:	685b      	ldr	r3, [r3, #4]
 8022db2:	627b      	str	r3, [r7, #36]	; 0x24
 8022db4:	e068      	b.n	8022e88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8022db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022db8:	685b      	ldr	r3, [r3, #4]
 8022dba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8022dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022dbe:	889b      	ldrh	r3, [r3, #4]
 8022dc0:	b29a      	uxth	r2, r3
 8022dc2:	693b      	ldr	r3, [r7, #16]
 8022dc4:	889b      	ldrh	r3, [r3, #4]
 8022dc6:	b29b      	uxth	r3, r3
 8022dc8:	429a      	cmp	r2, r3
 8022dca:	d235      	bcs.n	8022e38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8022dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022dd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8022dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d020      	beq.n	8022e1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8022dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022dda:	889b      	ldrh	r3, [r3, #4]
 8022ddc:	b29a      	uxth	r2, r3
 8022dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022de0:	88db      	ldrh	r3, [r3, #6]
 8022de2:	b29b      	uxth	r3, r3
 8022de4:	429a      	cmp	r2, r3
 8022de6:	d307      	bcc.n	8022df8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8022de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022dea:	88db      	ldrh	r3, [r3, #6]
 8022dec:	b29a      	uxth	r2, r3
 8022dee:	693b      	ldr	r3, [r7, #16]
 8022df0:	889b      	ldrh	r3, [r3, #4]
 8022df2:	b29b      	uxth	r3, r3
 8022df4:	429a      	cmp	r2, r3
 8022df6:	d902      	bls.n	8022dfe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022dfc:	e0de      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8022dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e00:	68ba      	ldr	r2, [r7, #8]
 8022e02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8022e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e06:	88db      	ldrh	r3, [r3, #6]
 8022e08:	b29a      	uxth	r2, r3
 8022e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e0c:	889b      	ldrh	r3, [r3, #4]
 8022e0e:	b29b      	uxth	r3, r3
 8022e10:	429a      	cmp	r2, r3
 8022e12:	d03d      	beq.n	8022e90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8022e14:	2300      	movs	r3, #0
 8022e16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8022e18:	e03a      	b.n	8022e90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8022e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e1c:	88db      	ldrh	r3, [r3, #6]
 8022e1e:	b29a      	uxth	r2, r3
 8022e20:	693b      	ldr	r3, [r7, #16]
 8022e22:	889b      	ldrh	r3, [r3, #4]
 8022e24:	b29b      	uxth	r3, r3
 8022e26:	429a      	cmp	r2, r3
 8022e28:	d902      	bls.n	8022e30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022e2e:	e0c5      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	68ba      	ldr	r2, [r7, #8]
 8022e34:	605a      	str	r2, [r3, #4]
      break;
 8022e36:	e02b      	b.n	8022e90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8022e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e3a:	889b      	ldrh	r3, [r3, #4]
 8022e3c:	b29a      	uxth	r2, r3
 8022e3e:	693b      	ldr	r3, [r7, #16]
 8022e40:	889b      	ldrh	r3, [r3, #4]
 8022e42:	b29b      	uxth	r3, r3
 8022e44:	429a      	cmp	r2, r3
 8022e46:	d102      	bne.n	8022e4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022e4c:	e0b6      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8022e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e50:	889b      	ldrh	r3, [r3, #4]
 8022e52:	b29a      	uxth	r2, r3
 8022e54:	693b      	ldr	r3, [r7, #16]
 8022e56:	88db      	ldrh	r3, [r3, #6]
 8022e58:	b29b      	uxth	r3, r3
 8022e5a:	429a      	cmp	r2, r3
 8022e5c:	d202      	bcs.n	8022e64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022e62:	e0ab      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8022e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	d009      	beq.n	8022e7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8022e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e6c:	88db      	ldrh	r3, [r3, #6]
 8022e6e:	b29a      	uxth	r2, r3
 8022e70:	693b      	ldr	r3, [r7, #16]
 8022e72:	889b      	ldrh	r3, [r3, #4]
 8022e74:	b29b      	uxth	r3, r3
 8022e76:	429a      	cmp	r2, r3
 8022e78:	d001      	beq.n	8022e7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8022e7e:	693b      	ldr	r3, [r7, #16]
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8022e84:	693b      	ldr	r3, [r7, #16]
 8022e86:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8022e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d193      	bne.n	8022db6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8022e8e:	e000      	b.n	8022e92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8022e90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8022e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d12d      	bne.n	8022ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8022e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d01c      	beq.n	8022ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8022e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ea0:	88db      	ldrh	r3, [r3, #6]
 8022ea2:	b29a      	uxth	r2, r3
 8022ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ea6:	889b      	ldrh	r3, [r3, #4]
 8022ea8:	b29b      	uxth	r3, r3
 8022eaa:	429a      	cmp	r2, r3
 8022eac:	d906      	bls.n	8022ebc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8022eae:	4b45      	ldr	r3, [pc, #276]	; (8022fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022eb0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8022eb4:	4944      	ldr	r1, [pc, #272]	; (8022fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8022eb6:	4845      	ldr	r0, [pc, #276]	; (8022fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022eb8:	f001 fc72 	bl	80247a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8022ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ebe:	68ba      	ldr	r2, [r7, #8]
 8022ec0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8022ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ec4:	88db      	ldrh	r3, [r3, #6]
 8022ec6:	b29a      	uxth	r2, r3
 8022ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022eca:	889b      	ldrh	r3, [r3, #4]
 8022ecc:	b29b      	uxth	r3, r3
 8022ece:	429a      	cmp	r2, r3
 8022ed0:	d010      	beq.n	8022ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	623b      	str	r3, [r7, #32]
 8022ed6:	e00d      	b.n	8022ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8022ed8:	68fb      	ldr	r3, [r7, #12]
 8022eda:	685b      	ldr	r3, [r3, #4]
 8022edc:	2b00      	cmp	r3, #0
 8022ede:	d006      	beq.n	8022eee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8022ee0:	4b38      	ldr	r3, [pc, #224]	; (8022fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022ee2:	f240 12bf 	movw	r2, #447	; 0x1bf
 8022ee6:	493a      	ldr	r1, [pc, #232]	; (8022fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8022ee8:	4838      	ldr	r0, [pc, #224]	; (8022fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022eea:	f001 fc59 	bl	80247a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8022eee:	68fb      	ldr	r3, [r7, #12]
 8022ef0:	68ba      	ldr	r2, [r7, #8]
 8022ef2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d105      	bne.n	8022f06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8022efa:	68fb      	ldr	r3, [r7, #12]
 8022efc:	7f9b      	ldrb	r3, [r3, #30]
 8022efe:	f003 0301 	and.w	r3, r3, #1
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	d059      	beq.n	8022fba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8022f06:	6a3b      	ldr	r3, [r7, #32]
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	d04f      	beq.n	8022fac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022f0c:	68fb      	ldr	r3, [r7, #12]
 8022f0e:	685b      	ldr	r3, [r3, #4]
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	d006      	beq.n	8022f22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8022f14:	68fb      	ldr	r3, [r7, #12]
 8022f16:	685b      	ldr	r3, [r3, #4]
 8022f18:	685b      	ldr	r3, [r3, #4]
 8022f1a:	889b      	ldrh	r3, [r3, #4]
 8022f1c:	b29b      	uxth	r3, r3
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	d002      	beq.n	8022f28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8022f22:	2300      	movs	r3, #0
 8022f24:	623b      	str	r3, [r7, #32]
 8022f26:	e041      	b.n	8022fac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8022f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f2a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8022f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f2e:	681b      	ldr	r3, [r3, #0]
 8022f30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022f32:	e012      	b.n	8022f5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8022f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f36:	685b      	ldr	r3, [r3, #4]
 8022f38:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8022f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f3c:	88db      	ldrh	r3, [r3, #6]
 8022f3e:	b29a      	uxth	r2, r3
 8022f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f42:	889b      	ldrh	r3, [r3, #4]
 8022f44:	b29b      	uxth	r3, r3
 8022f46:	429a      	cmp	r2, r3
 8022f48:	d002      	beq.n	8022f50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8022f4a:	2300      	movs	r3, #0
 8022f4c:	623b      	str	r3, [r7, #32]
            break;
 8022f4e:	e007      	b.n	8022f60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8022f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f52:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8022f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f56:	681b      	ldr	r3, [r3, #0]
 8022f58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f5c:	2b00      	cmp	r3, #0
 8022f5e:	d1e9      	bne.n	8022f34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8022f60:	6a3b      	ldr	r3, [r7, #32]
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	d022      	beq.n	8022fac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	685b      	ldr	r3, [r3, #4]
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d106      	bne.n	8022f7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8022f6e:	4b15      	ldr	r3, [pc, #84]	; (8022fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022f70:	f240 12df 	movw	r2, #479	; 0x1df
 8022f74:	4917      	ldr	r1, [pc, #92]	; (8022fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8022f76:	4815      	ldr	r0, [pc, #84]	; (8022fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022f78:	f001 fc12 	bl	80247a0 <iprintf>
          LWIP_ASSERT("sanity check",
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	685b      	ldr	r3, [r3, #4]
 8022f80:	685b      	ldr	r3, [r3, #4]
 8022f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022f84:	429a      	cmp	r2, r3
 8022f86:	d106      	bne.n	8022f96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8022f88:	4b0e      	ldr	r3, [pc, #56]	; (8022fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022f8a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8022f8e:	4911      	ldr	r1, [pc, #68]	; (8022fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8022f90:	480e      	ldr	r0, [pc, #56]	; (8022fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022f92:	f001 fc05 	bl	80247a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8022f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f98:	681b      	ldr	r3, [r3, #0]
 8022f9a:	2b00      	cmp	r3, #0
 8022f9c:	d006      	beq.n	8022fac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8022f9e:	4b09      	ldr	r3, [pc, #36]	; (8022fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022fa0:	f240 12e3 	movw	r2, #483	; 0x1e3
 8022fa4:	490c      	ldr	r1, [pc, #48]	; (8022fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8022fa6:	4809      	ldr	r0, [pc, #36]	; (8022fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022fa8:	f001 fbfa 	bl	80247a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8022fac:	6a3b      	ldr	r3, [r7, #32]
 8022fae:	2b00      	cmp	r3, #0
 8022fb0:	bf14      	ite	ne
 8022fb2:	2301      	movne	r3, #1
 8022fb4:	2300      	moveq	r3, #0
 8022fb6:	b2db      	uxtb	r3, r3
 8022fb8:	e000      	b.n	8022fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8022fba:	2300      	movs	r3, #0
}
 8022fbc:	4618      	mov	r0, r3
 8022fbe:	3730      	adds	r7, #48	; 0x30
 8022fc0:	46bd      	mov	sp, r7
 8022fc2:	bd80      	pop	{r7, pc}
 8022fc4:	08028b74 	.word	0x08028b74
 8022fc8:	08028c58 	.word	0x08028c58
 8022fcc:	08028bbc 	.word	0x08028bbc
 8022fd0:	08028c78 	.word	0x08028c78
 8022fd4:	08028cb0 	.word	0x08028cb0
 8022fd8:	08028cc0 	.word	0x08028cc0

08022fdc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8022fdc:	b580      	push	{r7, lr}
 8022fde:	b08e      	sub	sp, #56	; 0x38
 8022fe0:	af00      	add	r7, sp, #0
 8022fe2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	685b      	ldr	r3, [r3, #4]
 8022fe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8022fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fec:	781b      	ldrb	r3, [r3, #0]
 8022fee:	f003 030f 	and.w	r3, r3, #15
 8022ff2:	b2db      	uxtb	r3, r3
 8022ff4:	009b      	lsls	r3, r3, #2
 8022ff6:	b2db      	uxtb	r3, r3
 8022ff8:	2b14      	cmp	r3, #20
 8022ffa:	f040 8167 	bne.w	80232cc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8022ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023000:	88db      	ldrh	r3, [r3, #6]
 8023002:	b29b      	uxth	r3, r3
 8023004:	4618      	mov	r0, r3
 8023006:	f7f3 fc9f 	bl	8016948 <lwip_htons>
 802300a:	4603      	mov	r3, r0
 802300c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023010:	b29b      	uxth	r3, r3
 8023012:	00db      	lsls	r3, r3, #3
 8023014:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023018:	885b      	ldrh	r3, [r3, #2]
 802301a:	b29b      	uxth	r3, r3
 802301c:	4618      	mov	r0, r3
 802301e:	f7f3 fc93 	bl	8016948 <lwip_htons>
 8023022:	4603      	mov	r3, r0
 8023024:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8023026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023028:	781b      	ldrb	r3, [r3, #0]
 802302a:	f003 030f 	and.w	r3, r3, #15
 802302e:	b2db      	uxtb	r3, r3
 8023030:	009b      	lsls	r3, r3, #2
 8023032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8023036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802303a:	b29b      	uxth	r3, r3
 802303c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802303e:	429a      	cmp	r2, r3
 8023040:	f0c0 8146 	bcc.w	80232d0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8023044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023048:	b29b      	uxth	r3, r3
 802304a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802304c:	1ad3      	subs	r3, r2, r3
 802304e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8023050:	6878      	ldr	r0, [r7, #4]
 8023052:	f7f5 f8d5 	bl	8018200 <pbuf_clen>
 8023056:	4603      	mov	r3, r0
 8023058:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802305a:	4ba3      	ldr	r3, [pc, #652]	; (80232e8 <ip4_reass+0x30c>)
 802305c:	881b      	ldrh	r3, [r3, #0]
 802305e:	461a      	mov	r2, r3
 8023060:	8c3b      	ldrh	r3, [r7, #32]
 8023062:	4413      	add	r3, r2
 8023064:	2b0a      	cmp	r3, #10
 8023066:	dd10      	ble.n	802308a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023068:	8c3b      	ldrh	r3, [r7, #32]
 802306a:	4619      	mov	r1, r3
 802306c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802306e:	f7ff fd81 	bl	8022b74 <ip_reass_remove_oldest_datagram>
 8023072:	4603      	mov	r3, r0
 8023074:	2b00      	cmp	r3, #0
 8023076:	f000 812d 	beq.w	80232d4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802307a:	4b9b      	ldr	r3, [pc, #620]	; (80232e8 <ip4_reass+0x30c>)
 802307c:	881b      	ldrh	r3, [r3, #0]
 802307e:	461a      	mov	r2, r3
 8023080:	8c3b      	ldrh	r3, [r7, #32]
 8023082:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023084:	2b0a      	cmp	r3, #10
 8023086:	f300 8125 	bgt.w	80232d4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802308a:	4b98      	ldr	r3, [pc, #608]	; (80232ec <ip4_reass+0x310>)
 802308c:	681b      	ldr	r3, [r3, #0]
 802308e:	633b      	str	r3, [r7, #48]	; 0x30
 8023090:	e015      	b.n	80230be <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8023092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023094:	695a      	ldr	r2, [r3, #20]
 8023096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023098:	68db      	ldr	r3, [r3, #12]
 802309a:	429a      	cmp	r2, r3
 802309c:	d10c      	bne.n	80230b8 <ip4_reass+0xdc>
 802309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230a0:	699a      	ldr	r2, [r3, #24]
 80230a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230a4:	691b      	ldr	r3, [r3, #16]
 80230a6:	429a      	cmp	r2, r3
 80230a8:	d106      	bne.n	80230b8 <ip4_reass+0xdc>
 80230aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230ac:	899a      	ldrh	r2, [r3, #12]
 80230ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230b0:	889b      	ldrh	r3, [r3, #4]
 80230b2:	b29b      	uxth	r3, r3
 80230b4:	429a      	cmp	r2, r3
 80230b6:	d006      	beq.n	80230c6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80230b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230ba:	681b      	ldr	r3, [r3, #0]
 80230bc:	633b      	str	r3, [r7, #48]	; 0x30
 80230be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d1e6      	bne.n	8023092 <ip4_reass+0xb6>
 80230c4:	e000      	b.n	80230c8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80230c6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80230c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230ca:	2b00      	cmp	r3, #0
 80230cc:	d109      	bne.n	80230e2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80230ce:	8c3b      	ldrh	r3, [r7, #32]
 80230d0:	4619      	mov	r1, r3
 80230d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80230d4:	f7ff fdb0 	bl	8022c38 <ip_reass_enqueue_new_datagram>
 80230d8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80230da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230dc:	2b00      	cmp	r3, #0
 80230de:	d11c      	bne.n	802311a <ip4_reass+0x13e>
      goto nullreturn;
 80230e0:	e0f9      	b.n	80232d6 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80230e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230e4:	88db      	ldrh	r3, [r3, #6]
 80230e6:	b29b      	uxth	r3, r3
 80230e8:	4618      	mov	r0, r3
 80230ea:	f7f3 fc2d 	bl	8016948 <lwip_htons>
 80230ee:	4603      	mov	r3, r0
 80230f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d110      	bne.n	802311a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80230f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230fa:	89db      	ldrh	r3, [r3, #14]
 80230fc:	4618      	mov	r0, r3
 80230fe:	f7f3 fc23 	bl	8016948 <lwip_htons>
 8023102:	4603      	mov	r3, r0
 8023104:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023108:	2b00      	cmp	r3, #0
 802310a:	d006      	beq.n	802311a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802310e:	3308      	adds	r3, #8
 8023110:	2214      	movs	r2, #20
 8023112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023114:	4618      	mov	r0, r3
 8023116:	f001 fa88 	bl	802462a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802311c:	88db      	ldrh	r3, [r3, #6]
 802311e:	b29b      	uxth	r3, r3
 8023120:	f003 0320 	and.w	r3, r3, #32
 8023124:	2b00      	cmp	r3, #0
 8023126:	bf0c      	ite	eq
 8023128:	2301      	moveq	r3, #1
 802312a:	2300      	movne	r3, #0
 802312c:	b2db      	uxtb	r3, r3
 802312e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8023130:	69fb      	ldr	r3, [r7, #28]
 8023132:	2b00      	cmp	r3, #0
 8023134:	d00e      	beq.n	8023154 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8023136:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802313a:	4413      	add	r3, r2
 802313c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802313e:	8b7a      	ldrh	r2, [r7, #26]
 8023140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023142:	429a      	cmp	r2, r3
 8023144:	f0c0 80a0 	bcc.w	8023288 <ip4_reass+0x2ac>
 8023148:	8b7b      	ldrh	r3, [r7, #26]
 802314a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802314e:	4293      	cmp	r3, r2
 8023150:	f200 809a 	bhi.w	8023288 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8023154:	69fa      	ldr	r2, [r7, #28]
 8023156:	6879      	ldr	r1, [r7, #4]
 8023158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802315a:	f7ff fdd5 	bl	8022d08 <ip_reass_chain_frag_into_datagram_and_validate>
 802315e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8023160:	697b      	ldr	r3, [r7, #20]
 8023162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8023166:	f000 8091 	beq.w	802328c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802316a:	4b5f      	ldr	r3, [pc, #380]	; (80232e8 <ip4_reass+0x30c>)
 802316c:	881a      	ldrh	r2, [r3, #0]
 802316e:	8c3b      	ldrh	r3, [r7, #32]
 8023170:	4413      	add	r3, r2
 8023172:	b29a      	uxth	r2, r3
 8023174:	4b5c      	ldr	r3, [pc, #368]	; (80232e8 <ip4_reass+0x30c>)
 8023176:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8023178:	69fb      	ldr	r3, [r7, #28]
 802317a:	2b00      	cmp	r3, #0
 802317c:	d00d      	beq.n	802319a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802317e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023182:	4413      	add	r3, r2
 8023184:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8023186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023188:	8a7a      	ldrh	r2, [r7, #18]
 802318a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802318e:	7f9b      	ldrb	r3, [r3, #30]
 8023190:	f043 0301 	orr.w	r3, r3, #1
 8023194:	b2da      	uxtb	r2, r3
 8023196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023198:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802319a:	697b      	ldr	r3, [r7, #20]
 802319c:	2b01      	cmp	r3, #1
 802319e:	d171      	bne.n	8023284 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80231a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231a2:	8b9b      	ldrh	r3, [r3, #28]
 80231a4:	3314      	adds	r3, #20
 80231a6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80231a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231aa:	685b      	ldr	r3, [r3, #4]
 80231ac:	685b      	ldr	r3, [r3, #4]
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80231b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231b4:	685b      	ldr	r3, [r3, #4]
 80231b6:	685b      	ldr	r3, [r3, #4]
 80231b8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80231ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231bc:	3308      	adds	r3, #8
 80231be:	2214      	movs	r2, #20
 80231c0:	4619      	mov	r1, r3
 80231c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80231c4:	f001 fa31 	bl	802462a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80231c8:	8a3b      	ldrh	r3, [r7, #16]
 80231ca:	4618      	mov	r0, r3
 80231cc:	f7f3 fbbc 	bl	8016948 <lwip_htons>
 80231d0:	4603      	mov	r3, r0
 80231d2:	461a      	mov	r2, r3
 80231d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231d6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80231d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231da:	2200      	movs	r2, #0
 80231dc:	719a      	strb	r2, [r3, #6]
 80231de:	2200      	movs	r2, #0
 80231e0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80231e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231e4:	2200      	movs	r2, #0
 80231e6:	729a      	strb	r2, [r3, #10]
 80231e8:	2200      	movs	r2, #0
 80231ea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80231ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231ee:	685b      	ldr	r3, [r3, #4]
 80231f0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80231f2:	e00d      	b.n	8023210 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80231f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80231f6:	685b      	ldr	r3, [r3, #4]
 80231f8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80231fa:	2114      	movs	r1, #20
 80231fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80231fe:	f7f4 feeb 	bl	8017fd8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8023202:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023204:	6878      	ldr	r0, [r7, #4]
 8023206:	f7f5 f83b 	bl	8018280 <pbuf_cat>
      r = iprh->next_pbuf;
 802320a:	68fb      	ldr	r3, [r7, #12]
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8023210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023212:	2b00      	cmp	r3, #0
 8023214:	d1ee      	bne.n	80231f4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8023216:	4b35      	ldr	r3, [pc, #212]	; (80232ec <ip4_reass+0x310>)
 8023218:	681b      	ldr	r3, [r3, #0]
 802321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802321c:	429a      	cmp	r2, r3
 802321e:	d102      	bne.n	8023226 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8023220:	2300      	movs	r3, #0
 8023222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023224:	e010      	b.n	8023248 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023226:	4b31      	ldr	r3, [pc, #196]	; (80232ec <ip4_reass+0x310>)
 8023228:	681b      	ldr	r3, [r3, #0]
 802322a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802322c:	e007      	b.n	802323e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023234:	429a      	cmp	r2, r3
 8023236:	d006      	beq.n	8023246 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023240:	2b00      	cmp	r3, #0
 8023242:	d1f4      	bne.n	802322e <ip4_reass+0x252>
 8023244:	e000      	b.n	8023248 <ip4_reass+0x26c>
          break;
 8023246:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8023248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802324a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802324c:	f7ff fd2e 	bl	8022cac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8023250:	6878      	ldr	r0, [r7, #4]
 8023252:	f7f4 ffd5 	bl	8018200 <pbuf_clen>
 8023256:	4603      	mov	r3, r0
 8023258:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802325a:	4b23      	ldr	r3, [pc, #140]	; (80232e8 <ip4_reass+0x30c>)
 802325c:	881b      	ldrh	r3, [r3, #0]
 802325e:	8c3a      	ldrh	r2, [r7, #32]
 8023260:	429a      	cmp	r2, r3
 8023262:	d906      	bls.n	8023272 <ip4_reass+0x296>
 8023264:	4b22      	ldr	r3, [pc, #136]	; (80232f0 <ip4_reass+0x314>)
 8023266:	f240 229b 	movw	r2, #667	; 0x29b
 802326a:	4922      	ldr	r1, [pc, #136]	; (80232f4 <ip4_reass+0x318>)
 802326c:	4822      	ldr	r0, [pc, #136]	; (80232f8 <ip4_reass+0x31c>)
 802326e:	f001 fa97 	bl	80247a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8023272:	4b1d      	ldr	r3, [pc, #116]	; (80232e8 <ip4_reass+0x30c>)
 8023274:	881a      	ldrh	r2, [r3, #0]
 8023276:	8c3b      	ldrh	r3, [r7, #32]
 8023278:	1ad3      	subs	r3, r2, r3
 802327a:	b29a      	uxth	r2, r3
 802327c:	4b1a      	ldr	r3, [pc, #104]	; (80232e8 <ip4_reass+0x30c>)
 802327e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	e02c      	b.n	80232de <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8023284:	2300      	movs	r3, #0
 8023286:	e02a      	b.n	80232de <ip4_reass+0x302>

nullreturn_ipr:
 8023288:	bf00      	nop
 802328a:	e000      	b.n	802328e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 802328c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023290:	2b00      	cmp	r3, #0
 8023292:	d106      	bne.n	80232a2 <ip4_reass+0x2c6>
 8023294:	4b16      	ldr	r3, [pc, #88]	; (80232f0 <ip4_reass+0x314>)
 8023296:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802329a:	4918      	ldr	r1, [pc, #96]	; (80232fc <ip4_reass+0x320>)
 802329c:	4816      	ldr	r0, [pc, #88]	; (80232f8 <ip4_reass+0x31c>)
 802329e:	f001 fa7f 	bl	80247a0 <iprintf>
  if (ipr->p == NULL) {
 80232a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232a4:	685b      	ldr	r3, [r3, #4]
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	d114      	bne.n	80232d4 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80232aa:	4b10      	ldr	r3, [pc, #64]	; (80232ec <ip4_reass+0x310>)
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80232b0:	429a      	cmp	r2, r3
 80232b2:	d006      	beq.n	80232c2 <ip4_reass+0x2e6>
 80232b4:	4b0e      	ldr	r3, [pc, #56]	; (80232f0 <ip4_reass+0x314>)
 80232b6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80232ba:	4911      	ldr	r1, [pc, #68]	; (8023300 <ip4_reass+0x324>)
 80232bc:	480e      	ldr	r0, [pc, #56]	; (80232f8 <ip4_reass+0x31c>)
 80232be:	f001 fa6f 	bl	80247a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80232c2:	2100      	movs	r1, #0
 80232c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80232c6:	f7ff fcf1 	bl	8022cac <ip_reass_dequeue_datagram>
 80232ca:	e004      	b.n	80232d6 <ip4_reass+0x2fa>
    goto nullreturn;
 80232cc:	bf00      	nop
 80232ce:	e002      	b.n	80232d6 <ip4_reass+0x2fa>
    goto nullreturn;
 80232d0:	bf00      	nop
 80232d2:	e000      	b.n	80232d6 <ip4_reass+0x2fa>
  }

nullreturn:
 80232d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80232d6:	6878      	ldr	r0, [r7, #4]
 80232d8:	f7f4 ff04 	bl	80180e4 <pbuf_free>
  return NULL;
 80232dc:	2300      	movs	r3, #0
}
 80232de:	4618      	mov	r0, r3
 80232e0:	3738      	adds	r7, #56	; 0x38
 80232e2:	46bd      	mov	sp, r7
 80232e4:	bd80      	pop	{r7, pc}
 80232e6:	bf00      	nop
 80232e8:	20009118 	.word	0x20009118
 80232ec:	20009114 	.word	0x20009114
 80232f0:	08028b74 	.word	0x08028b74
 80232f4:	08028ce4 	.word	0x08028ce4
 80232f8:	08028bbc 	.word	0x08028bbc
 80232fc:	08028d00 	.word	0x08028d00
 8023300:	08028d0c 	.word	0x08028d0c

08023304 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8023304:	b580      	push	{r7, lr}
 8023306:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8023308:	2005      	movs	r0, #5
 802330a:	f7f3 ffd3 	bl	80172b4 <memp_malloc>
 802330e:	4603      	mov	r3, r0
}
 8023310:	4618      	mov	r0, r3
 8023312:	bd80      	pop	{r7, pc}

08023314 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8023314:	b580      	push	{r7, lr}
 8023316:	b082      	sub	sp, #8
 8023318:	af00      	add	r7, sp, #0
 802331a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	2b00      	cmp	r3, #0
 8023320:	d106      	bne.n	8023330 <ip_frag_free_pbuf_custom_ref+0x1c>
 8023322:	4b07      	ldr	r3, [pc, #28]	; (8023340 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8023324:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8023328:	4906      	ldr	r1, [pc, #24]	; (8023344 <ip_frag_free_pbuf_custom_ref+0x30>)
 802332a:	4807      	ldr	r0, [pc, #28]	; (8023348 <ip_frag_free_pbuf_custom_ref+0x34>)
 802332c:	f001 fa38 	bl	80247a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8023330:	6879      	ldr	r1, [r7, #4]
 8023332:	2005      	movs	r0, #5
 8023334:	f7f4 f810 	bl	8017358 <memp_free>
}
 8023338:	bf00      	nop
 802333a:	3708      	adds	r7, #8
 802333c:	46bd      	mov	sp, r7
 802333e:	bd80      	pop	{r7, pc}
 8023340:	08028b74 	.word	0x08028b74
 8023344:	08028d2c 	.word	0x08028d2c
 8023348:	08028bbc 	.word	0x08028bbc

0802334c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 802334c:	b580      	push	{r7, lr}
 802334e:	b084      	sub	sp, #16
 8023350:	af00      	add	r7, sp, #0
 8023352:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023358:	68fb      	ldr	r3, [r7, #12]
 802335a:	2b00      	cmp	r3, #0
 802335c:	d106      	bne.n	802336c <ipfrag_free_pbuf_custom+0x20>
 802335e:	4b11      	ldr	r3, [pc, #68]	; (80233a4 <ipfrag_free_pbuf_custom+0x58>)
 8023360:	f240 22ce 	movw	r2, #718	; 0x2ce
 8023364:	4910      	ldr	r1, [pc, #64]	; (80233a8 <ipfrag_free_pbuf_custom+0x5c>)
 8023366:	4811      	ldr	r0, [pc, #68]	; (80233ac <ipfrag_free_pbuf_custom+0x60>)
 8023368:	f001 fa1a 	bl	80247a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 802336c:	68fa      	ldr	r2, [r7, #12]
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	429a      	cmp	r2, r3
 8023372:	d006      	beq.n	8023382 <ipfrag_free_pbuf_custom+0x36>
 8023374:	4b0b      	ldr	r3, [pc, #44]	; (80233a4 <ipfrag_free_pbuf_custom+0x58>)
 8023376:	f240 22cf 	movw	r2, #719	; 0x2cf
 802337a:	490d      	ldr	r1, [pc, #52]	; (80233b0 <ipfrag_free_pbuf_custom+0x64>)
 802337c:	480b      	ldr	r0, [pc, #44]	; (80233ac <ipfrag_free_pbuf_custom+0x60>)
 802337e:	f001 fa0f 	bl	80247a0 <iprintf>
  if (pcr->original != NULL) {
 8023382:	68fb      	ldr	r3, [r7, #12]
 8023384:	695b      	ldr	r3, [r3, #20]
 8023386:	2b00      	cmp	r3, #0
 8023388:	d004      	beq.n	8023394 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	695b      	ldr	r3, [r3, #20]
 802338e:	4618      	mov	r0, r3
 8023390:	f7f4 fea8 	bl	80180e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8023394:	68f8      	ldr	r0, [r7, #12]
 8023396:	f7ff ffbd 	bl	8023314 <ip_frag_free_pbuf_custom_ref>
}
 802339a:	bf00      	nop
 802339c:	3710      	adds	r7, #16
 802339e:	46bd      	mov	sp, r7
 80233a0:	bd80      	pop	{r7, pc}
 80233a2:	bf00      	nop
 80233a4:	08028b74 	.word	0x08028b74
 80233a8:	08028d38 	.word	0x08028d38
 80233ac:	08028bbc 	.word	0x08028bbc
 80233b0:	08028d44 	.word	0x08028d44

080233b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80233b4:	b580      	push	{r7, lr}
 80233b6:	b094      	sub	sp, #80	; 0x50
 80233b8:	af02      	add	r7, sp, #8
 80233ba:	60f8      	str	r0, [r7, #12]
 80233bc:	60b9      	str	r1, [r7, #8]
 80233be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80233c0:	2300      	movs	r3, #0
 80233c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80233c6:	68bb      	ldr	r3, [r7, #8]
 80233c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80233ca:	3b14      	subs	r3, #20
 80233cc:	2b00      	cmp	r3, #0
 80233ce:	da00      	bge.n	80233d2 <ip4_frag+0x1e>
 80233d0:	3307      	adds	r3, #7
 80233d2:	10db      	asrs	r3, r3, #3
 80233d4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80233d6:	2314      	movs	r3, #20
 80233d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80233da:	68fb      	ldr	r3, [r7, #12]
 80233dc:	685b      	ldr	r3, [r3, #4]
 80233de:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80233e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80233e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80233e6:	781b      	ldrb	r3, [r3, #0]
 80233e8:	f003 030f 	and.w	r3, r3, #15
 80233ec:	b2db      	uxtb	r3, r3
 80233ee:	009b      	lsls	r3, r3, #2
 80233f0:	b2db      	uxtb	r3, r3
 80233f2:	2b14      	cmp	r3, #20
 80233f4:	d002      	beq.n	80233fc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80233f6:	f06f 0305 	mvn.w	r3, #5
 80233fa:	e10f      	b.n	802361c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80233fc:	68fb      	ldr	r3, [r7, #12]
 80233fe:	895b      	ldrh	r3, [r3, #10]
 8023400:	2b13      	cmp	r3, #19
 8023402:	d809      	bhi.n	8023418 <ip4_frag+0x64>
 8023404:	4b87      	ldr	r3, [pc, #540]	; (8023624 <ip4_frag+0x270>)
 8023406:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802340a:	4987      	ldr	r1, [pc, #540]	; (8023628 <ip4_frag+0x274>)
 802340c:	4887      	ldr	r0, [pc, #540]	; (802362c <ip4_frag+0x278>)
 802340e:	f001 f9c7 	bl	80247a0 <iprintf>
 8023412:	f06f 0305 	mvn.w	r3, #5
 8023416:	e101      	b.n	802361c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8023418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802341a:	88db      	ldrh	r3, [r3, #6]
 802341c:	b29b      	uxth	r3, r3
 802341e:	4618      	mov	r0, r3
 8023420:	f7f3 fa92 	bl	8016948 <lwip_htons>
 8023424:	4603      	mov	r3, r0
 8023426:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8023428:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802342a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802342e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8023432:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023438:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802343a:	68fb      	ldr	r3, [r7, #12]
 802343c:	891b      	ldrh	r3, [r3, #8]
 802343e:	3b14      	subs	r3, #20
 8023440:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8023444:	e0e0      	b.n	8023608 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023446:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023448:	00db      	lsls	r3, r3, #3
 802344a:	b29b      	uxth	r3, r3
 802344c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023450:	4293      	cmp	r3, r2
 8023452:	bf28      	it	cs
 8023454:	4613      	movcs	r3, r2
 8023456:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023458:	f44f 7220 	mov.w	r2, #640	; 0x280
 802345c:	2114      	movs	r1, #20
 802345e:	200e      	movs	r0, #14
 8023460:	f7f4 fb60 	bl	8017b24 <pbuf_alloc>
 8023464:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8023466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023468:	2b00      	cmp	r3, #0
 802346a:	f000 80d4 	beq.w	8023616 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023470:	895b      	ldrh	r3, [r3, #10]
 8023472:	2b13      	cmp	r3, #19
 8023474:	d806      	bhi.n	8023484 <ip4_frag+0xd0>
 8023476:	4b6b      	ldr	r3, [pc, #428]	; (8023624 <ip4_frag+0x270>)
 8023478:	f240 3225 	movw	r2, #805	; 0x325
 802347c:	496c      	ldr	r1, [pc, #432]	; (8023630 <ip4_frag+0x27c>)
 802347e:	486b      	ldr	r0, [pc, #428]	; (802362c <ip4_frag+0x278>)
 8023480:	f001 f98e 	bl	80247a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8023484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023486:	685b      	ldr	r3, [r3, #4]
 8023488:	2214      	movs	r2, #20
 802348a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802348c:	4618      	mov	r0, r3
 802348e:	f001 f8cc 	bl	802462a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023494:	685b      	ldr	r3, [r3, #4]
 8023496:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8023498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802349a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802349e:	e064      	b.n	802356a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80234a0:	68fb      	ldr	r3, [r7, #12]
 80234a2:	895a      	ldrh	r2, [r3, #10]
 80234a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80234a6:	1ad3      	subs	r3, r2, r3
 80234a8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80234aa:	68fb      	ldr	r3, [r7, #12]
 80234ac:	895b      	ldrh	r3, [r3, #10]
 80234ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80234b0:	429a      	cmp	r2, r3
 80234b2:	d906      	bls.n	80234c2 <ip4_frag+0x10e>
 80234b4:	4b5b      	ldr	r3, [pc, #364]	; (8023624 <ip4_frag+0x270>)
 80234b6:	f240 322d 	movw	r2, #813	; 0x32d
 80234ba:	495e      	ldr	r1, [pc, #376]	; (8023634 <ip4_frag+0x280>)
 80234bc:	485b      	ldr	r0, [pc, #364]	; (802362c <ip4_frag+0x278>)
 80234be:	f001 f96f 	bl	80247a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80234c2:	8bfa      	ldrh	r2, [r7, #30]
 80234c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80234c8:	4293      	cmp	r3, r2
 80234ca:	bf28      	it	cs
 80234cc:	4613      	movcs	r3, r2
 80234ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80234d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	d105      	bne.n	80234e6 <ip4_frag+0x132>
        poff = 0;
 80234da:	2300      	movs	r3, #0
 80234dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80234de:	68fb      	ldr	r3, [r7, #12]
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	60fb      	str	r3, [r7, #12]
        continue;
 80234e4:	e041      	b.n	802356a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80234e6:	f7ff ff0d 	bl	8023304 <ip_frag_alloc_pbuf_custom_ref>
 80234ea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80234ec:	69bb      	ldr	r3, [r7, #24]
 80234ee:	2b00      	cmp	r3, #0
 80234f0:	d103      	bne.n	80234fa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80234f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80234f4:	f7f4 fdf6 	bl	80180e4 <pbuf_free>
        goto memerr;
 80234f8:	e08e      	b.n	8023618 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80234fa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80234fc:	68fb      	ldr	r3, [r7, #12]
 80234fe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8023502:	4413      	add	r3, r2
 8023504:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8023508:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 802350c:	9201      	str	r2, [sp, #4]
 802350e:	9300      	str	r3, [sp, #0]
 8023510:	4603      	mov	r3, r0
 8023512:	2241      	movs	r2, #65	; 0x41
 8023514:	2000      	movs	r0, #0
 8023516:	f7f4 fc2b 	bl	8017d70 <pbuf_alloced_custom>
 802351a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 802351c:	697b      	ldr	r3, [r7, #20]
 802351e:	2b00      	cmp	r3, #0
 8023520:	d106      	bne.n	8023530 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8023522:	69b8      	ldr	r0, [r7, #24]
 8023524:	f7ff fef6 	bl	8023314 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8023528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802352a:	f7f4 fddb 	bl	80180e4 <pbuf_free>
        goto memerr;
 802352e:	e073      	b.n	8023618 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8023530:	68f8      	ldr	r0, [r7, #12]
 8023532:	f7f4 fe7d 	bl	8018230 <pbuf_ref>
      pcr->original = p;
 8023536:	69bb      	ldr	r3, [r7, #24]
 8023538:	68fa      	ldr	r2, [r7, #12]
 802353a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802353c:	69bb      	ldr	r3, [r7, #24]
 802353e:	4a3e      	ldr	r2, [pc, #248]	; (8023638 <ip4_frag+0x284>)
 8023540:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8023542:	6979      	ldr	r1, [r7, #20]
 8023544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023546:	f7f4 fe9b 	bl	8018280 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802354a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802354e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8023552:	1ad3      	subs	r3, r2, r3
 8023554:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8023558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802355c:	2b00      	cmp	r3, #0
 802355e:	d004      	beq.n	802356a <ip4_frag+0x1b6>
        poff = 0;
 8023560:	2300      	movs	r3, #0
 8023562:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	681b      	ldr	r3, [r3, #0]
 8023568:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802356a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802356e:	2b00      	cmp	r3, #0
 8023570:	d196      	bne.n	80234a0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8023572:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8023574:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8023578:	4413      	add	r3, r2
 802357a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802357c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023580:	68bb      	ldr	r3, [r7, #8]
 8023582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8023584:	3b14      	subs	r3, #20
 8023586:	429a      	cmp	r2, r3
 8023588:	bfd4      	ite	le
 802358a:	2301      	movle	r3, #1
 802358c:	2300      	movgt	r3, #0
 802358e:	b2db      	uxtb	r3, r3
 8023590:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023592:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8023596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802359a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802359c:	6a3b      	ldr	r3, [r7, #32]
 802359e:	2b00      	cmp	r3, #0
 80235a0:	d002      	beq.n	80235a8 <ip4_frag+0x1f4>
 80235a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	d003      	beq.n	80235b0 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80235a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80235aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80235ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80235b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80235b2:	4618      	mov	r0, r3
 80235b4:	f7f3 f9c8 	bl	8016948 <lwip_htons>
 80235b8:	4603      	mov	r3, r0
 80235ba:	461a      	mov	r2, r3
 80235bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235be:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80235c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80235c2:	3314      	adds	r3, #20
 80235c4:	b29b      	uxth	r3, r3
 80235c6:	4618      	mov	r0, r3
 80235c8:	f7f3 f9be 	bl	8016948 <lwip_htons>
 80235cc:	4603      	mov	r3, r0
 80235ce:	461a      	mov	r2, r3
 80235d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235d2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80235d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235d6:	2200      	movs	r2, #0
 80235d8:	729a      	strb	r2, [r3, #10]
 80235da:	2200      	movs	r2, #0
 80235dc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80235de:	68bb      	ldr	r3, [r7, #8]
 80235e0:	695b      	ldr	r3, [r3, #20]
 80235e2:	687a      	ldr	r2, [r7, #4]
 80235e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80235e6:	68b8      	ldr	r0, [r7, #8]
 80235e8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80235ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80235ec:	f7f4 fd7a 	bl	80180e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80235f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80235f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80235f6:	1ad3      	subs	r3, r2, r3
 80235f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80235fc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8023600:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023602:	4413      	add	r3, r2
 8023604:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8023608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802360c:	2b00      	cmp	r3, #0
 802360e:	f47f af1a 	bne.w	8023446 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8023612:	2300      	movs	r3, #0
 8023614:	e002      	b.n	802361c <ip4_frag+0x268>
      goto memerr;
 8023616:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8023618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802361c:	4618      	mov	r0, r3
 802361e:	3748      	adds	r7, #72	; 0x48
 8023620:	46bd      	mov	sp, r7
 8023622:	bd80      	pop	{r7, pc}
 8023624:	08028b74 	.word	0x08028b74
 8023628:	08028d50 	.word	0x08028d50
 802362c:	08028bbc 	.word	0x08028bbc
 8023630:	08028d6c 	.word	0x08028d6c
 8023634:	08028d8c 	.word	0x08028d8c
 8023638:	0802334d 	.word	0x0802334d

0802363c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 802363c:	b580      	push	{r7, lr}
 802363e:	b086      	sub	sp, #24
 8023640:	af00      	add	r7, sp, #0
 8023642:	6078      	str	r0, [r7, #4]
 8023644:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8023646:	230e      	movs	r3, #14
 8023648:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	895b      	ldrh	r3, [r3, #10]
 802364e:	2b0e      	cmp	r3, #14
 8023650:	d96e      	bls.n	8023730 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023652:	687b      	ldr	r3, [r7, #4]
 8023654:	7bdb      	ldrb	r3, [r3, #15]
 8023656:	2b00      	cmp	r3, #0
 8023658:	d106      	bne.n	8023668 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802365a:	683b      	ldr	r3, [r7, #0]
 802365c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023660:	3301      	adds	r3, #1
 8023662:	b2da      	uxtb	r2, r3
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	685b      	ldr	r3, [r3, #4]
 802366c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802366e:	693b      	ldr	r3, [r7, #16]
 8023670:	7b1a      	ldrb	r2, [r3, #12]
 8023672:	7b5b      	ldrb	r3, [r3, #13]
 8023674:	021b      	lsls	r3, r3, #8
 8023676:	4313      	orrs	r3, r2
 8023678:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802367a:	693b      	ldr	r3, [r7, #16]
 802367c:	781b      	ldrb	r3, [r3, #0]
 802367e:	f003 0301 	and.w	r3, r3, #1
 8023682:	2b00      	cmp	r3, #0
 8023684:	d023      	beq.n	80236ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8023686:	693b      	ldr	r3, [r7, #16]
 8023688:	781b      	ldrb	r3, [r3, #0]
 802368a:	2b01      	cmp	r3, #1
 802368c:	d10f      	bne.n	80236ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802368e:	693b      	ldr	r3, [r7, #16]
 8023690:	785b      	ldrb	r3, [r3, #1]
 8023692:	2b00      	cmp	r3, #0
 8023694:	d11b      	bne.n	80236ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8023696:	693b      	ldr	r3, [r7, #16]
 8023698:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802369a:	2b5e      	cmp	r3, #94	; 0x5e
 802369c:	d117      	bne.n	80236ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	7b5b      	ldrb	r3, [r3, #13]
 80236a2:	f043 0310 	orr.w	r3, r3, #16
 80236a6:	b2da      	uxtb	r2, r3
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	735a      	strb	r2, [r3, #13]
 80236ac:	e00f      	b.n	80236ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80236ae:	693b      	ldr	r3, [r7, #16]
 80236b0:	2206      	movs	r2, #6
 80236b2:	4928      	ldr	r1, [pc, #160]	; (8023754 <ethernet_input+0x118>)
 80236b4:	4618      	mov	r0, r3
 80236b6:	f000 ffa9 	bl	802460c <memcmp>
 80236ba:	4603      	mov	r3, r0
 80236bc:	2b00      	cmp	r3, #0
 80236be:	d106      	bne.n	80236ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	7b5b      	ldrb	r3, [r3, #13]
 80236c4:	f043 0308 	orr.w	r3, r3, #8
 80236c8:	b2da      	uxtb	r2, r3
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80236ce:	89fb      	ldrh	r3, [r7, #14]
 80236d0:	2b08      	cmp	r3, #8
 80236d2:	d003      	beq.n	80236dc <ethernet_input+0xa0>
 80236d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80236d8:	d014      	beq.n	8023704 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80236da:	e032      	b.n	8023742 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80236dc:	683b      	ldr	r3, [r7, #0]
 80236de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80236e2:	f003 0308 	and.w	r3, r3, #8
 80236e6:	2b00      	cmp	r3, #0
 80236e8:	d024      	beq.n	8023734 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80236ea:	8afb      	ldrh	r3, [r7, #22]
 80236ec:	4619      	mov	r1, r3
 80236ee:	6878      	ldr	r0, [r7, #4]
 80236f0:	f7f4 fc72 	bl	8017fd8 <pbuf_remove_header>
 80236f4:	4603      	mov	r3, r0
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d11e      	bne.n	8023738 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80236fa:	6839      	ldr	r1, [r7, #0]
 80236fc:	6878      	ldr	r0, [r7, #4]
 80236fe:	f7fe fe7d 	bl	80223fc <ip4_input>
      break;
 8023702:	e013      	b.n	802372c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023704:	683b      	ldr	r3, [r7, #0]
 8023706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802370a:	f003 0308 	and.w	r3, r3, #8
 802370e:	2b00      	cmp	r3, #0
 8023710:	d014      	beq.n	802373c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023712:	8afb      	ldrh	r3, [r7, #22]
 8023714:	4619      	mov	r1, r3
 8023716:	6878      	ldr	r0, [r7, #4]
 8023718:	f7f4 fc5e 	bl	8017fd8 <pbuf_remove_header>
 802371c:	4603      	mov	r3, r0
 802371e:	2b00      	cmp	r3, #0
 8023720:	d10e      	bne.n	8023740 <ethernet_input+0x104>
        etharp_input(p, netif);
 8023722:	6839      	ldr	r1, [r7, #0]
 8023724:	6878      	ldr	r0, [r7, #4]
 8023726:	f7fe f819 	bl	802175c <etharp_input>
      break;
 802372a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 802372c:	2300      	movs	r3, #0
 802372e:	e00c      	b.n	802374a <ethernet_input+0x10e>
    goto free_and_return;
 8023730:	bf00      	nop
 8023732:	e006      	b.n	8023742 <ethernet_input+0x106>
        goto free_and_return;
 8023734:	bf00      	nop
 8023736:	e004      	b.n	8023742 <ethernet_input+0x106>
        goto free_and_return;
 8023738:	bf00      	nop
 802373a:	e002      	b.n	8023742 <ethernet_input+0x106>
        goto free_and_return;
 802373c:	bf00      	nop
 802373e:	e000      	b.n	8023742 <ethernet_input+0x106>
        goto free_and_return;
 8023740:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8023742:	6878      	ldr	r0, [r7, #4]
 8023744:	f7f4 fcce 	bl	80180e4 <pbuf_free>
  return ERR_OK;
 8023748:	2300      	movs	r3, #0
}
 802374a:	4618      	mov	r0, r3
 802374c:	3718      	adds	r7, #24
 802374e:	46bd      	mov	sp, r7
 8023750:	bd80      	pop	{r7, pc}
 8023752:	bf00      	nop
 8023754:	08028fe8 	.word	0x08028fe8

08023758 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8023758:	b580      	push	{r7, lr}
 802375a:	b086      	sub	sp, #24
 802375c:	af00      	add	r7, sp, #0
 802375e:	60f8      	str	r0, [r7, #12]
 8023760:	60b9      	str	r1, [r7, #8]
 8023762:	607a      	str	r2, [r7, #4]
 8023764:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8023766:	8c3b      	ldrh	r3, [r7, #32]
 8023768:	4618      	mov	r0, r3
 802376a:	f7f3 f8ed 	bl	8016948 <lwip_htons>
 802376e:	4603      	mov	r3, r0
 8023770:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023772:	210e      	movs	r1, #14
 8023774:	68b8      	ldr	r0, [r7, #8]
 8023776:	f7f4 fc1f 	bl	8017fb8 <pbuf_add_header>
 802377a:	4603      	mov	r3, r0
 802377c:	2b00      	cmp	r3, #0
 802377e:	d125      	bne.n	80237cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8023780:	68bb      	ldr	r3, [r7, #8]
 8023782:	685b      	ldr	r3, [r3, #4]
 8023784:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8023786:	693b      	ldr	r3, [r7, #16]
 8023788:	8afa      	ldrh	r2, [r7, #22]
 802378a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 802378c:	693b      	ldr	r3, [r7, #16]
 802378e:	2206      	movs	r2, #6
 8023790:	6839      	ldr	r1, [r7, #0]
 8023792:	4618      	mov	r0, r3
 8023794:	f000 ff49 	bl	802462a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8023798:	693b      	ldr	r3, [r7, #16]
 802379a:	3306      	adds	r3, #6
 802379c:	2206      	movs	r2, #6
 802379e:	6879      	ldr	r1, [r7, #4]
 80237a0:	4618      	mov	r0, r3
 80237a2:	f000 ff42 	bl	802462a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80237a6:	68fb      	ldr	r3, [r7, #12]
 80237a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80237ac:	2b06      	cmp	r3, #6
 80237ae:	d006      	beq.n	80237be <ethernet_output+0x66>
 80237b0:	4b0a      	ldr	r3, [pc, #40]	; (80237dc <ethernet_output+0x84>)
 80237b2:	f240 1233 	movw	r2, #307	; 0x133
 80237b6:	490a      	ldr	r1, [pc, #40]	; (80237e0 <ethernet_output+0x88>)
 80237b8:	480a      	ldr	r0, [pc, #40]	; (80237e4 <ethernet_output+0x8c>)
 80237ba:	f000 fff1 	bl	80247a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80237be:	68fb      	ldr	r3, [r7, #12]
 80237c0:	699b      	ldr	r3, [r3, #24]
 80237c2:	68b9      	ldr	r1, [r7, #8]
 80237c4:	68f8      	ldr	r0, [r7, #12]
 80237c6:	4798      	blx	r3
 80237c8:	4603      	mov	r3, r0
 80237ca:	e002      	b.n	80237d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80237cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80237ce:	f06f 0301 	mvn.w	r3, #1
}
 80237d2:	4618      	mov	r0, r3
 80237d4:	3718      	adds	r7, #24
 80237d6:	46bd      	mov	sp, r7
 80237d8:	bd80      	pop	{r7, pc}
 80237da:	bf00      	nop
 80237dc:	08028d9c 	.word	0x08028d9c
 80237e0:	08028dd4 	.word	0x08028dd4
 80237e4:	08028e08 	.word	0x08028e08

080237e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80237e8:	b580      	push	{r7, lr}
 80237ea:	b082      	sub	sp, #8
 80237ec:	af00      	add	r7, sp, #0
 80237ee:	6078      	str	r0, [r7, #4]
 80237f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80237f2:	683b      	ldr	r3, [r7, #0]
 80237f4:	2200      	movs	r2, #0
 80237f6:	2104      	movs	r1, #4
 80237f8:	4618      	mov	r0, r3
 80237fa:	f7ed fde3 	bl	80113c4 <osMessageQueueNew>
 80237fe:	4602      	mov	r2, r0
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	2b00      	cmp	r3, #0
 802380a:	d102      	bne.n	8023812 <sys_mbox_new+0x2a>
    return ERR_MEM;
 802380c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023810:	e000      	b.n	8023814 <sys_mbox_new+0x2c>

  return ERR_OK;
 8023812:	2300      	movs	r3, #0
}
 8023814:	4618      	mov	r0, r3
 8023816:	3708      	adds	r7, #8
 8023818:	46bd      	mov	sp, r7
 802381a:	bd80      	pop	{r7, pc}

0802381c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 802381c:	b580      	push	{r7, lr}
 802381e:	b082      	sub	sp, #8
 8023820:	af00      	add	r7, sp, #0
 8023822:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	4618      	mov	r0, r3
 802382a:	f7ed ff37 	bl	801169c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	4618      	mov	r0, r3
 8023834:	f7ed ff64 	bl	8011700 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8023838:	bf00      	nop
 802383a:	3708      	adds	r7, #8
 802383c:	46bd      	mov	sp, r7
 802383e:	bd80      	pop	{r7, pc}

08023840 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8023840:	b580      	push	{r7, lr}
 8023842:	b084      	sub	sp, #16
 8023844:	af00      	add	r7, sp, #0
 8023846:	6078      	str	r0, [r7, #4]
 8023848:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	6818      	ldr	r0, [r3, #0]
 802384e:	4639      	mov	r1, r7
 8023850:	2300      	movs	r3, #0
 8023852:	2200      	movs	r2, #0
 8023854:	f7ed fe3c 	bl	80114d0 <osMessageQueuePut>
 8023858:	4603      	mov	r3, r0
 802385a:	2b00      	cmp	r3, #0
 802385c:	d102      	bne.n	8023864 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 802385e:	2300      	movs	r3, #0
 8023860:	73fb      	strb	r3, [r7, #15]
 8023862:	e001      	b.n	8023868 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8023864:	23ff      	movs	r3, #255	; 0xff
 8023866:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8023868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802386c:	4618      	mov	r0, r3
 802386e:	3710      	adds	r7, #16
 8023870:	46bd      	mov	sp, r7
 8023872:	bd80      	pop	{r7, pc}

08023874 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023874:	b580      	push	{r7, lr}
 8023876:	b086      	sub	sp, #24
 8023878:	af00      	add	r7, sp, #0
 802387a:	60f8      	str	r0, [r7, #12]
 802387c:	60b9      	str	r1, [r7, #8]
 802387e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8023880:	f7ed f98a 	bl	8010b98 <osKernelGetTickCount>
 8023884:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	2b00      	cmp	r3, #0
 802388a:	d013      	beq.n	80238b4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 802388c:	68fb      	ldr	r3, [r7, #12]
 802388e:	6818      	ldr	r0, [r3, #0]
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	2200      	movs	r2, #0
 8023894:	68b9      	ldr	r1, [r7, #8]
 8023896:	f7ed fe8f 	bl	80115b8 <osMessageQueueGet>
 802389a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 802389c:	693b      	ldr	r3, [r7, #16]
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d105      	bne.n	80238ae <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80238a2:	f7ed f979 	bl	8010b98 <osKernelGetTickCount>
 80238a6:	4602      	mov	r2, r0
 80238a8:	697b      	ldr	r3, [r7, #20]
 80238aa:	1ad3      	subs	r3, r2, r3
 80238ac:	e00f      	b.n	80238ce <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80238ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80238b2:	e00c      	b.n	80238ce <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80238b4:	68fb      	ldr	r3, [r7, #12]
 80238b6:	6818      	ldr	r0, [r3, #0]
 80238b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80238bc:	2200      	movs	r2, #0
 80238be:	68b9      	ldr	r1, [r7, #8]
 80238c0:	f7ed fe7a 	bl	80115b8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80238c4:	f7ed f968 	bl	8010b98 <osKernelGetTickCount>
 80238c8:	4602      	mov	r2, r0
 80238ca:	697b      	ldr	r3, [r7, #20]
 80238cc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80238ce:	4618      	mov	r0, r3
 80238d0:	3718      	adds	r7, #24
 80238d2:	46bd      	mov	sp, r7
 80238d4:	bd80      	pop	{r7, pc}

080238d6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80238d6:	b580      	push	{r7, lr}
 80238d8:	b082      	sub	sp, #8
 80238da:	af00      	add	r7, sp, #0
 80238dc:	6078      	str	r0, [r7, #4]
 80238de:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80238e0:	687b      	ldr	r3, [r7, #4]
 80238e2:	6818      	ldr	r0, [r3, #0]
 80238e4:	2300      	movs	r3, #0
 80238e6:	2200      	movs	r2, #0
 80238e8:	6839      	ldr	r1, [r7, #0]
 80238ea:	f7ed fe65 	bl	80115b8 <osMessageQueueGet>
 80238ee:	4603      	mov	r3, r0
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d101      	bne.n	80238f8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80238f4:	2300      	movs	r3, #0
 80238f6:	e001      	b.n	80238fc <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80238f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80238fc:	4618      	mov	r0, r3
 80238fe:	3708      	adds	r7, #8
 8023900:	46bd      	mov	sp, r7
 8023902:	bd80      	pop	{r7, pc}

08023904 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8023904:	b480      	push	{r7}
 8023906:	b083      	sub	sp, #12
 8023908:	af00      	add	r7, sp, #0
 802390a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	2b00      	cmp	r3, #0
 8023912:	d101      	bne.n	8023918 <sys_mbox_valid+0x14>
    return 0;
 8023914:	2300      	movs	r3, #0
 8023916:	e000      	b.n	802391a <sys_mbox_valid+0x16>
  else
    return 1;
 8023918:	2301      	movs	r3, #1
}
 802391a:	4618      	mov	r0, r3
 802391c:	370c      	adds	r7, #12
 802391e:	46bd      	mov	sp, r7
 8023920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023924:	4770      	bx	lr

08023926 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8023926:	b480      	push	{r7}
 8023928:	b083      	sub	sp, #12
 802392a:	af00      	add	r7, sp, #0
 802392c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	2200      	movs	r2, #0
 8023932:	601a      	str	r2, [r3, #0]
}
 8023934:	bf00      	nop
 8023936:	370c      	adds	r7, #12
 8023938:	46bd      	mov	sp, r7
 802393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802393e:	4770      	bx	lr

08023940 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8023940:	b580      	push	{r7, lr}
 8023942:	b082      	sub	sp, #8
 8023944:	af00      	add	r7, sp, #0
 8023946:	6078      	str	r0, [r7, #4]
 8023948:	460b      	mov	r3, r1
 802394a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 802394c:	78fb      	ldrb	r3, [r7, #3]
 802394e:	2200      	movs	r2, #0
 8023950:	4619      	mov	r1, r3
 8023952:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8023956:	f7ed fba3 	bl	80110a0 <osSemaphoreNew>
 802395a:	4602      	mov	r2, r0
 802395c:	687b      	ldr	r3, [r7, #4]
 802395e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	681b      	ldr	r3, [r3, #0]
 8023964:	2b00      	cmp	r3, #0
 8023966:	d102      	bne.n	802396e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8023968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802396c:	e009      	b.n	8023982 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 802396e:	78fb      	ldrb	r3, [r7, #3]
 8023970:	2b00      	cmp	r3, #0
 8023972:	d105      	bne.n	8023980 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	2100      	movs	r1, #0
 802397a:	4618      	mov	r0, r3
 802397c:	f7ed fc2e 	bl	80111dc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8023980:	2300      	movs	r3, #0
}
 8023982:	4618      	mov	r0, r3
 8023984:	3708      	adds	r7, #8
 8023986:	46bd      	mov	sp, r7
 8023988:	bd80      	pop	{r7, pc}

0802398a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 802398a:	b580      	push	{r7, lr}
 802398c:	b084      	sub	sp, #16
 802398e:	af00      	add	r7, sp, #0
 8023990:	6078      	str	r0, [r7, #4]
 8023992:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8023994:	f7ed f900 	bl	8010b98 <osKernelGetTickCount>
 8023998:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 802399a:	683b      	ldr	r3, [r7, #0]
 802399c:	2b00      	cmp	r3, #0
 802399e:	d011      	beq.n	80239c4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	681b      	ldr	r3, [r3, #0]
 80239a4:	6839      	ldr	r1, [r7, #0]
 80239a6:	4618      	mov	r0, r3
 80239a8:	f7ed fc18 	bl	80111dc <osSemaphoreAcquire>
 80239ac:	4603      	mov	r3, r0
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d105      	bne.n	80239be <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80239b2:	f7ed f8f1 	bl	8010b98 <osKernelGetTickCount>
 80239b6:	4602      	mov	r2, r0
 80239b8:	68fb      	ldr	r3, [r7, #12]
 80239ba:	1ad3      	subs	r3, r2, r3
 80239bc:	e012      	b.n	80239e4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80239be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80239c2:	e00f      	b.n	80239e4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80239c4:	bf00      	nop
 80239c6:	687b      	ldr	r3, [r7, #4]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80239ce:	4618      	mov	r0, r3
 80239d0:	f7ed fc04 	bl	80111dc <osSemaphoreAcquire>
 80239d4:	4603      	mov	r3, r0
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d1f5      	bne.n	80239c6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80239da:	f7ed f8dd 	bl	8010b98 <osKernelGetTickCount>
 80239de:	4602      	mov	r2, r0
 80239e0:	68fb      	ldr	r3, [r7, #12]
 80239e2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80239e4:	4618      	mov	r0, r3
 80239e6:	3710      	adds	r7, #16
 80239e8:	46bd      	mov	sp, r7
 80239ea:	bd80      	pop	{r7, pc}

080239ec <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80239ec:	b580      	push	{r7, lr}
 80239ee:	b082      	sub	sp, #8
 80239f0:	af00      	add	r7, sp, #0
 80239f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	681b      	ldr	r3, [r3, #0]
 80239f8:	4618      	mov	r0, r3
 80239fa:	f7ed fc55 	bl	80112a8 <osSemaphoreRelease>
}
 80239fe:	bf00      	nop
 8023a00:	3708      	adds	r7, #8
 8023a02:	46bd      	mov	sp, r7
 8023a04:	bd80      	pop	{r7, pc}

08023a06 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8023a06:	b580      	push	{r7, lr}
 8023a08:	b082      	sub	sp, #8
 8023a0a:	af00      	add	r7, sp, #0
 8023a0c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	681b      	ldr	r3, [r3, #0]
 8023a12:	4618      	mov	r0, r3
 8023a14:	f7ed fca0 	bl	8011358 <osSemaphoreDelete>
}
 8023a18:	bf00      	nop
 8023a1a:	3708      	adds	r7, #8
 8023a1c:	46bd      	mov	sp, r7
 8023a1e:	bd80      	pop	{r7, pc}

08023a20 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8023a20:	b480      	push	{r7}
 8023a22:	b083      	sub	sp, #12
 8023a24:	af00      	add	r7, sp, #0
 8023a26:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	681b      	ldr	r3, [r3, #0]
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d101      	bne.n	8023a34 <sys_sem_valid+0x14>
    return 0;
 8023a30:	2300      	movs	r3, #0
 8023a32:	e000      	b.n	8023a36 <sys_sem_valid+0x16>
  else
    return 1;
 8023a34:	2301      	movs	r3, #1
}
 8023a36:	4618      	mov	r0, r3
 8023a38:	370c      	adds	r7, #12
 8023a3a:	46bd      	mov	sp, r7
 8023a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a40:	4770      	bx	lr

08023a42 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8023a42:	b480      	push	{r7}
 8023a44:	b083      	sub	sp, #12
 8023a46:	af00      	add	r7, sp, #0
 8023a48:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	2200      	movs	r2, #0
 8023a4e:	601a      	str	r2, [r3, #0]
}
 8023a50:	bf00      	nop
 8023a52:	370c      	adds	r7, #12
 8023a54:	46bd      	mov	sp, r7
 8023a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a5a:	4770      	bx	lr

08023a5c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8023a5c:	b580      	push	{r7, lr}
 8023a5e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8023a60:	2000      	movs	r0, #0
 8023a62:	f7ed f9d5 	bl	8010e10 <osMutexNew>
 8023a66:	4602      	mov	r2, r0
 8023a68:	4b01      	ldr	r3, [pc, #4]	; (8023a70 <sys_init+0x14>)
 8023a6a:	601a      	str	r2, [r3, #0]
#endif
}
 8023a6c:	bf00      	nop
 8023a6e:	bd80      	pop	{r7, pc}
 8023a70:	20010408 	.word	0x20010408

08023a74 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8023a74:	b580      	push	{r7, lr}
 8023a76:	b082      	sub	sp, #8
 8023a78:	af00      	add	r7, sp, #0
 8023a7a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8023a7c:	2000      	movs	r0, #0
 8023a7e:	f7ed f9c7 	bl	8010e10 <osMutexNew>
 8023a82:	4602      	mov	r2, r0
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d102      	bne.n	8023a96 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8023a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023a94:	e000      	b.n	8023a98 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8023a96:	2300      	movs	r3, #0
}
 8023a98:	4618      	mov	r0, r3
 8023a9a:	3708      	adds	r7, #8
 8023a9c:	46bd      	mov	sp, r7
 8023a9e:	bd80      	pop	{r7, pc}

08023aa0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8023aa0:	b580      	push	{r7, lr}
 8023aa2:	b082      	sub	sp, #8
 8023aa4:	af00      	add	r7, sp, #0
 8023aa6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	681b      	ldr	r3, [r3, #0]
 8023aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023ab0:	4618      	mov	r0, r3
 8023ab2:	f7ed fa47 	bl	8010f44 <osMutexAcquire>
#endif
}
 8023ab6:	bf00      	nop
 8023ab8:	3708      	adds	r7, #8
 8023aba:	46bd      	mov	sp, r7
 8023abc:	bd80      	pop	{r7, pc}

08023abe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8023abe:	b580      	push	{r7, lr}
 8023ac0:	b082      	sub	sp, #8
 8023ac2:	af00      	add	r7, sp, #0
 8023ac4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	681b      	ldr	r3, [r3, #0]
 8023aca:	4618      	mov	r0, r3
 8023acc:	f7ed fa98 	bl	8011000 <osMutexRelease>
}
 8023ad0:	bf00      	nop
 8023ad2:	3708      	adds	r7, #8
 8023ad4:	46bd      	mov	sp, r7
 8023ad6:	bd80      	pop	{r7, pc}

08023ad8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8023ad8:	b580      	push	{r7, lr}
 8023ada:	b08e      	sub	sp, #56	; 0x38
 8023adc:	af00      	add	r7, sp, #0
 8023ade:	60f8      	str	r0, [r7, #12]
 8023ae0:	60b9      	str	r1, [r7, #8]
 8023ae2:	607a      	str	r2, [r7, #4]
 8023ae4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8023ae6:	f107 0314 	add.w	r3, r7, #20
 8023aea:	2224      	movs	r2, #36	; 0x24
 8023aec:	2100      	movs	r1, #0
 8023aee:	4618      	mov	r0, r3
 8023af0:	f000 fda6 	bl	8024640 <memset>
 8023af4:	68fb      	ldr	r3, [r7, #12]
 8023af6:	617b      	str	r3, [r7, #20]
 8023af8:	683b      	ldr	r3, [r7, #0]
 8023afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8023afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8023b00:	f107 0314 	add.w	r3, r7, #20
 8023b04:	461a      	mov	r2, r3
 8023b06:	6879      	ldr	r1, [r7, #4]
 8023b08:	68b8      	ldr	r0, [r7, #8]
 8023b0a:	f7ed f86d 	bl	8010be8 <osThreadNew>
 8023b0e:	4603      	mov	r3, r0
#endif
}
 8023b10:	4618      	mov	r0, r3
 8023b12:	3738      	adds	r7, #56	; 0x38
 8023b14:	46bd      	mov	sp, r7
 8023b16:	bd80      	pop	{r7, pc}

08023b18 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8023b18:	b580      	push	{r7, lr}
 8023b1a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8023b1c:	4b04      	ldr	r3, [pc, #16]	; (8023b30 <sys_arch_protect+0x18>)
 8023b1e:	681b      	ldr	r3, [r3, #0]
 8023b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023b24:	4618      	mov	r0, r3
 8023b26:	f7ed fa0d 	bl	8010f44 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8023b2a:	2301      	movs	r3, #1
}
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	bd80      	pop	{r7, pc}
 8023b30:	20010408 	.word	0x20010408

08023b34 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8023b34:	b580      	push	{r7, lr}
 8023b36:	b082      	sub	sp, #8
 8023b38:	af00      	add	r7, sp, #0
 8023b3a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8023b3c:	4b04      	ldr	r3, [pc, #16]	; (8023b50 <sys_arch_unprotect+0x1c>)
 8023b3e:	681b      	ldr	r3, [r3, #0]
 8023b40:	4618      	mov	r0, r3
 8023b42:	f7ed fa5d 	bl	8011000 <osMutexRelease>
}
 8023b46:	bf00      	nop
 8023b48:	3708      	adds	r7, #8
 8023b4a:	46bd      	mov	sp, r7
 8023b4c:	bd80      	pop	{r7, pc}
 8023b4e:	bf00      	nop
 8023b50:	20010408 	.word	0x20010408

08023b54 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8023b54:	b580      	push	{r7, lr}
 8023b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8023b58:	2201      	movs	r2, #1
 8023b5a:	490e      	ldr	r1, [pc, #56]	; (8023b94 <MX_USB_HOST_Init+0x40>)
 8023b5c:	480e      	ldr	r0, [pc, #56]	; (8023b98 <MX_USB_HOST_Init+0x44>)
 8023b5e:	f7eb fa1f 	bl	800efa0 <USBH_Init>
 8023b62:	4603      	mov	r3, r0
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	d001      	beq.n	8023b6c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8023b68:	f7dd ff62 	bl	8001a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8023b6c:	490b      	ldr	r1, [pc, #44]	; (8023b9c <MX_USB_HOST_Init+0x48>)
 8023b6e:	480a      	ldr	r0, [pc, #40]	; (8023b98 <MX_USB_HOST_Init+0x44>)
 8023b70:	f7eb fac6 	bl	800f100 <USBH_RegisterClass>
 8023b74:	4603      	mov	r3, r0
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d001      	beq.n	8023b7e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8023b7a:	f7dd ff59 	bl	8001a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8023b7e:	4806      	ldr	r0, [pc, #24]	; (8023b98 <MX_USB_HOST_Init+0x44>)
 8023b80:	f7eb fb4a 	bl	800f218 <USBH_Start>
 8023b84:	4603      	mov	r3, r0
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d001      	beq.n	8023b8e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8023b8a:	f7dd ff51 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8023b8e:	bf00      	nop
 8023b90:	bd80      	pop	{r7, pc}
 8023b92:	bf00      	nop
 8023b94:	08023ba1 	.word	0x08023ba1
 8023b98:	2001040c 	.word	0x2001040c
 8023b9c:	20000010 	.word	0x20000010

08023ba0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8023ba0:	b480      	push	{r7}
 8023ba2:	b083      	sub	sp, #12
 8023ba4:	af00      	add	r7, sp, #0
 8023ba6:	6078      	str	r0, [r7, #4]
 8023ba8:	460b      	mov	r3, r1
 8023baa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8023bac:	78fb      	ldrb	r3, [r7, #3]
 8023bae:	3b01      	subs	r3, #1
 8023bb0:	2b04      	cmp	r3, #4
 8023bb2:	d819      	bhi.n	8023be8 <USBH_UserProcess+0x48>
 8023bb4:	a201      	add	r2, pc, #4	; (adr r2, 8023bbc <USBH_UserProcess+0x1c>)
 8023bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023bba:	bf00      	nop
 8023bbc:	08023be9 	.word	0x08023be9
 8023bc0:	08023bd9 	.word	0x08023bd9
 8023bc4:	08023be9 	.word	0x08023be9
 8023bc8:	08023be1 	.word	0x08023be1
 8023bcc:	08023bd1 	.word	0x08023bd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8023bd0:	4b09      	ldr	r3, [pc, #36]	; (8023bf8 <USBH_UserProcess+0x58>)
 8023bd2:	2203      	movs	r2, #3
 8023bd4:	701a      	strb	r2, [r3, #0]
  break;
 8023bd6:	e008      	b.n	8023bea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8023bd8:	4b07      	ldr	r3, [pc, #28]	; (8023bf8 <USBH_UserProcess+0x58>)
 8023bda:	2202      	movs	r2, #2
 8023bdc:	701a      	strb	r2, [r3, #0]
  break;
 8023bde:	e004      	b.n	8023bea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8023be0:	4b05      	ldr	r3, [pc, #20]	; (8023bf8 <USBH_UserProcess+0x58>)
 8023be2:	2201      	movs	r2, #1
 8023be4:	701a      	strb	r2, [r3, #0]
  break;
 8023be6:	e000      	b.n	8023bea <USBH_UserProcess+0x4a>

  default:
  break;
 8023be8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8023bea:	bf00      	nop
 8023bec:	370c      	adds	r7, #12
 8023bee:	46bd      	mov	sp, r7
 8023bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bf4:	4770      	bx	lr
 8023bf6:	bf00      	nop
 8023bf8:	2000911a 	.word	0x2000911a

08023bfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8023bfc:	b580      	push	{r7, lr}
 8023bfe:	b08a      	sub	sp, #40	; 0x28
 8023c00:	af00      	add	r7, sp, #0
 8023c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023c04:	f107 0314 	add.w	r3, r7, #20
 8023c08:	2200      	movs	r2, #0
 8023c0a:	601a      	str	r2, [r3, #0]
 8023c0c:	605a      	str	r2, [r3, #4]
 8023c0e:	609a      	str	r2, [r3, #8]
 8023c10:	60da      	str	r2, [r3, #12]
 8023c12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8023c1c:	d13c      	bne.n	8023c98 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c1e:	4b20      	ldr	r3, [pc, #128]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c22:	4a1f      	ldr	r2, [pc, #124]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c24:	f043 0301 	orr.w	r3, r3, #1
 8023c28:	6313      	str	r3, [r2, #48]	; 0x30
 8023c2a:	4b1d      	ldr	r3, [pc, #116]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c2e:	f003 0301 	and.w	r3, r3, #1
 8023c32:	613b      	str	r3, [r7, #16]
 8023c34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8023c36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8023c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c3c:	2302      	movs	r3, #2
 8023c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c40:	2300      	movs	r3, #0
 8023c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023c44:	2303      	movs	r3, #3
 8023c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023c48:	230a      	movs	r3, #10
 8023c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c4c:	f107 0314 	add.w	r3, r7, #20
 8023c50:	4619      	mov	r1, r3
 8023c52:	4814      	ldr	r0, [pc, #80]	; (8023ca4 <HAL_HCD_MspInit+0xa8>)
 8023c54:	f7e2 fcd0 	bl	80065f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c58:	4b11      	ldr	r3, [pc, #68]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023c5c:	4a10      	ldr	r2, [pc, #64]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023c62:	6353      	str	r3, [r2, #52]	; 0x34
 8023c64:	4b0e      	ldr	r3, [pc, #56]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c6c:	60fb      	str	r3, [r7, #12]
 8023c6e:	68fb      	ldr	r3, [r7, #12]
 8023c70:	4b0b      	ldr	r3, [pc, #44]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023c74:	4a0a      	ldr	r2, [pc, #40]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8023c7c:	4b08      	ldr	r3, [pc, #32]	; (8023ca0 <HAL_HCD_MspInit+0xa4>)
 8023c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023c84:	60bb      	str	r3, [r7, #8]
 8023c86:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8023c88:	2200      	movs	r2, #0
 8023c8a:	2105      	movs	r1, #5
 8023c8c:	2043      	movs	r0, #67	; 0x43
 8023c8e:	f7e0 fa9b 	bl	80041c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8023c92:	2043      	movs	r0, #67	; 0x43
 8023c94:	f7e0 fab4 	bl	8004200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8023c98:	bf00      	nop
 8023c9a:	3728      	adds	r7, #40	; 0x28
 8023c9c:	46bd      	mov	sp, r7
 8023c9e:	bd80      	pop	{r7, pc}
 8023ca0:	40023800 	.word	0x40023800
 8023ca4:	40020000 	.word	0x40020000

08023ca8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8023ca8:	b580      	push	{r7, lr}
 8023caa:	b082      	sub	sp, #8
 8023cac:	af00      	add	r7, sp, #0
 8023cae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f7eb ff5b 	bl	800fb72 <USBH_LL_IncTimer>
}
 8023cbc:	bf00      	nop
 8023cbe:	3708      	adds	r7, #8
 8023cc0:	46bd      	mov	sp, r7
 8023cc2:	bd80      	pop	{r7, pc}

08023cc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8023cc4:	b580      	push	{r7, lr}
 8023cc6:	b082      	sub	sp, #8
 8023cc8:	af00      	add	r7, sp, #0
 8023cca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8023ccc:	687b      	ldr	r3, [r7, #4]
 8023cce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023cd2:	4618      	mov	r0, r3
 8023cd4:	f7eb ff9f 	bl	800fc16 <USBH_LL_Connect>
}
 8023cd8:	bf00      	nop
 8023cda:	3708      	adds	r7, #8
 8023cdc:	46bd      	mov	sp, r7
 8023cde:	bd80      	pop	{r7, pc}

08023ce0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8023ce0:	b580      	push	{r7, lr}
 8023ce2:	b082      	sub	sp, #8
 8023ce4:	af00      	add	r7, sp, #0
 8023ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023cee:	4618      	mov	r0, r3
 8023cf0:	f7eb ffb4 	bl	800fc5c <USBH_LL_Disconnect>
}
 8023cf4:	bf00      	nop
 8023cf6:	3708      	adds	r7, #8
 8023cf8:	46bd      	mov	sp, r7
 8023cfa:	bd80      	pop	{r7, pc}

08023cfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8023cfc:	b580      	push	{r7, lr}
 8023cfe:	b082      	sub	sp, #8
 8023d00:	af00      	add	r7, sp, #0
 8023d02:	6078      	str	r0, [r7, #4]
 8023d04:	460b      	mov	r3, r1
 8023d06:	70fb      	strb	r3, [r7, #3]
 8023d08:	4613      	mov	r3, r2
 8023d0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023d12:	4618      	mov	r0, r3
 8023d14:	f7eb ffeb 	bl	800fcee <USBH_LL_NotifyURBChange>
#endif
}
 8023d18:	bf00      	nop
 8023d1a:	3708      	adds	r7, #8
 8023d1c:	46bd      	mov	sp, r7
 8023d1e:	bd80      	pop	{r7, pc}

08023d20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8023d20:	b580      	push	{r7, lr}
 8023d22:	b082      	sub	sp, #8
 8023d24:	af00      	add	r7, sp, #0
 8023d26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023d2e:	4618      	mov	r0, r3
 8023d30:	f7eb ff49 	bl	800fbc6 <USBH_LL_PortEnabled>
}
 8023d34:	bf00      	nop
 8023d36:	3708      	adds	r7, #8
 8023d38:	46bd      	mov	sp, r7
 8023d3a:	bd80      	pop	{r7, pc}

08023d3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8023d3c:	b580      	push	{r7, lr}
 8023d3e:	b082      	sub	sp, #8
 8023d40:	af00      	add	r7, sp, #0
 8023d42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023d4a:	4618      	mov	r0, r3
 8023d4c:	f7eb ff55 	bl	800fbfa <USBH_LL_PortDisabled>
}
 8023d50:	bf00      	nop
 8023d52:	3708      	adds	r7, #8
 8023d54:	46bd      	mov	sp, r7
 8023d56:	bd80      	pop	{r7, pc}

08023d58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8023d58:	b580      	push	{r7, lr}
 8023d5a:	b082      	sub	sp, #8
 8023d5c:	af00      	add	r7, sp, #0
 8023d5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8023d66:	2b01      	cmp	r3, #1
 8023d68:	d12a      	bne.n	8023dc0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8023d6a:	4a18      	ldr	r2, [pc, #96]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	4a15      	ldr	r2, [pc, #84]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8023d7a:	4b14      	ldr	r3, [pc, #80]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8023d80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8023d82:	4b12      	ldr	r3, [pc, #72]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d84:	2208      	movs	r2, #8
 8023d86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8023d88:	4b10      	ldr	r3, [pc, #64]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d8a:	2201      	movs	r2, #1
 8023d8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8023d8e:	4b0f      	ldr	r3, [pc, #60]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d90:	2200      	movs	r2, #0
 8023d92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8023d94:	4b0d      	ldr	r3, [pc, #52]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d96:	2202      	movs	r2, #2
 8023d98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8023d9a:	4b0c      	ldr	r3, [pc, #48]	; (8023dcc <USBH_LL_Init+0x74>)
 8023d9c:	2200      	movs	r2, #0
 8023d9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8023da0:	480a      	ldr	r0, [pc, #40]	; (8023dcc <USBH_LL_Init+0x74>)
 8023da2:	f7e2 fdec 	bl	800697e <HAL_HCD_Init>
 8023da6:	4603      	mov	r3, r0
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	d001      	beq.n	8023db0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8023dac:	f7dd fe40 	bl	8001a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8023db0:	4806      	ldr	r0, [pc, #24]	; (8023dcc <USBH_LL_Init+0x74>)
 8023db2:	f7e3 f9c9 	bl	8007148 <HAL_HCD_GetCurrentFrame>
 8023db6:	4603      	mov	r3, r0
 8023db8:	4619      	mov	r1, r3
 8023dba:	6878      	ldr	r0, [r7, #4]
 8023dbc:	f7eb feca 	bl	800fb54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8023dc0:	2300      	movs	r3, #0
}
 8023dc2:	4618      	mov	r0, r3
 8023dc4:	3708      	adds	r7, #8
 8023dc6:	46bd      	mov	sp, r7
 8023dc8:	bd80      	pop	{r7, pc}
 8023dca:	bf00      	nop
 8023dcc:	200107f0 	.word	0x200107f0

08023dd0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8023dd0:	b580      	push	{r7, lr}
 8023dd2:	b084      	sub	sp, #16
 8023dd4:	af00      	add	r7, sp, #0
 8023dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023dd8:	2300      	movs	r3, #0
 8023dda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023ddc:	2300      	movs	r3, #0
 8023dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023de6:	4618      	mov	r0, r3
 8023de8:	f7e3 f938 	bl	800705c <HAL_HCD_Start>
 8023dec:	4603      	mov	r3, r0
 8023dee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023df0:	7bfb      	ldrb	r3, [r7, #15]
 8023df2:	4618      	mov	r0, r3
 8023df4:	f000 f95a 	bl	80240ac <USBH_Get_USB_Status>
 8023df8:	4603      	mov	r3, r0
 8023dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8023dfe:	4618      	mov	r0, r3
 8023e00:	3710      	adds	r7, #16
 8023e02:	46bd      	mov	sp, r7
 8023e04:	bd80      	pop	{r7, pc}

08023e06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8023e06:	b580      	push	{r7, lr}
 8023e08:	b084      	sub	sp, #16
 8023e0a:	af00      	add	r7, sp, #0
 8023e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023e0e:	2300      	movs	r3, #0
 8023e10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023e12:	2300      	movs	r3, #0
 8023e14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023e1c:	4618      	mov	r0, r3
 8023e1e:	f7e3 f940 	bl	80070a2 <HAL_HCD_Stop>
 8023e22:	4603      	mov	r3, r0
 8023e24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023e26:	7bfb      	ldrb	r3, [r7, #15]
 8023e28:	4618      	mov	r0, r3
 8023e2a:	f000 f93f 	bl	80240ac <USBH_Get_USB_Status>
 8023e2e:	4603      	mov	r3, r0
 8023e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8023e34:	4618      	mov	r0, r3
 8023e36:	3710      	adds	r7, #16
 8023e38:	46bd      	mov	sp, r7
 8023e3a:	bd80      	pop	{r7, pc}

08023e3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8023e3c:	b580      	push	{r7, lr}
 8023e3e:	b084      	sub	sp, #16
 8023e40:	af00      	add	r7, sp, #0
 8023e42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8023e44:	2301      	movs	r3, #1
 8023e46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8023e48:	687b      	ldr	r3, [r7, #4]
 8023e4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023e4e:	4618      	mov	r0, r3
 8023e50:	f7e3 f988 	bl	8007164 <HAL_HCD_GetCurrentSpeed>
 8023e54:	4603      	mov	r3, r0
 8023e56:	2b01      	cmp	r3, #1
 8023e58:	d007      	beq.n	8023e6a <USBH_LL_GetSpeed+0x2e>
 8023e5a:	2b01      	cmp	r3, #1
 8023e5c:	d302      	bcc.n	8023e64 <USBH_LL_GetSpeed+0x28>
 8023e5e:	2b02      	cmp	r3, #2
 8023e60:	d006      	beq.n	8023e70 <USBH_LL_GetSpeed+0x34>
 8023e62:	e008      	b.n	8023e76 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8023e64:	2300      	movs	r3, #0
 8023e66:	73fb      	strb	r3, [r7, #15]
    break;
 8023e68:	e008      	b.n	8023e7c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8023e6a:	2301      	movs	r3, #1
 8023e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8023e6e:	e005      	b.n	8023e7c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8023e70:	2302      	movs	r3, #2
 8023e72:	73fb      	strb	r3, [r7, #15]
    break;
 8023e74:	e002      	b.n	8023e7c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8023e76:	2301      	movs	r3, #1
 8023e78:	73fb      	strb	r3, [r7, #15]
    break;
 8023e7a:	bf00      	nop
  }
  return  speed;
 8023e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e7e:	4618      	mov	r0, r3
 8023e80:	3710      	adds	r7, #16
 8023e82:	46bd      	mov	sp, r7
 8023e84:	bd80      	pop	{r7, pc}

08023e86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8023e86:	b580      	push	{r7, lr}
 8023e88:	b084      	sub	sp, #16
 8023e8a:	af00      	add	r7, sp, #0
 8023e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023e8e:	2300      	movs	r3, #0
 8023e90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023e92:	2300      	movs	r3, #0
 8023e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8023e96:	687b      	ldr	r3, [r7, #4]
 8023e98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023e9c:	4618      	mov	r0, r3
 8023e9e:	f7e3 f91d 	bl	80070dc <HAL_HCD_ResetPort>
 8023ea2:	4603      	mov	r3, r0
 8023ea4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023ea6:	7bfb      	ldrb	r3, [r7, #15]
 8023ea8:	4618      	mov	r0, r3
 8023eaa:	f000 f8ff 	bl	80240ac <USBH_Get_USB_Status>
 8023eae:	4603      	mov	r3, r0
 8023eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8023eb4:	4618      	mov	r0, r3
 8023eb6:	3710      	adds	r7, #16
 8023eb8:	46bd      	mov	sp, r7
 8023eba:	bd80      	pop	{r7, pc}

08023ebc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023ebc:	b580      	push	{r7, lr}
 8023ebe:	b082      	sub	sp, #8
 8023ec0:	af00      	add	r7, sp, #0
 8023ec2:	6078      	str	r0, [r7, #4]
 8023ec4:	460b      	mov	r3, r1
 8023ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8023ec8:	687b      	ldr	r3, [r7, #4]
 8023eca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023ece:	78fa      	ldrb	r2, [r7, #3]
 8023ed0:	4611      	mov	r1, r2
 8023ed2:	4618      	mov	r0, r3
 8023ed4:	f7e3 f924 	bl	8007120 <HAL_HCD_HC_GetXferCount>
 8023ed8:	4603      	mov	r3, r0
}
 8023eda:	4618      	mov	r0, r3
 8023edc:	3708      	adds	r7, #8
 8023ede:	46bd      	mov	sp, r7
 8023ee0:	bd80      	pop	{r7, pc}

08023ee2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8023ee2:	b590      	push	{r4, r7, lr}
 8023ee4:	b089      	sub	sp, #36	; 0x24
 8023ee6:	af04      	add	r7, sp, #16
 8023ee8:	6078      	str	r0, [r7, #4]
 8023eea:	4608      	mov	r0, r1
 8023eec:	4611      	mov	r1, r2
 8023eee:	461a      	mov	r2, r3
 8023ef0:	4603      	mov	r3, r0
 8023ef2:	70fb      	strb	r3, [r7, #3]
 8023ef4:	460b      	mov	r3, r1
 8023ef6:	70bb      	strb	r3, [r7, #2]
 8023ef8:	4613      	mov	r3, r2
 8023efa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023efc:	2300      	movs	r3, #0
 8023efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023f00:	2300      	movs	r3, #0
 8023f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8023f04:	687b      	ldr	r3, [r7, #4]
 8023f06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8023f0a:	787c      	ldrb	r4, [r7, #1]
 8023f0c:	78ba      	ldrb	r2, [r7, #2]
 8023f0e:	78f9      	ldrb	r1, [r7, #3]
 8023f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023f12:	9302      	str	r3, [sp, #8]
 8023f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023f18:	9301      	str	r3, [sp, #4]
 8023f1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023f1e:	9300      	str	r3, [sp, #0]
 8023f20:	4623      	mov	r3, r4
 8023f22:	f7e2 fd8e 	bl	8006a42 <HAL_HCD_HC_Init>
 8023f26:	4603      	mov	r3, r0
 8023f28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8023f2a:	7bfb      	ldrb	r3, [r7, #15]
 8023f2c:	4618      	mov	r0, r3
 8023f2e:	f000 f8bd 	bl	80240ac <USBH_Get_USB_Status>
 8023f32:	4603      	mov	r3, r0
 8023f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8023f38:	4618      	mov	r0, r3
 8023f3a:	3714      	adds	r7, #20
 8023f3c:	46bd      	mov	sp, r7
 8023f3e:	bd90      	pop	{r4, r7, pc}

08023f40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023f40:	b580      	push	{r7, lr}
 8023f42:	b084      	sub	sp, #16
 8023f44:	af00      	add	r7, sp, #0
 8023f46:	6078      	str	r0, [r7, #4]
 8023f48:	460b      	mov	r3, r1
 8023f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023f4c:	2300      	movs	r3, #0
 8023f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023f50:	2300      	movs	r3, #0
 8023f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023f5a:	78fa      	ldrb	r2, [r7, #3]
 8023f5c:	4611      	mov	r1, r2
 8023f5e:	4618      	mov	r0, r3
 8023f60:	f7e2 fdfe 	bl	8006b60 <HAL_HCD_HC_Halt>
 8023f64:	4603      	mov	r3, r0
 8023f66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023f68:	7bfb      	ldrb	r3, [r7, #15]
 8023f6a:	4618      	mov	r0, r3
 8023f6c:	f000 f89e 	bl	80240ac <USBH_Get_USB_Status>
 8023f70:	4603      	mov	r3, r0
 8023f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8023f76:	4618      	mov	r0, r3
 8023f78:	3710      	adds	r7, #16
 8023f7a:	46bd      	mov	sp, r7
 8023f7c:	bd80      	pop	{r7, pc}

08023f7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8023f7e:	b590      	push	{r4, r7, lr}
 8023f80:	b089      	sub	sp, #36	; 0x24
 8023f82:	af04      	add	r7, sp, #16
 8023f84:	6078      	str	r0, [r7, #4]
 8023f86:	4608      	mov	r0, r1
 8023f88:	4611      	mov	r1, r2
 8023f8a:	461a      	mov	r2, r3
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	70fb      	strb	r3, [r7, #3]
 8023f90:	460b      	mov	r3, r1
 8023f92:	70bb      	strb	r3, [r7, #2]
 8023f94:	4613      	mov	r3, r2
 8023f96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023f98:	2300      	movs	r3, #0
 8023f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023f9c:	2300      	movs	r3, #0
 8023f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8023fa6:	787c      	ldrb	r4, [r7, #1]
 8023fa8:	78ba      	ldrb	r2, [r7, #2]
 8023faa:	78f9      	ldrb	r1, [r7, #3]
 8023fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8023fb0:	9303      	str	r3, [sp, #12]
 8023fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023fb4:	9302      	str	r3, [sp, #8]
 8023fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023fb8:	9301      	str	r3, [sp, #4]
 8023fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023fbe:	9300      	str	r3, [sp, #0]
 8023fc0:	4623      	mov	r3, r4
 8023fc2:	f7e2 fdf1 	bl	8006ba8 <HAL_HCD_HC_SubmitRequest>
 8023fc6:	4603      	mov	r3, r0
 8023fc8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8023fca:	7bfb      	ldrb	r3, [r7, #15]
 8023fcc:	4618      	mov	r0, r3
 8023fce:	f000 f86d 	bl	80240ac <USBH_Get_USB_Status>
 8023fd2:	4603      	mov	r3, r0
 8023fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8023fd8:	4618      	mov	r0, r3
 8023fda:	3714      	adds	r7, #20
 8023fdc:	46bd      	mov	sp, r7
 8023fde:	bd90      	pop	{r4, r7, pc}

08023fe0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b082      	sub	sp, #8
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	6078      	str	r0, [r7, #4]
 8023fe8:	460b      	mov	r3, r1
 8023fea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023ff2:	78fa      	ldrb	r2, [r7, #3]
 8023ff4:	4611      	mov	r1, r2
 8023ff6:	4618      	mov	r0, r3
 8023ff8:	f7e3 f87e 	bl	80070f8 <HAL_HCD_HC_GetURBState>
 8023ffc:	4603      	mov	r3, r0
}
 8023ffe:	4618      	mov	r0, r3
 8024000:	3708      	adds	r7, #8
 8024002:	46bd      	mov	sp, r7
 8024004:	bd80      	pop	{r7, pc}

08024006 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8024006:	b580      	push	{r7, lr}
 8024008:	b082      	sub	sp, #8
 802400a:	af00      	add	r7, sp, #0
 802400c:	6078      	str	r0, [r7, #4]
 802400e:	460b      	mov	r3, r1
 8024010:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8024018:	2b01      	cmp	r3, #1
 802401a:	d103      	bne.n	8024024 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 802401c:	78fb      	ldrb	r3, [r7, #3]
 802401e:	4618      	mov	r0, r3
 8024020:	f000 f870 	bl	8024104 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8024024:	20c8      	movs	r0, #200	; 0xc8
 8024026:	f7df fd6d 	bl	8003b04 <HAL_Delay>
  return USBH_OK;
 802402a:	2300      	movs	r3, #0
}
 802402c:	4618      	mov	r0, r3
 802402e:	3708      	adds	r7, #8
 8024030:	46bd      	mov	sp, r7
 8024032:	bd80      	pop	{r7, pc}

08024034 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8024034:	b480      	push	{r7}
 8024036:	b085      	sub	sp, #20
 8024038:	af00      	add	r7, sp, #0
 802403a:	6078      	str	r0, [r7, #4]
 802403c:	460b      	mov	r3, r1
 802403e:	70fb      	strb	r3, [r7, #3]
 8024040:	4613      	mov	r3, r2
 8024042:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802404a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802404c:	78fb      	ldrb	r3, [r7, #3]
 802404e:	68fa      	ldr	r2, [r7, #12]
 8024050:	212c      	movs	r1, #44	; 0x2c
 8024052:	fb01 f303 	mul.w	r3, r1, r3
 8024056:	4413      	add	r3, r2
 8024058:	333b      	adds	r3, #59	; 0x3b
 802405a:	781b      	ldrb	r3, [r3, #0]
 802405c:	2b00      	cmp	r3, #0
 802405e:	d009      	beq.n	8024074 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8024060:	78fb      	ldrb	r3, [r7, #3]
 8024062:	68fa      	ldr	r2, [r7, #12]
 8024064:	212c      	movs	r1, #44	; 0x2c
 8024066:	fb01 f303 	mul.w	r3, r1, r3
 802406a:	4413      	add	r3, r2
 802406c:	3354      	adds	r3, #84	; 0x54
 802406e:	78ba      	ldrb	r2, [r7, #2]
 8024070:	701a      	strb	r2, [r3, #0]
 8024072:	e008      	b.n	8024086 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8024074:	78fb      	ldrb	r3, [r7, #3]
 8024076:	68fa      	ldr	r2, [r7, #12]
 8024078:	212c      	movs	r1, #44	; 0x2c
 802407a:	fb01 f303 	mul.w	r3, r1, r3
 802407e:	4413      	add	r3, r2
 8024080:	3355      	adds	r3, #85	; 0x55
 8024082:	78ba      	ldrb	r2, [r7, #2]
 8024084:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8024086:	2300      	movs	r3, #0
}
 8024088:	4618      	mov	r0, r3
 802408a:	3714      	adds	r7, #20
 802408c:	46bd      	mov	sp, r7
 802408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024092:	4770      	bx	lr

08024094 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8024094:	b580      	push	{r7, lr}
 8024096:	b082      	sub	sp, #8
 8024098:	af00      	add	r7, sp, #0
 802409a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802409c:	6878      	ldr	r0, [r7, #4]
 802409e:	f7df fd31 	bl	8003b04 <HAL_Delay>
}
 80240a2:	bf00      	nop
 80240a4:	3708      	adds	r7, #8
 80240a6:	46bd      	mov	sp, r7
 80240a8:	bd80      	pop	{r7, pc}
	...

080240ac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80240ac:	b480      	push	{r7}
 80240ae:	b085      	sub	sp, #20
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	4603      	mov	r3, r0
 80240b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80240b6:	2300      	movs	r3, #0
 80240b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80240ba:	79fb      	ldrb	r3, [r7, #7]
 80240bc:	2b03      	cmp	r3, #3
 80240be:	d817      	bhi.n	80240f0 <USBH_Get_USB_Status+0x44>
 80240c0:	a201      	add	r2, pc, #4	; (adr r2, 80240c8 <USBH_Get_USB_Status+0x1c>)
 80240c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80240c6:	bf00      	nop
 80240c8:	080240d9 	.word	0x080240d9
 80240cc:	080240df 	.word	0x080240df
 80240d0:	080240e5 	.word	0x080240e5
 80240d4:	080240eb 	.word	0x080240eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80240d8:	2300      	movs	r3, #0
 80240da:	73fb      	strb	r3, [r7, #15]
    break;
 80240dc:	e00b      	b.n	80240f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80240de:	2302      	movs	r3, #2
 80240e0:	73fb      	strb	r3, [r7, #15]
    break;
 80240e2:	e008      	b.n	80240f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80240e4:	2301      	movs	r3, #1
 80240e6:	73fb      	strb	r3, [r7, #15]
    break;
 80240e8:	e005      	b.n	80240f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80240ea:	2302      	movs	r3, #2
 80240ec:	73fb      	strb	r3, [r7, #15]
    break;
 80240ee:	e002      	b.n	80240f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80240f0:	2302      	movs	r3, #2
 80240f2:	73fb      	strb	r3, [r7, #15]
    break;
 80240f4:	bf00      	nop
  }
  return usb_status;
 80240f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80240f8:	4618      	mov	r0, r3
 80240fa:	3714      	adds	r7, #20
 80240fc:	46bd      	mov	sp, r7
 80240fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024102:	4770      	bx	lr

08024104 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8024104:	b580      	push	{r7, lr}
 8024106:	b084      	sub	sp, #16
 8024108:	af00      	add	r7, sp, #0
 802410a:	4603      	mov	r3, r0
 802410c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802410e:	79fb      	ldrb	r3, [r7, #7]
 8024110:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8024112:	79fb      	ldrb	r3, [r7, #7]
 8024114:	2b00      	cmp	r3, #0
 8024116:	d102      	bne.n	802411e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8024118:	2301      	movs	r3, #1
 802411a:	73fb      	strb	r3, [r7, #15]
 802411c:	e001      	b.n	8024122 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802411e:	2300      	movs	r3, #0
 8024120:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8024122:	7bfb      	ldrb	r3, [r7, #15]
 8024124:	461a      	mov	r2, r3
 8024126:	2120      	movs	r1, #32
 8024128:	4803      	ldr	r0, [pc, #12]	; (8024138 <MX_DriverVbusFS+0x34>)
 802412a:	f7e2 fc0f 	bl	800694c <HAL_GPIO_WritePin>
}
 802412e:	bf00      	nop
 8024130:	3710      	adds	r7, #16
 8024132:	46bd      	mov	sp, r7
 8024134:	bd80      	pop	{r7, pc}
 8024136:	bf00      	nop
 8024138:	40020c00 	.word	0x40020c00

0802413c <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 802413c:	b580      	push	{r7, lr}
 802413e:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8024140:	f000 f806 	bl	8024150 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8024144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024148:	f7de fef4 	bl	8002f34 <BSP_LCD_Clear>
}
 802414c:	bf00      	nop
 802414e:	bd80      	pop	{r7, pc}

08024150 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8024150:	b480      	push	{r7}
 8024152:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8024154:	4b12      	ldr	r3, [pc, #72]	; (80241a0 <LCD_LOG_DeInit+0x50>)
 8024156:	4a13      	ldr	r2, [pc, #76]	; (80241a4 <LCD_LOG_DeInit+0x54>)
 8024158:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 802415a:	4b13      	ldr	r3, [pc, #76]	; (80241a8 <LCD_LOG_DeInit+0x58>)
 802415c:	2200      	movs	r2, #0
 802415e:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8024160:	4b12      	ldr	r3, [pc, #72]	; (80241ac <LCD_LOG_DeInit+0x5c>)
 8024162:	2200      	movs	r2, #0
 8024164:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8024166:	4b12      	ldr	r3, [pc, #72]	; (80241b0 <LCD_LOG_DeInit+0x60>)
 8024168:	2200      	movs	r2, #0
 802416a:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 802416c:	4b11      	ldr	r3, [pc, #68]	; (80241b4 <LCD_LOG_DeInit+0x64>)
 802416e:	2200      	movs	r2, #0
 8024170:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8024172:	4b11      	ldr	r3, [pc, #68]	; (80241b8 <LCD_LOG_DeInit+0x68>)
 8024174:	2200      	movs	r2, #0
 8024176:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8024178:	4b10      	ldr	r3, [pc, #64]	; (80241bc <LCD_LOG_DeInit+0x6c>)
 802417a:	2201      	movs	r2, #1
 802417c:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 802417e:	4b10      	ldr	r3, [pc, #64]	; (80241c0 <LCD_LOG_DeInit+0x70>)
 8024180:	2200      	movs	r2, #0
 8024182:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8024184:	4b0f      	ldr	r3, [pc, #60]	; (80241c4 <LCD_LOG_DeInit+0x74>)
 8024186:	2200      	movs	r2, #0
 8024188:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 802418a:	4b0f      	ldr	r3, [pc, #60]	; (80241c8 <LCD_LOG_DeInit+0x78>)
 802418c:	2200      	movs	r2, #0
 802418e:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8024190:	4b0e      	ldr	r3, [pc, #56]	; (80241cc <LCD_LOG_DeInit+0x7c>)
 8024192:	2200      	movs	r2, #0
 8024194:	801a      	strh	r2, [r3, #0]
}
 8024196:	bf00      	nop
 8024198:	46bd      	mov	sp, r7
 802419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802419e:	4770      	bx	lr
 80241a0:	20014758 	.word	0x20014758
 80241a4:	ff000080 	.word	0xff000080
 80241a8:	20010afa 	.word	0x20010afa
 80241ac:	20010b00 	.word	0x20010b00
 80241b0:	20010af8 	.word	0x20010af8
 80241b4:	20010af6 	.word	0x20010af6
 80241b8:	20010af4 	.word	0x20010af4
 80241bc:	20010afc 	.word	0x20010afc
 80241c0:	20010b02 	.word	0x20010b02
 80241c4:	20010afd 	.word	0x20010afd
 80241c8:	20010afe 	.word	0x20010afe
 80241cc:	2001475c 	.word	0x2001475c

080241d0 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80241d0:	b580      	push	{r7, lr}
 80241d2:	b082      	sub	sp, #8
 80241d4:	af00      	add	r7, sp, #0
 80241d6:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80241d8:	4817      	ldr	r0, [pc, #92]	; (8024238 <LCD_LOG_SetHeader+0x68>)
 80241da:	f7de fe7b 	bl	8002ed4 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80241de:	4817      	ldr	r0, [pc, #92]	; (802423c <LCD_LOG_SetHeader+0x6c>)
 80241e0:	f7de fe46 	bl	8002e70 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80241e4:	f7de fdac 	bl	8002d40 <BSP_LCD_GetXSize>
 80241e8:	4603      	mov	r3, r0
 80241ea:	b29a      	uxth	r2, r3
 80241ec:	4b12      	ldr	r3, [pc, #72]	; (8024238 <LCD_LOG_SetHeader+0x68>)
 80241ee:	88db      	ldrh	r3, [r3, #6]
 80241f0:	4619      	mov	r1, r3
 80241f2:	0049      	lsls	r1, r1, #1
 80241f4:	440b      	add	r3, r1
 80241f6:	b29b      	uxth	r3, r3
 80241f8:	2100      	movs	r1, #0
 80241fa:	2000      	movs	r0, #0
 80241fc:	f7df f82a 	bl	8003254 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8024200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024204:	f7de fe34 	bl	8002e70 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8024208:	480c      	ldr	r0, [pc, #48]	; (802423c <LCD_LOG_SetHeader+0x6c>)
 802420a:	f7de fe49 	bl	8002ea0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 802420e:	4b0a      	ldr	r3, [pc, #40]	; (8024238 <LCD_LOG_SetHeader+0x68>)
 8024210:	88d9      	ldrh	r1, [r3, #6]
 8024212:	2301      	movs	r3, #1
 8024214:	687a      	ldr	r2, [r7, #4]
 8024216:	2000      	movs	r0, #0
 8024218:	f7de fef8 	bl	800300c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 802421c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024220:	f7de fe3e 	bl	8002ea0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8024224:	4806      	ldr	r0, [pc, #24]	; (8024240 <LCD_LOG_SetHeader+0x70>)
 8024226:	f7de fe23 	bl	8002e70 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 802422a:	4806      	ldr	r0, [pc, #24]	; (8024244 <LCD_LOG_SetHeader+0x74>)
 802422c:	f7de fe52 	bl	8002ed4 <BSP_LCD_SetFont>
}
 8024230:	bf00      	nop
 8024232:	3708      	adds	r7, #8
 8024234:	46bd      	mov	sp, r7
 8024236:	bd80      	pop	{r7, pc}
 8024238:	2000004c 	.word	0x2000004c
 802423c:	ff0000ff 	.word	0xff0000ff
 8024240:	ff000080 	.word	0xff000080
 8024244:	20000044 	.word	0x20000044

08024248 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8024248:	b590      	push	{r4, r7, lr}
 802424a:	b083      	sub	sp, #12
 802424c:	af00      	add	r7, sp, #0
 802424e:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8024250:	481e      	ldr	r0, [pc, #120]	; (80242cc <LCD_LOG_SetFooter+0x84>)
 8024252:	f7de fe3f 	bl	8002ed4 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8024256:	481e      	ldr	r0, [pc, #120]	; (80242d0 <LCD_LOG_SetFooter+0x88>)
 8024258:	f7de fe0a 	bl	8002e70 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 802425c:	f7de fd84 	bl	8002d68 <BSP_LCD_GetYSize>
 8024260:	4603      	mov	r3, r0
 8024262:	b29a      	uxth	r2, r3
 8024264:	4b19      	ldr	r3, [pc, #100]	; (80242cc <LCD_LOG_SetFooter+0x84>)
 8024266:	88db      	ldrh	r3, [r3, #6]
 8024268:	1ad3      	subs	r3, r2, r3
 802426a:	b29b      	uxth	r3, r3
 802426c:	3b04      	subs	r3, #4
 802426e:	b29c      	uxth	r4, r3
 8024270:	f7de fd66 	bl	8002d40 <BSP_LCD_GetXSize>
 8024274:	4603      	mov	r3, r0
 8024276:	b29a      	uxth	r2, r3
 8024278:	4b14      	ldr	r3, [pc, #80]	; (80242cc <LCD_LOG_SetFooter+0x84>)
 802427a:	88db      	ldrh	r3, [r3, #6]
 802427c:	3304      	adds	r3, #4
 802427e:	b29b      	uxth	r3, r3
 8024280:	4621      	mov	r1, r4
 8024282:	2000      	movs	r0, #0
 8024284:	f7de ffe6 	bl	8003254 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8024288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802428c:	f7de fdf0 	bl	8002e70 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8024290:	480f      	ldr	r0, [pc, #60]	; (80242d0 <LCD_LOG_SetFooter+0x88>)
 8024292:	f7de fe05 	bl	8002ea0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8024296:	f7de fd67 	bl	8002d68 <BSP_LCD_GetYSize>
 802429a:	4603      	mov	r3, r0
 802429c:	b29a      	uxth	r2, r3
 802429e:	4b0b      	ldr	r3, [pc, #44]	; (80242cc <LCD_LOG_SetFooter+0x84>)
 80242a0:	88db      	ldrh	r3, [r3, #6]
 80242a2:	1ad3      	subs	r3, r2, r3
 80242a4:	b299      	uxth	r1, r3
 80242a6:	2301      	movs	r3, #1
 80242a8:	687a      	ldr	r2, [r7, #4]
 80242aa:	2000      	movs	r0, #0
 80242ac:	f7de feae 	bl	800300c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80242b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80242b4:	f7de fdf4 	bl	8002ea0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80242b8:	4806      	ldr	r0, [pc, #24]	; (80242d4 <LCD_LOG_SetFooter+0x8c>)
 80242ba:	f7de fdd9 	bl	8002e70 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80242be:	4803      	ldr	r0, [pc, #12]	; (80242cc <LCD_LOG_SetFooter+0x84>)
 80242c0:	f7de fe08 	bl	8002ed4 <BSP_LCD_SetFont>
}
 80242c4:	bf00      	nop
 80242c6:	370c      	adds	r7, #12
 80242c8:	46bd      	mov	sp, r7
 80242ca:	bd90      	pop	{r4, r7, pc}
 80242cc:	20000044 	.word	0x20000044
 80242d0:	ff0000ff 	.word	0xff0000ff
 80242d4:	ff000080 	.word	0xff000080

080242d8 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 80242d8:	b590      	push	{r4, r7, lr}
 80242da:	b085      	sub	sp, #20
 80242dc:	af00      	add	r7, sp, #0
 80242de:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 80242e0:	f7de fe12 	bl	8002f08 <BSP_LCD_GetFont>
 80242e4:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 80242e6:	4b60      	ldr	r3, [pc, #384]	; (8024468 <__io_putchar+0x190>)
 80242e8:	781b      	ldrb	r3, [r3, #0]
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	f040 80b6 	bne.w	802445c <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 80242f0:	4b5e      	ldr	r3, [pc, #376]	; (802446c <__io_putchar+0x194>)
 80242f2:	781b      	ldrb	r3, [r3, #0]
 80242f4:	2b01      	cmp	r3, #1
 80242f6:	d110      	bne.n	802431a <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80242f8:	4b5d      	ldr	r3, [pc, #372]	; (8024470 <__io_putchar+0x198>)
 80242fa:	881a      	ldrh	r2, [r3, #0]
 80242fc:	4b5d      	ldr	r3, [pc, #372]	; (8024474 <__io_putchar+0x19c>)
 80242fe:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8024300:	4b5d      	ldr	r3, [pc, #372]	; (8024478 <__io_putchar+0x1a0>)
 8024302:	881a      	ldrh	r2, [r3, #0]
 8024304:	4b5d      	ldr	r3, [pc, #372]	; (802447c <__io_putchar+0x1a4>)
 8024306:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8024308:	4b58      	ldr	r3, [pc, #352]	; (802446c <__io_putchar+0x194>)
 802430a:	2200      	movs	r2, #0
 802430c:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 802430e:	4b5c      	ldr	r3, [pc, #368]	; (8024480 <__io_putchar+0x1a8>)
 8024310:	2200      	movs	r2, #0
 8024312:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8024314:	4b5b      	ldr	r3, [pc, #364]	; (8024484 <__io_putchar+0x1ac>)
 8024316:	2200      	movs	r2, #0
 8024318:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 802431a:	4b5b      	ldr	r3, [pc, #364]	; (8024488 <__io_putchar+0x1b0>)
 802431c:	881b      	ldrh	r3, [r3, #0]
 802431e:	461c      	mov	r4, r3
 8024320:	f7de fd0e 	bl	8002d40 <BSP_LCD_GetXSize>
 8024324:	4602      	mov	r2, r0
 8024326:	68bb      	ldr	r3, [r7, #8]
 8024328:	889b      	ldrh	r3, [r3, #4]
 802432a:	fbb2 f3f3 	udiv	r3, r2, r3
 802432e:	429c      	cmp	r4, r3
 8024330:	d218      	bcs.n	8024364 <__io_putchar+0x8c>
 8024332:	687b      	ldr	r3, [r7, #4]
 8024334:	2b0a      	cmp	r3, #10
 8024336:	d015      	beq.n	8024364 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8024338:	4b4e      	ldr	r3, [pc, #312]	; (8024474 <__io_putchar+0x19c>)
 802433a:	881b      	ldrh	r3, [r3, #0]
 802433c:	4619      	mov	r1, r3
 802433e:	4b52      	ldr	r3, [pc, #328]	; (8024488 <__io_putchar+0x1b0>)
 8024340:	881b      	ldrh	r3, [r3, #0]
 8024342:	1c5a      	adds	r2, r3, #1
 8024344:	b290      	uxth	r0, r2
 8024346:	4a50      	ldr	r2, [pc, #320]	; (8024488 <__io_putchar+0x1b0>)
 8024348:	8010      	strh	r0, [r2, #0]
 802434a:	461c      	mov	r4, r3
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	b2d8      	uxtb	r0, r3
 8024350:	4a4e      	ldr	r2, [pc, #312]	; (802448c <__io_putchar+0x1b4>)
 8024352:	460b      	mov	r3, r1
 8024354:	015b      	lsls	r3, r3, #5
 8024356:	440b      	add	r3, r1
 8024358:	009b      	lsls	r3, r3, #2
 802435a:	4413      	add	r3, r2
 802435c:	4423      	add	r3, r4
 802435e:	4602      	mov	r2, r0
 8024360:	701a      	strb	r2, [r3, #0]
 8024362:	e07b      	b.n	802445c <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8024364:	4b45      	ldr	r3, [pc, #276]	; (802447c <__io_putchar+0x1a4>)
 8024366:	881a      	ldrh	r2, [r3, #0]
 8024368:	4b42      	ldr	r3, [pc, #264]	; (8024474 <__io_putchar+0x19c>)
 802436a:	881b      	ldrh	r3, [r3, #0]
 802436c:	429a      	cmp	r2, r3
 802436e:	d314      	bcc.n	802439a <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8024370:	4b47      	ldr	r3, [pc, #284]	; (8024490 <__io_putchar+0x1b8>)
 8024372:	781b      	ldrb	r3, [r3, #0]
 8024374:	2b00      	cmp	r3, #0
 8024376:	d10d      	bne.n	8024394 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8024378:	4b40      	ldr	r3, [pc, #256]	; (802447c <__io_putchar+0x1a4>)
 802437a:	881b      	ldrh	r3, [r3, #0]
 802437c:	3301      	adds	r3, #1
 802437e:	b29a      	uxth	r2, r3
 8024380:	4b3e      	ldr	r3, [pc, #248]	; (802447c <__io_putchar+0x1a4>)
 8024382:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8024384:	4b3d      	ldr	r3, [pc, #244]	; (802447c <__io_putchar+0x1a4>)
 8024386:	881b      	ldrh	r3, [r3, #0]
 8024388:	2b75      	cmp	r3, #117	; 0x75
 802438a:	d106      	bne.n	802439a <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 802438c:	4b3b      	ldr	r3, [pc, #236]	; (802447c <__io_putchar+0x1a4>)
 802438e:	2200      	movs	r2, #0
 8024390:	801a      	strh	r2, [r3, #0]
 8024392:	e002      	b.n	802439a <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8024394:	4b3e      	ldr	r3, [pc, #248]	; (8024490 <__io_putchar+0x1b8>)
 8024396:	2200      	movs	r2, #0
 8024398:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 802439a:	4b3b      	ldr	r3, [pc, #236]	; (8024488 <__io_putchar+0x1b0>)
 802439c:	881b      	ldrh	r3, [r3, #0]
 802439e:	60fb      	str	r3, [r7, #12]
 80243a0:	e015      	b.n	80243ce <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80243a2:	4b34      	ldr	r3, [pc, #208]	; (8024474 <__io_putchar+0x19c>)
 80243a4:	881b      	ldrh	r3, [r3, #0]
 80243a6:	4619      	mov	r1, r3
 80243a8:	4b37      	ldr	r3, [pc, #220]	; (8024488 <__io_putchar+0x1b0>)
 80243aa:	881b      	ldrh	r3, [r3, #0]
 80243ac:	1c5a      	adds	r2, r3, #1
 80243ae:	b290      	uxth	r0, r2
 80243b0:	4a35      	ldr	r2, [pc, #212]	; (8024488 <__io_putchar+0x1b0>)
 80243b2:	8010      	strh	r0, [r2, #0]
 80243b4:	4618      	mov	r0, r3
 80243b6:	4a35      	ldr	r2, [pc, #212]	; (802448c <__io_putchar+0x1b4>)
 80243b8:	460b      	mov	r3, r1
 80243ba:	015b      	lsls	r3, r3, #5
 80243bc:	440b      	add	r3, r1
 80243be:	009b      	lsls	r3, r3, #2
 80243c0:	4413      	add	r3, r2
 80243c2:	4403      	add	r3, r0
 80243c4:	2220      	movs	r2, #32
 80243c6:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80243c8:	68fb      	ldr	r3, [r7, #12]
 80243ca:	3301      	adds	r3, #1
 80243cc:	60fb      	str	r3, [r7, #12]
 80243ce:	f7de fcb7 	bl	8002d40 <BSP_LCD_GetXSize>
 80243d2:	4602      	mov	r2, r0
 80243d4:	68bb      	ldr	r3, [r7, #8]
 80243d6:	889b      	ldrh	r3, [r3, #4]
 80243d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80243dc:	68fa      	ldr	r2, [r7, #12]
 80243de:	429a      	cmp	r2, r3
 80243e0:	d3df      	bcc.n	80243a2 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80243e2:	4b24      	ldr	r3, [pc, #144]	; (8024474 <__io_putchar+0x19c>)
 80243e4:	881b      	ldrh	r3, [r3, #0]
 80243e6:	4618      	mov	r0, r3
 80243e8:	4b2a      	ldr	r3, [pc, #168]	; (8024494 <__io_putchar+0x1bc>)
 80243ea:	681a      	ldr	r2, [r3, #0]
 80243ec:	4927      	ldr	r1, [pc, #156]	; (802448c <__io_putchar+0x1b4>)
 80243ee:	4603      	mov	r3, r0
 80243f0:	015b      	lsls	r3, r3, #5
 80243f2:	4403      	add	r3, r0
 80243f4:	009b      	lsls	r3, r3, #2
 80243f6:	440b      	add	r3, r1
 80243f8:	3380      	adds	r3, #128	; 0x80
 80243fa:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 80243fc:	4b22      	ldr	r3, [pc, #136]	; (8024488 <__io_putchar+0x1b0>)
 80243fe:	2200      	movs	r2, #0
 8024400:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8024402:	f000 f849 	bl	8024498 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8024406:	4b1b      	ldr	r3, [pc, #108]	; (8024474 <__io_putchar+0x19c>)
 8024408:	881b      	ldrh	r3, [r3, #0]
 802440a:	3301      	adds	r3, #1
 802440c:	b29a      	uxth	r2, r3
 802440e:	4b19      	ldr	r3, [pc, #100]	; (8024474 <__io_putchar+0x19c>)
 8024410:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8024412:	4b18      	ldr	r3, [pc, #96]	; (8024474 <__io_putchar+0x19c>)
 8024414:	881b      	ldrh	r3, [r3, #0]
 8024416:	2b75      	cmp	r3, #117	; 0x75
 8024418:	d108      	bne.n	802442c <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 802441a:	4b16      	ldr	r3, [pc, #88]	; (8024474 <__io_putchar+0x19c>)
 802441c:	2200      	movs	r2, #0
 802441e:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8024420:	4b16      	ldr	r3, [pc, #88]	; (802447c <__io_putchar+0x1a4>)
 8024422:	2201      	movs	r2, #1
 8024424:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8024426:	4b1a      	ldr	r3, [pc, #104]	; (8024490 <__io_putchar+0x1b8>)
 8024428:	2201      	movs	r2, #1
 802442a:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 802442c:	687b      	ldr	r3, [r7, #4]
 802442e:	2b0a      	cmp	r3, #10
 8024430:	d014      	beq.n	802445c <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8024432:	4b10      	ldr	r3, [pc, #64]	; (8024474 <__io_putchar+0x19c>)
 8024434:	881b      	ldrh	r3, [r3, #0]
 8024436:	4619      	mov	r1, r3
 8024438:	4b13      	ldr	r3, [pc, #76]	; (8024488 <__io_putchar+0x1b0>)
 802443a:	881b      	ldrh	r3, [r3, #0]
 802443c:	1c5a      	adds	r2, r3, #1
 802443e:	b290      	uxth	r0, r2
 8024440:	4a11      	ldr	r2, [pc, #68]	; (8024488 <__io_putchar+0x1b0>)
 8024442:	8010      	strh	r0, [r2, #0]
 8024444:	461c      	mov	r4, r3
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	b2d8      	uxtb	r0, r3
 802444a:	4a10      	ldr	r2, [pc, #64]	; (802448c <__io_putchar+0x1b4>)
 802444c:	460b      	mov	r3, r1
 802444e:	015b      	lsls	r3, r3, #5
 8024450:	440b      	add	r3, r1
 8024452:	009b      	lsls	r3, r3, #2
 8024454:	4413      	add	r3, r2
 8024456:	4423      	add	r3, r4
 8024458:	4602      	mov	r2, r0
 802445a:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 802445c:	687b      	ldr	r3, [r7, #4]
}
 802445e:	4618      	mov	r0, r3
 8024460:	3714      	adds	r7, #20
 8024462:	46bd      	mov	sp, r7
 8024464:	bd90      	pop	{r4, r7, pc}
 8024466:	bf00      	nop
 8024468:	20010afd 	.word	0x20010afd
 802446c:	20010b02 	.word	0x20010b02
 8024470:	20010af4 	.word	0x20010af4
 8024474:	20010af8 	.word	0x20010af8
 8024478:	20010af6 	.word	0x20010af6
 802447c:	20010b00 	.word	0x20010b00
 8024480:	20010afe 	.word	0x20010afe
 8024484:	2001475c 	.word	0x2001475c
 8024488:	20010afa 	.word	0x20010afa
 802448c:	20010b04 	.word	0x20010b04
 8024490:	20010afc 	.word	0x20010afc
 8024494:	20014758 	.word	0x20014758

08024498 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8024498:	b580      	push	{r7, lr}
 802449a:	b082      	sub	sp, #8
 802449c:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 802449e:	2300      	movs	r3, #0
 80244a0:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 80244a2:	2300      	movs	r3, #0
 80244a4:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 80244a6:	2300      	movs	r3, #0
 80244a8:	807b      	strh	r3, [r7, #2]
 80244aa:	2300      	movs	r3, #0
 80244ac:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 80244ae:	4b39      	ldr	r3, [pc, #228]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 80244b0:	881b      	ldrh	r3, [r3, #0]
 80244b2:	2b0f      	cmp	r3, #15
 80244b4:	d826      	bhi.n	8024504 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 80244b6:	4b37      	ldr	r3, [pc, #220]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 80244b8:	881a      	ldrh	r2, [r3, #0]
 80244ba:	4b37      	ldr	r3, [pc, #220]	; (8024598 <LCD_LOG_UpdateDisplay+0x100>)
 80244bc:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 80244be:	429a      	cmp	r2, r3
 80244c0:	d320      	bcc.n	8024504 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 80244c2:	79fb      	ldrb	r3, [r7, #7]
 80244c4:	4a33      	ldr	r2, [pc, #204]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 80244c6:	8812      	ldrh	r2, [r2, #0]
 80244c8:	441a      	add	r2, r3
 80244ca:	4934      	ldr	r1, [pc, #208]	; (802459c <LCD_LOG_UpdateDisplay+0x104>)
 80244cc:	4613      	mov	r3, r2
 80244ce:	015b      	lsls	r3, r3, #5
 80244d0:	4413      	add	r3, r2
 80244d2:	009b      	lsls	r3, r3, #2
 80244d4:	440b      	add	r3, r1
 80244d6:	3380      	adds	r3, #128	; 0x80
 80244d8:	681b      	ldr	r3, [r3, #0]
 80244da:	4618      	mov	r0, r3
 80244dc:	f7de fcc8 	bl	8002e70 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80244e0:	4b2c      	ldr	r3, [pc, #176]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 80244e2:	881b      	ldrh	r3, [r3, #0]
 80244e4:	3304      	adds	r3, #4
 80244e6:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 80244e8:	79fb      	ldrb	r3, [r7, #7]
 80244ea:	4a2a      	ldr	r2, [pc, #168]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 80244ec:	8812      	ldrh	r2, [r2, #0]
 80244ee:	441a      	add	r2, r3
 80244f0:	4613      	mov	r3, r2
 80244f2:	015b      	lsls	r3, r3, #5
 80244f4:	4413      	add	r3, r2
 80244f6:	009b      	lsls	r3, r3, #2
 80244f8:	4a28      	ldr	r2, [pc, #160]	; (802459c <LCD_LOG_UpdateDisplay+0x104>)
 80244fa:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80244fc:	4619      	mov	r1, r3
 80244fe:	f7de fe49 	bl	8003194 <BSP_LCD_DisplayStringAtLine>
 8024502:	e043      	b.n	802458c <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8024504:	4b23      	ldr	r3, [pc, #140]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 8024506:	881a      	ldrh	r2, [r3, #0]
 8024508:	4b23      	ldr	r3, [pc, #140]	; (8024598 <LCD_LOG_UpdateDisplay+0x100>)
 802450a:	881b      	ldrh	r3, [r3, #0]
 802450c:	429a      	cmp	r2, r3
 802450e:	d204      	bcs.n	802451a <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8024510:	4b20      	ldr	r3, [pc, #128]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 8024512:	881b      	ldrh	r3, [r3, #0]
 8024514:	3375      	adds	r3, #117	; 0x75
 8024516:	80bb      	strh	r3, [r7, #4]
 8024518:	e002      	b.n	8024520 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 802451a:	4b1e      	ldr	r3, [pc, #120]	; (8024594 <LCD_LOG_UpdateDisplay+0xfc>)
 802451c:	881b      	ldrh	r3, [r3, #0]
 802451e:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8024520:	88bb      	ldrh	r3, [r7, #4]
 8024522:	3b10      	subs	r3, #16
 8024524:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8024526:	2300      	movs	r3, #0
 8024528:	71fb      	strb	r3, [r7, #7]
 802452a:	e02c      	b.n	8024586 <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 802452c:	79fa      	ldrb	r2, [r7, #7]
 802452e:	887b      	ldrh	r3, [r7, #2]
 8024530:	4413      	add	r3, r2
 8024532:	4a1b      	ldr	r2, [pc, #108]	; (80245a0 <LCD_LOG_UpdateDisplay+0x108>)
 8024534:	fb82 1203 	smull	r1, r2, r2, r3
 8024538:	441a      	add	r2, r3
 802453a:	1191      	asrs	r1, r2, #6
 802453c:	17da      	asrs	r2, r3, #31
 802453e:	1a8a      	subs	r2, r1, r2
 8024540:	2175      	movs	r1, #117	; 0x75
 8024542:	fb01 f202 	mul.w	r2, r1, r2
 8024546:	1a9a      	subs	r2, r3, r2
 8024548:	4613      	mov	r3, r2
 802454a:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 802454c:	883a      	ldrh	r2, [r7, #0]
 802454e:	4913      	ldr	r1, [pc, #76]	; (802459c <LCD_LOG_UpdateDisplay+0x104>)
 8024550:	4613      	mov	r3, r2
 8024552:	015b      	lsls	r3, r3, #5
 8024554:	4413      	add	r3, r2
 8024556:	009b      	lsls	r3, r3, #2
 8024558:	440b      	add	r3, r1
 802455a:	3380      	adds	r3, #128	; 0x80
 802455c:	681b      	ldr	r3, [r3, #0]
 802455e:	4618      	mov	r0, r3
 8024560:	f7de fc86 	bl	8002e70 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8024564:	79fb      	ldrb	r3, [r7, #7]
 8024566:	b29b      	uxth	r3, r3
 8024568:	3304      	adds	r3, #4
 802456a:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 802456c:	883a      	ldrh	r2, [r7, #0]
 802456e:	4613      	mov	r3, r2
 8024570:	015b      	lsls	r3, r3, #5
 8024572:	4413      	add	r3, r2
 8024574:	009b      	lsls	r3, r3, #2
 8024576:	4a09      	ldr	r2, [pc, #36]	; (802459c <LCD_LOG_UpdateDisplay+0x104>)
 8024578:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 802457a:	4619      	mov	r1, r3
 802457c:	f7de fe0a 	bl	8003194 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8024580:	79fb      	ldrb	r3, [r7, #7]
 8024582:	3301      	adds	r3, #1
 8024584:	71fb      	strb	r3, [r7, #7]
 8024586:	79fb      	ldrb	r3, [r7, #7]
 8024588:	2b10      	cmp	r3, #16
 802458a:	d9cf      	bls.n	802452c <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 802458c:	bf00      	nop
 802458e:	3708      	adds	r7, #8
 8024590:	46bd      	mov	sp, r7
 8024592:	bd80      	pop	{r7, pc}
 8024594:	20010af8 	.word	0x20010af8
 8024598:	20010b00 	.word	0x20010b00
 802459c:	20010b04 	.word	0x20010b04
 80245a0:	8c08c08d 	.word	0x8c08c08d

080245a4 <__libc_init_array>:
 80245a4:	b570      	push	{r4, r5, r6, lr}
 80245a6:	4e0d      	ldr	r6, [pc, #52]	; (80245dc <__libc_init_array+0x38>)
 80245a8:	4c0d      	ldr	r4, [pc, #52]	; (80245e0 <__libc_init_array+0x3c>)
 80245aa:	1ba4      	subs	r4, r4, r6
 80245ac:	10a4      	asrs	r4, r4, #2
 80245ae:	2500      	movs	r5, #0
 80245b0:	42a5      	cmp	r5, r4
 80245b2:	d109      	bne.n	80245c8 <__libc_init_array+0x24>
 80245b4:	4e0b      	ldr	r6, [pc, #44]	; (80245e4 <__libc_init_array+0x40>)
 80245b6:	4c0c      	ldr	r4, [pc, #48]	; (80245e8 <__libc_init_array+0x44>)
 80245b8:	f000 ffce 	bl	8025558 <_init>
 80245bc:	1ba4      	subs	r4, r4, r6
 80245be:	10a4      	asrs	r4, r4, #2
 80245c0:	2500      	movs	r5, #0
 80245c2:	42a5      	cmp	r5, r4
 80245c4:	d105      	bne.n	80245d2 <__libc_init_array+0x2e>
 80245c6:	bd70      	pop	{r4, r5, r6, pc}
 80245c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80245cc:	4798      	blx	r3
 80245ce:	3501      	adds	r5, #1
 80245d0:	e7ee      	b.n	80245b0 <__libc_init_array+0xc>
 80245d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80245d6:	4798      	blx	r3
 80245d8:	3501      	adds	r5, #1
 80245da:	e7f2      	b.n	80245c2 <__libc_init_array+0x1e>
 80245dc:	0802bba4 	.word	0x0802bba4
 80245e0:	0802bba4 	.word	0x0802bba4
 80245e4:	0802bba4 	.word	0x0802bba4
 80245e8:	0802bba8 	.word	0x0802bba8

080245ec <malloc>:
 80245ec:	4b02      	ldr	r3, [pc, #8]	; (80245f8 <malloc+0xc>)
 80245ee:	4601      	mov	r1, r0
 80245f0:	6818      	ldr	r0, [r3, #0]
 80245f2:	f000 b87b 	b.w	80246ec <_malloc_r>
 80245f6:	bf00      	nop
 80245f8:	2000005c 	.word	0x2000005c

080245fc <free>:
 80245fc:	4b02      	ldr	r3, [pc, #8]	; (8024608 <free+0xc>)
 80245fe:	4601      	mov	r1, r0
 8024600:	6818      	ldr	r0, [r3, #0]
 8024602:	f000 b825 	b.w	8024650 <_free_r>
 8024606:	bf00      	nop
 8024608:	2000005c 	.word	0x2000005c

0802460c <memcmp>:
 802460c:	b530      	push	{r4, r5, lr}
 802460e:	2400      	movs	r4, #0
 8024610:	42a2      	cmp	r2, r4
 8024612:	d101      	bne.n	8024618 <memcmp+0xc>
 8024614:	2000      	movs	r0, #0
 8024616:	e007      	b.n	8024628 <memcmp+0x1c>
 8024618:	5d03      	ldrb	r3, [r0, r4]
 802461a:	3401      	adds	r4, #1
 802461c:	190d      	adds	r5, r1, r4
 802461e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8024622:	42ab      	cmp	r3, r5
 8024624:	d0f4      	beq.n	8024610 <memcmp+0x4>
 8024626:	1b58      	subs	r0, r3, r5
 8024628:	bd30      	pop	{r4, r5, pc}

0802462a <memcpy>:
 802462a:	b510      	push	{r4, lr}
 802462c:	1e43      	subs	r3, r0, #1
 802462e:	440a      	add	r2, r1
 8024630:	4291      	cmp	r1, r2
 8024632:	d100      	bne.n	8024636 <memcpy+0xc>
 8024634:	bd10      	pop	{r4, pc}
 8024636:	f811 4b01 	ldrb.w	r4, [r1], #1
 802463a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802463e:	e7f7      	b.n	8024630 <memcpy+0x6>

08024640 <memset>:
 8024640:	4402      	add	r2, r0
 8024642:	4603      	mov	r3, r0
 8024644:	4293      	cmp	r3, r2
 8024646:	d100      	bne.n	802464a <memset+0xa>
 8024648:	4770      	bx	lr
 802464a:	f803 1b01 	strb.w	r1, [r3], #1
 802464e:	e7f9      	b.n	8024644 <memset+0x4>

08024650 <_free_r>:
 8024650:	b538      	push	{r3, r4, r5, lr}
 8024652:	4605      	mov	r5, r0
 8024654:	2900      	cmp	r1, #0
 8024656:	d045      	beq.n	80246e4 <_free_r+0x94>
 8024658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802465c:	1f0c      	subs	r4, r1, #4
 802465e:	2b00      	cmp	r3, #0
 8024660:	bfb8      	it	lt
 8024662:	18e4      	addlt	r4, r4, r3
 8024664:	f000 fc02 	bl	8024e6c <__malloc_lock>
 8024668:	4a1f      	ldr	r2, [pc, #124]	; (80246e8 <_free_r+0x98>)
 802466a:	6813      	ldr	r3, [r2, #0]
 802466c:	4610      	mov	r0, r2
 802466e:	b933      	cbnz	r3, 802467e <_free_r+0x2e>
 8024670:	6063      	str	r3, [r4, #4]
 8024672:	6014      	str	r4, [r2, #0]
 8024674:	4628      	mov	r0, r5
 8024676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802467a:	f000 bbf8 	b.w	8024e6e <__malloc_unlock>
 802467e:	42a3      	cmp	r3, r4
 8024680:	d90c      	bls.n	802469c <_free_r+0x4c>
 8024682:	6821      	ldr	r1, [r4, #0]
 8024684:	1862      	adds	r2, r4, r1
 8024686:	4293      	cmp	r3, r2
 8024688:	bf04      	itt	eq
 802468a:	681a      	ldreq	r2, [r3, #0]
 802468c:	685b      	ldreq	r3, [r3, #4]
 802468e:	6063      	str	r3, [r4, #4]
 8024690:	bf04      	itt	eq
 8024692:	1852      	addeq	r2, r2, r1
 8024694:	6022      	streq	r2, [r4, #0]
 8024696:	6004      	str	r4, [r0, #0]
 8024698:	e7ec      	b.n	8024674 <_free_r+0x24>
 802469a:	4613      	mov	r3, r2
 802469c:	685a      	ldr	r2, [r3, #4]
 802469e:	b10a      	cbz	r2, 80246a4 <_free_r+0x54>
 80246a0:	42a2      	cmp	r2, r4
 80246a2:	d9fa      	bls.n	802469a <_free_r+0x4a>
 80246a4:	6819      	ldr	r1, [r3, #0]
 80246a6:	1858      	adds	r0, r3, r1
 80246a8:	42a0      	cmp	r0, r4
 80246aa:	d10b      	bne.n	80246c4 <_free_r+0x74>
 80246ac:	6820      	ldr	r0, [r4, #0]
 80246ae:	4401      	add	r1, r0
 80246b0:	1858      	adds	r0, r3, r1
 80246b2:	4282      	cmp	r2, r0
 80246b4:	6019      	str	r1, [r3, #0]
 80246b6:	d1dd      	bne.n	8024674 <_free_r+0x24>
 80246b8:	6810      	ldr	r0, [r2, #0]
 80246ba:	6852      	ldr	r2, [r2, #4]
 80246bc:	605a      	str	r2, [r3, #4]
 80246be:	4401      	add	r1, r0
 80246c0:	6019      	str	r1, [r3, #0]
 80246c2:	e7d7      	b.n	8024674 <_free_r+0x24>
 80246c4:	d902      	bls.n	80246cc <_free_r+0x7c>
 80246c6:	230c      	movs	r3, #12
 80246c8:	602b      	str	r3, [r5, #0]
 80246ca:	e7d3      	b.n	8024674 <_free_r+0x24>
 80246cc:	6820      	ldr	r0, [r4, #0]
 80246ce:	1821      	adds	r1, r4, r0
 80246d0:	428a      	cmp	r2, r1
 80246d2:	bf04      	itt	eq
 80246d4:	6811      	ldreq	r1, [r2, #0]
 80246d6:	6852      	ldreq	r2, [r2, #4]
 80246d8:	6062      	str	r2, [r4, #4]
 80246da:	bf04      	itt	eq
 80246dc:	1809      	addeq	r1, r1, r0
 80246de:	6021      	streq	r1, [r4, #0]
 80246e0:	605c      	str	r4, [r3, #4]
 80246e2:	e7c7      	b.n	8024674 <_free_r+0x24>
 80246e4:	bd38      	pop	{r3, r4, r5, pc}
 80246e6:	bf00      	nop
 80246e8:	2000911c 	.word	0x2000911c

080246ec <_malloc_r>:
 80246ec:	b570      	push	{r4, r5, r6, lr}
 80246ee:	1ccd      	adds	r5, r1, #3
 80246f0:	f025 0503 	bic.w	r5, r5, #3
 80246f4:	3508      	adds	r5, #8
 80246f6:	2d0c      	cmp	r5, #12
 80246f8:	bf38      	it	cc
 80246fa:	250c      	movcc	r5, #12
 80246fc:	2d00      	cmp	r5, #0
 80246fe:	4606      	mov	r6, r0
 8024700:	db01      	blt.n	8024706 <_malloc_r+0x1a>
 8024702:	42a9      	cmp	r1, r5
 8024704:	d903      	bls.n	802470e <_malloc_r+0x22>
 8024706:	230c      	movs	r3, #12
 8024708:	6033      	str	r3, [r6, #0]
 802470a:	2000      	movs	r0, #0
 802470c:	bd70      	pop	{r4, r5, r6, pc}
 802470e:	f000 fbad 	bl	8024e6c <__malloc_lock>
 8024712:	4a21      	ldr	r2, [pc, #132]	; (8024798 <_malloc_r+0xac>)
 8024714:	6814      	ldr	r4, [r2, #0]
 8024716:	4621      	mov	r1, r4
 8024718:	b991      	cbnz	r1, 8024740 <_malloc_r+0x54>
 802471a:	4c20      	ldr	r4, [pc, #128]	; (802479c <_malloc_r+0xb0>)
 802471c:	6823      	ldr	r3, [r4, #0]
 802471e:	b91b      	cbnz	r3, 8024728 <_malloc_r+0x3c>
 8024720:	4630      	mov	r0, r6
 8024722:	f000 f8ed 	bl	8024900 <_sbrk_r>
 8024726:	6020      	str	r0, [r4, #0]
 8024728:	4629      	mov	r1, r5
 802472a:	4630      	mov	r0, r6
 802472c:	f000 f8e8 	bl	8024900 <_sbrk_r>
 8024730:	1c43      	adds	r3, r0, #1
 8024732:	d124      	bne.n	802477e <_malloc_r+0x92>
 8024734:	230c      	movs	r3, #12
 8024736:	6033      	str	r3, [r6, #0]
 8024738:	4630      	mov	r0, r6
 802473a:	f000 fb98 	bl	8024e6e <__malloc_unlock>
 802473e:	e7e4      	b.n	802470a <_malloc_r+0x1e>
 8024740:	680b      	ldr	r3, [r1, #0]
 8024742:	1b5b      	subs	r3, r3, r5
 8024744:	d418      	bmi.n	8024778 <_malloc_r+0x8c>
 8024746:	2b0b      	cmp	r3, #11
 8024748:	d90f      	bls.n	802476a <_malloc_r+0x7e>
 802474a:	600b      	str	r3, [r1, #0]
 802474c:	50cd      	str	r5, [r1, r3]
 802474e:	18cc      	adds	r4, r1, r3
 8024750:	4630      	mov	r0, r6
 8024752:	f000 fb8c 	bl	8024e6e <__malloc_unlock>
 8024756:	f104 000b 	add.w	r0, r4, #11
 802475a:	1d23      	adds	r3, r4, #4
 802475c:	f020 0007 	bic.w	r0, r0, #7
 8024760:	1ac3      	subs	r3, r0, r3
 8024762:	d0d3      	beq.n	802470c <_malloc_r+0x20>
 8024764:	425a      	negs	r2, r3
 8024766:	50e2      	str	r2, [r4, r3]
 8024768:	e7d0      	b.n	802470c <_malloc_r+0x20>
 802476a:	428c      	cmp	r4, r1
 802476c:	684b      	ldr	r3, [r1, #4]
 802476e:	bf16      	itet	ne
 8024770:	6063      	strne	r3, [r4, #4]
 8024772:	6013      	streq	r3, [r2, #0]
 8024774:	460c      	movne	r4, r1
 8024776:	e7eb      	b.n	8024750 <_malloc_r+0x64>
 8024778:	460c      	mov	r4, r1
 802477a:	6849      	ldr	r1, [r1, #4]
 802477c:	e7cc      	b.n	8024718 <_malloc_r+0x2c>
 802477e:	1cc4      	adds	r4, r0, #3
 8024780:	f024 0403 	bic.w	r4, r4, #3
 8024784:	42a0      	cmp	r0, r4
 8024786:	d005      	beq.n	8024794 <_malloc_r+0xa8>
 8024788:	1a21      	subs	r1, r4, r0
 802478a:	4630      	mov	r0, r6
 802478c:	f000 f8b8 	bl	8024900 <_sbrk_r>
 8024790:	3001      	adds	r0, #1
 8024792:	d0cf      	beq.n	8024734 <_malloc_r+0x48>
 8024794:	6025      	str	r5, [r4, #0]
 8024796:	e7db      	b.n	8024750 <_malloc_r+0x64>
 8024798:	2000911c 	.word	0x2000911c
 802479c:	20009120 	.word	0x20009120

080247a0 <iprintf>:
 80247a0:	b40f      	push	{r0, r1, r2, r3}
 80247a2:	4b0a      	ldr	r3, [pc, #40]	; (80247cc <iprintf+0x2c>)
 80247a4:	b513      	push	{r0, r1, r4, lr}
 80247a6:	681c      	ldr	r4, [r3, #0]
 80247a8:	b124      	cbz	r4, 80247b4 <iprintf+0x14>
 80247aa:	69a3      	ldr	r3, [r4, #24]
 80247ac:	b913      	cbnz	r3, 80247b4 <iprintf+0x14>
 80247ae:	4620      	mov	r0, r4
 80247b0:	f000 fa6e 	bl	8024c90 <__sinit>
 80247b4:	ab05      	add	r3, sp, #20
 80247b6:	9a04      	ldr	r2, [sp, #16]
 80247b8:	68a1      	ldr	r1, [r4, #8]
 80247ba:	9301      	str	r3, [sp, #4]
 80247bc:	4620      	mov	r0, r4
 80247be:	f000 fb81 	bl	8024ec4 <_vfiprintf_r>
 80247c2:	b002      	add	sp, #8
 80247c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247c8:	b004      	add	sp, #16
 80247ca:	4770      	bx	lr
 80247cc:	2000005c 	.word	0x2000005c

080247d0 <_puts_r>:
 80247d0:	b570      	push	{r4, r5, r6, lr}
 80247d2:	460e      	mov	r6, r1
 80247d4:	4605      	mov	r5, r0
 80247d6:	b118      	cbz	r0, 80247e0 <_puts_r+0x10>
 80247d8:	6983      	ldr	r3, [r0, #24]
 80247da:	b90b      	cbnz	r3, 80247e0 <_puts_r+0x10>
 80247dc:	f000 fa58 	bl	8024c90 <__sinit>
 80247e0:	69ab      	ldr	r3, [r5, #24]
 80247e2:	68ac      	ldr	r4, [r5, #8]
 80247e4:	b913      	cbnz	r3, 80247ec <_puts_r+0x1c>
 80247e6:	4628      	mov	r0, r5
 80247e8:	f000 fa52 	bl	8024c90 <__sinit>
 80247ec:	4b23      	ldr	r3, [pc, #140]	; (802487c <_puts_r+0xac>)
 80247ee:	429c      	cmp	r4, r3
 80247f0:	d117      	bne.n	8024822 <_puts_r+0x52>
 80247f2:	686c      	ldr	r4, [r5, #4]
 80247f4:	89a3      	ldrh	r3, [r4, #12]
 80247f6:	071b      	lsls	r3, r3, #28
 80247f8:	d51d      	bpl.n	8024836 <_puts_r+0x66>
 80247fa:	6923      	ldr	r3, [r4, #16]
 80247fc:	b1db      	cbz	r3, 8024836 <_puts_r+0x66>
 80247fe:	3e01      	subs	r6, #1
 8024800:	68a3      	ldr	r3, [r4, #8]
 8024802:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024806:	3b01      	subs	r3, #1
 8024808:	60a3      	str	r3, [r4, #8]
 802480a:	b9e9      	cbnz	r1, 8024848 <_puts_r+0x78>
 802480c:	2b00      	cmp	r3, #0
 802480e:	da2e      	bge.n	802486e <_puts_r+0x9e>
 8024810:	4622      	mov	r2, r4
 8024812:	210a      	movs	r1, #10
 8024814:	4628      	mov	r0, r5
 8024816:	f000 f88b 	bl	8024930 <__swbuf_r>
 802481a:	3001      	adds	r0, #1
 802481c:	d011      	beq.n	8024842 <_puts_r+0x72>
 802481e:	200a      	movs	r0, #10
 8024820:	e011      	b.n	8024846 <_puts_r+0x76>
 8024822:	4b17      	ldr	r3, [pc, #92]	; (8024880 <_puts_r+0xb0>)
 8024824:	429c      	cmp	r4, r3
 8024826:	d101      	bne.n	802482c <_puts_r+0x5c>
 8024828:	68ac      	ldr	r4, [r5, #8]
 802482a:	e7e3      	b.n	80247f4 <_puts_r+0x24>
 802482c:	4b15      	ldr	r3, [pc, #84]	; (8024884 <_puts_r+0xb4>)
 802482e:	429c      	cmp	r4, r3
 8024830:	bf08      	it	eq
 8024832:	68ec      	ldreq	r4, [r5, #12]
 8024834:	e7de      	b.n	80247f4 <_puts_r+0x24>
 8024836:	4621      	mov	r1, r4
 8024838:	4628      	mov	r0, r5
 802483a:	f000 f8cb 	bl	80249d4 <__swsetup_r>
 802483e:	2800      	cmp	r0, #0
 8024840:	d0dd      	beq.n	80247fe <_puts_r+0x2e>
 8024842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024846:	bd70      	pop	{r4, r5, r6, pc}
 8024848:	2b00      	cmp	r3, #0
 802484a:	da04      	bge.n	8024856 <_puts_r+0x86>
 802484c:	69a2      	ldr	r2, [r4, #24]
 802484e:	429a      	cmp	r2, r3
 8024850:	dc06      	bgt.n	8024860 <_puts_r+0x90>
 8024852:	290a      	cmp	r1, #10
 8024854:	d004      	beq.n	8024860 <_puts_r+0x90>
 8024856:	6823      	ldr	r3, [r4, #0]
 8024858:	1c5a      	adds	r2, r3, #1
 802485a:	6022      	str	r2, [r4, #0]
 802485c:	7019      	strb	r1, [r3, #0]
 802485e:	e7cf      	b.n	8024800 <_puts_r+0x30>
 8024860:	4622      	mov	r2, r4
 8024862:	4628      	mov	r0, r5
 8024864:	f000 f864 	bl	8024930 <__swbuf_r>
 8024868:	3001      	adds	r0, #1
 802486a:	d1c9      	bne.n	8024800 <_puts_r+0x30>
 802486c:	e7e9      	b.n	8024842 <_puts_r+0x72>
 802486e:	6823      	ldr	r3, [r4, #0]
 8024870:	200a      	movs	r0, #10
 8024872:	1c5a      	adds	r2, r3, #1
 8024874:	6022      	str	r2, [r4, #0]
 8024876:	7018      	strb	r0, [r3, #0]
 8024878:	e7e5      	b.n	8024846 <_puts_r+0x76>
 802487a:	bf00      	nop
 802487c:	0802bb28 	.word	0x0802bb28
 8024880:	0802bb48 	.word	0x0802bb48
 8024884:	0802bb08 	.word	0x0802bb08

08024888 <puts>:
 8024888:	4b02      	ldr	r3, [pc, #8]	; (8024894 <puts+0xc>)
 802488a:	4601      	mov	r1, r0
 802488c:	6818      	ldr	r0, [r3, #0]
 802488e:	f7ff bf9f 	b.w	80247d0 <_puts_r>
 8024892:	bf00      	nop
 8024894:	2000005c 	.word	0x2000005c

08024898 <rand>:
 8024898:	b538      	push	{r3, r4, r5, lr}
 802489a:	4b13      	ldr	r3, [pc, #76]	; (80248e8 <rand+0x50>)
 802489c:	681c      	ldr	r4, [r3, #0]
 802489e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80248a0:	b97b      	cbnz	r3, 80248c2 <rand+0x2a>
 80248a2:	2018      	movs	r0, #24
 80248a4:	f7ff fea2 	bl	80245ec <malloc>
 80248a8:	4a10      	ldr	r2, [pc, #64]	; (80248ec <rand+0x54>)
 80248aa:	4b11      	ldr	r3, [pc, #68]	; (80248f0 <rand+0x58>)
 80248ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80248ae:	e9c0 2300 	strd	r2, r3, [r0]
 80248b2:	4b10      	ldr	r3, [pc, #64]	; (80248f4 <rand+0x5c>)
 80248b4:	6083      	str	r3, [r0, #8]
 80248b6:	230b      	movs	r3, #11
 80248b8:	8183      	strh	r3, [r0, #12]
 80248ba:	2201      	movs	r2, #1
 80248bc:	2300      	movs	r3, #0
 80248be:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80248c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80248c4:	480c      	ldr	r0, [pc, #48]	; (80248f8 <rand+0x60>)
 80248c6:	690a      	ldr	r2, [r1, #16]
 80248c8:	694b      	ldr	r3, [r1, #20]
 80248ca:	4c0c      	ldr	r4, [pc, #48]	; (80248fc <rand+0x64>)
 80248cc:	4350      	muls	r0, r2
 80248ce:	fb04 0003 	mla	r0, r4, r3, r0
 80248d2:	fba2 2304 	umull	r2, r3, r2, r4
 80248d6:	4403      	add	r3, r0
 80248d8:	1c54      	adds	r4, r2, #1
 80248da:	f143 0500 	adc.w	r5, r3, #0
 80248de:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80248e2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80248e6:	bd38      	pop	{r3, r4, r5, pc}
 80248e8:	2000005c 	.word	0x2000005c
 80248ec:	abcd330e 	.word	0xabcd330e
 80248f0:	e66d1234 	.word	0xe66d1234
 80248f4:	0005deec 	.word	0x0005deec
 80248f8:	5851f42d 	.word	0x5851f42d
 80248fc:	4c957f2d 	.word	0x4c957f2d

08024900 <_sbrk_r>:
 8024900:	b538      	push	{r3, r4, r5, lr}
 8024902:	4c06      	ldr	r4, [pc, #24]	; (802491c <_sbrk_r+0x1c>)
 8024904:	2300      	movs	r3, #0
 8024906:	4605      	mov	r5, r0
 8024908:	4608      	mov	r0, r1
 802490a:	6023      	str	r3, [r4, #0]
 802490c:	f7de f934 	bl	8002b78 <_sbrk>
 8024910:	1c43      	adds	r3, r0, #1
 8024912:	d102      	bne.n	802491a <_sbrk_r+0x1a>
 8024914:	6823      	ldr	r3, [r4, #0]
 8024916:	b103      	cbz	r3, 802491a <_sbrk_r+0x1a>
 8024918:	602b      	str	r3, [r5, #0]
 802491a:	bd38      	pop	{r3, r4, r5, pc}
 802491c:	20010404 	.word	0x20010404

08024920 <strcpy>:
 8024920:	4603      	mov	r3, r0
 8024922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024926:	f803 2b01 	strb.w	r2, [r3], #1
 802492a:	2a00      	cmp	r2, #0
 802492c:	d1f9      	bne.n	8024922 <strcpy+0x2>
 802492e:	4770      	bx	lr

08024930 <__swbuf_r>:
 8024930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024932:	460e      	mov	r6, r1
 8024934:	4614      	mov	r4, r2
 8024936:	4605      	mov	r5, r0
 8024938:	b118      	cbz	r0, 8024942 <__swbuf_r+0x12>
 802493a:	6983      	ldr	r3, [r0, #24]
 802493c:	b90b      	cbnz	r3, 8024942 <__swbuf_r+0x12>
 802493e:	f000 f9a7 	bl	8024c90 <__sinit>
 8024942:	4b21      	ldr	r3, [pc, #132]	; (80249c8 <__swbuf_r+0x98>)
 8024944:	429c      	cmp	r4, r3
 8024946:	d12a      	bne.n	802499e <__swbuf_r+0x6e>
 8024948:	686c      	ldr	r4, [r5, #4]
 802494a:	69a3      	ldr	r3, [r4, #24]
 802494c:	60a3      	str	r3, [r4, #8]
 802494e:	89a3      	ldrh	r3, [r4, #12]
 8024950:	071a      	lsls	r2, r3, #28
 8024952:	d52e      	bpl.n	80249b2 <__swbuf_r+0x82>
 8024954:	6923      	ldr	r3, [r4, #16]
 8024956:	b363      	cbz	r3, 80249b2 <__swbuf_r+0x82>
 8024958:	6923      	ldr	r3, [r4, #16]
 802495a:	6820      	ldr	r0, [r4, #0]
 802495c:	1ac0      	subs	r0, r0, r3
 802495e:	6963      	ldr	r3, [r4, #20]
 8024960:	b2f6      	uxtb	r6, r6
 8024962:	4283      	cmp	r3, r0
 8024964:	4637      	mov	r7, r6
 8024966:	dc04      	bgt.n	8024972 <__swbuf_r+0x42>
 8024968:	4621      	mov	r1, r4
 802496a:	4628      	mov	r0, r5
 802496c:	f000 f926 	bl	8024bbc <_fflush_r>
 8024970:	bb28      	cbnz	r0, 80249be <__swbuf_r+0x8e>
 8024972:	68a3      	ldr	r3, [r4, #8]
 8024974:	3b01      	subs	r3, #1
 8024976:	60a3      	str	r3, [r4, #8]
 8024978:	6823      	ldr	r3, [r4, #0]
 802497a:	1c5a      	adds	r2, r3, #1
 802497c:	6022      	str	r2, [r4, #0]
 802497e:	701e      	strb	r6, [r3, #0]
 8024980:	6963      	ldr	r3, [r4, #20]
 8024982:	3001      	adds	r0, #1
 8024984:	4283      	cmp	r3, r0
 8024986:	d004      	beq.n	8024992 <__swbuf_r+0x62>
 8024988:	89a3      	ldrh	r3, [r4, #12]
 802498a:	07db      	lsls	r3, r3, #31
 802498c:	d519      	bpl.n	80249c2 <__swbuf_r+0x92>
 802498e:	2e0a      	cmp	r6, #10
 8024990:	d117      	bne.n	80249c2 <__swbuf_r+0x92>
 8024992:	4621      	mov	r1, r4
 8024994:	4628      	mov	r0, r5
 8024996:	f000 f911 	bl	8024bbc <_fflush_r>
 802499a:	b190      	cbz	r0, 80249c2 <__swbuf_r+0x92>
 802499c:	e00f      	b.n	80249be <__swbuf_r+0x8e>
 802499e:	4b0b      	ldr	r3, [pc, #44]	; (80249cc <__swbuf_r+0x9c>)
 80249a0:	429c      	cmp	r4, r3
 80249a2:	d101      	bne.n	80249a8 <__swbuf_r+0x78>
 80249a4:	68ac      	ldr	r4, [r5, #8]
 80249a6:	e7d0      	b.n	802494a <__swbuf_r+0x1a>
 80249a8:	4b09      	ldr	r3, [pc, #36]	; (80249d0 <__swbuf_r+0xa0>)
 80249aa:	429c      	cmp	r4, r3
 80249ac:	bf08      	it	eq
 80249ae:	68ec      	ldreq	r4, [r5, #12]
 80249b0:	e7cb      	b.n	802494a <__swbuf_r+0x1a>
 80249b2:	4621      	mov	r1, r4
 80249b4:	4628      	mov	r0, r5
 80249b6:	f000 f80d 	bl	80249d4 <__swsetup_r>
 80249ba:	2800      	cmp	r0, #0
 80249bc:	d0cc      	beq.n	8024958 <__swbuf_r+0x28>
 80249be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80249c2:	4638      	mov	r0, r7
 80249c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80249c6:	bf00      	nop
 80249c8:	0802bb28 	.word	0x0802bb28
 80249cc:	0802bb48 	.word	0x0802bb48
 80249d0:	0802bb08 	.word	0x0802bb08

080249d4 <__swsetup_r>:
 80249d4:	4b32      	ldr	r3, [pc, #200]	; (8024aa0 <__swsetup_r+0xcc>)
 80249d6:	b570      	push	{r4, r5, r6, lr}
 80249d8:	681d      	ldr	r5, [r3, #0]
 80249da:	4606      	mov	r6, r0
 80249dc:	460c      	mov	r4, r1
 80249de:	b125      	cbz	r5, 80249ea <__swsetup_r+0x16>
 80249e0:	69ab      	ldr	r3, [r5, #24]
 80249e2:	b913      	cbnz	r3, 80249ea <__swsetup_r+0x16>
 80249e4:	4628      	mov	r0, r5
 80249e6:	f000 f953 	bl	8024c90 <__sinit>
 80249ea:	4b2e      	ldr	r3, [pc, #184]	; (8024aa4 <__swsetup_r+0xd0>)
 80249ec:	429c      	cmp	r4, r3
 80249ee:	d10f      	bne.n	8024a10 <__swsetup_r+0x3c>
 80249f0:	686c      	ldr	r4, [r5, #4]
 80249f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80249f6:	b29a      	uxth	r2, r3
 80249f8:	0715      	lsls	r5, r2, #28
 80249fa:	d42c      	bmi.n	8024a56 <__swsetup_r+0x82>
 80249fc:	06d0      	lsls	r0, r2, #27
 80249fe:	d411      	bmi.n	8024a24 <__swsetup_r+0x50>
 8024a00:	2209      	movs	r2, #9
 8024a02:	6032      	str	r2, [r6, #0]
 8024a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a08:	81a3      	strh	r3, [r4, #12]
 8024a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024a0e:	e03e      	b.n	8024a8e <__swsetup_r+0xba>
 8024a10:	4b25      	ldr	r3, [pc, #148]	; (8024aa8 <__swsetup_r+0xd4>)
 8024a12:	429c      	cmp	r4, r3
 8024a14:	d101      	bne.n	8024a1a <__swsetup_r+0x46>
 8024a16:	68ac      	ldr	r4, [r5, #8]
 8024a18:	e7eb      	b.n	80249f2 <__swsetup_r+0x1e>
 8024a1a:	4b24      	ldr	r3, [pc, #144]	; (8024aac <__swsetup_r+0xd8>)
 8024a1c:	429c      	cmp	r4, r3
 8024a1e:	bf08      	it	eq
 8024a20:	68ec      	ldreq	r4, [r5, #12]
 8024a22:	e7e6      	b.n	80249f2 <__swsetup_r+0x1e>
 8024a24:	0751      	lsls	r1, r2, #29
 8024a26:	d512      	bpl.n	8024a4e <__swsetup_r+0x7a>
 8024a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024a2a:	b141      	cbz	r1, 8024a3e <__swsetup_r+0x6a>
 8024a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024a30:	4299      	cmp	r1, r3
 8024a32:	d002      	beq.n	8024a3a <__swsetup_r+0x66>
 8024a34:	4630      	mov	r0, r6
 8024a36:	f7ff fe0b 	bl	8024650 <_free_r>
 8024a3a:	2300      	movs	r3, #0
 8024a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8024a3e:	89a3      	ldrh	r3, [r4, #12]
 8024a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024a44:	81a3      	strh	r3, [r4, #12]
 8024a46:	2300      	movs	r3, #0
 8024a48:	6063      	str	r3, [r4, #4]
 8024a4a:	6923      	ldr	r3, [r4, #16]
 8024a4c:	6023      	str	r3, [r4, #0]
 8024a4e:	89a3      	ldrh	r3, [r4, #12]
 8024a50:	f043 0308 	orr.w	r3, r3, #8
 8024a54:	81a3      	strh	r3, [r4, #12]
 8024a56:	6923      	ldr	r3, [r4, #16]
 8024a58:	b94b      	cbnz	r3, 8024a6e <__swsetup_r+0x9a>
 8024a5a:	89a3      	ldrh	r3, [r4, #12]
 8024a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024a64:	d003      	beq.n	8024a6e <__swsetup_r+0x9a>
 8024a66:	4621      	mov	r1, r4
 8024a68:	4630      	mov	r0, r6
 8024a6a:	f000 f9bf 	bl	8024dec <__smakebuf_r>
 8024a6e:	89a2      	ldrh	r2, [r4, #12]
 8024a70:	f012 0301 	ands.w	r3, r2, #1
 8024a74:	d00c      	beq.n	8024a90 <__swsetup_r+0xbc>
 8024a76:	2300      	movs	r3, #0
 8024a78:	60a3      	str	r3, [r4, #8]
 8024a7a:	6963      	ldr	r3, [r4, #20]
 8024a7c:	425b      	negs	r3, r3
 8024a7e:	61a3      	str	r3, [r4, #24]
 8024a80:	6923      	ldr	r3, [r4, #16]
 8024a82:	b953      	cbnz	r3, 8024a9a <__swsetup_r+0xc6>
 8024a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024a88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024a8c:	d1ba      	bne.n	8024a04 <__swsetup_r+0x30>
 8024a8e:	bd70      	pop	{r4, r5, r6, pc}
 8024a90:	0792      	lsls	r2, r2, #30
 8024a92:	bf58      	it	pl
 8024a94:	6963      	ldrpl	r3, [r4, #20]
 8024a96:	60a3      	str	r3, [r4, #8]
 8024a98:	e7f2      	b.n	8024a80 <__swsetup_r+0xac>
 8024a9a:	2000      	movs	r0, #0
 8024a9c:	e7f7      	b.n	8024a8e <__swsetup_r+0xba>
 8024a9e:	bf00      	nop
 8024aa0:	2000005c 	.word	0x2000005c
 8024aa4:	0802bb28 	.word	0x0802bb28
 8024aa8:	0802bb48 	.word	0x0802bb48
 8024aac:	0802bb08 	.word	0x0802bb08

08024ab0 <__sflush_r>:
 8024ab0:	898a      	ldrh	r2, [r1, #12]
 8024ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ab6:	4605      	mov	r5, r0
 8024ab8:	0710      	lsls	r0, r2, #28
 8024aba:	460c      	mov	r4, r1
 8024abc:	d458      	bmi.n	8024b70 <__sflush_r+0xc0>
 8024abe:	684b      	ldr	r3, [r1, #4]
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	dc05      	bgt.n	8024ad0 <__sflush_r+0x20>
 8024ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024ac6:	2b00      	cmp	r3, #0
 8024ac8:	dc02      	bgt.n	8024ad0 <__sflush_r+0x20>
 8024aca:	2000      	movs	r0, #0
 8024acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024ad2:	2e00      	cmp	r6, #0
 8024ad4:	d0f9      	beq.n	8024aca <__sflush_r+0x1a>
 8024ad6:	2300      	movs	r3, #0
 8024ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024adc:	682f      	ldr	r7, [r5, #0]
 8024ade:	6a21      	ldr	r1, [r4, #32]
 8024ae0:	602b      	str	r3, [r5, #0]
 8024ae2:	d032      	beq.n	8024b4a <__sflush_r+0x9a>
 8024ae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024ae6:	89a3      	ldrh	r3, [r4, #12]
 8024ae8:	075a      	lsls	r2, r3, #29
 8024aea:	d505      	bpl.n	8024af8 <__sflush_r+0x48>
 8024aec:	6863      	ldr	r3, [r4, #4]
 8024aee:	1ac0      	subs	r0, r0, r3
 8024af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024af2:	b10b      	cbz	r3, 8024af8 <__sflush_r+0x48>
 8024af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024af6:	1ac0      	subs	r0, r0, r3
 8024af8:	2300      	movs	r3, #0
 8024afa:	4602      	mov	r2, r0
 8024afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024afe:	6a21      	ldr	r1, [r4, #32]
 8024b00:	4628      	mov	r0, r5
 8024b02:	47b0      	blx	r6
 8024b04:	1c43      	adds	r3, r0, #1
 8024b06:	89a3      	ldrh	r3, [r4, #12]
 8024b08:	d106      	bne.n	8024b18 <__sflush_r+0x68>
 8024b0a:	6829      	ldr	r1, [r5, #0]
 8024b0c:	291d      	cmp	r1, #29
 8024b0e:	d848      	bhi.n	8024ba2 <__sflush_r+0xf2>
 8024b10:	4a29      	ldr	r2, [pc, #164]	; (8024bb8 <__sflush_r+0x108>)
 8024b12:	40ca      	lsrs	r2, r1
 8024b14:	07d6      	lsls	r6, r2, #31
 8024b16:	d544      	bpl.n	8024ba2 <__sflush_r+0xf2>
 8024b18:	2200      	movs	r2, #0
 8024b1a:	6062      	str	r2, [r4, #4]
 8024b1c:	04d9      	lsls	r1, r3, #19
 8024b1e:	6922      	ldr	r2, [r4, #16]
 8024b20:	6022      	str	r2, [r4, #0]
 8024b22:	d504      	bpl.n	8024b2e <__sflush_r+0x7e>
 8024b24:	1c42      	adds	r2, r0, #1
 8024b26:	d101      	bne.n	8024b2c <__sflush_r+0x7c>
 8024b28:	682b      	ldr	r3, [r5, #0]
 8024b2a:	b903      	cbnz	r3, 8024b2e <__sflush_r+0x7e>
 8024b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8024b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024b30:	602f      	str	r7, [r5, #0]
 8024b32:	2900      	cmp	r1, #0
 8024b34:	d0c9      	beq.n	8024aca <__sflush_r+0x1a>
 8024b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024b3a:	4299      	cmp	r1, r3
 8024b3c:	d002      	beq.n	8024b44 <__sflush_r+0x94>
 8024b3e:	4628      	mov	r0, r5
 8024b40:	f7ff fd86 	bl	8024650 <_free_r>
 8024b44:	2000      	movs	r0, #0
 8024b46:	6360      	str	r0, [r4, #52]	; 0x34
 8024b48:	e7c0      	b.n	8024acc <__sflush_r+0x1c>
 8024b4a:	2301      	movs	r3, #1
 8024b4c:	4628      	mov	r0, r5
 8024b4e:	47b0      	blx	r6
 8024b50:	1c41      	adds	r1, r0, #1
 8024b52:	d1c8      	bne.n	8024ae6 <__sflush_r+0x36>
 8024b54:	682b      	ldr	r3, [r5, #0]
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	d0c5      	beq.n	8024ae6 <__sflush_r+0x36>
 8024b5a:	2b1d      	cmp	r3, #29
 8024b5c:	d001      	beq.n	8024b62 <__sflush_r+0xb2>
 8024b5e:	2b16      	cmp	r3, #22
 8024b60:	d101      	bne.n	8024b66 <__sflush_r+0xb6>
 8024b62:	602f      	str	r7, [r5, #0]
 8024b64:	e7b1      	b.n	8024aca <__sflush_r+0x1a>
 8024b66:	89a3      	ldrh	r3, [r4, #12]
 8024b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024b6c:	81a3      	strh	r3, [r4, #12]
 8024b6e:	e7ad      	b.n	8024acc <__sflush_r+0x1c>
 8024b70:	690f      	ldr	r7, [r1, #16]
 8024b72:	2f00      	cmp	r7, #0
 8024b74:	d0a9      	beq.n	8024aca <__sflush_r+0x1a>
 8024b76:	0793      	lsls	r3, r2, #30
 8024b78:	680e      	ldr	r6, [r1, #0]
 8024b7a:	bf08      	it	eq
 8024b7c:	694b      	ldreq	r3, [r1, #20]
 8024b7e:	600f      	str	r7, [r1, #0]
 8024b80:	bf18      	it	ne
 8024b82:	2300      	movne	r3, #0
 8024b84:	eba6 0807 	sub.w	r8, r6, r7
 8024b88:	608b      	str	r3, [r1, #8]
 8024b8a:	f1b8 0f00 	cmp.w	r8, #0
 8024b8e:	dd9c      	ble.n	8024aca <__sflush_r+0x1a>
 8024b90:	4643      	mov	r3, r8
 8024b92:	463a      	mov	r2, r7
 8024b94:	6a21      	ldr	r1, [r4, #32]
 8024b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024b98:	4628      	mov	r0, r5
 8024b9a:	47b0      	blx	r6
 8024b9c:	2800      	cmp	r0, #0
 8024b9e:	dc06      	bgt.n	8024bae <__sflush_r+0xfe>
 8024ba0:	89a3      	ldrh	r3, [r4, #12]
 8024ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024ba6:	81a3      	strh	r3, [r4, #12]
 8024ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024bac:	e78e      	b.n	8024acc <__sflush_r+0x1c>
 8024bae:	4407      	add	r7, r0
 8024bb0:	eba8 0800 	sub.w	r8, r8, r0
 8024bb4:	e7e9      	b.n	8024b8a <__sflush_r+0xda>
 8024bb6:	bf00      	nop
 8024bb8:	20400001 	.word	0x20400001

08024bbc <_fflush_r>:
 8024bbc:	b538      	push	{r3, r4, r5, lr}
 8024bbe:	690b      	ldr	r3, [r1, #16]
 8024bc0:	4605      	mov	r5, r0
 8024bc2:	460c      	mov	r4, r1
 8024bc4:	b1db      	cbz	r3, 8024bfe <_fflush_r+0x42>
 8024bc6:	b118      	cbz	r0, 8024bd0 <_fflush_r+0x14>
 8024bc8:	6983      	ldr	r3, [r0, #24]
 8024bca:	b90b      	cbnz	r3, 8024bd0 <_fflush_r+0x14>
 8024bcc:	f000 f860 	bl	8024c90 <__sinit>
 8024bd0:	4b0c      	ldr	r3, [pc, #48]	; (8024c04 <_fflush_r+0x48>)
 8024bd2:	429c      	cmp	r4, r3
 8024bd4:	d109      	bne.n	8024bea <_fflush_r+0x2e>
 8024bd6:	686c      	ldr	r4, [r5, #4]
 8024bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024bdc:	b17b      	cbz	r3, 8024bfe <_fflush_r+0x42>
 8024bde:	4621      	mov	r1, r4
 8024be0:	4628      	mov	r0, r5
 8024be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024be6:	f7ff bf63 	b.w	8024ab0 <__sflush_r>
 8024bea:	4b07      	ldr	r3, [pc, #28]	; (8024c08 <_fflush_r+0x4c>)
 8024bec:	429c      	cmp	r4, r3
 8024bee:	d101      	bne.n	8024bf4 <_fflush_r+0x38>
 8024bf0:	68ac      	ldr	r4, [r5, #8]
 8024bf2:	e7f1      	b.n	8024bd8 <_fflush_r+0x1c>
 8024bf4:	4b05      	ldr	r3, [pc, #20]	; (8024c0c <_fflush_r+0x50>)
 8024bf6:	429c      	cmp	r4, r3
 8024bf8:	bf08      	it	eq
 8024bfa:	68ec      	ldreq	r4, [r5, #12]
 8024bfc:	e7ec      	b.n	8024bd8 <_fflush_r+0x1c>
 8024bfe:	2000      	movs	r0, #0
 8024c00:	bd38      	pop	{r3, r4, r5, pc}
 8024c02:	bf00      	nop
 8024c04:	0802bb28 	.word	0x0802bb28
 8024c08:	0802bb48 	.word	0x0802bb48
 8024c0c:	0802bb08 	.word	0x0802bb08

08024c10 <std>:
 8024c10:	2300      	movs	r3, #0
 8024c12:	b510      	push	{r4, lr}
 8024c14:	4604      	mov	r4, r0
 8024c16:	e9c0 3300 	strd	r3, r3, [r0]
 8024c1a:	6083      	str	r3, [r0, #8]
 8024c1c:	8181      	strh	r1, [r0, #12]
 8024c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8024c20:	81c2      	strh	r2, [r0, #14]
 8024c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024c26:	6183      	str	r3, [r0, #24]
 8024c28:	4619      	mov	r1, r3
 8024c2a:	2208      	movs	r2, #8
 8024c2c:	305c      	adds	r0, #92	; 0x5c
 8024c2e:	f7ff fd07 	bl	8024640 <memset>
 8024c32:	4b05      	ldr	r3, [pc, #20]	; (8024c48 <std+0x38>)
 8024c34:	6263      	str	r3, [r4, #36]	; 0x24
 8024c36:	4b05      	ldr	r3, [pc, #20]	; (8024c4c <std+0x3c>)
 8024c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8024c3a:	4b05      	ldr	r3, [pc, #20]	; (8024c50 <std+0x40>)
 8024c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024c3e:	4b05      	ldr	r3, [pc, #20]	; (8024c54 <std+0x44>)
 8024c40:	6224      	str	r4, [r4, #32]
 8024c42:	6323      	str	r3, [r4, #48]	; 0x30
 8024c44:	bd10      	pop	{r4, pc}
 8024c46:	bf00      	nop
 8024c48:	08025401 	.word	0x08025401
 8024c4c:	08025423 	.word	0x08025423
 8024c50:	0802545b 	.word	0x0802545b
 8024c54:	0802547f 	.word	0x0802547f

08024c58 <_cleanup_r>:
 8024c58:	4901      	ldr	r1, [pc, #4]	; (8024c60 <_cleanup_r+0x8>)
 8024c5a:	f000 b885 	b.w	8024d68 <_fwalk_reent>
 8024c5e:	bf00      	nop
 8024c60:	08024bbd 	.word	0x08024bbd

08024c64 <__sfmoreglue>:
 8024c64:	b570      	push	{r4, r5, r6, lr}
 8024c66:	1e4a      	subs	r2, r1, #1
 8024c68:	2568      	movs	r5, #104	; 0x68
 8024c6a:	4355      	muls	r5, r2
 8024c6c:	460e      	mov	r6, r1
 8024c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024c72:	f7ff fd3b 	bl	80246ec <_malloc_r>
 8024c76:	4604      	mov	r4, r0
 8024c78:	b140      	cbz	r0, 8024c8c <__sfmoreglue+0x28>
 8024c7a:	2100      	movs	r1, #0
 8024c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8024c80:	300c      	adds	r0, #12
 8024c82:	60a0      	str	r0, [r4, #8]
 8024c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024c88:	f7ff fcda 	bl	8024640 <memset>
 8024c8c:	4620      	mov	r0, r4
 8024c8e:	bd70      	pop	{r4, r5, r6, pc}

08024c90 <__sinit>:
 8024c90:	6983      	ldr	r3, [r0, #24]
 8024c92:	b510      	push	{r4, lr}
 8024c94:	4604      	mov	r4, r0
 8024c96:	bb33      	cbnz	r3, 8024ce6 <__sinit+0x56>
 8024c98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8024c9c:	6503      	str	r3, [r0, #80]	; 0x50
 8024c9e:	4b12      	ldr	r3, [pc, #72]	; (8024ce8 <__sinit+0x58>)
 8024ca0:	4a12      	ldr	r2, [pc, #72]	; (8024cec <__sinit+0x5c>)
 8024ca2:	681b      	ldr	r3, [r3, #0]
 8024ca4:	6282      	str	r2, [r0, #40]	; 0x28
 8024ca6:	4298      	cmp	r0, r3
 8024ca8:	bf04      	itt	eq
 8024caa:	2301      	moveq	r3, #1
 8024cac:	6183      	streq	r3, [r0, #24]
 8024cae:	f000 f81f 	bl	8024cf0 <__sfp>
 8024cb2:	6060      	str	r0, [r4, #4]
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	f000 f81b 	bl	8024cf0 <__sfp>
 8024cba:	60a0      	str	r0, [r4, #8]
 8024cbc:	4620      	mov	r0, r4
 8024cbe:	f000 f817 	bl	8024cf0 <__sfp>
 8024cc2:	2200      	movs	r2, #0
 8024cc4:	60e0      	str	r0, [r4, #12]
 8024cc6:	2104      	movs	r1, #4
 8024cc8:	6860      	ldr	r0, [r4, #4]
 8024cca:	f7ff ffa1 	bl	8024c10 <std>
 8024cce:	2201      	movs	r2, #1
 8024cd0:	2109      	movs	r1, #9
 8024cd2:	68a0      	ldr	r0, [r4, #8]
 8024cd4:	f7ff ff9c 	bl	8024c10 <std>
 8024cd8:	2202      	movs	r2, #2
 8024cda:	2112      	movs	r1, #18
 8024cdc:	68e0      	ldr	r0, [r4, #12]
 8024cde:	f7ff ff97 	bl	8024c10 <std>
 8024ce2:	2301      	movs	r3, #1
 8024ce4:	61a3      	str	r3, [r4, #24]
 8024ce6:	bd10      	pop	{r4, pc}
 8024ce8:	0802bb04 	.word	0x0802bb04
 8024cec:	08024c59 	.word	0x08024c59

08024cf0 <__sfp>:
 8024cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cf2:	4b1b      	ldr	r3, [pc, #108]	; (8024d60 <__sfp+0x70>)
 8024cf4:	681e      	ldr	r6, [r3, #0]
 8024cf6:	69b3      	ldr	r3, [r6, #24]
 8024cf8:	4607      	mov	r7, r0
 8024cfa:	b913      	cbnz	r3, 8024d02 <__sfp+0x12>
 8024cfc:	4630      	mov	r0, r6
 8024cfe:	f7ff ffc7 	bl	8024c90 <__sinit>
 8024d02:	3648      	adds	r6, #72	; 0x48
 8024d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024d08:	3b01      	subs	r3, #1
 8024d0a:	d503      	bpl.n	8024d14 <__sfp+0x24>
 8024d0c:	6833      	ldr	r3, [r6, #0]
 8024d0e:	b133      	cbz	r3, 8024d1e <__sfp+0x2e>
 8024d10:	6836      	ldr	r6, [r6, #0]
 8024d12:	e7f7      	b.n	8024d04 <__sfp+0x14>
 8024d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024d18:	b16d      	cbz	r5, 8024d36 <__sfp+0x46>
 8024d1a:	3468      	adds	r4, #104	; 0x68
 8024d1c:	e7f4      	b.n	8024d08 <__sfp+0x18>
 8024d1e:	2104      	movs	r1, #4
 8024d20:	4638      	mov	r0, r7
 8024d22:	f7ff ff9f 	bl	8024c64 <__sfmoreglue>
 8024d26:	6030      	str	r0, [r6, #0]
 8024d28:	2800      	cmp	r0, #0
 8024d2a:	d1f1      	bne.n	8024d10 <__sfp+0x20>
 8024d2c:	230c      	movs	r3, #12
 8024d2e:	603b      	str	r3, [r7, #0]
 8024d30:	4604      	mov	r4, r0
 8024d32:	4620      	mov	r0, r4
 8024d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d36:	4b0b      	ldr	r3, [pc, #44]	; (8024d64 <__sfp+0x74>)
 8024d38:	6665      	str	r5, [r4, #100]	; 0x64
 8024d3a:	e9c4 5500 	strd	r5, r5, [r4]
 8024d3e:	60a5      	str	r5, [r4, #8]
 8024d40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8024d44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8024d48:	2208      	movs	r2, #8
 8024d4a:	4629      	mov	r1, r5
 8024d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024d50:	f7ff fc76 	bl	8024640 <memset>
 8024d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024d5c:	e7e9      	b.n	8024d32 <__sfp+0x42>
 8024d5e:	bf00      	nop
 8024d60:	0802bb04 	.word	0x0802bb04
 8024d64:	ffff0001 	.word	0xffff0001

08024d68 <_fwalk_reent>:
 8024d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024d6c:	4680      	mov	r8, r0
 8024d6e:	4689      	mov	r9, r1
 8024d70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024d74:	2600      	movs	r6, #0
 8024d76:	b914      	cbnz	r4, 8024d7e <_fwalk_reent+0x16>
 8024d78:	4630      	mov	r0, r6
 8024d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024d7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8024d82:	3f01      	subs	r7, #1
 8024d84:	d501      	bpl.n	8024d8a <_fwalk_reent+0x22>
 8024d86:	6824      	ldr	r4, [r4, #0]
 8024d88:	e7f5      	b.n	8024d76 <_fwalk_reent+0xe>
 8024d8a:	89ab      	ldrh	r3, [r5, #12]
 8024d8c:	2b01      	cmp	r3, #1
 8024d8e:	d907      	bls.n	8024da0 <_fwalk_reent+0x38>
 8024d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024d94:	3301      	adds	r3, #1
 8024d96:	d003      	beq.n	8024da0 <_fwalk_reent+0x38>
 8024d98:	4629      	mov	r1, r5
 8024d9a:	4640      	mov	r0, r8
 8024d9c:	47c8      	blx	r9
 8024d9e:	4306      	orrs	r6, r0
 8024da0:	3568      	adds	r5, #104	; 0x68
 8024da2:	e7ee      	b.n	8024d82 <_fwalk_reent+0x1a>

08024da4 <__swhatbuf_r>:
 8024da4:	b570      	push	{r4, r5, r6, lr}
 8024da6:	460e      	mov	r6, r1
 8024da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024dac:	2900      	cmp	r1, #0
 8024dae:	b096      	sub	sp, #88	; 0x58
 8024db0:	4614      	mov	r4, r2
 8024db2:	461d      	mov	r5, r3
 8024db4:	da07      	bge.n	8024dc6 <__swhatbuf_r+0x22>
 8024db6:	2300      	movs	r3, #0
 8024db8:	602b      	str	r3, [r5, #0]
 8024dba:	89b3      	ldrh	r3, [r6, #12]
 8024dbc:	061a      	lsls	r2, r3, #24
 8024dbe:	d410      	bmi.n	8024de2 <__swhatbuf_r+0x3e>
 8024dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024dc4:	e00e      	b.n	8024de4 <__swhatbuf_r+0x40>
 8024dc6:	466a      	mov	r2, sp
 8024dc8:	f000 fb80 	bl	80254cc <_fstat_r>
 8024dcc:	2800      	cmp	r0, #0
 8024dce:	dbf2      	blt.n	8024db6 <__swhatbuf_r+0x12>
 8024dd0:	9a01      	ldr	r2, [sp, #4]
 8024dd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024dd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024dda:	425a      	negs	r2, r3
 8024ddc:	415a      	adcs	r2, r3
 8024dde:	602a      	str	r2, [r5, #0]
 8024de0:	e7ee      	b.n	8024dc0 <__swhatbuf_r+0x1c>
 8024de2:	2340      	movs	r3, #64	; 0x40
 8024de4:	2000      	movs	r0, #0
 8024de6:	6023      	str	r3, [r4, #0]
 8024de8:	b016      	add	sp, #88	; 0x58
 8024dea:	bd70      	pop	{r4, r5, r6, pc}

08024dec <__smakebuf_r>:
 8024dec:	898b      	ldrh	r3, [r1, #12]
 8024dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024df0:	079d      	lsls	r5, r3, #30
 8024df2:	4606      	mov	r6, r0
 8024df4:	460c      	mov	r4, r1
 8024df6:	d507      	bpl.n	8024e08 <__smakebuf_r+0x1c>
 8024df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024dfc:	6023      	str	r3, [r4, #0]
 8024dfe:	6123      	str	r3, [r4, #16]
 8024e00:	2301      	movs	r3, #1
 8024e02:	6163      	str	r3, [r4, #20]
 8024e04:	b002      	add	sp, #8
 8024e06:	bd70      	pop	{r4, r5, r6, pc}
 8024e08:	ab01      	add	r3, sp, #4
 8024e0a:	466a      	mov	r2, sp
 8024e0c:	f7ff ffca 	bl	8024da4 <__swhatbuf_r>
 8024e10:	9900      	ldr	r1, [sp, #0]
 8024e12:	4605      	mov	r5, r0
 8024e14:	4630      	mov	r0, r6
 8024e16:	f7ff fc69 	bl	80246ec <_malloc_r>
 8024e1a:	b948      	cbnz	r0, 8024e30 <__smakebuf_r+0x44>
 8024e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e20:	059a      	lsls	r2, r3, #22
 8024e22:	d4ef      	bmi.n	8024e04 <__smakebuf_r+0x18>
 8024e24:	f023 0303 	bic.w	r3, r3, #3
 8024e28:	f043 0302 	orr.w	r3, r3, #2
 8024e2c:	81a3      	strh	r3, [r4, #12]
 8024e2e:	e7e3      	b.n	8024df8 <__smakebuf_r+0xc>
 8024e30:	4b0d      	ldr	r3, [pc, #52]	; (8024e68 <__smakebuf_r+0x7c>)
 8024e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8024e34:	89a3      	ldrh	r3, [r4, #12]
 8024e36:	6020      	str	r0, [r4, #0]
 8024e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024e3c:	81a3      	strh	r3, [r4, #12]
 8024e3e:	9b00      	ldr	r3, [sp, #0]
 8024e40:	6163      	str	r3, [r4, #20]
 8024e42:	9b01      	ldr	r3, [sp, #4]
 8024e44:	6120      	str	r0, [r4, #16]
 8024e46:	b15b      	cbz	r3, 8024e60 <__smakebuf_r+0x74>
 8024e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024e4c:	4630      	mov	r0, r6
 8024e4e:	f000 fb4f 	bl	80254f0 <_isatty_r>
 8024e52:	b128      	cbz	r0, 8024e60 <__smakebuf_r+0x74>
 8024e54:	89a3      	ldrh	r3, [r4, #12]
 8024e56:	f023 0303 	bic.w	r3, r3, #3
 8024e5a:	f043 0301 	orr.w	r3, r3, #1
 8024e5e:	81a3      	strh	r3, [r4, #12]
 8024e60:	89a3      	ldrh	r3, [r4, #12]
 8024e62:	431d      	orrs	r5, r3
 8024e64:	81a5      	strh	r5, [r4, #12]
 8024e66:	e7cd      	b.n	8024e04 <__smakebuf_r+0x18>
 8024e68:	08024c59 	.word	0x08024c59

08024e6c <__malloc_lock>:
 8024e6c:	4770      	bx	lr

08024e6e <__malloc_unlock>:
 8024e6e:	4770      	bx	lr

08024e70 <__sfputc_r>:
 8024e70:	6893      	ldr	r3, [r2, #8]
 8024e72:	3b01      	subs	r3, #1
 8024e74:	2b00      	cmp	r3, #0
 8024e76:	b410      	push	{r4}
 8024e78:	6093      	str	r3, [r2, #8]
 8024e7a:	da08      	bge.n	8024e8e <__sfputc_r+0x1e>
 8024e7c:	6994      	ldr	r4, [r2, #24]
 8024e7e:	42a3      	cmp	r3, r4
 8024e80:	db01      	blt.n	8024e86 <__sfputc_r+0x16>
 8024e82:	290a      	cmp	r1, #10
 8024e84:	d103      	bne.n	8024e8e <__sfputc_r+0x1e>
 8024e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024e8a:	f7ff bd51 	b.w	8024930 <__swbuf_r>
 8024e8e:	6813      	ldr	r3, [r2, #0]
 8024e90:	1c58      	adds	r0, r3, #1
 8024e92:	6010      	str	r0, [r2, #0]
 8024e94:	7019      	strb	r1, [r3, #0]
 8024e96:	4608      	mov	r0, r1
 8024e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024e9c:	4770      	bx	lr

08024e9e <__sfputs_r>:
 8024e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ea0:	4606      	mov	r6, r0
 8024ea2:	460f      	mov	r7, r1
 8024ea4:	4614      	mov	r4, r2
 8024ea6:	18d5      	adds	r5, r2, r3
 8024ea8:	42ac      	cmp	r4, r5
 8024eaa:	d101      	bne.n	8024eb0 <__sfputs_r+0x12>
 8024eac:	2000      	movs	r0, #0
 8024eae:	e007      	b.n	8024ec0 <__sfputs_r+0x22>
 8024eb0:	463a      	mov	r2, r7
 8024eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024eb6:	4630      	mov	r0, r6
 8024eb8:	f7ff ffda 	bl	8024e70 <__sfputc_r>
 8024ebc:	1c43      	adds	r3, r0, #1
 8024ebe:	d1f3      	bne.n	8024ea8 <__sfputs_r+0xa>
 8024ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024ec4 <_vfiprintf_r>:
 8024ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ec8:	460c      	mov	r4, r1
 8024eca:	b09d      	sub	sp, #116	; 0x74
 8024ecc:	4617      	mov	r7, r2
 8024ece:	461d      	mov	r5, r3
 8024ed0:	4606      	mov	r6, r0
 8024ed2:	b118      	cbz	r0, 8024edc <_vfiprintf_r+0x18>
 8024ed4:	6983      	ldr	r3, [r0, #24]
 8024ed6:	b90b      	cbnz	r3, 8024edc <_vfiprintf_r+0x18>
 8024ed8:	f7ff feda 	bl	8024c90 <__sinit>
 8024edc:	4b7c      	ldr	r3, [pc, #496]	; (80250d0 <_vfiprintf_r+0x20c>)
 8024ede:	429c      	cmp	r4, r3
 8024ee0:	d158      	bne.n	8024f94 <_vfiprintf_r+0xd0>
 8024ee2:	6874      	ldr	r4, [r6, #4]
 8024ee4:	89a3      	ldrh	r3, [r4, #12]
 8024ee6:	0718      	lsls	r0, r3, #28
 8024ee8:	d55e      	bpl.n	8024fa8 <_vfiprintf_r+0xe4>
 8024eea:	6923      	ldr	r3, [r4, #16]
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d05b      	beq.n	8024fa8 <_vfiprintf_r+0xe4>
 8024ef0:	2300      	movs	r3, #0
 8024ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8024ef4:	2320      	movs	r3, #32
 8024ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024efa:	2330      	movs	r3, #48	; 0x30
 8024efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024f00:	9503      	str	r5, [sp, #12]
 8024f02:	f04f 0b01 	mov.w	fp, #1
 8024f06:	46b8      	mov	r8, r7
 8024f08:	4645      	mov	r5, r8
 8024f0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024f0e:	b10b      	cbz	r3, 8024f14 <_vfiprintf_r+0x50>
 8024f10:	2b25      	cmp	r3, #37	; 0x25
 8024f12:	d154      	bne.n	8024fbe <_vfiprintf_r+0xfa>
 8024f14:	ebb8 0a07 	subs.w	sl, r8, r7
 8024f18:	d00b      	beq.n	8024f32 <_vfiprintf_r+0x6e>
 8024f1a:	4653      	mov	r3, sl
 8024f1c:	463a      	mov	r2, r7
 8024f1e:	4621      	mov	r1, r4
 8024f20:	4630      	mov	r0, r6
 8024f22:	f7ff ffbc 	bl	8024e9e <__sfputs_r>
 8024f26:	3001      	adds	r0, #1
 8024f28:	f000 80c2 	beq.w	80250b0 <_vfiprintf_r+0x1ec>
 8024f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f2e:	4453      	add	r3, sl
 8024f30:	9309      	str	r3, [sp, #36]	; 0x24
 8024f32:	f898 3000 	ldrb.w	r3, [r8]
 8024f36:	2b00      	cmp	r3, #0
 8024f38:	f000 80ba 	beq.w	80250b0 <_vfiprintf_r+0x1ec>
 8024f3c:	2300      	movs	r3, #0
 8024f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024f46:	9304      	str	r3, [sp, #16]
 8024f48:	9307      	str	r3, [sp, #28]
 8024f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8024f50:	46a8      	mov	r8, r5
 8024f52:	2205      	movs	r2, #5
 8024f54:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024f58:	485e      	ldr	r0, [pc, #376]	; (80250d4 <_vfiprintf_r+0x210>)
 8024f5a:	f7db f959 	bl	8000210 <memchr>
 8024f5e:	9b04      	ldr	r3, [sp, #16]
 8024f60:	bb78      	cbnz	r0, 8024fc2 <_vfiprintf_r+0xfe>
 8024f62:	06d9      	lsls	r1, r3, #27
 8024f64:	bf44      	itt	mi
 8024f66:	2220      	movmi	r2, #32
 8024f68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024f6c:	071a      	lsls	r2, r3, #28
 8024f6e:	bf44      	itt	mi
 8024f70:	222b      	movmi	r2, #43	; 0x2b
 8024f72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024f76:	782a      	ldrb	r2, [r5, #0]
 8024f78:	2a2a      	cmp	r2, #42	; 0x2a
 8024f7a:	d02a      	beq.n	8024fd2 <_vfiprintf_r+0x10e>
 8024f7c:	9a07      	ldr	r2, [sp, #28]
 8024f7e:	46a8      	mov	r8, r5
 8024f80:	2000      	movs	r0, #0
 8024f82:	250a      	movs	r5, #10
 8024f84:	4641      	mov	r1, r8
 8024f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024f8a:	3b30      	subs	r3, #48	; 0x30
 8024f8c:	2b09      	cmp	r3, #9
 8024f8e:	d969      	bls.n	8025064 <_vfiprintf_r+0x1a0>
 8024f90:	b360      	cbz	r0, 8024fec <_vfiprintf_r+0x128>
 8024f92:	e024      	b.n	8024fde <_vfiprintf_r+0x11a>
 8024f94:	4b50      	ldr	r3, [pc, #320]	; (80250d8 <_vfiprintf_r+0x214>)
 8024f96:	429c      	cmp	r4, r3
 8024f98:	d101      	bne.n	8024f9e <_vfiprintf_r+0xda>
 8024f9a:	68b4      	ldr	r4, [r6, #8]
 8024f9c:	e7a2      	b.n	8024ee4 <_vfiprintf_r+0x20>
 8024f9e:	4b4f      	ldr	r3, [pc, #316]	; (80250dc <_vfiprintf_r+0x218>)
 8024fa0:	429c      	cmp	r4, r3
 8024fa2:	bf08      	it	eq
 8024fa4:	68f4      	ldreq	r4, [r6, #12]
 8024fa6:	e79d      	b.n	8024ee4 <_vfiprintf_r+0x20>
 8024fa8:	4621      	mov	r1, r4
 8024faa:	4630      	mov	r0, r6
 8024fac:	f7ff fd12 	bl	80249d4 <__swsetup_r>
 8024fb0:	2800      	cmp	r0, #0
 8024fb2:	d09d      	beq.n	8024ef0 <_vfiprintf_r+0x2c>
 8024fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024fb8:	b01d      	add	sp, #116	; 0x74
 8024fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fbe:	46a8      	mov	r8, r5
 8024fc0:	e7a2      	b.n	8024f08 <_vfiprintf_r+0x44>
 8024fc2:	4a44      	ldr	r2, [pc, #272]	; (80250d4 <_vfiprintf_r+0x210>)
 8024fc4:	1a80      	subs	r0, r0, r2
 8024fc6:	fa0b f000 	lsl.w	r0, fp, r0
 8024fca:	4318      	orrs	r0, r3
 8024fcc:	9004      	str	r0, [sp, #16]
 8024fce:	4645      	mov	r5, r8
 8024fd0:	e7be      	b.n	8024f50 <_vfiprintf_r+0x8c>
 8024fd2:	9a03      	ldr	r2, [sp, #12]
 8024fd4:	1d11      	adds	r1, r2, #4
 8024fd6:	6812      	ldr	r2, [r2, #0]
 8024fd8:	9103      	str	r1, [sp, #12]
 8024fda:	2a00      	cmp	r2, #0
 8024fdc:	db01      	blt.n	8024fe2 <_vfiprintf_r+0x11e>
 8024fde:	9207      	str	r2, [sp, #28]
 8024fe0:	e004      	b.n	8024fec <_vfiprintf_r+0x128>
 8024fe2:	4252      	negs	r2, r2
 8024fe4:	f043 0302 	orr.w	r3, r3, #2
 8024fe8:	9207      	str	r2, [sp, #28]
 8024fea:	9304      	str	r3, [sp, #16]
 8024fec:	f898 3000 	ldrb.w	r3, [r8]
 8024ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8024ff2:	d10e      	bne.n	8025012 <_vfiprintf_r+0x14e>
 8024ff4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8024ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8024ffa:	d138      	bne.n	802506e <_vfiprintf_r+0x1aa>
 8024ffc:	9b03      	ldr	r3, [sp, #12]
 8024ffe:	1d1a      	adds	r2, r3, #4
 8025000:	681b      	ldr	r3, [r3, #0]
 8025002:	9203      	str	r2, [sp, #12]
 8025004:	2b00      	cmp	r3, #0
 8025006:	bfb8      	it	lt
 8025008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802500c:	f108 0802 	add.w	r8, r8, #2
 8025010:	9305      	str	r3, [sp, #20]
 8025012:	4d33      	ldr	r5, [pc, #204]	; (80250e0 <_vfiprintf_r+0x21c>)
 8025014:	f898 1000 	ldrb.w	r1, [r8]
 8025018:	2203      	movs	r2, #3
 802501a:	4628      	mov	r0, r5
 802501c:	f7db f8f8 	bl	8000210 <memchr>
 8025020:	b140      	cbz	r0, 8025034 <_vfiprintf_r+0x170>
 8025022:	2340      	movs	r3, #64	; 0x40
 8025024:	1b40      	subs	r0, r0, r5
 8025026:	fa03 f000 	lsl.w	r0, r3, r0
 802502a:	9b04      	ldr	r3, [sp, #16]
 802502c:	4303      	orrs	r3, r0
 802502e:	f108 0801 	add.w	r8, r8, #1
 8025032:	9304      	str	r3, [sp, #16]
 8025034:	f898 1000 	ldrb.w	r1, [r8]
 8025038:	482a      	ldr	r0, [pc, #168]	; (80250e4 <_vfiprintf_r+0x220>)
 802503a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802503e:	2206      	movs	r2, #6
 8025040:	f108 0701 	add.w	r7, r8, #1
 8025044:	f7db f8e4 	bl	8000210 <memchr>
 8025048:	2800      	cmp	r0, #0
 802504a:	d037      	beq.n	80250bc <_vfiprintf_r+0x1f8>
 802504c:	4b26      	ldr	r3, [pc, #152]	; (80250e8 <_vfiprintf_r+0x224>)
 802504e:	bb1b      	cbnz	r3, 8025098 <_vfiprintf_r+0x1d4>
 8025050:	9b03      	ldr	r3, [sp, #12]
 8025052:	3307      	adds	r3, #7
 8025054:	f023 0307 	bic.w	r3, r3, #7
 8025058:	3308      	adds	r3, #8
 802505a:	9303      	str	r3, [sp, #12]
 802505c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802505e:	444b      	add	r3, r9
 8025060:	9309      	str	r3, [sp, #36]	; 0x24
 8025062:	e750      	b.n	8024f06 <_vfiprintf_r+0x42>
 8025064:	fb05 3202 	mla	r2, r5, r2, r3
 8025068:	2001      	movs	r0, #1
 802506a:	4688      	mov	r8, r1
 802506c:	e78a      	b.n	8024f84 <_vfiprintf_r+0xc0>
 802506e:	2300      	movs	r3, #0
 8025070:	f108 0801 	add.w	r8, r8, #1
 8025074:	9305      	str	r3, [sp, #20]
 8025076:	4619      	mov	r1, r3
 8025078:	250a      	movs	r5, #10
 802507a:	4640      	mov	r0, r8
 802507c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025080:	3a30      	subs	r2, #48	; 0x30
 8025082:	2a09      	cmp	r2, #9
 8025084:	d903      	bls.n	802508e <_vfiprintf_r+0x1ca>
 8025086:	2b00      	cmp	r3, #0
 8025088:	d0c3      	beq.n	8025012 <_vfiprintf_r+0x14e>
 802508a:	9105      	str	r1, [sp, #20]
 802508c:	e7c1      	b.n	8025012 <_vfiprintf_r+0x14e>
 802508e:	fb05 2101 	mla	r1, r5, r1, r2
 8025092:	2301      	movs	r3, #1
 8025094:	4680      	mov	r8, r0
 8025096:	e7f0      	b.n	802507a <_vfiprintf_r+0x1b6>
 8025098:	ab03      	add	r3, sp, #12
 802509a:	9300      	str	r3, [sp, #0]
 802509c:	4622      	mov	r2, r4
 802509e:	4b13      	ldr	r3, [pc, #76]	; (80250ec <_vfiprintf_r+0x228>)
 80250a0:	a904      	add	r1, sp, #16
 80250a2:	4630      	mov	r0, r6
 80250a4:	f3af 8000 	nop.w
 80250a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80250ac:	4681      	mov	r9, r0
 80250ae:	d1d5      	bne.n	802505c <_vfiprintf_r+0x198>
 80250b0:	89a3      	ldrh	r3, [r4, #12]
 80250b2:	065b      	lsls	r3, r3, #25
 80250b4:	f53f af7e 	bmi.w	8024fb4 <_vfiprintf_r+0xf0>
 80250b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80250ba:	e77d      	b.n	8024fb8 <_vfiprintf_r+0xf4>
 80250bc:	ab03      	add	r3, sp, #12
 80250be:	9300      	str	r3, [sp, #0]
 80250c0:	4622      	mov	r2, r4
 80250c2:	4b0a      	ldr	r3, [pc, #40]	; (80250ec <_vfiprintf_r+0x228>)
 80250c4:	a904      	add	r1, sp, #16
 80250c6:	4630      	mov	r0, r6
 80250c8:	f000 f888 	bl	80251dc <_printf_i>
 80250cc:	e7ec      	b.n	80250a8 <_vfiprintf_r+0x1e4>
 80250ce:	bf00      	nop
 80250d0:	0802bb28 	.word	0x0802bb28
 80250d4:	0802bb68 	.word	0x0802bb68
 80250d8:	0802bb48 	.word	0x0802bb48
 80250dc:	0802bb08 	.word	0x0802bb08
 80250e0:	0802bb6e 	.word	0x0802bb6e
 80250e4:	0802bb72 	.word	0x0802bb72
 80250e8:	00000000 	.word	0x00000000
 80250ec:	08024e9f 	.word	0x08024e9f

080250f0 <_printf_common>:
 80250f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80250f4:	4691      	mov	r9, r2
 80250f6:	461f      	mov	r7, r3
 80250f8:	688a      	ldr	r2, [r1, #8]
 80250fa:	690b      	ldr	r3, [r1, #16]
 80250fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025100:	4293      	cmp	r3, r2
 8025102:	bfb8      	it	lt
 8025104:	4613      	movlt	r3, r2
 8025106:	f8c9 3000 	str.w	r3, [r9]
 802510a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802510e:	4606      	mov	r6, r0
 8025110:	460c      	mov	r4, r1
 8025112:	b112      	cbz	r2, 802511a <_printf_common+0x2a>
 8025114:	3301      	adds	r3, #1
 8025116:	f8c9 3000 	str.w	r3, [r9]
 802511a:	6823      	ldr	r3, [r4, #0]
 802511c:	0699      	lsls	r1, r3, #26
 802511e:	bf42      	ittt	mi
 8025120:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025124:	3302      	addmi	r3, #2
 8025126:	f8c9 3000 	strmi.w	r3, [r9]
 802512a:	6825      	ldr	r5, [r4, #0]
 802512c:	f015 0506 	ands.w	r5, r5, #6
 8025130:	d107      	bne.n	8025142 <_printf_common+0x52>
 8025132:	f104 0a19 	add.w	sl, r4, #25
 8025136:	68e3      	ldr	r3, [r4, #12]
 8025138:	f8d9 2000 	ldr.w	r2, [r9]
 802513c:	1a9b      	subs	r3, r3, r2
 802513e:	42ab      	cmp	r3, r5
 8025140:	dc28      	bgt.n	8025194 <_printf_common+0xa4>
 8025142:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025146:	6822      	ldr	r2, [r4, #0]
 8025148:	3300      	adds	r3, #0
 802514a:	bf18      	it	ne
 802514c:	2301      	movne	r3, #1
 802514e:	0692      	lsls	r2, r2, #26
 8025150:	d42d      	bmi.n	80251ae <_printf_common+0xbe>
 8025152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025156:	4639      	mov	r1, r7
 8025158:	4630      	mov	r0, r6
 802515a:	47c0      	blx	r8
 802515c:	3001      	adds	r0, #1
 802515e:	d020      	beq.n	80251a2 <_printf_common+0xb2>
 8025160:	6823      	ldr	r3, [r4, #0]
 8025162:	68e5      	ldr	r5, [r4, #12]
 8025164:	f8d9 2000 	ldr.w	r2, [r9]
 8025168:	f003 0306 	and.w	r3, r3, #6
 802516c:	2b04      	cmp	r3, #4
 802516e:	bf08      	it	eq
 8025170:	1aad      	subeq	r5, r5, r2
 8025172:	68a3      	ldr	r3, [r4, #8]
 8025174:	6922      	ldr	r2, [r4, #16]
 8025176:	bf0c      	ite	eq
 8025178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802517c:	2500      	movne	r5, #0
 802517e:	4293      	cmp	r3, r2
 8025180:	bfc4      	itt	gt
 8025182:	1a9b      	subgt	r3, r3, r2
 8025184:	18ed      	addgt	r5, r5, r3
 8025186:	f04f 0900 	mov.w	r9, #0
 802518a:	341a      	adds	r4, #26
 802518c:	454d      	cmp	r5, r9
 802518e:	d11a      	bne.n	80251c6 <_printf_common+0xd6>
 8025190:	2000      	movs	r0, #0
 8025192:	e008      	b.n	80251a6 <_printf_common+0xb6>
 8025194:	2301      	movs	r3, #1
 8025196:	4652      	mov	r2, sl
 8025198:	4639      	mov	r1, r7
 802519a:	4630      	mov	r0, r6
 802519c:	47c0      	blx	r8
 802519e:	3001      	adds	r0, #1
 80251a0:	d103      	bne.n	80251aa <_printf_common+0xba>
 80251a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80251a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80251aa:	3501      	adds	r5, #1
 80251ac:	e7c3      	b.n	8025136 <_printf_common+0x46>
 80251ae:	18e1      	adds	r1, r4, r3
 80251b0:	1c5a      	adds	r2, r3, #1
 80251b2:	2030      	movs	r0, #48	; 0x30
 80251b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80251b8:	4422      	add	r2, r4
 80251ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80251be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80251c2:	3302      	adds	r3, #2
 80251c4:	e7c5      	b.n	8025152 <_printf_common+0x62>
 80251c6:	2301      	movs	r3, #1
 80251c8:	4622      	mov	r2, r4
 80251ca:	4639      	mov	r1, r7
 80251cc:	4630      	mov	r0, r6
 80251ce:	47c0      	blx	r8
 80251d0:	3001      	adds	r0, #1
 80251d2:	d0e6      	beq.n	80251a2 <_printf_common+0xb2>
 80251d4:	f109 0901 	add.w	r9, r9, #1
 80251d8:	e7d8      	b.n	802518c <_printf_common+0x9c>
	...

080251dc <_printf_i>:
 80251dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80251e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80251e4:	460c      	mov	r4, r1
 80251e6:	7e09      	ldrb	r1, [r1, #24]
 80251e8:	b085      	sub	sp, #20
 80251ea:	296e      	cmp	r1, #110	; 0x6e
 80251ec:	4617      	mov	r7, r2
 80251ee:	4606      	mov	r6, r0
 80251f0:	4698      	mov	r8, r3
 80251f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80251f4:	f000 80b3 	beq.w	802535e <_printf_i+0x182>
 80251f8:	d822      	bhi.n	8025240 <_printf_i+0x64>
 80251fa:	2963      	cmp	r1, #99	; 0x63
 80251fc:	d036      	beq.n	802526c <_printf_i+0x90>
 80251fe:	d80a      	bhi.n	8025216 <_printf_i+0x3a>
 8025200:	2900      	cmp	r1, #0
 8025202:	f000 80b9 	beq.w	8025378 <_printf_i+0x19c>
 8025206:	2958      	cmp	r1, #88	; 0x58
 8025208:	f000 8083 	beq.w	8025312 <_printf_i+0x136>
 802520c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025210:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025214:	e032      	b.n	802527c <_printf_i+0xa0>
 8025216:	2964      	cmp	r1, #100	; 0x64
 8025218:	d001      	beq.n	802521e <_printf_i+0x42>
 802521a:	2969      	cmp	r1, #105	; 0x69
 802521c:	d1f6      	bne.n	802520c <_printf_i+0x30>
 802521e:	6820      	ldr	r0, [r4, #0]
 8025220:	6813      	ldr	r3, [r2, #0]
 8025222:	0605      	lsls	r5, r0, #24
 8025224:	f103 0104 	add.w	r1, r3, #4
 8025228:	d52a      	bpl.n	8025280 <_printf_i+0xa4>
 802522a:	681b      	ldr	r3, [r3, #0]
 802522c:	6011      	str	r1, [r2, #0]
 802522e:	2b00      	cmp	r3, #0
 8025230:	da03      	bge.n	802523a <_printf_i+0x5e>
 8025232:	222d      	movs	r2, #45	; 0x2d
 8025234:	425b      	negs	r3, r3
 8025236:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802523a:	486f      	ldr	r0, [pc, #444]	; (80253f8 <_printf_i+0x21c>)
 802523c:	220a      	movs	r2, #10
 802523e:	e039      	b.n	80252b4 <_printf_i+0xd8>
 8025240:	2973      	cmp	r1, #115	; 0x73
 8025242:	f000 809d 	beq.w	8025380 <_printf_i+0x1a4>
 8025246:	d808      	bhi.n	802525a <_printf_i+0x7e>
 8025248:	296f      	cmp	r1, #111	; 0x6f
 802524a:	d020      	beq.n	802528e <_printf_i+0xb2>
 802524c:	2970      	cmp	r1, #112	; 0x70
 802524e:	d1dd      	bne.n	802520c <_printf_i+0x30>
 8025250:	6823      	ldr	r3, [r4, #0]
 8025252:	f043 0320 	orr.w	r3, r3, #32
 8025256:	6023      	str	r3, [r4, #0]
 8025258:	e003      	b.n	8025262 <_printf_i+0x86>
 802525a:	2975      	cmp	r1, #117	; 0x75
 802525c:	d017      	beq.n	802528e <_printf_i+0xb2>
 802525e:	2978      	cmp	r1, #120	; 0x78
 8025260:	d1d4      	bne.n	802520c <_printf_i+0x30>
 8025262:	2378      	movs	r3, #120	; 0x78
 8025264:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025268:	4864      	ldr	r0, [pc, #400]	; (80253fc <_printf_i+0x220>)
 802526a:	e055      	b.n	8025318 <_printf_i+0x13c>
 802526c:	6813      	ldr	r3, [r2, #0]
 802526e:	1d19      	adds	r1, r3, #4
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	6011      	str	r1, [r2, #0]
 8025274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802527c:	2301      	movs	r3, #1
 802527e:	e08c      	b.n	802539a <_printf_i+0x1be>
 8025280:	681b      	ldr	r3, [r3, #0]
 8025282:	6011      	str	r1, [r2, #0]
 8025284:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025288:	bf18      	it	ne
 802528a:	b21b      	sxthne	r3, r3
 802528c:	e7cf      	b.n	802522e <_printf_i+0x52>
 802528e:	6813      	ldr	r3, [r2, #0]
 8025290:	6825      	ldr	r5, [r4, #0]
 8025292:	1d18      	adds	r0, r3, #4
 8025294:	6010      	str	r0, [r2, #0]
 8025296:	0628      	lsls	r0, r5, #24
 8025298:	d501      	bpl.n	802529e <_printf_i+0xc2>
 802529a:	681b      	ldr	r3, [r3, #0]
 802529c:	e002      	b.n	80252a4 <_printf_i+0xc8>
 802529e:	0668      	lsls	r0, r5, #25
 80252a0:	d5fb      	bpl.n	802529a <_printf_i+0xbe>
 80252a2:	881b      	ldrh	r3, [r3, #0]
 80252a4:	4854      	ldr	r0, [pc, #336]	; (80253f8 <_printf_i+0x21c>)
 80252a6:	296f      	cmp	r1, #111	; 0x6f
 80252a8:	bf14      	ite	ne
 80252aa:	220a      	movne	r2, #10
 80252ac:	2208      	moveq	r2, #8
 80252ae:	2100      	movs	r1, #0
 80252b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80252b4:	6865      	ldr	r5, [r4, #4]
 80252b6:	60a5      	str	r5, [r4, #8]
 80252b8:	2d00      	cmp	r5, #0
 80252ba:	f2c0 8095 	blt.w	80253e8 <_printf_i+0x20c>
 80252be:	6821      	ldr	r1, [r4, #0]
 80252c0:	f021 0104 	bic.w	r1, r1, #4
 80252c4:	6021      	str	r1, [r4, #0]
 80252c6:	2b00      	cmp	r3, #0
 80252c8:	d13d      	bne.n	8025346 <_printf_i+0x16a>
 80252ca:	2d00      	cmp	r5, #0
 80252cc:	f040 808e 	bne.w	80253ec <_printf_i+0x210>
 80252d0:	4665      	mov	r5, ip
 80252d2:	2a08      	cmp	r2, #8
 80252d4:	d10b      	bne.n	80252ee <_printf_i+0x112>
 80252d6:	6823      	ldr	r3, [r4, #0]
 80252d8:	07db      	lsls	r3, r3, #31
 80252da:	d508      	bpl.n	80252ee <_printf_i+0x112>
 80252dc:	6923      	ldr	r3, [r4, #16]
 80252de:	6862      	ldr	r2, [r4, #4]
 80252e0:	429a      	cmp	r2, r3
 80252e2:	bfde      	ittt	le
 80252e4:	2330      	movle	r3, #48	; 0x30
 80252e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80252ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80252ee:	ebac 0305 	sub.w	r3, ip, r5
 80252f2:	6123      	str	r3, [r4, #16]
 80252f4:	f8cd 8000 	str.w	r8, [sp]
 80252f8:	463b      	mov	r3, r7
 80252fa:	aa03      	add	r2, sp, #12
 80252fc:	4621      	mov	r1, r4
 80252fe:	4630      	mov	r0, r6
 8025300:	f7ff fef6 	bl	80250f0 <_printf_common>
 8025304:	3001      	adds	r0, #1
 8025306:	d14d      	bne.n	80253a4 <_printf_i+0x1c8>
 8025308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802530c:	b005      	add	sp, #20
 802530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025312:	4839      	ldr	r0, [pc, #228]	; (80253f8 <_printf_i+0x21c>)
 8025314:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025318:	6813      	ldr	r3, [r2, #0]
 802531a:	6821      	ldr	r1, [r4, #0]
 802531c:	1d1d      	adds	r5, r3, #4
 802531e:	681b      	ldr	r3, [r3, #0]
 8025320:	6015      	str	r5, [r2, #0]
 8025322:	060a      	lsls	r2, r1, #24
 8025324:	d50b      	bpl.n	802533e <_printf_i+0x162>
 8025326:	07ca      	lsls	r2, r1, #31
 8025328:	bf44      	itt	mi
 802532a:	f041 0120 	orrmi.w	r1, r1, #32
 802532e:	6021      	strmi	r1, [r4, #0]
 8025330:	b91b      	cbnz	r3, 802533a <_printf_i+0x15e>
 8025332:	6822      	ldr	r2, [r4, #0]
 8025334:	f022 0220 	bic.w	r2, r2, #32
 8025338:	6022      	str	r2, [r4, #0]
 802533a:	2210      	movs	r2, #16
 802533c:	e7b7      	b.n	80252ae <_printf_i+0xd2>
 802533e:	064d      	lsls	r5, r1, #25
 8025340:	bf48      	it	mi
 8025342:	b29b      	uxthmi	r3, r3
 8025344:	e7ef      	b.n	8025326 <_printf_i+0x14a>
 8025346:	4665      	mov	r5, ip
 8025348:	fbb3 f1f2 	udiv	r1, r3, r2
 802534c:	fb02 3311 	mls	r3, r2, r1, r3
 8025350:	5cc3      	ldrb	r3, [r0, r3]
 8025352:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025356:	460b      	mov	r3, r1
 8025358:	2900      	cmp	r1, #0
 802535a:	d1f5      	bne.n	8025348 <_printf_i+0x16c>
 802535c:	e7b9      	b.n	80252d2 <_printf_i+0xf6>
 802535e:	6813      	ldr	r3, [r2, #0]
 8025360:	6825      	ldr	r5, [r4, #0]
 8025362:	6961      	ldr	r1, [r4, #20]
 8025364:	1d18      	adds	r0, r3, #4
 8025366:	6010      	str	r0, [r2, #0]
 8025368:	0628      	lsls	r0, r5, #24
 802536a:	681b      	ldr	r3, [r3, #0]
 802536c:	d501      	bpl.n	8025372 <_printf_i+0x196>
 802536e:	6019      	str	r1, [r3, #0]
 8025370:	e002      	b.n	8025378 <_printf_i+0x19c>
 8025372:	066a      	lsls	r2, r5, #25
 8025374:	d5fb      	bpl.n	802536e <_printf_i+0x192>
 8025376:	8019      	strh	r1, [r3, #0]
 8025378:	2300      	movs	r3, #0
 802537a:	6123      	str	r3, [r4, #16]
 802537c:	4665      	mov	r5, ip
 802537e:	e7b9      	b.n	80252f4 <_printf_i+0x118>
 8025380:	6813      	ldr	r3, [r2, #0]
 8025382:	1d19      	adds	r1, r3, #4
 8025384:	6011      	str	r1, [r2, #0]
 8025386:	681d      	ldr	r5, [r3, #0]
 8025388:	6862      	ldr	r2, [r4, #4]
 802538a:	2100      	movs	r1, #0
 802538c:	4628      	mov	r0, r5
 802538e:	f7da ff3f 	bl	8000210 <memchr>
 8025392:	b108      	cbz	r0, 8025398 <_printf_i+0x1bc>
 8025394:	1b40      	subs	r0, r0, r5
 8025396:	6060      	str	r0, [r4, #4]
 8025398:	6863      	ldr	r3, [r4, #4]
 802539a:	6123      	str	r3, [r4, #16]
 802539c:	2300      	movs	r3, #0
 802539e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80253a2:	e7a7      	b.n	80252f4 <_printf_i+0x118>
 80253a4:	6923      	ldr	r3, [r4, #16]
 80253a6:	462a      	mov	r2, r5
 80253a8:	4639      	mov	r1, r7
 80253aa:	4630      	mov	r0, r6
 80253ac:	47c0      	blx	r8
 80253ae:	3001      	adds	r0, #1
 80253b0:	d0aa      	beq.n	8025308 <_printf_i+0x12c>
 80253b2:	6823      	ldr	r3, [r4, #0]
 80253b4:	079b      	lsls	r3, r3, #30
 80253b6:	d413      	bmi.n	80253e0 <_printf_i+0x204>
 80253b8:	68e0      	ldr	r0, [r4, #12]
 80253ba:	9b03      	ldr	r3, [sp, #12]
 80253bc:	4298      	cmp	r0, r3
 80253be:	bfb8      	it	lt
 80253c0:	4618      	movlt	r0, r3
 80253c2:	e7a3      	b.n	802530c <_printf_i+0x130>
 80253c4:	2301      	movs	r3, #1
 80253c6:	464a      	mov	r2, r9
 80253c8:	4639      	mov	r1, r7
 80253ca:	4630      	mov	r0, r6
 80253cc:	47c0      	blx	r8
 80253ce:	3001      	adds	r0, #1
 80253d0:	d09a      	beq.n	8025308 <_printf_i+0x12c>
 80253d2:	3501      	adds	r5, #1
 80253d4:	68e3      	ldr	r3, [r4, #12]
 80253d6:	9a03      	ldr	r2, [sp, #12]
 80253d8:	1a9b      	subs	r3, r3, r2
 80253da:	42ab      	cmp	r3, r5
 80253dc:	dcf2      	bgt.n	80253c4 <_printf_i+0x1e8>
 80253de:	e7eb      	b.n	80253b8 <_printf_i+0x1dc>
 80253e0:	2500      	movs	r5, #0
 80253e2:	f104 0919 	add.w	r9, r4, #25
 80253e6:	e7f5      	b.n	80253d4 <_printf_i+0x1f8>
 80253e8:	2b00      	cmp	r3, #0
 80253ea:	d1ac      	bne.n	8025346 <_printf_i+0x16a>
 80253ec:	7803      	ldrb	r3, [r0, #0]
 80253ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80253f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80253f6:	e76c      	b.n	80252d2 <_printf_i+0xf6>
 80253f8:	0802bb79 	.word	0x0802bb79
 80253fc:	0802bb8a 	.word	0x0802bb8a

08025400 <__sread>:
 8025400:	b510      	push	{r4, lr}
 8025402:	460c      	mov	r4, r1
 8025404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025408:	f000 f894 	bl	8025534 <_read_r>
 802540c:	2800      	cmp	r0, #0
 802540e:	bfab      	itete	ge
 8025410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025412:	89a3      	ldrhlt	r3, [r4, #12]
 8025414:	181b      	addge	r3, r3, r0
 8025416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802541a:	bfac      	ite	ge
 802541c:	6563      	strge	r3, [r4, #84]	; 0x54
 802541e:	81a3      	strhlt	r3, [r4, #12]
 8025420:	bd10      	pop	{r4, pc}

08025422 <__swrite>:
 8025422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025426:	461f      	mov	r7, r3
 8025428:	898b      	ldrh	r3, [r1, #12]
 802542a:	05db      	lsls	r3, r3, #23
 802542c:	4605      	mov	r5, r0
 802542e:	460c      	mov	r4, r1
 8025430:	4616      	mov	r6, r2
 8025432:	d505      	bpl.n	8025440 <__swrite+0x1e>
 8025434:	2302      	movs	r3, #2
 8025436:	2200      	movs	r2, #0
 8025438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802543c:	f000 f868 	bl	8025510 <_lseek_r>
 8025440:	89a3      	ldrh	r3, [r4, #12]
 8025442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802544a:	81a3      	strh	r3, [r4, #12]
 802544c:	4632      	mov	r2, r6
 802544e:	463b      	mov	r3, r7
 8025450:	4628      	mov	r0, r5
 8025452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025456:	f000 b817 	b.w	8025488 <_write_r>

0802545a <__sseek>:
 802545a:	b510      	push	{r4, lr}
 802545c:	460c      	mov	r4, r1
 802545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025462:	f000 f855 	bl	8025510 <_lseek_r>
 8025466:	1c43      	adds	r3, r0, #1
 8025468:	89a3      	ldrh	r3, [r4, #12]
 802546a:	bf15      	itete	ne
 802546c:	6560      	strne	r0, [r4, #84]	; 0x54
 802546e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025476:	81a3      	strheq	r3, [r4, #12]
 8025478:	bf18      	it	ne
 802547a:	81a3      	strhne	r3, [r4, #12]
 802547c:	bd10      	pop	{r4, pc}

0802547e <__sclose>:
 802547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025482:	f000 b813 	b.w	80254ac <_close_r>
	...

08025488 <_write_r>:
 8025488:	b538      	push	{r3, r4, r5, lr}
 802548a:	4c07      	ldr	r4, [pc, #28]	; (80254a8 <_write_r+0x20>)
 802548c:	4605      	mov	r5, r0
 802548e:	4608      	mov	r0, r1
 8025490:	4611      	mov	r1, r2
 8025492:	2200      	movs	r2, #0
 8025494:	6022      	str	r2, [r4, #0]
 8025496:	461a      	mov	r2, r3
 8025498:	f7dd fb1d 	bl	8002ad6 <_write>
 802549c:	1c43      	adds	r3, r0, #1
 802549e:	d102      	bne.n	80254a6 <_write_r+0x1e>
 80254a0:	6823      	ldr	r3, [r4, #0]
 80254a2:	b103      	cbz	r3, 80254a6 <_write_r+0x1e>
 80254a4:	602b      	str	r3, [r5, #0]
 80254a6:	bd38      	pop	{r3, r4, r5, pc}
 80254a8:	20010404 	.word	0x20010404

080254ac <_close_r>:
 80254ac:	b538      	push	{r3, r4, r5, lr}
 80254ae:	4c06      	ldr	r4, [pc, #24]	; (80254c8 <_close_r+0x1c>)
 80254b0:	2300      	movs	r3, #0
 80254b2:	4605      	mov	r5, r0
 80254b4:	4608      	mov	r0, r1
 80254b6:	6023      	str	r3, [r4, #0]
 80254b8:	f7dd fb29 	bl	8002b0e <_close>
 80254bc:	1c43      	adds	r3, r0, #1
 80254be:	d102      	bne.n	80254c6 <_close_r+0x1a>
 80254c0:	6823      	ldr	r3, [r4, #0]
 80254c2:	b103      	cbz	r3, 80254c6 <_close_r+0x1a>
 80254c4:	602b      	str	r3, [r5, #0]
 80254c6:	bd38      	pop	{r3, r4, r5, pc}
 80254c8:	20010404 	.word	0x20010404

080254cc <_fstat_r>:
 80254cc:	b538      	push	{r3, r4, r5, lr}
 80254ce:	4c07      	ldr	r4, [pc, #28]	; (80254ec <_fstat_r+0x20>)
 80254d0:	2300      	movs	r3, #0
 80254d2:	4605      	mov	r5, r0
 80254d4:	4608      	mov	r0, r1
 80254d6:	4611      	mov	r1, r2
 80254d8:	6023      	str	r3, [r4, #0]
 80254da:	f7dd fb24 	bl	8002b26 <_fstat>
 80254de:	1c43      	adds	r3, r0, #1
 80254e0:	d102      	bne.n	80254e8 <_fstat_r+0x1c>
 80254e2:	6823      	ldr	r3, [r4, #0]
 80254e4:	b103      	cbz	r3, 80254e8 <_fstat_r+0x1c>
 80254e6:	602b      	str	r3, [r5, #0]
 80254e8:	bd38      	pop	{r3, r4, r5, pc}
 80254ea:	bf00      	nop
 80254ec:	20010404 	.word	0x20010404

080254f0 <_isatty_r>:
 80254f0:	b538      	push	{r3, r4, r5, lr}
 80254f2:	4c06      	ldr	r4, [pc, #24]	; (802550c <_isatty_r+0x1c>)
 80254f4:	2300      	movs	r3, #0
 80254f6:	4605      	mov	r5, r0
 80254f8:	4608      	mov	r0, r1
 80254fa:	6023      	str	r3, [r4, #0]
 80254fc:	f7dd fb23 	bl	8002b46 <_isatty>
 8025500:	1c43      	adds	r3, r0, #1
 8025502:	d102      	bne.n	802550a <_isatty_r+0x1a>
 8025504:	6823      	ldr	r3, [r4, #0]
 8025506:	b103      	cbz	r3, 802550a <_isatty_r+0x1a>
 8025508:	602b      	str	r3, [r5, #0]
 802550a:	bd38      	pop	{r3, r4, r5, pc}
 802550c:	20010404 	.word	0x20010404

08025510 <_lseek_r>:
 8025510:	b538      	push	{r3, r4, r5, lr}
 8025512:	4c07      	ldr	r4, [pc, #28]	; (8025530 <_lseek_r+0x20>)
 8025514:	4605      	mov	r5, r0
 8025516:	4608      	mov	r0, r1
 8025518:	4611      	mov	r1, r2
 802551a:	2200      	movs	r2, #0
 802551c:	6022      	str	r2, [r4, #0]
 802551e:	461a      	mov	r2, r3
 8025520:	f7dd fb1c 	bl	8002b5c <_lseek>
 8025524:	1c43      	adds	r3, r0, #1
 8025526:	d102      	bne.n	802552e <_lseek_r+0x1e>
 8025528:	6823      	ldr	r3, [r4, #0]
 802552a:	b103      	cbz	r3, 802552e <_lseek_r+0x1e>
 802552c:	602b      	str	r3, [r5, #0]
 802552e:	bd38      	pop	{r3, r4, r5, pc}
 8025530:	20010404 	.word	0x20010404

08025534 <_read_r>:
 8025534:	b538      	push	{r3, r4, r5, lr}
 8025536:	4c07      	ldr	r4, [pc, #28]	; (8025554 <_read_r+0x20>)
 8025538:	4605      	mov	r5, r0
 802553a:	4608      	mov	r0, r1
 802553c:	4611      	mov	r1, r2
 802553e:	2200      	movs	r2, #0
 8025540:	6022      	str	r2, [r4, #0]
 8025542:	461a      	mov	r2, r3
 8025544:	f7dd faaa 	bl	8002a9c <_read>
 8025548:	1c43      	adds	r3, r0, #1
 802554a:	d102      	bne.n	8025552 <_read_r+0x1e>
 802554c:	6823      	ldr	r3, [r4, #0]
 802554e:	b103      	cbz	r3, 8025552 <_read_r+0x1e>
 8025550:	602b      	str	r3, [r5, #0]
 8025552:	bd38      	pop	{r3, r4, r5, pc}
 8025554:	20010404 	.word	0x20010404

08025558 <_init>:
 8025558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802555a:	bf00      	nop
 802555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802555e:	bc08      	pop	{r3}
 8025560:	469e      	mov	lr, r3
 8025562:	4770      	bx	lr

08025564 <_fini>:
 8025564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025566:	bf00      	nop
 8025568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802556a:	bc08      	pop	{r3}
 802556c:	469e      	mov	lr, r3
 802556e:	4770      	bx	lr
